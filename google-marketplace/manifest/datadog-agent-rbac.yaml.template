---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: $name-cr
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - services
#   - events
#   - endpoints
#   - pods
#   - nodes
#   - componentstatuses
#   verbs:
#   - get
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resources:
#   - configmaps
#   resourceNames:
#   - datadogtoken             # Kubernetes event collection state
#   - datadog-leader-election  # Leader election token
#   verbs:
#   - get
#   - update
# - apiGroups:  # To create the leader election token
#   - ""
#   resources:
#   - configmaps
#   verbs:
#   - create
# - nonResourceURLs:
#   - "/version"
#   - "/healthz"
#   verbs:
#   - get
# - apiGroups:  # Kubelet connectivity
#   - ""
#   resources:
#   - nodes/metrics
#   - nodes/spec
#   - nodes/proxy
#   verbs:
#   - get
---
# You need to use that account for your datadog-agent DaemonSet
kind: ServiceAccount
apiVersion: v1
metadata:
  name: $serviceAccount
---
# # Your admin user needs the same permissions to be able to grant them
# # Easiest way is to bind your user to the cluster-admin role
# # See https://cloud.google.com/container-engine/docs/role-based-access-control#setting_up_role-based_access_control
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: $name-cr-binding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: $name-cr
# subjects:
# - kind: ServiceAccount
#   name: $serviceAccount
#   namespace: $namespace
