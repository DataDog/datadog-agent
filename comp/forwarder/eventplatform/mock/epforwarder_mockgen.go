// Code generated by MockGen. DO NOT EDIT.
// Source: ../def/component.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	message "github.com/DataDog/datadog-agent/pkg/logs/message"
	gomock "github.com/golang/mock/gomock"
)

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// Purge mocks base method.
func (m *MockComponent) Purge() map[string][]*message.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(map[string][]*message.Message)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockComponentMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockComponent)(nil).Purge))
}

// SendEventPlatformEvent mocks base method.
func (m *MockComponent) SendEventPlatformEvent(e *message.Message, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEventPlatformEvent", e, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEventPlatformEvent indicates an expected call of SendEventPlatformEvent.
func (mr *MockComponentMockRecorder) SendEventPlatformEvent(e, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventPlatformEvent", reflect.TypeOf((*MockComponent)(nil).SendEventPlatformEvent), e, eventType)
}

// SendEventPlatformEventBlocking mocks base method.
func (m *MockComponent) SendEventPlatformEventBlocking(e *message.Message, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEventPlatformEventBlocking", e, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEventPlatformEventBlocking indicates an expected call of SendEventPlatformEventBlocking.
func (mr *MockComponentMockRecorder) SendEventPlatformEventBlocking(e, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventPlatformEventBlocking", reflect.TypeOf((*MockComponent)(nil).SendEventPlatformEventBlocking), e, eventType)
}
