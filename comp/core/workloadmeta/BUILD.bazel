load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "workloadmeta",
    srcs = [
        "cached_entity.go",
        "collectors.go",
        "component.go",
        "doc.go",
        "dump.go",
        "filter.go",
        "flare_provider.go",
        "merge.go",
        "params.go",
        "store.go",
        "types.go",
        "utils.go",
        "workloadmeta.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/core/workloadmeta",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/api/api",
        "//comp/api/api/utils",
        "//comp/core/config",
        "//comp/core/flare/types",
        "//comp/core/log",
        "//comp/core/workloadmeta/telemetry",
        "//pkg/errors",
        "//pkg/languagedetection/languagemodels",
        "//pkg/languagedetection/util",
        "//pkg/status/health",
        "//pkg/util/common",
        "//pkg/util/containers",
        "//pkg/util/fxutil",
        "//pkg/util/log",
        "//pkg/util/optional",
        "//pkg/util/retry",
        "//pkg/util/scrubber",
        "@com_github_cenkalti_backoff//:go_default_library",
        "@com_github_cyclonedx_cyclonedx_go//:go_default_library",
        "@com_github_fatih_color//:go_default_library",
        "@com_github_mohae_deepcopy//:go_default_library",
        "@com_github_opencontainers_image_spec//specs-go/v1:go_default_library",
        "@com_github_samber_lo//:go_default_library",
        "@org_uber_go_fx//:go_default_library",
    ],
)

go_test(
    name = "workloadmeta_test",
    srcs = [
        "dump_test.go",
        "merge_test.go",
        "store_example_test.go",
        "types_example_test.go",
        "types_test.go",
    ],
    embed = [":workloadmeta"],
    deps = [
        "//comp/core/config",
        "//comp/core/log/logimpl",
        "//pkg/util/fxutil",
        "//pkg/util/pointer",
        "@com_github_stretchr_testify//assert:go_default_library",
        "@org_uber_go_fx//:go_default_library",
    ],
)
