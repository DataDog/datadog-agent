// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	workloadmeta "github.com/DataDog/datadog-agent/comp/core/workloadmeta/def"
	mock "github.com/stretchr/testify/mock"
)

// Component is an autogenerated mock type for the Component type
type Component struct {
	mock.Mock
}

type Component_Expecter struct {
	mock *mock.Mock
}

func (_m *Component) EXPECT() *Component_Expecter {
	return &Component_Expecter{mock: &_m.Mock}
}

// Dump provides a mock function with given fields: verbose
func (_m *Component) Dump(verbose bool) workloadmeta.WorkloadDumpResponse {
	ret := _m.Called(verbose)

	if len(ret) == 0 {
		panic("no return value specified for Dump")
	}

	var r0 workloadmeta.WorkloadDumpResponse
	if rf, ok := ret.Get(0).(func(bool) workloadmeta.WorkloadDumpResponse); ok {
		r0 = rf(verbose)
	} else {
		r0 = ret.Get(0).(workloadmeta.WorkloadDumpResponse)
	}

	return r0
}

// Component_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'
type Component_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
//   - verbose bool
func (_e *Component_Expecter) Dump(verbose interface{}) *Component_Dump_Call {
	return &Component_Dump_Call{Call: _e.mock.On("Dump", verbose)}
}

func (_c *Component_Dump_Call) Run(run func(verbose bool)) *Component_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Component_Dump_Call) Return(_a0 workloadmeta.WorkloadDumpResponse) *Component_Dump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_Dump_Call) RunAndReturn(run func(bool) workloadmeta.WorkloadDumpResponse) *Component_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainer provides a mock function with given fields: id
func (_m *Component) GetContainer(id string) (*workloadmeta.Container, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetContainer")
	}

	var r0 *workloadmeta.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.Container, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.Container); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainer'
type Component_GetContainer_Call struct {
	*mock.Call
}

// GetContainer is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetContainer(id interface{}) *Component_GetContainer_Call {
	return &Component_GetContainer_Call{Call: _e.mock.On("GetContainer", id)}
}

func (_c *Component_GetContainer_Call) Run(run func(id string)) *Component_GetContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetContainer_Call) Return(_a0 *workloadmeta.Container, _a1 error) *Component_GetContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetContainer_Call) RunAndReturn(run func(string) (*workloadmeta.Container, error)) *Component_GetContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerForProcess provides a mock function with given fields: processID
func (_m *Component) GetContainerForProcess(processID string) (*workloadmeta.Container, error) {
	ret := _m.Called(processID)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerForProcess")
	}

	var r0 *workloadmeta.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.Container, error)); ok {
		return rf(processID)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.Container); ok {
		r0 = rf(processID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(processID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetContainerForProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerForProcess'
type Component_GetContainerForProcess_Call struct {
	*mock.Call
}

// GetContainerForProcess is a helper method to define mock.On call
//   - processID string
func (_e *Component_Expecter) GetContainerForProcess(processID interface{}) *Component_GetContainerForProcess_Call {
	return &Component_GetContainerForProcess_Call{Call: _e.mock.On("GetContainerForProcess", processID)}
}

func (_c *Component_GetContainerForProcess_Call) Run(run func(processID string)) *Component_GetContainerForProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetContainerForProcess_Call) Return(_a0 *workloadmeta.Container, _a1 error) *Component_GetContainerForProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetContainerForProcess_Call) RunAndReturn(run func(string) (*workloadmeta.Container, error)) *Component_GetContainerForProcess_Call {
	_c.Call.Return(run)
	return _c
}

// GetECSTask provides a mock function with given fields: id
func (_m *Component) GetECSTask(id string) (*workloadmeta.ECSTask, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetECSTask")
	}

	var r0 *workloadmeta.ECSTask
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.ECSTask, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.ECSTask); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.ECSTask)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetECSTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetECSTask'
type Component_GetECSTask_Call struct {
	*mock.Call
}

// GetECSTask is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetECSTask(id interface{}) *Component_GetECSTask_Call {
	return &Component_GetECSTask_Call{Call: _e.mock.On("GetECSTask", id)}
}

func (_c *Component_GetECSTask_Call) Run(run func(id string)) *Component_GetECSTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetECSTask_Call) Return(_a0 *workloadmeta.ECSTask, _a1 error) *Component_GetECSTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetECSTask_Call) RunAndReturn(run func(string) (*workloadmeta.ECSTask, error)) *Component_GetECSTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetGPU provides a mock function with given fields: id
func (_m *Component) GetGPU(id string) (*workloadmeta.GPU, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetGPU")
	}

	var r0 *workloadmeta.GPU
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.GPU, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.GPU); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.GPU)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetGPU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGPU'
type Component_GetGPU_Call struct {
	*mock.Call
}

// GetGPU is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetGPU(id interface{}) *Component_GetGPU_Call {
	return &Component_GetGPU_Call{Call: _e.mock.On("GetGPU", id)}
}

func (_c *Component_GetGPU_Call) Run(run func(id string)) *Component_GetGPU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetGPU_Call) Return(_a0 *workloadmeta.GPU, _a1 error) *Component_GetGPU_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetGPU_Call) RunAndReturn(run func(string) (*workloadmeta.GPU, error)) *Component_GetGPU_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: id
func (_m *Component) GetImage(id string) (*workloadmeta.ContainerImageMetadata, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *workloadmeta.ContainerImageMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.ContainerImageMetadata, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.ContainerImageMetadata); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.ContainerImageMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type Component_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetImage(id interface{}) *Component_GetImage_Call {
	return &Component_GetImage_Call{Call: _e.mock.On("GetImage", id)}
}

func (_c *Component_GetImage_Call) Run(run func(id string)) *Component_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetImage_Call) Return(_a0 *workloadmeta.ContainerImageMetadata, _a1 error) *Component_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetImage_Call) RunAndReturn(run func(string) (*workloadmeta.ContainerImageMetadata, error)) *Component_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesDeployment provides a mock function with given fields: id
func (_m *Component) GetKubernetesDeployment(id string) (*workloadmeta.KubernetesDeployment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesDeployment")
	}

	var r0 *workloadmeta.KubernetesDeployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.KubernetesDeployment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.KubernetesDeployment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.KubernetesDeployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetKubernetesDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesDeployment'
type Component_GetKubernetesDeployment_Call struct {
	*mock.Call
}

// GetKubernetesDeployment is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetKubernetesDeployment(id interface{}) *Component_GetKubernetesDeployment_Call {
	return &Component_GetKubernetesDeployment_Call{Call: _e.mock.On("GetKubernetesDeployment", id)}
}

func (_c *Component_GetKubernetesDeployment_Call) Run(run func(id string)) *Component_GetKubernetesDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetKubernetesDeployment_Call) Return(_a0 *workloadmeta.KubernetesDeployment, _a1 error) *Component_GetKubernetesDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetKubernetesDeployment_Call) RunAndReturn(run func(string) (*workloadmeta.KubernetesDeployment, error)) *Component_GetKubernetesDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesMetadata provides a mock function with given fields: id
func (_m *Component) GetKubernetesMetadata(id workloadmeta.KubeMetadataEntityID) (*workloadmeta.KubernetesMetadata, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesMetadata")
	}

	var r0 *workloadmeta.KubernetesMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(workloadmeta.KubeMetadataEntityID) (*workloadmeta.KubernetesMetadata, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(workloadmeta.KubeMetadataEntityID) *workloadmeta.KubernetesMetadata); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.KubernetesMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(workloadmeta.KubeMetadataEntityID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetKubernetesMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesMetadata'
type Component_GetKubernetesMetadata_Call struct {
	*mock.Call
}

// GetKubernetesMetadata is a helper method to define mock.On call
//   - id workloadmeta.KubeMetadataEntityID
func (_e *Component_Expecter) GetKubernetesMetadata(id interface{}) *Component_GetKubernetesMetadata_Call {
	return &Component_GetKubernetesMetadata_Call{Call: _e.mock.On("GetKubernetesMetadata", id)}
}

func (_c *Component_GetKubernetesMetadata_Call) Run(run func(id workloadmeta.KubeMetadataEntityID)) *Component_GetKubernetesMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workloadmeta.KubeMetadataEntityID))
	})
	return _c
}

func (_c *Component_GetKubernetesMetadata_Call) Return(_a0 *workloadmeta.KubernetesMetadata, _a1 error) *Component_GetKubernetesMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetKubernetesMetadata_Call) RunAndReturn(run func(workloadmeta.KubeMetadataEntityID) (*workloadmeta.KubernetesMetadata, error)) *Component_GetKubernetesMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesPod provides a mock function with given fields: id
func (_m *Component) GetKubernetesPod(id string) (*workloadmeta.KubernetesPod, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesPod")
	}

	var r0 *workloadmeta.KubernetesPod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.KubernetesPod, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.KubernetesPod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.KubernetesPod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetKubernetesPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesPod'
type Component_GetKubernetesPod_Call struct {
	*mock.Call
}

// GetKubernetesPod is a helper method to define mock.On call
//   - id string
func (_e *Component_Expecter) GetKubernetesPod(id interface{}) *Component_GetKubernetesPod_Call {
	return &Component_GetKubernetesPod_Call{Call: _e.mock.On("GetKubernetesPod", id)}
}

func (_c *Component_GetKubernetesPod_Call) Run(run func(id string)) *Component_GetKubernetesPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetKubernetesPod_Call) Return(_a0 *workloadmeta.KubernetesPod, _a1 error) *Component_GetKubernetesPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetKubernetesPod_Call) RunAndReturn(run func(string) (*workloadmeta.KubernetesPod, error)) *Component_GetKubernetesPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesPodByName provides a mock function with given fields: podName, podNamespace
func (_m *Component) GetKubernetesPodByName(podName string, podNamespace string) (*workloadmeta.KubernetesPod, error) {
	ret := _m.Called(podName, podNamespace)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesPodByName")
	}

	var r0 *workloadmeta.KubernetesPod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*workloadmeta.KubernetesPod, error)); ok {
		return rf(podName, podNamespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) *workloadmeta.KubernetesPod); ok {
		r0 = rf(podName, podNamespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.KubernetesPod)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(podName, podNamespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetKubernetesPodByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesPodByName'
type Component_GetKubernetesPodByName_Call struct {
	*mock.Call
}

// GetKubernetesPodByName is a helper method to define mock.On call
//   - podName string
//   - podNamespace string
func (_e *Component_Expecter) GetKubernetesPodByName(podName interface{}, podNamespace interface{}) *Component_GetKubernetesPodByName_Call {
	return &Component_GetKubernetesPodByName_Call{Call: _e.mock.On("GetKubernetesPodByName", podName, podNamespace)}
}

func (_c *Component_GetKubernetesPodByName_Call) Run(run func(podName string, podNamespace string)) *Component_GetKubernetesPodByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Component_GetKubernetesPodByName_Call) Return(_a0 *workloadmeta.KubernetesPod, _a1 error) *Component_GetKubernetesPodByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetKubernetesPodByName_Call) RunAndReturn(run func(string, string) (*workloadmeta.KubernetesPod, error)) *Component_GetKubernetesPodByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesPodForContainer provides a mock function with given fields: containerID
func (_m *Component) GetKubernetesPodForContainer(containerID string) (*workloadmeta.KubernetesPod, error) {
	ret := _m.Called(containerID)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesPodForContainer")
	}

	var r0 *workloadmeta.KubernetesPod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*workloadmeta.KubernetesPod, error)); ok {
		return rf(containerID)
	}
	if rf, ok := ret.Get(0).(func(string) *workloadmeta.KubernetesPod); ok {
		r0 = rf(containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.KubernetesPod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetKubernetesPodForContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesPodForContainer'
type Component_GetKubernetesPodForContainer_Call struct {
	*mock.Call
}

// GetKubernetesPodForContainer is a helper method to define mock.On call
//   - containerID string
func (_e *Component_Expecter) GetKubernetesPodForContainer(containerID interface{}) *Component_GetKubernetesPodForContainer_Call {
	return &Component_GetKubernetesPodForContainer_Call{Call: _e.mock.On("GetKubernetesPodForContainer", containerID)}
}

func (_c *Component_GetKubernetesPodForContainer_Call) Run(run func(containerID string)) *Component_GetKubernetesPodForContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Component_GetKubernetesPodForContainer_Call) Return(_a0 *workloadmeta.KubernetesPod, _a1 error) *Component_GetKubernetesPodForContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetKubernetesPodForContainer_Call) RunAndReturn(run func(string) (*workloadmeta.KubernetesPod, error)) *Component_GetKubernetesPodForContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcess provides a mock function with given fields: pid
func (_m *Component) GetProcess(pid int32) (*workloadmeta.Process, error) {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for GetProcess")
	}

	var r0 *workloadmeta.Process
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*workloadmeta.Process, error)); ok {
		return rf(pid)
	}
	if rf, ok := ret.Get(0).(func(int32) *workloadmeta.Process); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workloadmeta.Process)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Component_GetProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcess'
type Component_GetProcess_Call struct {
	*mock.Call
}

// GetProcess is a helper method to define mock.On call
//   - pid int32
func (_e *Component_Expecter) GetProcess(pid interface{}) *Component_GetProcess_Call {
	return &Component_GetProcess_Call{Call: _e.mock.On("GetProcess", pid)}
}

func (_c *Component_GetProcess_Call) Run(run func(pid int32)) *Component_GetProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32))
	})
	return _c
}

func (_c *Component_GetProcess_Call) Return(_a0 *workloadmeta.Process, _a1 error) *Component_GetProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Component_GetProcess_Call) RunAndReturn(run func(int32) (*workloadmeta.Process, error)) *Component_GetProcess_Call {
	_c.Call.Return(run)
	return _c
}

// IsInitialized provides a mock function with no fields
func (_m *Component) IsInitialized() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInitialized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Component_IsInitialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInitialized'
type Component_IsInitialized_Call struct {
	*mock.Call
}

// IsInitialized is a helper method to define mock.On call
func (_e *Component_Expecter) IsInitialized() *Component_IsInitialized_Call {
	return &Component_IsInitialized_Call{Call: _e.mock.On("IsInitialized")}
}

func (_c *Component_IsInitialized_Call) Run(run func()) *Component_IsInitialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_IsInitialized_Call) Return(_a0 bool) *Component_IsInitialized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_IsInitialized_Call) RunAndReturn(run func() bool) *Component_IsInitialized_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainers provides a mock function with no fields
func (_m *Component) ListContainers() []*workloadmeta.Container {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 []*workloadmeta.Container
	if rf, ok := ret.Get(0).(func() []*workloadmeta.Container); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.Container)
		}
	}

	return r0
}

// Component_ListContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainers'
type Component_ListContainers_Call struct {
	*mock.Call
}

// ListContainers is a helper method to define mock.On call
func (_e *Component_Expecter) ListContainers() *Component_ListContainers_Call {
	return &Component_ListContainers_Call{Call: _e.mock.On("ListContainers")}
}

func (_c *Component_ListContainers_Call) Run(run func()) *Component_ListContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_ListContainers_Call) Return(_a0 []*workloadmeta.Container) *Component_ListContainers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListContainers_Call) RunAndReturn(run func() []*workloadmeta.Container) *Component_ListContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainersWithFilter provides a mock function with given fields: filter
func (_m *Component) ListContainersWithFilter(filter workloadmeta.EntityFilterFunc[*workloadmeta.Container]) []*workloadmeta.Container {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListContainersWithFilter")
	}

	var r0 []*workloadmeta.Container
	if rf, ok := ret.Get(0).(func(workloadmeta.EntityFilterFunc[*workloadmeta.Container]) []*workloadmeta.Container); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.Container)
		}
	}

	return r0
}

// Component_ListContainersWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainersWithFilter'
type Component_ListContainersWithFilter_Call struct {
	*mock.Call
}

// ListContainersWithFilter is a helper method to define mock.On call
//   - filter workloadmeta.EntityFilterFunc[*workloadmeta.Container]
func (_e *Component_Expecter) ListContainersWithFilter(filter interface{}) *Component_ListContainersWithFilter_Call {
	return &Component_ListContainersWithFilter_Call{Call: _e.mock.On("ListContainersWithFilter", filter)}
}

func (_c *Component_ListContainersWithFilter_Call) Run(run func(filter workloadmeta.EntityFilterFunc[*workloadmeta.Container])) *Component_ListContainersWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workloadmeta.EntityFilterFunc[*workloadmeta.Container]))
	})
	return _c
}

func (_c *Component_ListContainersWithFilter_Call) Return(_a0 []*workloadmeta.Container) *Component_ListContainersWithFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListContainersWithFilter_Call) RunAndReturn(run func(workloadmeta.EntityFilterFunc[*workloadmeta.Container]) []*workloadmeta.Container) *Component_ListContainersWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// ListECSTasks provides a mock function with no fields
func (_m *Component) ListECSTasks() []*workloadmeta.ECSTask {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListECSTasks")
	}

	var r0 []*workloadmeta.ECSTask
	if rf, ok := ret.Get(0).(func() []*workloadmeta.ECSTask); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.ECSTask)
		}
	}

	return r0
}

// Component_ListECSTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListECSTasks'
type Component_ListECSTasks_Call struct {
	*mock.Call
}

// ListECSTasks is a helper method to define mock.On call
func (_e *Component_Expecter) ListECSTasks() *Component_ListECSTasks_Call {
	return &Component_ListECSTasks_Call{Call: _e.mock.On("ListECSTasks")}
}

func (_c *Component_ListECSTasks_Call) Run(run func()) *Component_ListECSTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_ListECSTasks_Call) Return(_a0 []*workloadmeta.ECSTask) *Component_ListECSTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListECSTasks_Call) RunAndReturn(run func() []*workloadmeta.ECSTask) *Component_ListECSTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListGPUs provides a mock function with no fields
func (_m *Component) ListGPUs() []*workloadmeta.GPU {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListGPUs")
	}

	var r0 []*workloadmeta.GPU
	if rf, ok := ret.Get(0).(func() []*workloadmeta.GPU); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.GPU)
		}
	}

	return r0
}

// Component_ListGPUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGPUs'
type Component_ListGPUs_Call struct {
	*mock.Call
}

// ListGPUs is a helper method to define mock.On call
func (_e *Component_Expecter) ListGPUs() *Component_ListGPUs_Call {
	return &Component_ListGPUs_Call{Call: _e.mock.On("ListGPUs")}
}

func (_c *Component_ListGPUs_Call) Run(run func()) *Component_ListGPUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_ListGPUs_Call) Return(_a0 []*workloadmeta.GPU) *Component_ListGPUs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListGPUs_Call) RunAndReturn(run func() []*workloadmeta.GPU) *Component_ListGPUs_Call {
	_c.Call.Return(run)
	return _c
}

// ListImages provides a mock function with no fields
func (_m *Component) ListImages() []*workloadmeta.ContainerImageMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 []*workloadmeta.ContainerImageMetadata
	if rf, ok := ret.Get(0).(func() []*workloadmeta.ContainerImageMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.ContainerImageMetadata)
		}
	}

	return r0
}

// Component_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type Component_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
func (_e *Component_Expecter) ListImages() *Component_ListImages_Call {
	return &Component_ListImages_Call{Call: _e.mock.On("ListImages")}
}

func (_c *Component_ListImages_Call) Run(run func()) *Component_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_ListImages_Call) Return(_a0 []*workloadmeta.ContainerImageMetadata) *Component_ListImages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListImages_Call) RunAndReturn(run func() []*workloadmeta.ContainerImageMetadata) *Component_ListImages_Call {
	_c.Call.Return(run)
	return _c
}

// ListKubernetesMetadata provides a mock function with given fields: filterFunc
func (_m *Component) ListKubernetesMetadata(filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata]) []*workloadmeta.KubernetesMetadata {
	ret := _m.Called(filterFunc)

	if len(ret) == 0 {
		panic("no return value specified for ListKubernetesMetadata")
	}

	var r0 []*workloadmeta.KubernetesMetadata
	if rf, ok := ret.Get(0).(func(workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata]) []*workloadmeta.KubernetesMetadata); ok {
		r0 = rf(filterFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.KubernetesMetadata)
		}
	}

	return r0
}

// Component_ListKubernetesMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKubernetesMetadata'
type Component_ListKubernetesMetadata_Call struct {
	*mock.Call
}

// ListKubernetesMetadata is a helper method to define mock.On call
//   - filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata]
func (_e *Component_Expecter) ListKubernetesMetadata(filterFunc interface{}) *Component_ListKubernetesMetadata_Call {
	return &Component_ListKubernetesMetadata_Call{Call: _e.mock.On("ListKubernetesMetadata", filterFunc)}
}

func (_c *Component_ListKubernetesMetadata_Call) Run(run func(filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata])) *Component_ListKubernetesMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata]))
	})
	return _c
}

func (_c *Component_ListKubernetesMetadata_Call) Return(_a0 []*workloadmeta.KubernetesMetadata) *Component_ListKubernetesMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListKubernetesMetadata_Call) RunAndReturn(run func(workloadmeta.EntityFilterFunc[*workloadmeta.KubernetesMetadata]) []*workloadmeta.KubernetesMetadata) *Component_ListKubernetesMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcesses provides a mock function with no fields
func (_m *Component) ListProcesses() []*workloadmeta.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListProcesses")
	}

	var r0 []*workloadmeta.Process
	if rf, ok := ret.Get(0).(func() []*workloadmeta.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.Process)
		}
	}

	return r0
}

// Component_ListProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcesses'
type Component_ListProcesses_Call struct {
	*mock.Call
}

// ListProcesses is a helper method to define mock.On call
func (_e *Component_Expecter) ListProcesses() *Component_ListProcesses_Call {
	return &Component_ListProcesses_Call{Call: _e.mock.On("ListProcesses")}
}

func (_c *Component_ListProcesses_Call) Run(run func()) *Component_ListProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Component_ListProcesses_Call) Return(_a0 []*workloadmeta.Process) *Component_ListProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListProcesses_Call) RunAndReturn(run func() []*workloadmeta.Process) *Component_ListProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// ListProcessesWithFilter provides a mock function with given fields: filterFunc
func (_m *Component) ListProcessesWithFilter(filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.Process]) []*workloadmeta.Process {
	ret := _m.Called(filterFunc)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessesWithFilter")
	}

	var r0 []*workloadmeta.Process
	if rf, ok := ret.Get(0).(func(workloadmeta.EntityFilterFunc[*workloadmeta.Process]) []*workloadmeta.Process); ok {
		r0 = rf(filterFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*workloadmeta.Process)
		}
	}

	return r0
}

// Component_ListProcessesWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProcessesWithFilter'
type Component_ListProcessesWithFilter_Call struct {
	*mock.Call
}

// ListProcessesWithFilter is a helper method to define mock.On call
//   - filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.Process]
func (_e *Component_Expecter) ListProcessesWithFilter(filterFunc interface{}) *Component_ListProcessesWithFilter_Call {
	return &Component_ListProcessesWithFilter_Call{Call: _e.mock.On("ListProcessesWithFilter", filterFunc)}
}

func (_c *Component_ListProcessesWithFilter_Call) Run(run func(filterFunc workloadmeta.EntityFilterFunc[*workloadmeta.Process])) *Component_ListProcessesWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workloadmeta.EntityFilterFunc[*workloadmeta.Process]))
	})
	return _c
}

func (_c *Component_ListProcessesWithFilter_Call) Return(_a0 []*workloadmeta.Process) *Component_ListProcessesWithFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_ListProcessesWithFilter_Call) RunAndReturn(run func(workloadmeta.EntityFilterFunc[*workloadmeta.Process]) []*workloadmeta.Process) *Component_ListProcessesWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Notify provides a mock function with given fields: events
func (_m *Component) Notify(events []workloadmeta.CollectorEvent) {
	_m.Called(events)
}

// Component_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type Component_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - events []workloadmeta.CollectorEvent
func (_e *Component_Expecter) Notify(events interface{}) *Component_Notify_Call {
	return &Component_Notify_Call{Call: _e.mock.On("Notify", events)}
}

func (_c *Component_Notify_Call) Run(run func(events []workloadmeta.CollectorEvent)) *Component_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]workloadmeta.CollectorEvent))
	})
	return _c
}

func (_c *Component_Notify_Call) Return() *Component_Notify_Call {
	_c.Call.Return()
	return _c
}

func (_c *Component_Notify_Call) RunAndReturn(run func([]workloadmeta.CollectorEvent)) *Component_Notify_Call {
	_c.Run(run)
	return _c
}

// Push provides a mock function with given fields: source, events
func (_m *Component) Push(source workloadmeta.Source, events ...workloadmeta.Event) error {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, source)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(workloadmeta.Source, ...workloadmeta.Event) error); ok {
		r0 = rf(source, events...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Component_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type Component_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - source workloadmeta.Source
//   - events ...workloadmeta.Event
func (_e *Component_Expecter) Push(source interface{}, events ...interface{}) *Component_Push_Call {
	return &Component_Push_Call{Call: _e.mock.On("Push",
		append([]interface{}{source}, events...)...)}
}

func (_c *Component_Push_Call) Run(run func(source workloadmeta.Source, events ...workloadmeta.Event)) *Component_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]workloadmeta.Event, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(workloadmeta.Event)
			}
		}
		run(args[0].(workloadmeta.Source), variadicArgs...)
	})
	return _c
}

func (_c *Component_Push_Call) Return(_a0 error) *Component_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_Push_Call) RunAndReturn(run func(workloadmeta.Source, ...workloadmeta.Event) error) *Component_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: newEntities, source
func (_m *Component) Reset(newEntities []workloadmeta.Entity, source workloadmeta.Source) {
	_m.Called(newEntities, source)
}

// Component_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Component_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - newEntities []workloadmeta.Entity
//   - source workloadmeta.Source
func (_e *Component_Expecter) Reset(newEntities interface{}, source interface{}) *Component_Reset_Call {
	return &Component_Reset_Call{Call: _e.mock.On("Reset", newEntities, source)}
}

func (_c *Component_Reset_Call) Run(run func(newEntities []workloadmeta.Entity, source workloadmeta.Source)) *Component_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]workloadmeta.Entity), args[1].(workloadmeta.Source))
	})
	return _c
}

func (_c *Component_Reset_Call) Return() *Component_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *Component_Reset_Call) RunAndReturn(run func([]workloadmeta.Entity, workloadmeta.Source)) *Component_Reset_Call {
	_c.Run(run)
	return _c
}

// ResetProcesses provides a mock function with given fields: newProcesses, source
func (_m *Component) ResetProcesses(newProcesses []workloadmeta.Entity, source workloadmeta.Source) {
	_m.Called(newProcesses, source)
}

// Component_ResetProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetProcesses'
type Component_ResetProcesses_Call struct {
	*mock.Call
}

// ResetProcesses is a helper method to define mock.On call
//   - newProcesses []workloadmeta.Entity
//   - source workloadmeta.Source
func (_e *Component_Expecter) ResetProcesses(newProcesses interface{}, source interface{}) *Component_ResetProcesses_Call {
	return &Component_ResetProcesses_Call{Call: _e.mock.On("ResetProcesses", newProcesses, source)}
}

func (_c *Component_ResetProcesses_Call) Run(run func(newProcesses []workloadmeta.Entity, source workloadmeta.Source)) *Component_ResetProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]workloadmeta.Entity), args[1].(workloadmeta.Source))
	})
	return _c
}

func (_c *Component_ResetProcesses_Call) Return() *Component_ResetProcesses_Call {
	_c.Call.Return()
	return _c
}

func (_c *Component_ResetProcesses_Call) RunAndReturn(run func([]workloadmeta.Entity, workloadmeta.Source)) *Component_ResetProcesses_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function with given fields: name, priority, filter
func (_m *Component) Subscribe(name string, priority workloadmeta.SubscriberPriority, filter *workloadmeta.Filter) chan workloadmeta.EventBundle {
	ret := _m.Called(name, priority, filter)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 chan workloadmeta.EventBundle
	if rf, ok := ret.Get(0).(func(string, workloadmeta.SubscriberPriority, *workloadmeta.Filter) chan workloadmeta.EventBundle); ok {
		r0 = rf(name, priority, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan workloadmeta.EventBundle)
		}
	}

	return r0
}

// Component_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Component_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - name string
//   - priority workloadmeta.SubscriberPriority
//   - filter *workloadmeta.Filter
func (_e *Component_Expecter) Subscribe(name interface{}, priority interface{}, filter interface{}) *Component_Subscribe_Call {
	return &Component_Subscribe_Call{Call: _e.mock.On("Subscribe", name, priority, filter)}
}

func (_c *Component_Subscribe_Call) Run(run func(name string, priority workloadmeta.SubscriberPriority, filter *workloadmeta.Filter)) *Component_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(workloadmeta.SubscriberPriority), args[2].(*workloadmeta.Filter))
	})
	return _c
}

func (_c *Component_Subscribe_Call) Return(_a0 chan workloadmeta.EventBundle) *Component_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Component_Subscribe_Call) RunAndReturn(run func(string, workloadmeta.SubscriberPriority, *workloadmeta.Filter) chan workloadmeta.EventBundle) *Component_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: ch
func (_m *Component) Unsubscribe(ch chan workloadmeta.EventBundle) {
	_m.Called(ch)
}

// Component_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Component_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ch chan workloadmeta.EventBundle
func (_e *Component_Expecter) Unsubscribe(ch interface{}) *Component_Unsubscribe_Call {
	return &Component_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ch)}
}

func (_c *Component_Unsubscribe_Call) Run(run func(ch chan workloadmeta.EventBundle)) *Component_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan workloadmeta.EventBundle))
	})
	return _c
}

func (_c *Component_Unsubscribe_Call) Return() *Component_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *Component_Unsubscribe_Call) RunAndReturn(run func(chan workloadmeta.EventBundle)) *Component_Unsubscribe_Call {
	_c.Run(run)
	return _c
}

// NewComponent creates a new instance of Component. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Component {
	mock := &Component{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
