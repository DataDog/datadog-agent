load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "kubeapiserver",
    srcs = [
        "deployments.go",
        "kubeapiserver.go",
        "namespaces.go",
        "node.go",
        "pod.go",
        "reflector_store.go",
        "stub.go",
        "test_helpers.go",
        "utils.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/core/workloadmeta/collectors/internal/kubeapiserver",
    visibility = ["//comp/core/workloadmeta/collectors:__subpackages__"],
    deps = [
        "//comp/core",
        "//comp/core/config",
        "//comp/core/workloadmeta",
        "//pkg/config",
        "//pkg/languagedetection/util",
        "//pkg/status/health",
        "//pkg/util/fxutil",
        "//pkg/util/kubernetes",
        "//pkg/util/kubernetes/apiserver",
        "//pkg/util/log",
        "@com_github_stretchr_testify//assert",
        "@io_k8s_api//apps/v1:apps",
        "@io_k8s_api//core/v1:core",
        "@io_k8s_apimachinery//pkg/apis/meta/v1:meta",
        "@io_k8s_apimachinery//pkg/runtime",
        "@io_k8s_apimachinery//pkg/types",
        "@io_k8s_apimachinery//pkg/util/errors",
        "@io_k8s_apimachinery//pkg/watch",
        "@io_k8s_client_go//kubernetes",
        "@io_k8s_client_go//kubernetes/fake",
        "@io_k8s_client_go//tools/cache",
        "@org_uber_go_fx//:fx",
    ],
)

go_test(
    name = "kubeapiserver_test",
    srcs = [
        "deployments_test.go",
        "kubeapiserver_test.go",
        "namespaces_test.go",
        "node_test.go",
        "pod_test.go",
        "utils_test.go",
    ],
    embed = [":kubeapiserver"],
    deps = [
        "//comp/core/workloadmeta",
        "//pkg/config",
        "//pkg/languagedetection/languagemodels",
        "//pkg/languagedetection/util",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@io_k8s_api//apps/v1:apps",
        "@io_k8s_api//core/v1:core",
        "@io_k8s_apimachinery//pkg/apis/meta/v1:meta",
        "@io_k8s_apimachinery//pkg/types",
        "@io_k8s_client_go//kubernetes/fake",
    ],
)
