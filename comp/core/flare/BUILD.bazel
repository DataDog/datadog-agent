load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "flare",
    srcs = [
        "component.go",
        "flare.go",
        "params.go",
        "providers.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/core/flare",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/aggregator/diagnosesendermanager",
        "//comp/api/api/def",
        "//comp/api/api/utils",
        "//comp/collector/collector",
        "//comp/core/autodiscovery",
        "//comp/core/config",
        "//comp/core/flare/helpers",
        "//comp/core/flare/types",
        "//comp/core/log/def",
        "//comp/core/secrets",
        "//comp/core/tagger/def",
        "//comp/core/workloadmeta/def",
        "//comp/remote-config/rcclient/types",
        "//pkg/config/utils",
        "//pkg/diagnose",
        "//pkg/flare",
        "//pkg/util/fxutil",
        "//pkg/util/option",
        "@org_uber_go_fx//:fx",
    ],
)

go_test(
    name = "flare_test",
    srcs = ["flare_test.go"],
    embed = [":flare"],
    deps = [
        "//comp/aggregator/demultiplexer/demultiplexerimpl",
        "//comp/collector/collector",
        "//comp/core/autodiscovery",
        "//comp/core/autodiscovery/autodiscoveryimpl",
        "//comp/core/autodiscovery/scheduler",
        "//comp/core/config",
        "//comp/core/flare/builder",
        "//comp/core/flare/helpers",
        "//comp/core/flare/types",
        "//comp/core/hostname/hostnameimpl",
        "//comp/core/log/def",
        "//comp/core/log/mock",
        "//comp/core/secrets/secretsimpl",
        "//comp/core/tagger/def",
        "//comp/core/tagger/mock",
        "//comp/core/telemetry/noopsimpl",
        "//comp/core/workloadmeta/def",
        "//comp/core/workloadmeta/fx-mock",
        "//pkg/util/fxutil",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_fx//:fx",
    ],
)
