load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "demultiplexerimpl",
    srcs = [
        "demultiplexer.go",
        "demultiplexer_fake_sampler_mock.go",
        "demultiplexer_mock.go",
        "params.go",
        "status.go",
        "test_agent_demultiplexer.go",
    ],
    embedsrcs = [
        "status_templates/aggregator.tmpl",
        "status_templates/aggregatorHTML.tmpl",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/aggregator/demultiplexer/demultiplexerimpl",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/aggregator/demultiplexer",
        "//comp/aggregator/diagnosesendermanager",
        "//comp/core/config",
        "//comp/core/hostname",
        "//comp/core/log/def",
        "//comp/core/status",
        "//comp/core/tagger/def",
        "//comp/core/tagger/impl-noop",
        "//comp/forwarder/defaultforwarder",
        "//comp/forwarder/eventplatform",
        "//comp/forwarder/eventplatform/eventplatformimpl",
        "//comp/forwarder/orchestrator",
        "//comp/haagent/def",
        "//comp/haagent/mock",
        "//comp/serializer/logscompression/def",
        "//comp/serializer/logscompression/fx-mock",
        "//comp/serializer/metricscompression/def",
        "//comp/serializer/metricscompression/fx-mock",
        "//pkg/aggregator",
        "//pkg/aggregator/sender",
        "//pkg/collector/check/stats",
        "//pkg/config/setup",
        "//pkg/logs/message",
        "//pkg/metrics",
        "//pkg/metrics/event",
        "//pkg/metrics/servicecheck",
        "//pkg/util/fxutil",
        "//pkg/util/hostname",
        "//pkg/util/option",
        "@org_uber_go_fx//:fx",
    ],
)

go_test(
    name = "demultiplexerimpl_test",
    srcs = [
        "demultiplexer_mock_test.go",
        "status_test.go",
    ],
    embed = [":demultiplexerimpl"],
    deps = [
        "//comp/aggregator/demultiplexer",
        "//comp/core",
        "//comp/core/status",
        "//comp/core/tagger/def",
        "//comp/core/tagger/mock",
        "//comp/forwarder/defaultforwarder",
        "//comp/forwarder/eventplatform/eventplatformimpl",
        "//comp/forwarder/orchestrator/orchestratorimpl",
        "//comp/haagent/mock",
        "//comp/serializer/logscompression/fx-mock",
        "//comp/serializer/metricscompression/fx-mock",
        "//pkg/aggregator/mocksender",
        "//pkg/util/fxutil",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_fx//:fx",
    ],
)
