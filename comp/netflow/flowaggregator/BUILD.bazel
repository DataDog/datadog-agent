load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "flowaggregator",
    srcs = [
        "aggregator.go",
        "buildpayload.go",
        "flowaccumulator.go",
        "testutil.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/netflow/flowaggregator",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/core/log",
        "//comp/forwarder/eventplatform",
        "//comp/netflow/common",
        "//comp/netflow/config",
        "//comp/netflow/format",
        "//comp/netflow/goflowlib",
        "//comp/netflow/payload",
        "//comp/netflow/portrollup",
        "//pkg/aggregator/sender",
        "//pkg/logs/message",
        "//pkg/metrics",
        "//pkg/networkdevice/metadata",
        "@com_github_prometheus_client_golang//prometheus",
        "@org_uber_go_atomic//:atomic",
    ],
)

go_test(
    name = "flowaggregator_test",
    srcs = [
        "aggregator_test.go",
        "buildpayload_test.go",
        "flowaccumulator_test.go",
    ],
    embed = [":flowaggregator"],
    deps = [
        "//comp/core/log",
        "//comp/core/log/logimpl",
        "//comp/forwarder/eventplatform/eventplatformimpl",
        "//comp/netflow/common",
        "//comp/netflow/config",
        "//comp/netflow/goflowlib",
        "//comp/netflow/payload",
        "//comp/netflow/portrollup",
        "//comp/netflow/testutil",
        "//pkg/aggregator/mocksender",
        "//pkg/logs/message",
        "//pkg/networkdevice/metadata",
        "//pkg/networkdevice/testutils",
        "//pkg/util/fxutil",
        "//pkg/util/log",
        "@com_github_cihub_seelog//:seelog",
        "@com_github_gogo_protobuf//proto",
        "@com_github_golang_mock//gomock",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_prometheus_client_model//go",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//mock",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_atomic//:atomic",
    ],
)
