load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "impl",
    srcs = [
        "config.go",
        "configstore.go",
        "extension.go",
        "factory.go",
        "server.go",
        "utils.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/otelcol/ddflareextension/impl",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/otelcol/ddflareextension/def",
        "//comp/otelcol/ddflareextension/impl/internal/metadata",
        "//pkg/api/util",
        "//pkg/version",
        "@com_github_gorilla_mux//:mux",
        "@in_gopkg_yaml_v2//:yaml_v2",
        "@io_opentelemetry_go_collector_component//:component",
        "@io_opentelemetry_go_collector_component_componentstatus//:componentstatus",
        "@io_opentelemetry_go_collector_config_confighttp//:confighttp",
        "@io_opentelemetry_go_collector_confmap//:confmap",
        "@io_opentelemetry_go_collector_extension//:extension",
        "@io_opentelemetry_go_collector_extension_extensioncapabilities//:extensioncapabilities",
        "@io_opentelemetry_go_collector_otelcol//:otelcol",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "impl_test",
    srcs = [
        "config_test.go",
        "configstore_test.go",
        "extension_test.go",
        "factory_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":impl"],
    deps = [
        "//comp/otelcol/converter/impl",
        "//comp/otelcol/ddflareextension/def",
        "//comp/otelcol/ddflareextension/impl/internal/metadata",
        "//comp/otelcol/otlp/components/exporter/datadogexporter",
        "//comp/otelcol/otlp/components/processor/infraattributesprocessor",
        "//pkg/api/util",
        "//pkg/config/mock",
        "@com_github_google_go_cmp//cmp",
        "@com_github_google_go_cmp//cmp/cmpopts",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_connector_datadogconnector//:datadogconnector",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_connector_spanmetricsconnector//:spanmetricsconnector",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_extension_healthcheckextension//:healthcheckextension",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_extension_pprofextension//:pprofextension",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_processor_transformprocessor//:transformprocessor",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_receiver_prometheusreceiver//:prometheusreceiver",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@in_gopkg_yaml_v2//:yaml_v2",
        "@io_opentelemetry_go_collector_component//:component",
        "@io_opentelemetry_go_collector_component_componenttest//:componenttest",
        "@io_opentelemetry_go_collector_config_confighttp//:confighttp",
        "@io_opentelemetry_go_collector_confmap//:confmap",
        "@io_opentelemetry_go_collector_confmap//confmaptest",
        "@io_opentelemetry_go_collector_confmap_provider_envprovider//:envprovider",
        "@io_opentelemetry_go_collector_confmap_provider_fileprovider//:fileprovider",
        "@io_opentelemetry_go_collector_confmap_provider_httpprovider//:httpprovider",
        "@io_opentelemetry_go_collector_confmap_provider_httpsprovider//:httpsprovider",
        "@io_opentelemetry_go_collector_confmap_provider_yamlprovider//:yamlprovider",
        "@io_opentelemetry_go_collector_connector//:connector",
        "@io_opentelemetry_go_collector_exporter//:exporter",
        "@io_opentelemetry_go_collector_exporter_otlpexporter//:otlpexporter",
        "@io_opentelemetry_go_collector_exporter_otlphttpexporter//:otlphttpexporter",
        "@io_opentelemetry_go_collector_extension//:extension",
        "@io_opentelemetry_go_collector_extension_zpagesextension//:zpagesextension",
        "@io_opentelemetry_go_collector_otelcol//:otelcol",
        "@io_opentelemetry_go_collector_processor//:processor",
        "@io_opentelemetry_go_collector_processor_batchprocessor//:batchprocessor",
        "@io_opentelemetry_go_collector_receiver//:receiver",
        "@io_opentelemetry_go_collector_receiver_nopreceiver//:nopreceiver",
        "@io_opentelemetry_go_collector_receiver_otlpreceiver//:otlpreceiver",
        "@org_uber_go_zap//:zap",
    ],
)
