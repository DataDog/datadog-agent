load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "datadogconnector",
    srcs = [
        "config.go",
        "connector.go",
        "doc.go",
        "factory.go",
        "metadata.go",
        "traces_connector.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/comp/otelcol/otlp/components/connector/datadogconnector",
    visibility = ["//visibility:public"],
    deps = [
        "//comp/core/tagger/types",
        "//comp/otelcol/otlp/components/metricsclient",
        "//comp/otelcol/otlp/components/statsprocessor",
        "//pkg/obfuscate",
        "//pkg/proto/pbgo/trace",
        "//pkg/trace/config",
        "//pkg/trace/stats",
        "//pkg/util/option",
        "@com_github_datadog_datadog_go_v5//statsd",
        "@com_github_datadog_opentelemetry_mapping_go_pkg_otlp_attributes//:attributes",
        "@com_github_datadog_opentelemetry_mapping_go_pkg_otlp_metrics//:metrics",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_pkg_datadog//:datadog",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_pkg_datadog//config",
        "@io_opentelemetry_go_collector_component//:component",
        "@io_opentelemetry_go_collector_connector//:connector",
        "@io_opentelemetry_go_collector_consumer//:consumer",
        "@io_opentelemetry_go_collector_pdata//pmetric",
        "@io_opentelemetry_go_collector_pdata//ptrace",
        "@io_opentelemetry_go_otel_metric//noop",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "datadogconnector_test",
    srcs = [
        "benchmark_test.go",
        "config_test.go",
        "connector_test.go",
        "example_test.go",
        "factory_test.go",
    ],
    embed = [":datadogconnector"],
    deps = [
        "//comp/otelcol/otlp/components/exporter/datadogexporter",
        "//comp/otelcol/otlp/testutil",
        "//pkg/obfuscate",
        "//pkg/proto/pbgo/trace",
        "//pkg/util/otel",
        "@com_github_datadog_opentelemetry_mapping_go_pkg_otlp_attributes//:attributes",
        "@com_github_datadog_opentelemetry_mapping_go_pkg_otlp_metrics//:metrics",
        "@com_github_google_go_cmp//cmp",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_pkg_datadog//:datadog",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_pkg_datadog//config",
        "@com_github_open_telemetry_opentelemetry_collector_contrib_processor_tailsamplingprocessor//:tailsamplingprocessor",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@io_opentelemetry_go_collector_component//:component",
        "@io_opentelemetry_go_collector_component_componenttest//:componenttest",
        "@io_opentelemetry_go_collector_connector//:connector",
        "@io_opentelemetry_go_collector_connector_connectortest//:connectortest",
        "@io_opentelemetry_go_collector_consumer_consumertest//:consumertest",
        "@io_opentelemetry_go_collector_exporter//:exporter",
        "@io_opentelemetry_go_collector_exporter_debugexporter//:debugexporter",
        "@io_opentelemetry_go_collector_featuregate//:featuregate",
        "@io_opentelemetry_go_collector_otelcol//:otelcol",
        "@io_opentelemetry_go_collector_otelcol_otelcoltest//:otelcoltest",
        "@io_opentelemetry_go_collector_pdata//pcommon",
        "@io_opentelemetry_go_collector_pdata//ptrace",
        "@io_opentelemetry_go_collector_processor//:processor",
        "@io_opentelemetry_go_collector_processor_batchprocessor//:batchprocessor",
        "@io_opentelemetry_go_collector_receiver//:receiver",
        "@io_opentelemetry_go_collector_receiver_otlpreceiver//:otlpreceiver",
        "@io_opentelemetry_go_otel//semconv/v1.27.0:v1_27_0",
        "@org_golang_google_protobuf//proto",
        "@org_golang_google_protobuf//testing/protocmp",
        "@org_uber_go_zap//:zap",
    ],
)
