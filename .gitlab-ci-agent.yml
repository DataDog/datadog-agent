image: docker.io/stackstate/stackstate-agent-runner-gitlab:latest7

stages:
  - prepare
  - build
  - test
  - pre_release
  - acceptance
  - cleanup
  - release
  - manual_cleanup

######################### pipeline bricks

.retrieve_linux_go_deps_script: &retrieve_linux_go_deps_script |
  echo "~~~~~> Trying to retrieve_linux_go_deps"
  ls *.tar.gz || true
  [ -e "go-bin.tar.gz" ] && mkdir -p $GOPATH/bin && tar xzf go-bin.tar.gz -C $GOPATH/bin
  [ -e "go-pkg.tar.gz" ] && mkdir -p $GOPATH/pkg && tar xzf go-pkg.tar.gz -C $GOPATH/pkg
  [ -e "vendor.tar.gz" ] && mkdir vendor && tar xzf vendor.tar.gz -C vendor
  rm -f go-bin.tar.gz go-pkg.tar.gz vendor.tar.gz || true
  echo "~~~~~> /Trying..."

.configure_centos_env_script: &configure_centos_env_script |
  . /root/.gimme/envs/go1.13.11.env
  . /root/miniconda3/etc/profile.d/conda.sh
  conda activate $CONDA_ENV
  mkdir -p /go/src/github.com/StackVista
  rm -rf /go/src/github.com/StackVista/stackstate-agent || true
  ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
  . /usr/local/rvm/scripts/rvm
  export PATH=/go/bin:/usr/local/go/bin:$PATH
  eval $(gimme)

.configure_debian_env_script: &configure_debian_env_script |
  . /root/miniconda3/etc/profile.d/conda.sh # TODO: check possibility to use bash from the start
  conda activate $CONDA_ENV
  mkdir -p /go/src/github.com/StackVista
  rm -rf /go/src/github.com/StackVista/stackstate-agent || true
  . /usr/local/rvm/scripts/rvm
  ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent

.configure_windows_ps1_env_script: &configure_windows_ps1_env_script |
  Import-Module C:\tools\miniconda3\shell\condabin\conda-hook.ps1
  ./.gitlab-scripts/conda_env.ps1 $CONDA_ENV $PYTHON_RUNTIMES
  conda activate $CONDA_ENV
  $current_dir=Get-Location
  New-Item -ItemType Directory -Force -Path "$Env:GOPATH\\src\\github.com\\StackVista"
  cmd /c if exist %GOPATH%\src\github.com\StackVista\stackstate-agent rd /s/q %GOPATH%\src\github.com\StackVista\stackstate-agent
  New-Item -ItemType SymbolicLink -Path "$Env:GOPATH\\src\\github.com\\StackVista\\stackstate-agent" -Target $current_dir -Force

.rules:
  - &only_agent_3
    if: $MAJOR_VERSION == "3"
  - &only_agent_3_failure
    if: $MAJOR_VERSION == "3"
    when: on_failure
  - &only_agent_3_success
    if: $MAJOR_VERSION == "3"
    when: on_success
  - &only_agent_3_always
    if: $MAJOR_VERSION == "3"
    when: always
  - &only_agent_3_release
    if: $MAJOR_VERSION == "3" && ($CI_COMMIT_TAG || $CI_JOB_TRIGGERED == "true")
    when: manual

######################### /pipeline bricks


before_script:
  - *configure_debian_env_script
  - *retrieve_linux_go_deps_script

## prepare stage

clear_deps_deb_cache:
  stage: manual_cleanup
  before_script: []
  cache:
    policy: push
    key: "deps-deb-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_rpm_cache:
  stage: manual_cleanup
  before_script: []
  cache:
    policy: push
    key: "deps-rpm-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_win_cache:
  stage: manual_cleanup
  before_script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
  cache:
    policy: push
    key: "deps-win-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - "if (Test-Path %WIN_CI_PROJECT_DIR%\\vendor) { Remove-Item -Force -Recurse %WIN_CI_PROJECT_DIR%\\vendor }"
    - "if (Test-Path %WIN_CI_PROJECT_DIR%\\venv) { Remove-Item -Force -Recurse %WIN_CI_PROJECT_DIR%\\venv }"
    - "if (Test-Path C:\\opt\\stackstate-agent) { Remove-Item -Force -Recurse C:\\opt\\stackstate-agent }"
  tags:
    - windows_agent7_ps1

deps_deb:
  stage: prepare
  interruptible: true
  cache:
    key: "deps-deb-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  script:
    - conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - inv agent.version --major-version $MAJOR_VERSION -u > version.txt
    - cd $GOPATH/pkg && tar czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $GOPATH/bin && tar czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $CI_PROJECT_DIR/vendor && tar czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

deps_rpm:
  stage: prepare
  interruptible: true
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_latest_v7
  cache:
    key: "deps-rpm-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
  before_script:
    - *configure_centos_env_script
  script:
    - conda activate $CONDA_ENV
    - inv -e deps --verbose --dep-vendor-only
    - inv agent.version --major-version $MAJOR_VERSION -u > version.txt
    - cd $GOPATH/pkg && tar czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $GOPATH/bin && tar czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $CI_PROJECT_DIR/vendor && tar czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

deps_win:
  stage: prepare
  interruptible: true
  before_script:
    - *configure_windows_ps1_env_script
  cache:
    key: "deps-win-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
  script:
    - conda activate $CONDA_ENV
    - inv deps
    - inv agent.version --major-version $MAJOR_VERSION -u > version.txt
    - cd $Env:GOPATH/pkg ; tar --force-local -czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $Env:GOPATH/bin ; tar --force-local -czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $Env:CI_PROJECT_DIR/vendor ; tar --force-local -czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week
  tags:
    - windows_agent7_ps1
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

## build stage

unit_tests:
  stage: test
  interruptible: true
  needs:
    - deps_deb
  script:
    - conda activate $CONDA_ENV
    # We run inv deps again because /go/bin is not cached and we need binaries like golint, misspell
    - inv deps
    - inv -e agent.build --race --precompile-only --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
    # TODO: check why formatting rules differ from previous step
    - gofmt -l -w -s ./pkg ./cmd
    - inv -e rtloader.test
    - inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
  tags:
    - sts-aws
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

unit_tests_cluster_agent:
  stage: test
  interruptible: true
  needs:
    - deps_deb
  script:
    - conda activate $CONDA_ENV
    # We run inv deps again because /go/bin is not cached and we need binaries like golint, misspell
    - inv deps
    - inv -e agent.build --race --precompile-only --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
    # TODO: check why formatting rules differ from previous step
    - gofmt -l -w -s ./pkg ./cmd
    # TODO: --python-runtimes "$PYTHON_RUNTIMES"
    - inv -e rtloader.test
    - inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES --build-include docker,linux,kubelet,kubeapiserver,python,orchestrator,clusterchecks,zlib
  tags:
    - sts-aws
  rules:
    - *only_agent_3
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

filename_linting:
  stage: test
  interruptible: true
  needs:
    - deps_deb
  script:
    - conda activate $CONDA_ENV
    - inv -e lint-filenames

# TODO:  Not observed in v7 in a direct form ?
#docker_integration_tests:
#  stage: test
#  needs:
#    - deps_deb
#  variables:
#      DOCKER_DRIVER: overlay
#      DOCKER_HOST: tcp://docker:2375
#      DOCKER_TLS_CERTDIR: ""
#  services:
#    - docker:18.09-dind
#  script:
#    - inv -e docker.integration-tests
#  tags:
#    - sts-aws

build_binaries:
  stage: build
  interruptible: true
  needs:
    - deps_deb
  script:
    - conda activate $CONDA_ENV
    - inv -e dogstatsd.build --static --major-version $MAJOR_VERSION
    - inv -e rtloader.make
    - inv -e rtloader.install
    - cd $SRC_PATH
    - inv -e agent.build --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
  tags:
    - sts-k8s-m-runner
  retry:
    max: 2
    when:
      - always

build_cluster_agent:
  stage: build
  interruptible: true
  needs:
    - deps_deb
  script:
    - conda activate $CONDA_ENV
    - inv -e cluster-agent.build
    - ls -la $CI_PROJECT_DIR/bin/
  artifacts:
    paths:
      - $CI_PROJECT_DIR/bin/stackstate-cluster-agent
      - $CI_PROJECT_DIR/Dockerfiles/cluster-agent/stackstate-cluster.yaml
      - $CI_PROJECT_DIR/version.txt
  rules:
    - *only_agent_3
  retry:
    max: 2
    when:
      - always

clear_build_deb_cache:
  stage: manual_cleanup
  interruptible: true
  cache:
    policy: push
    key: "build-deb-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*

clear_build_rpm_cache:
  stage: manual_cleanup
  interruptible: true
  cache:
    policy: push
    key: "build-rpm-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*

build_deb:
  stage: build
  interruptible: true
  needs:
    - deps_deb
  tags:
    - sts-k8s-xl-no-docker-runner
  cache:
    key: "build-deb-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
      - .gems
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
    - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

    - conda activate $CONDA_ENV
    - inv agent.version --major-version $MAJOR_VERSION
    - cat version.txt || true
    - source ./.gitlab-scripts/setup_artifactory.sh

    - inv -e agent.omnibus-build --gem-path $CI_PROJECT_DIR/.gems --base-dir $OMNIBUS_BASE_DIR --skip-deps --skip-sign --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES

    # Prepare outputs
    - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles && mkdir -p $CI_PROJECT_DIR/outcomes/binary
    - cp -r $OMNIBUS_BASE_DIR/pkg $CI_PROJECT_DIR/outcomes
    - cp -r $CI_PROJECT_DIR/Dockerfiles $CI_PROJECT_DIR/outcomes
    - cp -r /opt/stackstate-agent/embedded/bin/trace-agent  $CI_PROJECT_DIR/outcomes/binary/

    - ls -la $CI_PROJECT_DIR/outcomes/Dockerfiles

    # Prepare cache
    # Drop packages for cache
    - rm -rf /omnibus/pkg
    # Drop agent for cache (will be resynced anyway)
    - rm -rf /omnibus/src/datadog-agent
    # Drop symlink because it will fail the build when coming from a cache
    - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
    - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
      - $CI_PROJECT_DIR/outcomes/pkg/*.deb
      - $CI_PROJECT_DIR/outcomes/pkg/*.json
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/outcomes/binary/trace-agent
    expire_in: 1 week
  retry:
    max: 2
    when:
      - always

build_rpm:
  stage: build
  interruptible: true
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_latest_v7
  needs:
    - deps_rpm
  tags:
    - sts-k8s-xl-no-docker-runner
  cache:
    key: "build-rpm-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
      - .gems
  before_script:
    - *configure_centos_env_script
    - *retrieve_linux_go_deps_script
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
    - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

    - conda activate $CONDA_ENV
    - inv agent.version --major-version $MAJOR_VERSION
    - cat version.txt || true
    - source ./.gitlab-scripts/setup_artifactory.sh

    # TODO:  --python-runtimes "$PYTHON_RUNTIMES" --system-probe-bin=/tmp/system-probe --libbcc-tarball=/tmp/libbcc.tar.xz
    - inv -e agent.omnibus-build --gem-path $CI_PROJECT_DIR/.gems --base-dir $OMNIBUS_BASE_DIR --skip-deps --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
    #  - find $OMNIBUS_BASE_DIR/pkg -type f -name '*.rpm' ! -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'
    #  - find $OMNIBUS_BASE_DIR/pkg -type f -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'

    # Prepare outputs
    - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles
    - cp -r $OMNIBUS_BASE_DIR/pkg $CI_PROJECT_DIR/outcomes
    - cp -r $CI_PROJECT_DIR/Dockerfiles $CI_PROJECT_DIR/outcomes

    - ls -la $CI_PROJECT_DIR/outcomes/Dockerfiles

    #    # Prepare cache
    #    # Drop packages for cache
    - rm -rf /omnibus/pkg
    #    # Drop agent for cache (will be resynced anyway)
    - rm -rf /omnibus/src/datadog-agent
    #    # Drop symlink because it will fail the build when coming from a cache
    - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
    - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
      - $CI_PROJECT_DIR/outcomes/pkg/*.rpm
      - $CI_PROJECT_DIR/outcomes/pkg/*.json
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
      - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
      - $CI_PROJECT_DIR/version.txt
    expire_in: 1 week
  retry:
    max: 2
    when:
      - always

build_win:
  stage: build
  interruptible: true
  needs:
    - deps_win
  cache:
    key: "build-win-$STS_VER-$CI_COMMIT_REF_SLUG"
    paths:
      - .gems
  before_script:
    - *configure_windows_ps1_env_script
    - Import-VisualStudioVars 2017 -Architecture amd64
    - ridk enable
  script:
    - cmd.exe /c "%GOPATH%\src\github.com\StackVista\stackstate-agent\.gitlab-scripts\setup_artifactory.cmd"
    - conda activate $CONDA_ENV
    - inv -e agent.omnibus-build --gem-path $CI_PROJECT_DIR/.gems --base-dir $OMNIBUS_BASE_DIR_WIN --skip-sign --log-level debug --major-version $MAJOR_VERSION --python-runtimes $PYTHON_RUNTIMES
  after_script:
    - cmd.exe /c "copy %GOPATH%\src\github.com\StackVista\stackstate-agent\omnibus\pkg\*.msi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - ./*.msi
      - "version.txt"
  tags:
    - windows_agent7_ps1
  retry:
    max: 2
    when:
      - always

## pre_release stage

test_deb_renaming:
  stage: test
  interruptible: true
  needs:
    - build_deb
  before_script: []
  script:
    - ./test/renaming/test_deb.sh $CI_PROJECT_DIR/outcomes/pkg/stackstate-agent_$MAJOR_VERSION*.deb
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

test_rpm_renaming:
  stage: test
  interruptible: true
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_20190429
  needs:
    - build_rpm
  before_script: []
  script:
    - ./test/renaming/test_rpm.sh $CI_PROJECT_DIR/outcomes/pkg/stackstate-agent-$MAJOR_VERSION*.rpm
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_deb:
  stage: pre_release
  interruptible: true
  needs:
    - deps_deb
    - build_deb
  script:
    # //TODO: move to image
    - apt-get install -y apt-utils libtool debsigs
    - ls -la /usr/local/rvm/gems/ruby-2.4.2/bin/
    - source /usr/local/rvm/scripts/rvm && gem install deb-s3
    # //
    - source /usr/local/rvm/scripts/rvm
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_TEST_BUCKET
    - cd $CI_PROJECT_DIR && inv release.generate-install -t
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_TEST_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_win:
  stage: pre_release
  interruptible: true
  needs:
    - deps_win
    - build_win
  before_script:
    - *configure_windows_ps1_env_script
    - Import-VisualStudioVars 2017 -Architecture amd64
    - ridk enable
  script:
    - $env:VERSION = Get-Content version.txt -First 1
    - $filename = "stackstate-agent-" + $Env:VERSION + "-1-x86_64.msi"
    - $filename
    - Copy-Item $filename -Destination stackstate-agent-latest-1-x86_64.msi
    - ls
    - aws.exe s3 cp . s3://$Env:STS_AWS_TEST_BUCKET_WIN/windows/$Env:CI_COMMIT_REF_NAME --recursive --exclude "*" --include "*.msi" --acl public-read
    - inv release.generate-install -t
    - aws.exe s3 cp ./cmd/agent/install.ps1 s3://$Env:STS_AWS_TEST_BUCKET_WIN/install.ps1 --acl public-read
    - aws.exe s3 ls s3://$Env:STS_AWS_TEST_BUCKET_WIN/windows/$Env:CI_COMMIT_REF_NAME/
    - aws.exe s3 ls s3://$Env:STS_AWS_TEST_BUCKET_WIN/
  tags:
    - windows_agent7_ps1
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_rpm:
  stage: pre_release
  interruptible: true
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - build_rpm
  before_script: []
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_TEST_BUCKET_YUM
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_main_agent_image: &pre_release_image
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/pkg/stackstate-agent_*_amd64.deb ./Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO $CI_PROJECT_DIR/Dockerfiles/agent $CI_COMMIT_SHORT_SHA
  tags:
    - sts-k8s-m-runner
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

pre_release_trace_agent_image:
  <<: *pre_release_image
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent $CI_COMMIT_SHORT_SHA
  rules:
    - *only_agent_3

pre_release_cluster_agent_image:
  <<: *pre_release_image
  interruptible: true
  needs:
    - build_cluster_agent
    # - unit_tests_cluster_agent
  script:
    - cd $CI_PROJECT_DIR
    - cp -r ./bin/stackstate-cluster-agent* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent $CI_COMMIT_SHORT_SHA
  rules:
    - *only_agent_3

## acceptance stage

.molecule_base_prepare: &molecule_base_prepare
  stage: prepare
  dependencies: []
  variables:
    MOLECULE_EPHEMERAL_DIRECTORY: $CI_PROJECT_DIR/tmp_molecule_inventory
  before_script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - export LC_CTYPE=en_US.UTF-8
    - export LANG=en_US.UTF-8
    - mkdir -p $CI_PROJECT_DIR/tmp_molecule_inventory
  retry:
    max: 2
    when:
      - always

.molecule_base: &molecule_base
  stage: acceptance
  dependencies: []
  variables:
    MOLECULE_EPHEMERAL_DIRECTORY: $CI_PROJECT_DIR/tmp_molecule_inventory
  before_script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - export LC_CTYPE=en_US.UTF-8
    - export LANG=en_US.UTF-8
    - mkdir -p $CI_PROJECT_DIR/tmp_molecule_inventory
  retry:
    max: 2
    when:
      - always


# Job Seq: Molecule
# Type: Compose
# Steps: Destroy Compose, Create Compose, Prepare Compose, Second Prepare Compose, Test Compose, Destroy Compose

.molecule_compose_only_rules: &molecule_compose_only_rules
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-compose]/ && $CI_JOB_NAME =~ /molecule_compose_create/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-compose]/ && $CI_JOB_NAME =~ /molecule_compose_test/
      when: on_success
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-compose]/ && $CI_JOB_NAME =~ /molecule_compose_failure_cleanup/
      when: on_failure
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-compose]/ && $CI_JOB_NAME =~ /molecule_compose_cleanup/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - when: always

.molecule_compose_cleanup: &molecule_compose_cleanup
  <<: *molecule_base
  stage: cleanup
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/compose/provisioner.run.yml destroy --scenario-name compose

.molecule_compose_resource_lock: &molecule_compose_resource_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-compose_branch_lock"

molecule_compose_create:
  <<: *molecule_base_prepare
  <<: *molecule_compose_resource_lock
  <<: *molecule_compose_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/compose/provisioner.setup.yml create --scenario-name compose
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_compose_test:
  <<: *molecule_base
  <<: *molecule_compose_resource_lock
  <<: *molecule_compose_only_rules
  interruptible: true
  dependencies:
    - molecule_compose_create
  needs:
    - pre_release_main_agent_image
    - molecule_compose_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/compose/provisioner.run.yml prepare --force --scenario-name compose
    - ./molecule3.sh --base-config ./molecule/compose/provisioner.run.yml test --scenario-name compose --destroy=never
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_compose_failure_cleanup:
  <<: *molecule_compose_cleanup
  <<: *molecule_compose_resource_lock
  <<: *molecule_compose_only_rules
  needs:
    - molecule_compose_create

molecule_compose_cleanup:
  <<: *molecule_compose_cleanup
  <<: *molecule_compose_resource_lock
  <<: *molecule_compose_only_rules
  dependencies:
    - molecule_compose_test
    - molecule_compose_create
  needs:
    - molecule_compose_test
    - molecule_compose_create


# Job Seq: Molecule
# Type: Integrations
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_integrations_only_rules: &molecule_integrations_only_rules
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-integrations]/ && $CI_JOB_NAME =~ /molecule_integrations_create/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-integrations]/ && $CI_JOB_NAME =~ /molecule_integrations_test/
      when: on_success
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-integrations]/ && $CI_JOB_NAME =~ /molecule_integrations_failure_cleanup/
      when: on_failure
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-integrations]/ && $CI_JOB_NAME =~ /molecule_integrations_cleanup/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - when: always

.integrations_cleanup_base: &integrations_cleanup_base
  <<: *molecule_base
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/integrations/provisioner.run.yml destroy --scenario-name integrations

.integrations_branch_lock: &integrations_branch_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-integrations_branch_lock"

molecule_integrations_create:
  <<: *molecule_base_prepare
  <<: *integrations_branch_lock
  <<: *molecule_integrations_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/integrations/provisioner.setup.yml create --scenario-name integrations
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/integrations/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/integrations/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_integrations_test:
  <<: *molecule_base
  <<: *integrations_branch_lock
  <<: *molecule_integrations_only_rules
  interruptible: true
  dependencies:
    - molecule_integrations_create
  needs:
    - pre_release_main_agent_image
    - molecule_integrations_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/integrations/provisioner.run.yml prepare --force --scenario-name integrations
    - ./molecule3.sh --base-config ./molecule/integrations/provisioner.run.yml test --scenario-name integrations --destroy=never
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/integrations/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/integrations/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_integrations_failure_cleanup:
  <<: *integrations_cleanup_base
  <<: *integrations_branch_lock
  <<: *molecule_integrations_only_rules
  stage: cleanup
  needs:
    - molecule_integrations_create

molecule_integrations_cleanup:
  <<: *integrations_cleanup_base
  <<: *integrations_branch_lock
  <<: *molecule_integrations_only_rules
  stage: cleanup
  dependencies:
    - molecule_integrations_test
    - molecule_integrations_create
  needs:
    - molecule_integrations_test
    - molecule_integrations_create


# Job Seq: Molecule
# Type: kubernetes
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_kubernetes_only_rules: &molecule_kubernetes_only_rules
  rules:
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-kubernetes]/ && $CI_JOB_NAME =~ /molecule_kubernetes_create/
      when: always
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-kubernetes]/ && $CI_JOB_NAME =~ /molecule_kubernetes_test/
      when: on_success
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-kubernetes]/ && $CI_JOB_NAME =~ /molecule_kubernetes_failure_cleanup/
      when: on_failure
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-kubernetes]/ && $CI_JOB_NAME =~ /molecule_kubernetes_cleanup/
      when: always
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - if: $MAJOR_VERSION == "3"
      when: always

.kubernetes_cleanup_base: &kubernetes_cleanup_base
  <<: *molecule_base
  resource_group: eks_test_cluster
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/kubernetes/provisioner.run.yml destroy --scenario-name kubernetes

molecule_kubernetes_create:
  <<: *molecule_base_prepare
  <<: *molecule_kubernetes_only_rules
  interruptible: true
  resource_group: eks_test_cluster
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/kubernetes/provisioner.setup.yml create --scenario-name kubernetes
  artifacts:
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_kubernetes_test:
  <<: *molecule_base
  <<: *molecule_kubernetes_only_rules
  interruptible: true
  resource_group: eks_test_cluster
  dependencies:
    - molecule_kubernetes_create
  needs:
    - pre_release_cluster_agent_image
    - pre_release_main_agent_image
    - molecule_kubernetes_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/kubernetes/provisioner.run.yml prepare --force --scenario-name kubernetes
    - ./molecule3.sh --base-config ./molecule/kubernetes/provisioner.run.yml test --scenario-name kubernetes --destroy=never
  artifacts:
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_kubernetes_failure_cleanup:
  <<: *kubernetes_cleanup_base
  <<: *molecule_kubernetes_only_rules
  stage: cleanup
  resource_group: eks_test_cluster
  needs:
    - molecule_kubernetes_create

molecule_kubernetes_cleanup:
  <<: *kubernetes_cleanup_base
  <<: *molecule_kubernetes_only_rules
  stage: cleanup
  resource_group: eks_test_cluster
  dependencies:
    - molecule_kubernetes_test
    - molecule_kubernetes_create
  needs:
    - molecule_kubernetes_test
    - molecule_kubernetes_create

# Job Seq: Molecule
# Type: localinstall
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_localinstall_only_rules: &molecule_localinstall_only_rules
  rules:
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-localinstall]/ && $CI_JOB_NAME =~ /molecule_localinstall_create/
      when: always
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-localinstall]/ && $CI_JOB_NAME =~ /molecule_localinstall_test/
      when: on_success
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-localinstall]/ && $CI_JOB_NAME =~ /molecule_localinstall_failure_cleanup/
      when: on_failure
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-localinstall]/ && $CI_JOB_NAME =~ /molecule_localinstall_cleanup/
      when: always
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master")
      when: always

.localinstall_cleanup_base: &localinstall_cleanup_base
  <<: *molecule_base
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/localinstall/provisioner.run.yml destroy --scenario-name localinstall

.localinstall_branch_lock: &localinstall_branch_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-localinstall_branch_lock"

molecule_localinstall_create:
  <<: *molecule_base_prepare
  <<: *localinstall_branch_lock
  <<: *molecule_localinstall_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/localinstall/provisioner.setup.yml create --scenario-name localinstall
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/localinstall/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/localinstall/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_localinstall_test:
  <<: *molecule_base
  <<: *localinstall_branch_lock
  <<: *molecule_localinstall_only_rules
  interruptible: true
  dependencies:
    - molecule_localinstall_create
  needs:
    - pre_release_deb
    - pre_release_rpm
    - molecule_localinstall_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/localinstall/provisioner.run.yml prepare --force --scenario-name localinstall
    - ./molecule3.sh --base-config ./molecule/localinstall/provisioner.run.yml test --scenario-name localinstall --destroy=never
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_localinstall_failure_cleanup:
  <<: *localinstall_cleanup_base
  <<: *localinstall_branch_lock
  <<: *molecule_localinstall_only_rules
  stage: cleanup
  needs:
    - molecule_localinstall_create

molecule_localinstall_cleanup:
  <<: *localinstall_cleanup_base
  <<: *localinstall_branch_lock
  <<: *molecule_localinstall_only_rules
  stage: cleanup
  dependencies:
    - molecule_localinstall_test
    - molecule_localinstall_create
  needs:
    - molecule_localinstall_test
    - molecule_localinstall_create

# Job Seq: Molecule
# Type: secrets
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_secrets_only_rules: &molecule_secrets_only_rules
  rules:
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-secrets]/ && $CI_JOB_NAME =~ /molecule_secrets_create/
      when: always
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-secrets]/ && $CI_JOB_NAME =~ /molecule_secrets_test/
      when: on_success
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-secrets]/ && $CI_JOB_NAME =~ /molecule_secrets_failure_cleanup/
      when: on_failure
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-secrets]/ && $CI_JOB_NAME =~ /molecule_secrets_cleanup/
      when: always
    - if: ($CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master") && $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - if: $CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == "master"
      when: always

.secrets_cleanup_base: &secrets_cleanup_base
  <<: *molecule_base
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/secrets/provisioner.run.yml destroy --scenario-name secrets

.secrets_branch_lock: &secrets_branch_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-secrets_branch_lock"

molecule_secrets_create:
  <<: *molecule_base_prepare
  <<: *secrets_branch_lock
  <<: *molecule_secrets_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/secrets/provisioner.setup.yml create --scenario-name secrets
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_secrets_test:
  <<: *molecule_base
  <<: *secrets_branch_lock
  <<: *molecule_secrets_only_rules
  interruptible: true
  dependencies:
    - molecule_secrets_create
  needs:
    - pre_release_deb
    - molecule_secrets_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/secrets/provisioner.run.yml prepare --force --scenario-name secrets
    - ./molecule3.sh --base-config ./molecule/secrets/provisioner.run.yml test --scenario-name secrets --destroy=never
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_secrets_failure_cleanup:
  <<: *secrets_cleanup_base
  <<: *secrets_branch_lock
  <<: *molecule_secrets_only_rules
  stage: cleanup
  needs:
    - molecule_secrets_create

molecule_secrets_cleanup:
  <<: *secrets_cleanup_base
  <<: *secrets_branch_lock
  <<: *molecule_secrets_only_rules
  stage: cleanup
  dependencies:
    - molecule_secrets_test
    - molecule_secrets_create
  needs:
    - molecule_secrets_test
    - molecule_secrets_create

# Job Seq: Molecule
# Type: swarm
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_swarm_only_rules: &molecule_swarm_only_rules
  rules:
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-swarm]/ && $CI_JOB_NAME =~ /molecule_swarm_create/
      when: always
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-swarm]/ && $CI_JOB_NAME =~ /molecule_swarm_test/
      when: on_success
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-swarm]/ && $CI_JOB_NAME =~ /molecule_swarm_failure_cleanup/
      when: on_failure
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-swarm]/ && $CI_JOB_NAME =~ /molecule_swarm_cleanup/
      when: always
    - if: $MAJOR_VERSION == "3" && $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - if: $MAJOR_VERSION == "3"
      when: always

.swarm_cleanup_base: &swarm_cleanup_base
  <<: *molecule_base
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/swarm/provisioner.run.yml destroy --scenario-name swarm

.swarm_branch_lock: &swarm_branch_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-swarm_branch_lock"


molecule_swarm_create:
  <<: *molecule_base_prepare
  <<: *swarm_branch_lock
  <<: *molecule_swarm_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/swarm/provisioner.setup.yml create --scenario-name swarm
  artifacts:
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/swarm/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/swarm/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_swarm_test:
  <<: *molecule_base
  <<: *swarm_branch_lock
  <<: *molecule_swarm_only_rules
  interruptible: true
  dependencies:
    - molecule_swarm_create
  needs:
    - pre_release_cluster_agent_image
    - pre_release_main_agent_image
    - molecule_swarm_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/swarm/provisioner.run.yml prepare --force --scenario-name swarm
    - ./molecule3.sh --base-config ./molecule/swarm/provisioner.run.yml test --scenario-name swarm --destroy=never
  artifacts:
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/swarm/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/swarm/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_swarm_failure_cleanup:
  <<: *swarm_cleanup_base
  <<: *swarm_branch_lock
  <<: *molecule_swarm_only_rules
  stage: cleanup
  needs:
    - molecule_swarm_create

molecule_swarm_cleanup:
  <<: *swarm_cleanup_base
  <<: *swarm_branch_lock
  <<: *molecule_swarm_only_rules
  stage: cleanup
  dependencies:
    - molecule_swarm_create
    - molecule_swarm_test
  needs:
    - molecule_swarm_create
    - molecule_swarm_test

# Job Seq: Molecule
# Type: vms
# Steps: Create, Create Cleanup (optional), Test, (Test Cleanup)

.molecule_vms_only_rules: &molecule_vms_only_rules
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-vms]/ && $CI_JOB_NAME =~ /molecule_vms_create/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-vms]/ && $CI_JOB_NAME =~ /molecule_vms_test/
      when: on_success
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-vms]/ && $CI_JOB_NAME =~ /molecule_vms_failure_cleanup/
      when: on_failure
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-vms]/ && $CI_JOB_NAME =~ /molecule_vms_cleanup/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[molecule\-/
      when: never
    - when: always

.vms_cleanup_base: &vms_cleanup_base
  <<: *molecule_base
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/vms/provisioner.run.yml destroy --scenario-name vms

.vms_branch_lock: &vms_branch_lock
  resource_group: "$STS_VER-$MAJOR_VERSION-$PYTHON_RUNTIMES-$CI_COMMIT_BRANCH-vms_branch_lock"

molecule_vms_create:
  <<: *molecule_base_prepare
  <<: *vms_branch_lock
  <<: *molecule_vms_only_rules
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/vms/provisioner.setup.yml create --scenario-name vms
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_vms_test:
  <<: *molecule_base
  <<: *vms_branch_lock
  <<: *molecule_vms_only_rules
  interruptible: true
  dependencies:
    - molecule_vms_create
  needs:
    - pre_release_deb
    - pre_release_rpm
    - pre_release_win
    - molecule_vms_create
  script:
    - cd $CI_PROJECT_DIR/test
    - ./molecule3.sh --base-config ./molecule/vms/provisioner.run.yml prepare --force --scenario-name vms
    - ./molecule3.sh --base-config ./molecule/vms/provisioner.run.yml test --scenario-name vms --destroy=never
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/*.log
      - $CI_PROJECT_DIR/tmp_molecule_inventory
      - $CI_PROJECT_DIR/.molecule
      - $MOLECULE_EPHEMERAL_DIRECTORY
    expire_in: 1 week

molecule_vms_failure_cleanup:
  <<: *vms_cleanup_base
  <<: *vms_branch_lock
  <<: *molecule_vms_only_rules
  stage: cleanup
  needs:
    - molecule_vms_create

molecule_vms_cleanup:
  <<: *vms_cleanup_base
  <<: *vms_branch_lock
  <<: *molecule_vms_only_rules
  stage: cleanup
  dependencies:
    - molecule_vms_create
    - molecule_vms_test
  needs:
    - molecule_vms_create
    - molecule_vms_test

## release stage

release_deb:
  interruptible: true
  stage: release
  dependencies:
    - deps_deb
    - build_deb
  script:
    - apt-get install -y apt-utils libtool debsigs
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_RELEASE_BUCKET stable
    - cd $CI_PROJECT_DIR && inv release.generate-install
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_RELEASE_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"
  when: manual
  only:
    - tags
    - triggers
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

release_rpm:
  interruptible: true
  stage: release
  dependencies:
    - build_rpm
  before_script:
    - mkdir -p /go/src/github.com/StackVista
    - ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_RELEASE_BUCKET_YUM stable
  when: manual
  only:
    - tags
    - triggers
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

release_win:
  interruptible: true
  stage: release
  dependencies:
    - deps_win
    - build_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call %WORKON_HOME%\venv\Scripts\activate.bat
    - call ridk enable
    - $env:VERSION = Get-Content version.txt -First 1
    - $filename = "stackstate-agent-" + $Env:VERSION + "-1-x86_64.msi"
    - $filename
    - Copy-Item $filename -Destination stackstate-agent-latest-1-x86_64.msi
    - inv release.generate-install
    - aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN%/windows/stable --recursive --exclude "*" --include "*.msi" --acl public-read
    - cd %WIN_CI_PROJECT_DIR%/cmd/agent && aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN% --recursive --exclude "*" --include "install.ps1" --acl public-read
  when: manual
  only:
    - tags
    - triggers
  tags:
    - windows_agent7_ps1
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

.base_release_image: &base_release_image
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  tags:
    - sts-k8s-m-runner
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

release_main_agent_image:
  <<: *base_release_image
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/pkg/stackstate-agent_*_amd64.deb Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO $CI_PROJECT_DIR/Dockerfiles/agent latest
  when: manual
  only:
    - tags
    - triggers

release_trace_agent_image:
  <<: *base_release_image
  interruptible: true
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent latest
  rules:
    - *only_agent_3_release

release_cluster_agent_image:
  <<: *base_release_image
  interruptible: true
  dependencies:
    - build_cluster_agent
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp -r ./bin/stackstate-cluster-agent/* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent latest
  rules:
    - *only_agent_3_release
