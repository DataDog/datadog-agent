// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DataDog/datadog-agent/cmd/agent/api/pb (interfaces: AgentClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pb "github.com/DataDog/datadog-agent/cmd/agent/api/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAgentClient is a mock of AgentClient interface
type MockAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentClientMockRecorder
}

// MockAgentClientMockRecorder is the mock recorder for MockAgentClient
type MockAgentClientMockRecorder struct {
	mock *MockAgentClient
}

// NewMockAgentClient creates a new mock instance
func NewMockAgentClient(ctrl *gomock.Controller) *MockAgentClient {
	mock := &MockAgentClient{ctrl: ctrl}
	mock.recorder = &MockAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentClient) EXPECT() *MockAgentClientMockRecorder {
	return m.recorder
}

// GetHostname mocks base method
func (m *MockAgentClient) GetHostname(arg0 context.Context, arg1 *pb.HostnameRequest, arg2 ...grpc.CallOption) (*pb.HostnameReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostname", varargs...)
	ret0, _ := ret[0].(*pb.HostnameReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostname indicates an expected call of GetHostname
func (mr *MockAgentClientMockRecorder) GetHostname(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostname", reflect.TypeOf((*MockAgentClient)(nil).GetHostname), varargs...)
}
