load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "run",
    srcs = [
        "command.go",
        "command_notwin.go",
        "command_windows.go",
        "dependent_services.go",
        "dependent_services_nix.go",
        "dependent_services_windows.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/cmd/agent/subcommands/run",
    visibility = ["//visibility:public"],
    deps = [
        "//cmd/agent/command",
        "//cmd/agent/common",
        "//cmd/agent/common/misconfig",
        "//cmd/agent/common/path",
        "//cmd/agent/common/signals",
        "//cmd/agent/subcommands/run/internal/clcrunnerapi",
        "//cmd/agent/subcommands/run/internal/settings",
        "//comp/agent",
        "//comp/agent/autoexit",
        "//comp/agent/cloudfoundrycontainer",
        "//comp/agent/expvarserver",
        "//comp/agent/jmxlogger",
        "//comp/agent/jmxlogger/jmxloggerimpl",
        "//comp/aggregator/demultiplexer",
        "//comp/aggregator/demultiplexer/demultiplexerimpl",
        "//comp/api/api",
        "//comp/api/api/apiimpl",
        "//comp/api/authtoken/createandfetchimpl",
        "//comp/collector/collector",
        "//comp/collector/collector/collectorimpl",
        "//comp/core",
        "//comp/core/agenttelemetry",
        "//comp/core/agenttelemetry/agenttelemetryimpl",
        "//comp/core/autodiscovery",
        "//comp/core/autodiscovery/autodiscoveryimpl",
        "//comp/core/autodiscovery/providers",
        "//comp/core/config",
        "//comp/core/flare",
        "//comp/core/gui/guiimpl",
        "//comp/core/healthprobe/def",
        "//comp/core/healthprobe/fx",
        "//comp/core/log",
        "//comp/core/log/logimpl",
        "//comp/core/pid",
        "//comp/core/pid/pidimpl",
        "//comp/core/secrets",
        "//comp/core/settings",
        "//comp/core/settings/settingsimpl",
        "//comp/core/status",
        "//comp/core/status/statusimpl",
        "//comp/core/sysprobeconfig",
        "//comp/core/sysprobeconfig/sysprobeconfigimpl",
        "//comp/core/tagger",
        "//comp/core/tagger/taggerimpl",
        "//comp/core/telemetry",
        "//comp/core/workloadmeta",
        "//comp/core/workloadmeta/collectors",
        "//comp/core/workloadmeta/defaults",
        "//comp/dogstatsd",
        "//comp/dogstatsd/replay",
        "//comp/dogstatsd/server",
        "//comp/dogstatsd/serverDebug",
        "//comp/dogstatsd/status/statusimpl",
        "//comp/forwarder",
        "//comp/forwarder/defaultforwarder",
        "//comp/forwarder/eventplatform/eventplatformimpl",
        "//comp/forwarder/eventplatformreceiver/eventplatformreceiverimpl",
        "//comp/forwarder/orchestrator/orchestratorimpl",
        "//comp/languagedetection/client",
        "//comp/languagedetection/client/clientimpl",
        "//comp/logs",
        "//comp/logs/adscheduler/adschedulerimpl",
        "//comp/logs/agent",
        "//comp/metadata",
        "//comp/metadata/host",
        "//comp/metadata/inventoryagent",
        "//comp/metadata/inventorychecks",
        "//comp/metadata/inventoryhost",
        "//comp/metadata/packagesigning",
        "//comp/metadata/runner",
        "//comp/ndmtmp",
        "//comp/netflow",
        "//comp/netflow/server",
        "//comp/networkpath",
        "//comp/otelcol",
        "//comp/otelcol/collector",
        "//comp/otelcol/logsagentpipeline",
        "//comp/process",
        "//comp/process/agent",
        "//comp/process/status/statusimpl",
        "//comp/remote-config",
        "//comp/remote-config/rcclient",
        "//comp/remote-config/rcservice/rcserviceimpl",
        "//comp/remote-config/rcservicemrf/rcservicemrfimpl",
        "//comp/remote-config/rctelemetryreporter/rctelemetryreporterimpl",
        "//comp/serializer/compression/compressionimpl",
        "//comp/snmptraps",
        "//comp/snmptraps/server",
        "//comp/trace/status/statusimpl",
        "//pkg/collector",
        "//pkg/collector/check",
        "//pkg/collector/corechecks/net",
        "//pkg/collector/corechecks/snmp/status",
        "//pkg/collector/python",
        "//pkg/commonchecks",
        "//pkg/config",
        "//pkg/config/remote/data",
        "//pkg/config/settings",
        "//pkg/jmxfetch",
        "//pkg/runtime",
        "//pkg/serializer",
        "//pkg/status/clusteragent",
        "//pkg/status/endpoints",
        "//pkg/status/health",
        "//pkg/status/httpproxy",
        "//pkg/status/jmx",
        "//pkg/status/systemprobe",
        "//pkg/telemetry",
        "//pkg/util",
        "//pkg/util/common",
        "//pkg/util/flavor",
        "//pkg/util/fxutil",
        "//pkg/util/hostname",
        "//pkg/util/installinfo",
        "//pkg/util/kubernetes/apiserver/leaderelection",
        "//pkg/util/log",
        "//pkg/util/optional",
        "//pkg/version",
        "@com_github_spf13_cobra//:cobra",
        "@in_gopkg_datadog_dd_trace_go_v1//profiler",
        "@org_uber_go_fx//:fx",
    ] + select({
        "@rules_go//go/platform:windows": [
            "//comp/checks/agentcrashdetect",
            "//comp/checks/agentcrashdetect/agentcrashdetectimpl",
            "//comp/checks/windowseventlog",
            "//comp/checks/windowseventlog/windowseventlogimpl",
            "//comp/checks/winregistry",
            "//comp/checks/winregistry/impl",
            "//comp/etw/impl",
            "//comp/trace/config",
            "//comp/trace/etwtracer",
            "//comp/trace/etwtracer/etwtracerimpl",
            "@org_golang_x_sys//windows",
            "@org_golang_x_sys//windows/svc/mgr",
        ],
        "//conditions:default": [],
    }),
)

go_test(
    name = "run_test",
    srcs = [
        "command_test.go",
        "command_windows_test.go",
    ],
    embed = [":run"],
    deps = [
        "//cmd/agent/command",
        "//comp/core",
        "//comp/core/pid/pidimpl",
        "//comp/core/secrets",
        "//pkg/util/fxutil",
        "@com_github_stretchr_testify//require",
    ],
)
