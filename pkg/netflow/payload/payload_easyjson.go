// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package payload

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload(in *jlexer.Lexer, out *ObservationPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interface":
			(out.Interface).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload(out *jwriter.Writer, in ObservationPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"interface\":"
		out.RawString(prefix[1:])
		(in.Interface).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObservationPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObservationPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload(l, v)
}
func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload1(in *jlexer.Lexer, out *NextHop) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload1(out *jwriter.Writer, in NextHop) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NextHop) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NextHop) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload1(l, v)
}
func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload2(in *jlexer.Lexer, out *Interface) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload2(out *jwriter.Writer, in Interface) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Index))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Interface) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Interface) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload2(l, v)
}
func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload3(in *jlexer.Lexer, out *FlowPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.FlowType = string(in.String())
		case "sampling_rate":
			out.SamplingRate = uint64(in.Uint64())
		case "direction":
			out.Direction = string(in.String())
		case "start":
			out.Start = uint64(in.Uint64())
		case "end":
			out.End = uint64(in.Uint64())
		case "bytes":
			out.Bytes = uint64(in.Uint64())
		case "packets":
			out.Packets = uint64(in.Uint64())
		case "ether_type":
			out.EtherType = string(in.String())
		case "ip_protocol":
			out.IPProtocol = string(in.String())
		case "device":
			(out.Device).UnmarshalEasyJSON(in)
		case "source":
			(out.Source).UnmarshalEasyJSON(in)
		case "destination":
			(out.Destination).UnmarshalEasyJSON(in)
		case "ingress":
			(out.Ingress).UnmarshalEasyJSON(in)
		case "egress":
			(out.Egress).UnmarshalEasyJSON(in)
		case "host":
			out.Host = string(in.String())
		case "tcp_flags":
			if in.IsNull() {
				in.Skip()
				out.TCPFlags = nil
			} else {
				in.Delim('[')
				if out.TCPFlags == nil {
					if !in.IsDelim(']') {
						out.TCPFlags = make([]string, 0, 4)
					} else {
						out.TCPFlags = []string{}
					}
				} else {
					out.TCPFlags = (out.TCPFlags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.TCPFlags = append(out.TCPFlags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "next_hopxxxx":
			(out.NextHop).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload3(out *jwriter.Writer, in FlowPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.FlowType))
	}
	{
		const prefix string = ",\"sampling_rate\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SamplingRate))
	}
	{
		const prefix string = ",\"direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.End))
	}
	{
		const prefix string = ",\"bytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Bytes))
	}
	{
		const prefix string = ",\"packets\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Packets))
	}
	if in.EtherType != "" {
		const prefix string = ",\"ether_type\":"
		out.RawString(prefix)
		out.String(string(in.EtherType))
	}
	{
		const prefix string = ",\"ip_protocol\":"
		out.RawString(prefix)
		out.String(string(in.IPProtocol))
	}
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		(in.Device).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		(in.Source).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		(in.Destination).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ingress\":"
		out.RawString(prefix)
		(in.Ingress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"egress\":"
		out.RawString(prefix)
		(in.Egress).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	if len(in.TCPFlags) != 0 {
		const prefix string = ",\"tcp_flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.TCPFlags {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"next_hop\":"
		out.RawString(prefix)
		(in.NextHop).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlowPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlowPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload3(l, v)
}
func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload4(in *jlexer.Lexer, out *Endpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint32(in.Uint32())
		case "mac":
			out.Mac = string(in.String())
		case "mask":
			out.Mask = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload4(out *jwriter.Writer, in Endpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Port))
	}
	{
		const prefix string = ",\"mac\":"
		out.RawString(prefix)
		out.String(string(in.Mac))
	}
	{
		const prefix string = ",\"mask\":"
		out.RawString(prefix)
		out.String(string(in.Mask))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Endpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Endpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload4(l, v)
}
func easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload5(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload5(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComDataDogDatadogAgentPkgNetflowPayload5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComDataDogDatadogAgentPkgNetflowPayload5(l, v)
}
