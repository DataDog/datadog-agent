load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "system",
    srcs = [
        "collector_disk_linux.go",
        "collector_linux.go",
        "collector_network_linux.go",
        "containerid_linux.go",
        "doc.go",
        "filter_container.go",
        "util.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/pkg/util/containers/metrics/system",
    visibility = ["//visibility:public"],
    deps = select({
        "@rules_go//go/platform:android": [
            "//comp/core/workloadmeta/def",
            "//pkg/config/env",
            "//pkg/config/setup",
            "//pkg/util/cache",
            "//pkg/util/cgroups",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/filesystem",
            "//pkg/util/log",
            "//pkg/util/option",
            "//pkg/util/pointer",
            "//pkg/util/system",
            "//pkg/util/trie",
            "@com_github_hashicorp_go_multierror//:go-multierror",
        ],
        "@rules_go//go/platform:linux": [
            "//comp/core/workloadmeta/def",
            "//pkg/config/env",
            "//pkg/config/setup",
            "//pkg/util/cache",
            "//pkg/util/cgroups",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/filesystem",
            "//pkg/util/log",
            "//pkg/util/option",
            "//pkg/util/pointer",
            "//pkg/util/system",
            "//pkg/util/trie",
            "@com_github_hashicorp_go_multierror//:go-multierror",
        ],
        "//conditions:default": [],
    }),
)

go_test(
    name = "system_test",
    srcs = [
        "collector_disk_linux_test.go",
        "collector_linux_test.go",
        "collector_network_linux_test.go",
        "containerid_linux_test.go",
        "filter_container_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":system"],
    deps = select({
        "@rules_go//go/platform:android": [
            "//comp/core/config",
            "//comp/core/log/def",
            "//comp/core/log/mock",
            "//comp/core/workloadmeta/def",
            "//comp/core/workloadmeta/fx-mock",
            "//comp/core/workloadmeta/mock",
            "//pkg/util/cache",
            "//pkg/util/cgroups",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/fxutil",
            "//pkg/util/pointer",
            "//pkg/util/system",
            "//pkg/util/testutil",
            "@com_github_google_go_cmp//cmp",
            "@com_github_stretchr_testify//assert",
            "@com_github_stretchr_testify//require",
            "@com_github_stretchr_testify//suite",
            "@org_uber_go_fx//:fx",
        ],
        "@rules_go//go/platform:linux": [
            "//comp/core/config",
            "//comp/core/log/def",
            "//comp/core/log/mock",
            "//comp/core/workloadmeta/def",
            "//comp/core/workloadmeta/fx-mock",
            "//comp/core/workloadmeta/mock",
            "//pkg/util/cache",
            "//pkg/util/cgroups",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/fxutil",
            "//pkg/util/pointer",
            "//pkg/util/system",
            "//pkg/util/testutil",
            "@com_github_google_go_cmp//cmp",
            "@com_github_stretchr_testify//assert",
            "@com_github_stretchr_testify//require",
            "@com_github_stretchr_testify//suite",
            "@org_uber_go_fx//:fx",
        ],
        "//conditions:default": [],
    }),
)
