load("@rules_go//go:def.bzl", "go_library")

go_library(
    name = "messagestrings",
    srcs = [
        "messages.go",
        "messagestrings.h",
    ],
    cgo = True,
    importpath = "github.com/DataDog/datadog-agent/pkg/util/winutil/messagestrings",
    visibility = ["//visibility:public"],
)

# These rules implement the windows resource generation based on the existing
# code under /tasks/windows_resources.py
# TODO: "hermetize" the usage of these two tools (windmc and windres, from binutils)
genrule(
    name = "messagestrings_resources",
    srcs = ["messagestrings.mc"],
    outs = [
        "messagestrings.h",
        "messagestrings.rc",
    ],
    cmd_bat = """
    windmc --target pe-x86-64 -r $(RULEDIR) -h $(RULEDIR) $<
    """,
)

genrule(
    name = "messagestrings_coff",
    srcs = ["messagestrings.rc"],
    outs = ["rsrc.syso"],
    cmd_bat = """
    windres --target pe-x86-64 -i $< -O coff -o $@
    """,
)
