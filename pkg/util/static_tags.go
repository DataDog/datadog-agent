package util

import (
	"context"
	"strings"

	"github.com/DataDog/datadog-agent/pkg/config"
	"github.com/DataDog/datadog-agent/pkg/util/fargate"
	"github.com/DataDog/datadog-agent/pkg/util/kubernetes/clustername"
	"github.com/DataDog/datadog-agent/pkg/util/log"
)

// GetStaticTags gets the "static tags" for this agent, represented as a
// name:value map.
//
// These are tags that are attached directly to everything the agent produces,
// but _not_ included in host tags.  In environments with no host metadata
// (such as where the hostname is empty), tags that would otherwise be included
// in host metadata are generated by this function.
func GetStaticTags(ctx context.Context) map[string]string {
	// fargate (ECS or EKS) does not have host tags, so we need to
	// add static tags to each container manually

	if !fargate.IsFargateInstance(ctx) {
		return nil
	}

	tags := make(map[string]string)

	// DD_TAGS / DD_EXTRA_TAGS
	for _, tag := range config.GetConfiguredTags(false) {
		tagParts := strings.SplitN(tag, ":", 2)
		if len(tagParts) != 2 {
			log.Warnf("Cannot split tag %s", tag)
			continue
		}
		tags[tagParts[0]] = tagParts[1]
	}

	// EKS Fargate specific tags
	if fargate.IsEKSFargateInstance() {
		// eks_fargate_node
		node, err := fargate.GetEKSFargateNodename()
		if err != nil {
			log.Infof("Couldn't build the 'eks_fargate_node' tag: %w", err)
		} else {
			tags["eks_fargate_node"] = node
		}

		// kube_cluster_name
		clusterTagName := "kube_cluster_name"
		tag, found := tags[clusterTagName]
		if found {
			log.Infof("'%s:%s' was set manually via DD_TAGS, not changing it", clusterTagName, tag)
		} else {
			cluster := clustername.GetClusterName(ctx, "")
			if cluster == "" {
				log.Infof("Couldn't build the %q tag, DD_CLUSTER_NAME can be used to set it", clusterTagName)
			} else {
				tags[clusterTagName] = cluster
			}
		}
	}

	return tags
}

// GetStaticTagsSlice is similar to GetStaticTags, but returning a []string
//
// Note that tags not of the form <key>:<value> will be omitted.
func GetStaticTagsSlice(ctx context.Context) []string {
	tags := GetStaticTags(ctx)
	if tags == nil {
		return nil
	}

	slice := make([]string, 0, len(tags))
	for n, v := range tags {
		slice = append(slice, n+":"+v)
	}
	return slice
}
