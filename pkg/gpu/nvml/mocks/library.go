// Code generated by mockery v2.40.1. DO NOT EDIT.

//go:build test

package mocks

import (
	nvml "github.com/DataDog/datadog-agent/pkg/gpu/nvml"
	mock "github.com/stretchr/testify/mock"
)

// Library is an autogenerated mock type for the Library type
type Library struct {
	mock.Mock
}

type Library_Expecter struct {
	mock *mock.Mock
}

func (_m *Library) EXPECT() *Library_Expecter {
	return &Library_Expecter{mock: &_m.Mock}
}

// GetGpuDevices provides a mock function with given fields:
func (_m *Library) GetGpuDevices() ([]nvml.GpuDevice, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGpuDevices")
	}

	var r0 []nvml.GpuDevice
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]nvml.GpuDevice, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []nvml.GpuDevice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nvml.GpuDevice)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Library_GetGpuDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGpuDevices'
type Library_GetGpuDevices_Call struct {
	*mock.Call
}

// GetGpuDevices is a helper method to define mock.On call
func (_e *Library_Expecter) GetGpuDevices() *Library_GetGpuDevices_Call {
	return &Library_GetGpuDevices_Call{Call: _e.mock.On("GetGpuDevices")}
}

func (_c *Library_GetGpuDevices_Call) Run(run func()) *Library_GetGpuDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Library_GetGpuDevices_Call) Return(_a0 []nvml.GpuDevice, _a1 error) *Library_GetGpuDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Library_GetGpuDevices_Call) RunAndReturn(run func() ([]nvml.GpuDevice, error)) *Library_GetGpuDevices_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields:
func (_m *Library) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Library_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Library_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Library_Expecter) Init() *Library_Init_Call {
	return &Library_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Library_Init_Call) Run(run func()) *Library_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Library_Init_Call) Return(_a0 error) *Library_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Library_Init_Call) RunAndReturn(run func() error) *Library_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *Library) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Library_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Library_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *Library_Expecter) Shutdown() *Library_Shutdown_Call {
	return &Library_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *Library_Shutdown_Call) Run(run func()) *Library_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Library_Shutdown_Call) Return(_a0 error) *Library_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Library_Shutdown_Call) RunAndReturn(run func() error) *Library_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewLibrary creates a new instance of Library. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLibrary(t interface {
	mock.TestingT
	Cleanup(func())
}) *Library {
	mock := &Library{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
