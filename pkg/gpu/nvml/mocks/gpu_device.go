// Code generated by mockery v2.40.1. DO NOT EDIT.

//go:build test

package mocks

import mock "github.com/stretchr/testify/mock"

// GpuDevice is an autogenerated mock type for the GpuDevice type
type GpuDevice struct {
	mock.Mock
}

type GpuDevice_Expecter struct {
	mock *mock.Mock
}

func (_m *GpuDevice) EXPECT() *GpuDevice_Expecter {
	return &GpuDevice_Expecter{mock: &_m.Mock}
}

// GetMaxThreads provides a mock function with given fields:
func (_m *GpuDevice) GetMaxThreads() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxThreads")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GpuDevice_GetMaxThreads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxThreads'
type GpuDevice_GetMaxThreads_Call struct {
	*mock.Call
}

// GetMaxThreads is a helper method to define mock.On call
func (_e *GpuDevice_Expecter) GetMaxThreads() *GpuDevice_GetMaxThreads_Call {
	return &GpuDevice_GetMaxThreads_Call{Call: _e.mock.On("GetMaxThreads")}
}

func (_c *GpuDevice_GetMaxThreads_Call) Run(run func()) *GpuDevice_GetMaxThreads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GpuDevice_GetMaxThreads_Call) Return(_a0 int, _a1 error) *GpuDevice_GetMaxThreads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GpuDevice_GetMaxThreads_Call) RunAndReturn(run func() (int, error)) *GpuDevice_GetMaxThreads_Call {
	_c.Call.Return(run)
	return _c
}

// GetNumMultiprocessors provides a mock function with given fields:
func (_m *GpuDevice) GetNumMultiprocessors() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNumMultiprocessors")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GpuDevice_GetNumMultiprocessors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumMultiprocessors'
type GpuDevice_GetNumMultiprocessors_Call struct {
	*mock.Call
}

// GetNumMultiprocessors is a helper method to define mock.On call
func (_e *GpuDevice_Expecter) GetNumMultiprocessors() *GpuDevice_GetNumMultiprocessors_Call {
	return &GpuDevice_GetNumMultiprocessors_Call{Call: _e.mock.On("GetNumMultiprocessors")}
}

func (_c *GpuDevice_GetNumMultiprocessors_Call) Run(run func()) *GpuDevice_GetNumMultiprocessors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GpuDevice_GetNumMultiprocessors_Call) Return(_a0 int, _a1 error) *GpuDevice_GetNumMultiprocessors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GpuDevice_GetNumMultiprocessors_Call) RunAndReturn(run func() (int, error)) *GpuDevice_GetNumMultiprocessors_Call {
	_c.Call.Return(run)
	return _c
}

// NewGpuDevice creates a new instance of GpuDevice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGpuDevice(t interface {
	mock.TestingT
	Cleanup(func())
}) *GpuDevice {
	mock := &GpuDevice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
