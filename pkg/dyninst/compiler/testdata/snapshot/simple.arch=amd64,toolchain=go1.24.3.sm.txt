// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessExpression[Probe[main.PointerChainArg]@0x4a8046.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 57 04 00 00 // ProcessType[*****int]
	Return 
// 0x1e: ProcessEvent[Probe[main.PointerChainArg]@4a8046]
	PrepareEventRoot d3 00 00 00 09 00 00 00 
	Call 03 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0x4a8046.expr[0]]
	Return 
// 0x2d: ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a8090.expr[0]]
	ExprPrepare 
	ExprReadRegister 01 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 69 04 00 00 // ProcessType[**int]
	Return 
// 0x48: ProcessEvent[Probe[main.PointerSmallChainArg]@4a8090]
	PrepareEventRoot d4 00 00 00 09 00 00 00 
	Call 2d 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a8090.expr[0]]
	Return 
// 0x57: ProcessExpression[Probe[main.bigMapArg]@0x4a8553.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 49 06 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x72: ProcessEvent[Probe[main.bigMapArg]@4a8553]
	PrepareEventRoot cb 00 00 00 09 00 00 00 
	Call 57 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0x4a8553.expr[0]]
	Return 
// 0x81: ProcessEvent[Probe[main.bigMapArg]Return@4a85de]
	PrepareEventRoot cc 00 00 00 00 00 00 00 
	Return 
// 0x8b: ProcessExpression[Probe[main.inlined]@0x4a7e0e.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0x9b: ProcessEvent[Probe[main.inlined]@4a7e0e]
	PrepareEventRoot d1 00 00 00 09 00 00 00 
	Call 8b 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a7e0e.expr[0]]
	Return 
// 0xaa: ProcessExpression[Probe[main.inlined]@0x4a842a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xc0: ProcessEvent[Probe[main.inlined]@4a842a]
	PrepareEventRoot d1 00 00 00 09 00 00 00 
	Call aa 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a842a.expr[0]]
	Return 
// 0xcf: ProcessEvent[Probe[main.inlined]Return@4a846a]
	PrepareEventRoot d2 00 00 00 00 00 00 00 
	Return 
// 0xd9: ProcessExpression[Probe[main.intArg]@0x4a810a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xef: ProcessEvent[Probe[main.intArg]@4a810a]
	PrepareEventRoot b2 00 00 00 09 00 00 00 
	Call d9 00 00 00 // ProcessExpression[Probe[main.intArg]@0x4a810a.expr[0]]
	Return 
// 0xfe: ProcessEvent[Probe[main.intArg]Return@4a814a]
	PrepareEventRoot b3 00 00 00 00 00 00 00 
	Return 
// 0x108: ProcessExpression[Probe[main.intArrayArg]@0x4a828a.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x124: ProcessEvent[Probe[main.intArrayArg]@4a828a]
	PrepareEventRoot c2 00 00 00 19 00 00 00 
	Call 08 01 00 00 // ProcessExpression[Probe[main.intArrayArg]@0x4a828a.expr[0]]
	Return 
// 0x133: ProcessEvent[Probe[main.intArrayArg]Return@4a82d6]
	PrepareEventRoot c3 00 00 00 00 00 00 00 
	Return 
// 0x13d: ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a8400.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 43 05 00 00 // ProcessType[[3]string]
	Return 
// 0x15e: ProcessEvent[Probe[main.stringArrayArgFrameless]@4a8400]
	PrepareEventRoot c8 00 00 00 31 00 00 00 
	Call 3d 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a8400.expr[0]]
	Return 
// 0x16d: ProcessExpression[Probe[main.intSliceArg]@0x4a820a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 83 05 00 00 // ProcessType[[]int]
	Return 
// 0x196: ProcessEvent[Probe[main.intSliceArg]@4a820a]
	PrepareEventRoot c0 00 00 00 19 00 00 00 
	Call 6d 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0x4a820a.expr[0]]
	Return 
// 0x1a5: ProcessEvent[Probe[main.intSliceArg]Return@4a824f]
	PrepareEventRoot c1 00 00 00 00 00 00 00 
	Return 
// 0x1af: ProcessExpression[Probe[main.mapArg]@0x4a84ea.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 43 06 00 00 // ProcessType[map[string]int]
	Return 
// 0x1ca: ProcessEvent[Probe[main.mapArg]@4a84ea]
	PrepareEventRoot c9 00 00 00 09 00 00 00 
	Call af 01 00 00 // ProcessExpression[Probe[main.mapArg]@0x4a84ea.expr[0]]
	Return 
// 0x1d9: ProcessEvent[Probe[main.mapArg]Return@4a851f]
	PrepareEventRoot ca 00 00 00 00 00 00 00 
	Return 
// 0x1e3: ProcessEvent[Probe[main.noArgs]@4a860a]
	PrepareEventRoot cd 00 00 00 00 00 00 00 
	Return 
// 0x1ed: ProcessEvent[Probe[main.noArgs]Return@4a8646]
	PrepareEventRoot ce 00 00 00 00 00 00 00 
	Return 
// 0x1f7: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x219: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot b4 00 00 00 11 00 00 00 
	Call f7 01 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x228: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot b5 00 00 00 00 00 00 00 
	Return 
// 0x232: ProcessExpression[Probe[main.stringArrayArg]@0x4a838a.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 43 05 00 00 // ProcessType[[3]string]
	Return 
// 0x253: ProcessEvent[Probe[main.stringArrayArg]@4a838a]
	PrepareEventRoot c6 00 00 00 31 00 00 00 
	Call 32 02 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0x4a838a.expr[0]]
	Return 
// 0x262: ProcessEvent[Probe[main.stringArrayArg]Return@4a83d6]
	PrepareEventRoot c7 00 00 00 00 00 00 00 
	Return 
// 0x26c: ProcessExpression[Probe[main.stringSliceArg]@0x4a830a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call b1 05 00 00 // ProcessType[[]string]
	Return 
// 0x295: ProcessEvent[Probe[main.stringSliceArg]@4a830a]
	PrepareEventRoot c4 00 00 00 19 00 00 00 
	Call 6c 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0x4a830a.expr[0]]
	Return 
// 0x2a4: ProcessEvent[Probe[main.stringSliceArg]Return@4a834f]
	PrepareEventRoot c5 00 00 00 00 00 00 00 
	Return 
// 0x2ae: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x2d0: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot b6 00 00 00 11 00 00 00 
	Call ae 02 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x2df: ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x2f4: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot b7 00 00 00 11 00 00 00 
	Call df 02 00 00 // ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	Return 
// 0x303: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x325: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot b8 00 00 00 11 00 00 00 
	Call 03 03 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x334: ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x349: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot b9 00 00 00 11 00 00 00 
	Call 34 03 00 00 // ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	Return 
// 0x358: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x37a: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot ba 00 00 00 11 00 00 00 
	Call 58 03 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x389: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot bb 00 00 00 00 00 00 00 
	Return 
// 0x393: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x3b5: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot bc 00 00 00 11 00 00 00 
	Call 93 03 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x3c4: ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x3d9: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot bd 00 00 00 11 00 00 00 
	Call c4 03 00 00 // ProcessExpression[Probe[main.stringArg]Return@0x4a81cf.expr[0]]
	Return 
// 0x3e8: ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x40a: ProcessEvent[Probe[main.stringArg]@4a818a]
	PrepareEventRoot be 00 00 00 11 00 00 00 
	Call e8 03 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a818a.expr[0]]
	Return 
// 0x419: ProcessEvent[Probe[main.stringArg]Return@4a81cf]
	PrepareEventRoot bf 00 00 00 00 00 00 00 
	Return 
// 0x423: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]@4a8676]
	PrepareEventRoot cf 00 00 00 00 00 00 00 
	Return 
// 0x42d: ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0x4a883c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 4f 06 00 00 // ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x448: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@4a883c]
	PrepareEventRoot d0 00 00 00 09 00 00 00 
	Call 2d 04 00 00 // ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0x4a883c.expr[0]]
	Return 
// 0x457: ProcessType[*****int]
	ProcessPointer 7c 00 00 00 
	Return 
// 0x45d: ProcessType[****int]
	ProcessPointer b0 00 00 00 
	Return 
// 0x463: ProcessType[***int]
	ProcessPointer 7d 00 00 00 
	Return 
// 0x469: ProcessType[**int]
	ProcessPointer 62 00 00 00 
	Return 
// 0x46f: ProcessType[*[]runtime.ancestorInfo]
	ProcessPointer 28 00 00 00 
	Return 
// 0x475: ProcessType[*bool]
	ProcessPointer 04 00 00 00 
	Return 
// 0x47b: ProcessType[*error]
	ProcessPointer 0d 00 00 00 
	Return 
// 0x481: ProcessType[*float32]
	ProcessPointer 11 00 00 00 
	Return 
// 0x487: ProcessType[*float64]
	ProcessPointer 12 00 00 00 
	Return 
// 0x48d: ProcessType[*int]
	ProcessPointer 07 00 00 00 
	Return 
// 0x493: ProcessType[*int32]
	ProcessPointer 0a 00 00 00 
	Return 
// 0x499: ProcessType[*int64]
	ProcessPointer 0c 00 00 00 
	Return 
// 0x49f: ProcessType[*main.bigStruct]
	ProcessPointer 97 00 00 00 
	Return 
// 0x4a5: ProcessType[*runtime._defer]
	ProcessPointer 1b 00 00 00 
	Return 
// 0x4ab: ProcessType[*runtime._panic]
	ProcessPointer 19 00 00 00 
	Return 
// 0x4b1: ProcessType[*runtime.cgoCallers]
	ProcessPointer 3f 00 00 00 
	Return 
// 0x4b7: ProcessType[*runtime.coro]
	ProcessPointer 30 00 00 00 
	Return 
// 0x4bd: ProcessType[*runtime.g]
	ProcessPointer 16 00 00 00 
	Return 
// 0x4c3: ProcessType[*runtime.m]
	ProcessPointer 1d 00 00 00 
	Return 
// 0x4c9: ProcessType[*runtime.sudog]
	ProcessPointer 2a 00 00 00 
	Return 
// 0x4cf: ProcessType[*runtime.synctestGroup]
	ProcessPointer 32 00 00 00 
	Return 
// 0x4d5: ProcessType[*runtime.timer]
	ProcessPointer 2d 00 00 00 
	Return 
// 0x4db: ProcessType[*runtime.traceBuf]
	ProcessPointer 4d 00 00 00 
	Return 
// 0x4e1: ProcessType[*string]
	ProcessPointer 09 00 00 00 
	Return 
// 0x4e7: ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessPointer a7 00 00 00 
	Return 
// 0x4ed: ProcessType[*table<string,int>]
	ProcessPointer 88 00 00 00 
	Return 
// 0x4f3: ProcessType[*table<string,main.bigStruct>]
	ProcessPointer 90 00 00 00 
	Return 
// 0x4f9: ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessPointer 9a 00 00 00 
	Return 
// 0x4ff: ProcessType[*uint]
	ProcessPointer 10 00 00 00 
	Return 
// 0x505: ProcessType[*uint16]
	ProcessPointer 06 00 00 00 
	Return 
// 0x50b: ProcessType[*uint32]
	ProcessPointer 02 00 00 00 
	Return 
// 0x511: ProcessType[*uint64]
	ProcessPointer 08 00 00 00 
	Return 
// 0x517: ProcessType[*uint8]
	ProcessPointer 03 00 00 00 
	Return 
// 0x51d: ProcessType[*uintptr]
	ProcessPointer 01 00 00 00 
	Return 
// 0x523: ProcessType[[2]*runtime.traceBuf]
	ProcessArrayDataPrep 10 00 00 00 
	Call db 04 00 00 // ProcessType[*runtime.traceBuf]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x533: ProcessType[[2][2]*runtime.traceBuf]
	ProcessArrayDataPrep 20 00 00 00 
	Call 23 05 00 00 // ProcessType[[2]*runtime.traceBuf]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x543: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x553: ProcessType[[]*table<int,main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call e7 04 00 00 // ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x55f: ProcessType[[]*table<string,int>.array]
	ProcessSliceDataPrep 
	Call ed 04 00 00 // ProcessType[*table<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x56b: ProcessType[[]*table<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call f3 04 00 00 // ProcessType[*table<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x577: ProcessType[[]*table<uint8,map[int]main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call f9 04 00 00 // ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x583: ProcessType[[]int]
	ProcessSlice 84 00 00 00 08 00 00 00 
	Return 
// 0x58d: ProcessType[[]noalg.map.group[string]int.array]
	ProcessSliceDataPrep 
	Call 85 06 00 00 // ProcessType[noalg.map.group[string]int]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x599: ProcessType[[]noalg.map.group[string]main.bigStruct.array]
	ProcessSliceDataPrep 
	Call 90 06 00 00 // ProcessType[noalg.map.group[string]main.bigStruct]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x5a5: ProcessType[[]noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument.array]
	ProcessSliceDataPrep 
	Call 9b 06 00 00 // ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x5b1: ProcessType[[]string]
	ProcessSlice 86 00 00 00 10 00 00 00 
	Return 
// 0x5bb: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call a7 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x5c7: ProcessType[[]uint8]
	ProcessSlice 80 00 00 00 01 00 00 00 
	Return 
// 0x5d1: ProcessType[[]uintptr]
	ProcessSlice 82 00 00 00 08 00 00 00 
	Return 
// 0x5db: ProcessType[error]
	ProcessGoInterface 
	Return 
// 0x5dd: ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups af 00 00 00 88 00 00 00 00 08 
	Return 
// 0x5e9: ProcessType[groupReference<string,int>]
	ProcessGoSwissMapGroups 8f 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x5f5: ProcessType[groupReference<string,main.bigStruct>]
	ProcessGoSwissMapGroups 99 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x601: ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups a6 00 00 00 88 00 00 00 00 08 
	Return 
// 0x60d: ProcessType[map<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap ae 00 00 00 aa 00 00 00 10 18 
	Return 
// 0x619: ProcessType[map<string,int>]
	ProcessGoSwissMap 8e 00 00 00 8b 00 00 00 10 18 
	Return 
// 0x625: ProcessType[map<string,main.bigStruct>]
	ProcessGoSwissMap 98 00 00 00 93 00 00 00 10 18 
	Return 
// 0x631: ProcessType[map<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap a5 00 00 00 9d 00 00 00 10 18 
	Return 
// 0x63d: ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer a2 00 00 00 
	Return 
// 0x643: ProcessType[map[string]int]
	ProcessPointer 6e 00 00 00 
	Return 
// 0x649: ProcessType[map[string]main.bigStruct]
	ProcessPointer 73 00 00 00 
	Return 
// 0x64f: ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer 78 00 00 00 
	Return 
// 0x655: ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	ProcessArrayDataPrep c0 00 00 00 
	Call a6 06 00 00 // ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x665: ProcessType[noalg.[8]struct { key string; elem int }]
	ProcessArrayDataPrep c0 00 00 00 
	Call b6 06 00 00 // ProcessType[noalg.struct { key string; elem int }]
	ProcessSliceDataRepeat 18 00 00 00 
	Return 
// 0x675: ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessArrayDataPrep 80 00 00 00 
	Call bc 06 00 00 // ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x685: ProcessType[noalg.map.group[string]int]
	IncrementOutputOffset 08 00 00 00 
	Call 65 06 00 00 // ProcessType[noalg.[8]struct { key string; elem int }]
	Return 
// 0x690: ProcessType[noalg.map.group[string]main.bigStruct]
	IncrementOutputOffset 08 00 00 00 
	Call 55 06 00 00 // ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	Return 
// 0x69b: ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	IncrementOutputOffset 08 00 00 00 
	Call 75 06 00 00 // ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	Return 
// 0x6a6: ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	Call a7 07 00 00 // ProcessType[string]
	IncrementOutputOffset 10 00 00 00 
	Call 9f 04 00 00 // ProcessType[*main.bigStruct]
	Return 
// 0x6b6: ProcessType[noalg.struct { key string; elem int }]
	Call a7 07 00 00 // ProcessType[string]
	Return 
// 0x6bc: ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	IncrementOutputOffset 08 00 00 00 
	Call 3d 06 00 00 // ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x6c7: ProcessType[runtime.g]
	IncrementOutputOffset 20 00 00 00 
	Call ab 04 00 00 // ProcessType[*runtime._panic]
	IncrementOutputOffset 08 00 00 00 
	Call a5 04 00 00 // ProcessType[*runtime._defer]
	IncrementOutputOffset 08 00 00 00 
	Call c3 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset b8 00 00 00 
	Call c7 05 00 00 // ProcessType[[]uint8]
	IncrementOutputOffset 40 00 00 00 
	Call 6f 04 00 00 // ProcessType[*[]runtime.ancestorInfo]
	IncrementOutputOffset 18 00 00 00 
	Call c9 04 00 00 // ProcessType[*runtime.sudog]
	IncrementOutputOffset 08 00 00 00 
	Call d1 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 20 00 00 00 
	Call d5 04 00 00 // ProcessType[*runtime.timer]
	IncrementOutputOffset 18 00 00 00 
	Call b7 04 00 00 // ProcessType[*runtime.coro]
	IncrementOutputOffset 08 00 00 00 
	Call cf 04 00 00 // ProcessType[*runtime.synctestGroup]
	Return 
// 0x72c: ProcessType[runtime.m]
	Call bd 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 50 00 00 00 
	Call bd 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 70 00 00 00 
	Call bd 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 38 00 00 00 
	Call a7 07 00 00 // ProcessType[string]
	IncrementOutputOffset 40 00 00 00 
	Call b1 04 00 00 // ProcessType[*runtime.cgoCallers]
	IncrementOutputOffset 10 00 00 00 
	Call c3 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 28 01 00 00 
	Call 8c 07 00 00 // ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 38 00 00 00 
	Call d1 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 38 00 00 00 
	Call c3 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 08 00 00 00 
	Call 97 07 00 00 // ProcessType[runtime.mTraceState]
	Return 
// 0x78c: ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 08 00 00 00 
	Call d1 05 00 00 // ProcessType[[]uintptr]
	Return 
// 0x797: ProcessType[runtime.mTraceState]
	IncrementOutputOffset 08 00 00 00 
	Call 33 05 00 00 // ProcessType[[2][2]*runtime.traceBuf]
	Call c3 04 00 00 // ProcessType[*runtime.m]
	Return 
// 0x7a7: ProcessType[string]
	ProcessString 7e 00 00 00 
	Return 
// 0x7ad: ProcessType[table<int,main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call dd 05 00 00 // ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	Return 
// 0x7b8: ProcessType[table<string,int>]
	IncrementOutputOffset 10 00 00 00 
	Call e9 05 00 00 // ProcessType[groupReference<string,int>]
	Return 
// 0x7c3: ProcessType[table<string,main.bigStruct>]
	IncrementOutputOffset 10 00 00 00 
	Call f5 05 00 00 // ProcessType[groupReference<string,main.bigStruct>]
	Return 
// 0x7ce: ProcessType[table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call 01 06 00 00 // ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 4 Enqueue: 0
ID: 3 Len: 1 Enqueue: 0
ID: 4 Len: 1 Enqueue: 0
ID: 5 Len: 8 Enqueue: 1303
ID: 6 Len: 2 Enqueue: 0
ID: 7 Len: 8 Enqueue: 0
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 16 Enqueue: 1959
ID: 10 Len: 4 Enqueue: 0
ID: 11 Len: 8 Enqueue: 1141
ID: 12 Len: 8 Enqueue: 0
ID: 13 Len: 16 Enqueue: 1499
ID: 14 Len: 8 Enqueue: 0
ID: 15 Len: 1 Enqueue: 0
ID: 16 Len: 8 Enqueue: 0
ID: 17 Len: 4 Enqueue: 0
ID: 18 Len: 8 Enqueue: 0
ID: 19 Len: 8 Enqueue: 1309
ID: 20 Len: 8 Enqueue: 1171
ID: 21 Len: 8 Enqueue: 1291
ID: 22 Len: 440 Enqueue: 1735
ID: 23 Len: 16 Enqueue: 0
ID: 24 Len: 8 Enqueue: 1195
ID: 25 Len: 8 Enqueue: 0
ID: 26 Len: 8 Enqueue: 1189
ID: 27 Len: 8 Enqueue: 0
ID: 28 Len: 8 Enqueue: 1219
ID: 29 Len: 1808 Enqueue: 1836
ID: 30 Len: 56 Enqueue: 0
ID: 31 Len: 8 Enqueue: 0
ID: 32 Len: 4 Enqueue: 0
ID: 33 Len: 0 Enqueue: 0
ID: 34 Len: 1 Enqueue: 0
ID: 35 Len: 1 Enqueue: 0
ID: 36 Len: 1 Enqueue: 0
ID: 37 Len: 8 Enqueue: 0
ID: 38 Len: 24 Enqueue: 1479
ID: 39 Len: 8 Enqueue: 1135
ID: 40 Len: 8 Enqueue: 0
ID: 41 Len: 8 Enqueue: 1225
ID: 42 Len: 8 Enqueue: 0
ID: 43 Len: 24 Enqueue: 1489
ID: 44 Len: 8 Enqueue: 1237
ID: 45 Len: 8 Enqueue: 0
ID: 46 Len: 4 Enqueue: 0
ID: 47 Len: 8 Enqueue: 1207
ID: 48 Len: 8 Enqueue: 0
ID: 49 Len: 8 Enqueue: 1231
ID: 50 Len: 8 Enqueue: 0
ID: 51 Len: 32 Enqueue: 0
ID: 52 Len: 32 Enqueue: 0
ID: 53 Len: 12 Enqueue: 0
ID: 54 Len: 16 Enqueue: 0
ID: 55 Len: 8 Enqueue: 1213
ID: 56 Len: 40 Enqueue: 0
ID: 57 Len: 8 Enqueue: 0
ID: 58 Len: 48 Enqueue: 0
ID: 59 Len: 8 Enqueue: 0
ID: 60 Len: 8 Enqueue: 0
ID: 61 Len: 4 Enqueue: 0
ID: 62 Len: 8 Enqueue: 1201
ID: 63 Len: 8 Enqueue: 0
ID: 64 Len: 8 Enqueue: 0
ID: 65 Len: 256 Enqueue: 0
ID: 66 Len: 8 Enqueue: 0
ID: 67 Len: 64 Enqueue: 1932
ID: 68 Len: 8 Enqueue: 0
ID: 69 Len: 0 Enqueue: 0
ID: 70 Len: 8 Enqueue: 0
ID: 71 Len: 1 Enqueue: 0
ID: 72 Len: 56 Enqueue: 1943
ID: 73 Len: 8 Enqueue: 0
ID: 74 Len: 32 Enqueue: 1331
ID: 75 Len: 16 Enqueue: 1315
ID: 76 Len: 8 Enqueue: 1243
ID: 77 Len: 8 Enqueue: 0
ID: 78 Len: 48 Enqueue: 0
ID: 79 Len: 0 Enqueue: 0
ID: 80 Len: 392 Enqueue: 0
ID: 81 Len: 384 Enqueue: 0
ID: 82 Len: 192 Enqueue: 0
ID: 83 Len: 24 Enqueue: 0
ID: 84 Len: 0 Enqueue: 0
ID: 85 Len: 24 Enqueue: 0
ID: 86 Len: 304 Enqueue: 0
ID: 87 Len: 256 Enqueue: 0
ID: 88 Len: 32 Enqueue: 0
ID: 89 Len: 160 Enqueue: 0
ID: 90 Len: 16 Enqueue: 0
ID: 91 Len: 8 Enqueue: 0
ID: 92 Len: 0 Enqueue: 0
ID: 93 Len: 8 Enqueue: 1249
ID: 94 Len: 8 Enqueue: 0
ID: 95 Len: 16 Enqueue: 0
ID: 96 Len: 8 Enqueue: 1159
ID: 97 Len: 8 Enqueue: 1177
ID: 98 Len: 8 Enqueue: 1165
ID: 99 Len: 8 Enqueue: 1297
ID: 100 Len: 8 Enqueue: 1147
ID: 101 Len: 8 Enqueue: 1153
ID: 102 Len: 8 Enqueue: 1279
ID: 103 Len: 8 Enqueue: 1285
ID: 104 Len: 24 Enqueue: 1411
ID: 105 Len: 24 Enqueue: 0
ID: 106 Len: 24 Enqueue: 1457
ID: 107 Len: 48 Enqueue: 1347
ID: 108 Len: 8 Enqueue: 1603
ID: 109 Len: 8 Enqueue: 0
ID: 110 Len: 48 Enqueue: 1561
ID: 111 Len: 8 Enqueue: 0
ID: 112 Len: 8 Enqueue: 1261
ID: 113 Len: 8 Enqueue: 1609
ID: 114 Len: 8 Enqueue: 0
ID: 115 Len: 48 Enqueue: 1573
ID: 116 Len: 8 Enqueue: 0
ID: 117 Len: 8 Enqueue: 1267
ID: 118 Len: 8 Enqueue: 1615
ID: 119 Len: 8 Enqueue: 0
ID: 120 Len: 48 Enqueue: 1585
ID: 121 Len: 8 Enqueue: 0
ID: 122 Len: 8 Enqueue: 1273
ID: 123 Len: 8 Enqueue: 1111
ID: 124 Len: 8 Enqueue: 1117
ID: 125 Len: 8 Enqueue: 1129
ID: 126 Len: 1 Enqueue: 0
ID: 127 Len: 8 Enqueue: 0
ID: 128 Len: 1 Enqueue: 0
ID: 129 Len: 8 Enqueue: 0
ID: 130 Len: 8 Enqueue: 0
ID: 131 Len: 8 Enqueue: 0
ID: 132 Len: 8 Enqueue: 0
ID: 133 Len: 8 Enqueue: 0
ID: 134 Len: 16 Enqueue: 1467
ID: 135 Len: 8 Enqueue: 0
ID: 136 Len: 32 Enqueue: 1976
ID: 137 Len: 16 Enqueue: 1513
ID: 138 Len: 8 Enqueue: 0
ID: 139 Len: 200 Enqueue: 1669
ID: 140 Len: 192 Enqueue: 1637
ID: 141 Len: 24 Enqueue: 1718
ID: 142 Len: 8 Enqueue: 1375
ID: 143 Len: 200 Enqueue: 1421
ID: 144 Len: 32 Enqueue: 1987
ID: 145 Len: 16 Enqueue: 1525
ID: 146 Len: 8 Enqueue: 0
ID: 147 Len: 200 Enqueue: 1680
ID: 148 Len: 192 Enqueue: 1621
ID: 149 Len: 24 Enqueue: 1702
ID: 150 Len: 8 Enqueue: 1183
ID: 151 Len: 184 Enqueue: 0
ID: 152 Len: 8 Enqueue: 1387
ID: 153 Len: 200 Enqueue: 1433
ID: 154 Len: 32 Enqueue: 1998
ID: 155 Len: 16 Enqueue: 1537
ID: 156 Len: 8 Enqueue: 0
ID: 157 Len: 136 Enqueue: 1691
ID: 158 Len: 128 Enqueue: 1653
ID: 159 Len: 16 Enqueue: 1724
ID: 160 Len: 8 Enqueue: 1597
ID: 161 Len: 8 Enqueue: 0
ID: 162 Len: 48 Enqueue: 1549
ID: 163 Len: 8 Enqueue: 0
ID: 164 Len: 8 Enqueue: 1255
ID: 165 Len: 8 Enqueue: 1399
ID: 166 Len: 136 Enqueue: 1445
ID: 167 Len: 32 Enqueue: 1965
ID: 168 Len: 16 Enqueue: 1501
ID: 169 Len: 8 Enqueue: 0
ID: 170 Len: 136 Enqueue: 0
ID: 171 Len: 128 Enqueue: 0
ID: 172 Len: 16 Enqueue: 0
ID: 173 Len: 8 Enqueue: 0
ID: 174 Len: 8 Enqueue: 1363
ID: 175 Len: 136 Enqueue: 0
ID: 176 Len: 8 Enqueue: 1123
ID: 177 Len: 128 Enqueue: 0
ID: 178 Len: 9 Enqueue: 0
ID: 179 Len: 0 Enqueue: 0
ID: 180 Len: 17 Enqueue: 0
ID: 181 Len: 0 Enqueue: 0
ID: 182 Len: 17 Enqueue: 0
ID: 183 Len: 17 Enqueue: 0
ID: 184 Len: 17 Enqueue: 0
ID: 185 Len: 17 Enqueue: 0
ID: 186 Len: 17 Enqueue: 0
ID: 187 Len: 0 Enqueue: 0
ID: 188 Len: 17 Enqueue: 0
ID: 189 Len: 17 Enqueue: 0
ID: 190 Len: 17 Enqueue: 0
ID: 191 Len: 0 Enqueue: 0
ID: 192 Len: 25 Enqueue: 0
ID: 193 Len: 0 Enqueue: 0
ID: 194 Len: 25 Enqueue: 0
ID: 195 Len: 0 Enqueue: 0
ID: 196 Len: 25 Enqueue: 0
ID: 197 Len: 0 Enqueue: 0
ID: 198 Len: 49 Enqueue: 0
ID: 199 Len: 0 Enqueue: 0
ID: 200 Len: 49 Enqueue: 0
ID: 201 Len: 9 Enqueue: 0
ID: 202 Len: 0 Enqueue: 0
ID: 203 Len: 9 Enqueue: 0
ID: 204 Len: 0 Enqueue: 0
ID: 205 Len: 0 Enqueue: 0
ID: 206 Len: 0 Enqueue: 0
ID: 207 Len: 0 Enqueue: 0
ID: 208 Len: 9 Enqueue: 0
ID: 209 Len: 9 Enqueue: 0
ID: 210 Len: 0 Enqueue: 0
ID: 211 Len: 9 Enqueue: 0
ID: 212 Len: 9 Enqueue: 0
