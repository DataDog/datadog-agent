// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessExpression[Probe[main.PointerChainArg]@0x4a81e6.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 2f 04 00 00 // ProcessType[*****int]
	Return 
// 0x1e: ProcessEvent[Probe[main.PointerChainArg]@4a81e6]
	PrepareEventRoot d1 00 00 00 09 00 00 00 
	Call 03 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0x4a81e6.expr[0]]
	Return 
// 0x2d: ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a8230.expr[0]]
	ExprPrepare 
	ExprReadRegister 01 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 41 04 00 00 // ProcessType[**int]
	Return 
// 0x48: ProcessEvent[Probe[main.PointerSmallChainArg]@4a8230]
	PrepareEventRoot d2 00 00 00 09 00 00 00 
	Call 2d 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a8230.expr[0]]
	Return 
// 0x57: ProcessExpression[Probe[main.bigMapArg]@0x4a8773.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 2c 06 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x72: ProcessEvent[Probe[main.bigMapArg]@4a8773]
	PrepareEventRoot c3 00 00 00 09 00 00 00 
	Call 57 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0x4a8773.expr[0]]
	Return 
// 0x81: ProcessEvent[Probe[main.bigMapArg]Return@4a87fe]
	PrepareEventRoot c4 00 00 00 00 00 00 00 
	Return 
// 0x8b: ProcessExpression[Probe[main.inlined]@0x4a7fae.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0x9b: ProcessEvent[Probe[main.inlined]@4a7fae]
	PrepareEventRoot cf 00 00 00 09 00 00 00 
	Call 8b 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a7fae.expr[0]]
	Return 
// 0xaa: ProcessExpression[Probe[main.inlined]@0x4a864a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xc0: ProcessEvent[Probe[main.inlined]@4a864a]
	PrepareEventRoot cf 00 00 00 09 00 00 00 
	Call aa 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a864a.expr[0]]
	Return 
// 0xcf: ProcessEvent[Probe[main.inlined]Return@4a868a]
	PrepareEventRoot d0 00 00 00 00 00 00 00 
	Return 
// 0xd9: ProcessExpression[Probe[main.intArg]@0x4a832a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xef: ProcessEvent[Probe[main.intArg]@4a832a]
	PrepareEventRoot b4 00 00 00 09 00 00 00 
	Call d9 00 00 00 // ProcessExpression[Probe[main.intArg]@0x4a832a.expr[0]]
	Return 
// 0xfe: ProcessEvent[Probe[main.intArg]Return@4a836a]
	PrepareEventRoot b5 00 00 00 00 00 00 00 
	Return 
// 0x108: ProcessExpression[Probe[main.intArrayArg]@0x4a84aa.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x124: ProcessEvent[Probe[main.intArrayArg]@4a84aa]
	PrepareEventRoot ba 00 00 00 19 00 00 00 
	Call 08 01 00 00 // ProcessExpression[Probe[main.intArrayArg]@0x4a84aa.expr[0]]
	Return 
// 0x133: ProcessEvent[Probe[main.intArrayArg]Return@4a84f6]
	PrepareEventRoot bb 00 00 00 00 00 00 00 
	Return 
// 0x13d: ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a8620.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 1b 05 00 00 // ProcessType[[3]string]
	Return 
// 0x15e: ProcessEvent[Probe[main.stringArrayArgFrameless]@4a8620]
	PrepareEventRoot c0 00 00 00 31 00 00 00 
	Call 3d 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a8620.expr[0]]
	Return 
// 0x16d: ProcessExpression[Probe[main.intSliceArg]@0x4a842a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 5b 05 00 00 // ProcessType[[]int]
	Return 
// 0x196: ProcessEvent[Probe[main.intSliceArg]@4a842a]
	PrepareEventRoot b8 00 00 00 19 00 00 00 
	Call 6d 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0x4a842a.expr[0]]
	Return 
// 0x1a5: ProcessEvent[Probe[main.intSliceArg]Return@4a846f]
	PrepareEventRoot b9 00 00 00 00 00 00 00 
	Return 
// 0x1af: ProcessExpression[Probe[main.mapArg]@0x4a870a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 26 06 00 00 // ProcessType[map[string]int]
	Return 
// 0x1ca: ProcessEvent[Probe[main.mapArg]@4a870a]
	PrepareEventRoot c1 00 00 00 09 00 00 00 
	Call af 01 00 00 // ProcessExpression[Probe[main.mapArg]@0x4a870a.expr[0]]
	Return 
// 0x1d9: ProcessEvent[Probe[main.mapArg]Return@4a873f]
	PrepareEventRoot c2 00 00 00 00 00 00 00 
	Return 
// 0x1e3: ProcessEvent[Probe[main.noArgs]@4a882a]
	PrepareEventRoot c5 00 00 00 00 00 00 00 
	Return 
// 0x1ed: ProcessEvent[Probe[main.noArgs]Return@4a8866]
	PrepareEventRoot c6 00 00 00 00 00 00 00 
	Return 
// 0x1f7: ProcessExpression[Probe[main.stringArg]@0x4a83aa.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call 8a 07 00 00 // ProcessType[string]
	Return 
// 0x219: ProcessEvent[Probe[main.stringArg]@4a83aa]
	PrepareEventRoot b6 00 00 00 11 00 00 00 
	Call f7 01 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a83aa.expr[0]]
	Return 
// 0x228: ProcessEvent[Probe[main.stringArg]Return@4a83ef]
	PrepareEventRoot b7 00 00 00 00 00 00 00 
	Return 
// 0x232: ProcessExpression[Probe[main.stringArrayArg]@0x4a85aa.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 1b 05 00 00 // ProcessType[[3]string]
	Return 
// 0x253: ProcessEvent[Probe[main.stringArrayArg]@4a85aa]
	PrepareEventRoot be 00 00 00 31 00 00 00 
	Call 32 02 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0x4a85aa.expr[0]]
	Return 
// 0x262: ProcessEvent[Probe[main.stringArrayArg]Return@4a85f6]
	PrepareEventRoot bf 00 00 00 00 00 00 00 
	Return 
// 0x26c: ProcessExpression[Probe[main.stringSliceArg]@0x4a852a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 89 05 00 00 // ProcessType[[]string]
	Return 
// 0x295: ProcessEvent[Probe[main.stringSliceArg]@4a852a]
	PrepareEventRoot bc 00 00 00 19 00 00 00 
	Call 6c 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0x4a852a.expr[0]]
	Return 
// 0x2a4: ProcessEvent[Probe[main.stringSliceArg]Return@4a856f]
	PrepareEventRoot bd 00 00 00 00 00 00 00 
	Return 
// 0x2ae: ProcessExpression[Probe[main.templateTest]@0x4a8a8e.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call e5 05 00 00 // ProcessType[main.User]
	Return 
// 0x2d7: ProcessExpression[Probe[main.templateTest]@0x4a8a8e.expr[1]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x2ed: ProcessEvent[Probe[main.templateTest]@4a8a8e]
	PrepareEventRoot c9 00 00 00 21 00 00 00 
	Call ae 02 00 00 // ProcessExpression[Probe[main.templateTest]@0x4a8a8e.expr[0]]
	Call d7 02 00 00 // ProcessExpression[Probe[main.templateTest]@0x4a8a8e.expr[1]]
	Return 
// 0x301: ProcessEvent[Probe[main.templateTest]Return@4a8b25]
	PrepareEventRoot ca 00 00 00 00 00 00 00 
	Return 
// 0x30b: ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call e5 05 00 00 // ProcessType[main.User]
	Return 
// 0x334: ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[1]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x34a: ProcessEvent[Probe[main.templateTest2]@4a8b60]
	PrepareEventRoot cb 00 00 00 21 00 00 00 
	Call 0b 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[0]]
	Call 34 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[1]]
	Return 
// 0x35e: ProcessExpression[Probe[main.templateTest2]Return@0x4a8b65.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 02 00 00 00 00 
	ExprSave 01 00 00 00 02 00 00 00 00 00 00 00 
	Return 
// 0x374: ProcessEvent[Probe[main.templateTest2]Return@4a8b65]
	PrepareEventRoot cc 00 00 00 03 00 00 00 
	Call 5e 03 00 00 // ProcessExpression[Probe[main.templateTest2]Return@0x4a8b65.expr[0]]
	Return 
// 0x383: ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call e5 05 00 00 // ProcessType[main.User]
	Return 
// 0x3ac: ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[1]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x3c2: ProcessEvent[Probe[main.templateTest2]@4a8b60]
	PrepareEventRoot cd 00 00 00 21 00 00 00 
	Call 83 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[0]]
	Call ac 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0x4a8b60.expr[1]]
	Return 
// 0x3d6: ProcessExpression[Probe[main.templateTest2]Return@0x4a8b65.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 02 00 00 00 00 
	ExprSave 01 00 00 00 02 00 00 00 00 00 00 00 
	Return 
// 0x3ec: ProcessEvent[Probe[main.templateTest2]Return@4a8b65]
	PrepareEventRoot ce 00 00 00 03 00 00 00 
	Call d6 03 00 00 // ProcessExpression[Probe[main.templateTest2]Return@0x4a8b65.expr[0]]
	Return 
// 0x3fb: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]@4a8896]
	PrepareEventRoot c7 00 00 00 00 00 00 00 
	Return 
// 0x405: ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0x4a8a5c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 32 06 00 00 // ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x420: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@4a8a5c]
	PrepareEventRoot c8 00 00 00 09 00 00 00 
	Call 05 04 00 00 // ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0x4a8a5c.expr[0]]
	Return 
// 0x42f: ProcessType[*****int]
	ProcessPointer 7e 00 00 00 
	Return 
// 0x435: ProcessType[****int]
	ProcessPointer b2 00 00 00 
	Return 
// 0x43b: ProcessType[***int]
	ProcessPointer 7f 00 00 00 
	Return 
// 0x441: ProcessType[**int]
	ProcessPointer 62 00 00 00 
	Return 
// 0x447: ProcessType[*[]runtime.ancestorInfo]
	ProcessPointer 28 00 00 00 
	Return 
// 0x44d: ProcessType[*bool]
	ProcessPointer 04 00 00 00 
	Return 
// 0x453: ProcessType[*error]
	ProcessPointer 0d 00 00 00 
	Return 
// 0x459: ProcessType[*float32]
	ProcessPointer 11 00 00 00 
	Return 
// 0x45f: ProcessType[*float64]
	ProcessPointer 12 00 00 00 
	Return 
// 0x465: ProcessType[*int]
	ProcessPointer 07 00 00 00 
	Return 
// 0x46b: ProcessType[*int32]
	ProcessPointer 0a 00 00 00 
	Return 
// 0x471: ProcessType[*int64]
	ProcessPointer 0c 00 00 00 
	Return 
// 0x477: ProcessType[*main.bigStruct]
	ProcessPointer 99 00 00 00 
	Return 
// 0x47d: ProcessType[*runtime._defer]
	ProcessPointer 1b 00 00 00 
	Return 
// 0x483: ProcessType[*runtime._panic]
	ProcessPointer 19 00 00 00 
	Return 
// 0x489: ProcessType[*runtime.cgoCallers]
	ProcessPointer 3f 00 00 00 
	Return 
// 0x48f: ProcessType[*runtime.coro]
	ProcessPointer 30 00 00 00 
	Return 
// 0x495: ProcessType[*runtime.g]
	ProcessPointer 16 00 00 00 
	Return 
// 0x49b: ProcessType[*runtime.m]
	ProcessPointer 1d 00 00 00 
	Return 
// 0x4a1: ProcessType[*runtime.sudog]
	ProcessPointer 2a 00 00 00 
	Return 
// 0x4a7: ProcessType[*runtime.synctestGroup]
	ProcessPointer 32 00 00 00 
	Return 
// 0x4ad: ProcessType[*runtime.timer]
	ProcessPointer 2d 00 00 00 
	Return 
// 0x4b3: ProcessType[*runtime.traceBuf]
	ProcessPointer 4d 00 00 00 
	Return 
// 0x4b9: ProcessType[*string]
	ProcessPointer 09 00 00 00 
	Return 
// 0x4bf: ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessPointer a9 00 00 00 
	Return 
// 0x4c5: ProcessType[*table<string,int>]
	ProcessPointer 8a 00 00 00 
	Return 
// 0x4cb: ProcessType[*table<string,main.bigStruct>]
	ProcessPointer 92 00 00 00 
	Return 
// 0x4d1: ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessPointer 9c 00 00 00 
	Return 
// 0x4d7: ProcessType[*uint]
	ProcessPointer 10 00 00 00 
	Return 
// 0x4dd: ProcessType[*uint16]
	ProcessPointer 06 00 00 00 
	Return 
// 0x4e3: ProcessType[*uint32]
	ProcessPointer 02 00 00 00 
	Return 
// 0x4e9: ProcessType[*uint64]
	ProcessPointer 08 00 00 00 
	Return 
// 0x4ef: ProcessType[*uint8]
	ProcessPointer 03 00 00 00 
	Return 
// 0x4f5: ProcessType[*uintptr]
	ProcessPointer 01 00 00 00 
	Return 
// 0x4fb: ProcessType[[2]*runtime.traceBuf]
	ProcessArrayDataPrep 10 00 00 00 
	Call b3 04 00 00 // ProcessType[*runtime.traceBuf]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x50b: ProcessType[[2][2]*runtime.traceBuf]
	ProcessArrayDataPrep 20 00 00 00 
	Call fb 04 00 00 // ProcessType[[2]*runtime.traceBuf]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x51b: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call 8a 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x52b: ProcessType[[]*table<int,main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call bf 04 00 00 // ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x537: ProcessType[[]*table<string,int>.array]
	ProcessSliceDataPrep 
	Call c5 04 00 00 // ProcessType[*table<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x543: ProcessType[[]*table<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call cb 04 00 00 // ProcessType[*table<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x54f: ProcessType[[]*table<uint8,map[int]main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call d1 04 00 00 // ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x55b: ProcessType[[]int]
	ProcessSlice 86 00 00 00 08 00 00 00 
	Return 
// 0x565: ProcessType[[]noalg.map.group[string]int.array]
	ProcessSliceDataPrep 
	Call 68 06 00 00 // ProcessType[noalg.map.group[string]int]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x571: ProcessType[[]noalg.map.group[string]main.bigStruct.array]
	ProcessSliceDataPrep 
	Call 73 06 00 00 // ProcessType[noalg.map.group[string]main.bigStruct]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x57d: ProcessType[[]noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument.array]
	ProcessSliceDataPrep 
	Call 7e 06 00 00 // ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x589: ProcessType[[]string]
	ProcessSlice 88 00 00 00 10 00 00 00 
	Return 
// 0x593: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call 8a 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x59f: ProcessType[[]uint8]
	ProcessSlice 82 00 00 00 01 00 00 00 
	Return 
// 0x5a9: ProcessType[[]uintptr]
	ProcessSlice 84 00 00 00 08 00 00 00 
	Return 
// 0x5b3: ProcessType[error]
	ProcessGoInterface 
	Return 
// 0x5b5: ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups b1 00 00 00 88 00 00 00 00 08 
	Return 
// 0x5c1: ProcessType[groupReference<string,int>]
	ProcessGoSwissMapGroups 91 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x5cd: ProcessType[groupReference<string,main.bigStruct>]
	ProcessGoSwissMapGroups 9b 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x5d9: ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups a8 00 00 00 88 00 00 00 00 08 
	Return 
// 0x5e5: ProcessType[main.User]
	IncrementOutputOffset 08 00 00 00 
	Call 8a 07 00 00 // ProcessType[string]
	Return 
// 0x5f0: ProcessType[map<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap b0 00 00 00 ac 00 00 00 10 18 
	Return 
// 0x5fc: ProcessType[map<string,int>]
	ProcessGoSwissMap 90 00 00 00 8d 00 00 00 10 18 
	Return 
// 0x608: ProcessType[map<string,main.bigStruct>]
	ProcessGoSwissMap 9a 00 00 00 95 00 00 00 10 18 
	Return 
// 0x614: ProcessType[map<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap a7 00 00 00 9f 00 00 00 10 18 
	Return 
// 0x620: ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer a4 00 00 00 
	Return 
// 0x626: ProcessType[map[string]int]
	ProcessPointer 6f 00 00 00 
	Return 
// 0x62c: ProcessType[map[string]main.bigStruct]
	ProcessPointer 74 00 00 00 
	Return 
// 0x632: ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer 79 00 00 00 
	Return 
// 0x638: ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	ProcessArrayDataPrep c0 00 00 00 
	Call 89 06 00 00 // ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x648: ProcessType[noalg.[8]struct { key string; elem int }]
	ProcessArrayDataPrep c0 00 00 00 
	Call 99 06 00 00 // ProcessType[noalg.struct { key string; elem int }]
	ProcessSliceDataRepeat 18 00 00 00 
	Return 
// 0x658: ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessArrayDataPrep 80 00 00 00 
	Call 9f 06 00 00 // ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x668: ProcessType[noalg.map.group[string]int]
	IncrementOutputOffset 08 00 00 00 
	Call 48 06 00 00 // ProcessType[noalg.[8]struct { key string; elem int }]
	Return 
// 0x673: ProcessType[noalg.map.group[string]main.bigStruct]
	IncrementOutputOffset 08 00 00 00 
	Call 38 06 00 00 // ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	Return 
// 0x67e: ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	IncrementOutputOffset 08 00 00 00 
	Call 58 06 00 00 // ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	Return 
// 0x689: ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	Call 8a 07 00 00 // ProcessType[string]
	IncrementOutputOffset 10 00 00 00 
	Call 77 04 00 00 // ProcessType[*main.bigStruct]
	Return 
// 0x699: ProcessType[noalg.struct { key string; elem int }]
	Call 8a 07 00 00 // ProcessType[string]
	Return 
// 0x69f: ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	IncrementOutputOffset 08 00 00 00 
	Call 20 06 00 00 // ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x6aa: ProcessType[runtime.g]
	IncrementOutputOffset 20 00 00 00 
	Call 83 04 00 00 // ProcessType[*runtime._panic]
	IncrementOutputOffset 08 00 00 00 
	Call 7d 04 00 00 // ProcessType[*runtime._defer]
	IncrementOutputOffset 08 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset b8 00 00 00 
	Call 9f 05 00 00 // ProcessType[[]uint8]
	IncrementOutputOffset 40 00 00 00 
	Call 47 04 00 00 // ProcessType[*[]runtime.ancestorInfo]
	IncrementOutputOffset 18 00 00 00 
	Call a1 04 00 00 // ProcessType[*runtime.sudog]
	IncrementOutputOffset 08 00 00 00 
	Call a9 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 20 00 00 00 
	Call ad 04 00 00 // ProcessType[*runtime.timer]
	IncrementOutputOffset 18 00 00 00 
	Call 8f 04 00 00 // ProcessType[*runtime.coro]
	IncrementOutputOffset 08 00 00 00 
	Call a7 04 00 00 // ProcessType[*runtime.synctestGroup]
	Return 
// 0x70f: ProcessType[runtime.m]
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 50 00 00 00 
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 70 00 00 00 
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 38 00 00 00 
	Call 8a 07 00 00 // ProcessType[string]
	IncrementOutputOffset 40 00 00 00 
	Call 89 04 00 00 // ProcessType[*runtime.cgoCallers]
	IncrementOutputOffset 10 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 28 01 00 00 
	Call 6f 07 00 00 // ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 38 00 00 00 
	Call a9 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 38 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 08 00 00 00 
	Call 7a 07 00 00 // ProcessType[runtime.mTraceState]
	Return 
// 0x76f: ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 08 00 00 00 
	Call a9 05 00 00 // ProcessType[[]uintptr]
	Return 
// 0x77a: ProcessType[runtime.mTraceState]
	IncrementOutputOffset 08 00 00 00 
	Call 0b 05 00 00 // ProcessType[[2][2]*runtime.traceBuf]
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	Return 
// 0x78a: ProcessType[string]
	ProcessString 80 00 00 00 
	Return 
// 0x790: ProcessType[table<int,main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call b5 05 00 00 // ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	Return 
// 0x79b: ProcessType[table<string,int>]
	IncrementOutputOffset 10 00 00 00 
	Call c1 05 00 00 // ProcessType[groupReference<string,int>]
	Return 
// 0x7a6: ProcessType[table<string,main.bigStruct>]
	IncrementOutputOffset 10 00 00 00 
	Call cd 05 00 00 // ProcessType[groupReference<string,main.bigStruct>]
	Return 
// 0x7b1: ProcessType[table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call d9 05 00 00 // ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 4 Enqueue: 0
ID: 3 Len: 1 Enqueue: 0
ID: 4 Len: 1 Enqueue: 0
ID: 5 Len: 8 Enqueue: 1263
ID: 6 Len: 2 Enqueue: 0
ID: 7 Len: 8 Enqueue: 0
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 16 Enqueue: 1930
ID: 10 Len: 4 Enqueue: 0
ID: 11 Len: 8 Enqueue: 1101
ID: 12 Len: 8 Enqueue: 0
ID: 13 Len: 16 Enqueue: 1459
ID: 14 Len: 8 Enqueue: 0
ID: 15 Len: 1 Enqueue: 0
ID: 16 Len: 8 Enqueue: 0
ID: 17 Len: 4 Enqueue: 0
ID: 18 Len: 8 Enqueue: 0
ID: 19 Len: 8 Enqueue: 1269
ID: 20 Len: 8 Enqueue: 1131
ID: 21 Len: 8 Enqueue: 1251
ID: 22 Len: 440 Enqueue: 1706
ID: 23 Len: 16 Enqueue: 0
ID: 24 Len: 8 Enqueue: 1155
ID: 25 Len: 8 Enqueue: 0
ID: 26 Len: 8 Enqueue: 1149
ID: 27 Len: 8 Enqueue: 0
ID: 28 Len: 8 Enqueue: 1179
ID: 29 Len: 1808 Enqueue: 1807
ID: 30 Len: 56 Enqueue: 0
ID: 31 Len: 8 Enqueue: 0
ID: 32 Len: 4 Enqueue: 0
ID: 33 Len: 0 Enqueue: 0
ID: 34 Len: 1 Enqueue: 0
ID: 35 Len: 1 Enqueue: 0
ID: 36 Len: 1 Enqueue: 0
ID: 37 Len: 8 Enqueue: 0
ID: 38 Len: 24 Enqueue: 1439
ID: 39 Len: 8 Enqueue: 1095
ID: 40 Len: 8 Enqueue: 0
ID: 41 Len: 8 Enqueue: 1185
ID: 42 Len: 8 Enqueue: 0
ID: 43 Len: 24 Enqueue: 1449
ID: 44 Len: 8 Enqueue: 1197
ID: 45 Len: 8 Enqueue: 0
ID: 46 Len: 4 Enqueue: 0
ID: 47 Len: 8 Enqueue: 1167
ID: 48 Len: 8 Enqueue: 0
ID: 49 Len: 8 Enqueue: 1191
ID: 50 Len: 8 Enqueue: 0
ID: 51 Len: 32 Enqueue: 0
ID: 52 Len: 32 Enqueue: 0
ID: 53 Len: 12 Enqueue: 0
ID: 54 Len: 16 Enqueue: 0
ID: 55 Len: 8 Enqueue: 1173
ID: 56 Len: 40 Enqueue: 0
ID: 57 Len: 8 Enqueue: 0
ID: 58 Len: 48 Enqueue: 0
ID: 59 Len: 8 Enqueue: 0
ID: 60 Len: 8 Enqueue: 0
ID: 61 Len: 4 Enqueue: 0
ID: 62 Len: 8 Enqueue: 1161
ID: 63 Len: 8 Enqueue: 0
ID: 64 Len: 8 Enqueue: 0
ID: 65 Len: 256 Enqueue: 0
ID: 66 Len: 8 Enqueue: 0
ID: 67 Len: 64 Enqueue: 1903
ID: 68 Len: 8 Enqueue: 0
ID: 69 Len: 0 Enqueue: 0
ID: 70 Len: 8 Enqueue: 0
ID: 71 Len: 1 Enqueue: 0
ID: 72 Len: 56 Enqueue: 1914
ID: 73 Len: 8 Enqueue: 0
ID: 74 Len: 32 Enqueue: 1291
ID: 75 Len: 16 Enqueue: 1275
ID: 76 Len: 8 Enqueue: 1203
ID: 77 Len: 8 Enqueue: 0
ID: 78 Len: 48 Enqueue: 0
ID: 79 Len: 0 Enqueue: 0
ID: 80 Len: 392 Enqueue: 0
ID: 81 Len: 384 Enqueue: 0
ID: 82 Len: 192 Enqueue: 0
ID: 83 Len: 24 Enqueue: 0
ID: 84 Len: 0 Enqueue: 0
ID: 85 Len: 24 Enqueue: 0
ID: 86 Len: 304 Enqueue: 0
ID: 87 Len: 256 Enqueue: 0
ID: 88 Len: 32 Enqueue: 0
ID: 89 Len: 160 Enqueue: 0
ID: 90 Len: 16 Enqueue: 0
ID: 91 Len: 8 Enqueue: 0
ID: 92 Len: 0 Enqueue: 0
ID: 93 Len: 8 Enqueue: 1209
ID: 94 Len: 8 Enqueue: 0
ID: 95 Len: 16 Enqueue: 0
ID: 96 Len: 8 Enqueue: 1119
ID: 97 Len: 8 Enqueue: 1137
ID: 98 Len: 8 Enqueue: 1125
ID: 99 Len: 8 Enqueue: 1257
ID: 100 Len: 8 Enqueue: 1107
ID: 101 Len: 2 Enqueue: 0
ID: 102 Len: 8 Enqueue: 1113
ID: 103 Len: 8 Enqueue: 1239
ID: 104 Len: 8 Enqueue: 1245
ID: 105 Len: 24 Enqueue: 1371
ID: 106 Len: 24 Enqueue: 0
ID: 107 Len: 24 Enqueue: 1417
ID: 108 Len: 48 Enqueue: 1307
ID: 109 Len: 8 Enqueue: 1574
ID: 110 Len: 8 Enqueue: 0
ID: 111 Len: 48 Enqueue: 1532
ID: 112 Len: 8 Enqueue: 0
ID: 113 Len: 8 Enqueue: 1221
ID: 114 Len: 8 Enqueue: 1580
ID: 115 Len: 8 Enqueue: 0
ID: 116 Len: 48 Enqueue: 1544
ID: 117 Len: 8 Enqueue: 0
ID: 118 Len: 8 Enqueue: 1227
ID: 119 Len: 8 Enqueue: 1586
ID: 120 Len: 8 Enqueue: 0
ID: 121 Len: 48 Enqueue: 1556
ID: 122 Len: 8 Enqueue: 0
ID: 123 Len: 8 Enqueue: 1233
ID: 124 Len: 24 Enqueue: 1509
ID: 125 Len: 8 Enqueue: 1071
ID: 126 Len: 8 Enqueue: 1077
ID: 127 Len: 8 Enqueue: 1089
ID: 128 Len: 1 Enqueue: 0
ID: 129 Len: 8 Enqueue: 0
ID: 130 Len: 1 Enqueue: 0
ID: 131 Len: 8 Enqueue: 0
ID: 132 Len: 8 Enqueue: 0
ID: 133 Len: 8 Enqueue: 0
ID: 134 Len: 8 Enqueue: 0
ID: 135 Len: 8 Enqueue: 0
ID: 136 Len: 16 Enqueue: 1427
ID: 137 Len: 8 Enqueue: 0
ID: 138 Len: 32 Enqueue: 1947
ID: 139 Len: 16 Enqueue: 1473
ID: 140 Len: 8 Enqueue: 0
ID: 141 Len: 200 Enqueue: 1640
ID: 142 Len: 192 Enqueue: 1608
ID: 143 Len: 24 Enqueue: 1689
ID: 144 Len: 8 Enqueue: 1335
ID: 145 Len: 200 Enqueue: 1381
ID: 146 Len: 32 Enqueue: 1958
ID: 147 Len: 16 Enqueue: 1485
ID: 148 Len: 8 Enqueue: 0
ID: 149 Len: 200 Enqueue: 1651
ID: 150 Len: 192 Enqueue: 1592
ID: 151 Len: 24 Enqueue: 1673
ID: 152 Len: 8 Enqueue: 1143
ID: 153 Len: 184 Enqueue: 0
ID: 154 Len: 8 Enqueue: 1347
ID: 155 Len: 200 Enqueue: 1393
ID: 156 Len: 32 Enqueue: 1969
ID: 157 Len: 16 Enqueue: 1497
ID: 158 Len: 8 Enqueue: 0
ID: 159 Len: 136 Enqueue: 1662
ID: 160 Len: 128 Enqueue: 1624
ID: 161 Len: 16 Enqueue: 1695
ID: 162 Len: 8 Enqueue: 1568
ID: 163 Len: 8 Enqueue: 0
ID: 164 Len: 48 Enqueue: 1520
ID: 165 Len: 8 Enqueue: 0
ID: 166 Len: 8 Enqueue: 1215
ID: 167 Len: 8 Enqueue: 1359
ID: 168 Len: 136 Enqueue: 1405
ID: 169 Len: 32 Enqueue: 1936
ID: 170 Len: 16 Enqueue: 1461
ID: 171 Len: 8 Enqueue: 0
ID: 172 Len: 136 Enqueue: 0
ID: 173 Len: 128 Enqueue: 0
ID: 174 Len: 16 Enqueue: 0
ID: 175 Len: 8 Enqueue: 0
ID: 176 Len: 8 Enqueue: 1323
ID: 177 Len: 136 Enqueue: 0
ID: 178 Len: 8 Enqueue: 1083
ID: 179 Len: 128 Enqueue: 0
ID: 180 Len: 9 Enqueue: 0
ID: 181 Len: 0 Enqueue: 0
ID: 182 Len: 17 Enqueue: 0
ID: 183 Len: 0 Enqueue: 0
ID: 184 Len: 25 Enqueue: 0
ID: 185 Len: 0 Enqueue: 0
ID: 186 Len: 25 Enqueue: 0
ID: 187 Len: 0 Enqueue: 0
ID: 188 Len: 25 Enqueue: 0
ID: 189 Len: 0 Enqueue: 0
ID: 190 Len: 49 Enqueue: 0
ID: 191 Len: 0 Enqueue: 0
ID: 192 Len: 49 Enqueue: 0
ID: 193 Len: 9 Enqueue: 0
ID: 194 Len: 0 Enqueue: 0
ID: 195 Len: 9 Enqueue: 0
ID: 196 Len: 0 Enqueue: 0
ID: 197 Len: 0 Enqueue: 0
ID: 198 Len: 0 Enqueue: 0
ID: 199 Len: 0 Enqueue: 0
ID: 200 Len: 9 Enqueue: 0
ID: 201 Len: 33 Enqueue: 0
ID: 202 Len: 0 Enqueue: 0
ID: 203 Len: 33 Enqueue: 0
ID: 204 Len: 3 Enqueue: 0
ID: 205 Len: 33 Enqueue: 0
ID: 206 Len: 3 Enqueue: 0
ID: 207 Len: 9 Enqueue: 0
ID: 208 Len: 0 Enqueue: 0
ID: 209 Len: 9 Enqueue: 0
ID: 210 Len: 9 Enqueue: 0
