// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessType[*****int]
	ProcessPointer 03 00 00 00 
	Return 
// 0x9: ProcessExpression[Probe[main.PointerChainArg]@0x4a6006.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 03 00 00 00 // ProcessType[*****int]
	Return 
// 0x24: ProcessEvent[Probe[main.PointerChainArg]@4a6006]
	PrepareEventRoot 3e 00 00 00 09 00 00 00 
	Call 09 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0x4a6006.expr[0]]
	Return 
// 0x33: ProcessType[**int]
	ProcessPointer 06 00 00 00 
	Return 
// 0x39: ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a6050.expr[0]]
	ExprPrepare 
	ExprReadRegister 01 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 33 00 00 00 // ProcessType[**int]
	Return 
// 0x54: ProcessEvent[Probe[main.PointerSmallChainArg]@4a6050]
	PrepareEventRoot 3f 00 00 00 09 00 00 00 
	Call 39 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0x4a6050.expr[0]]
	Return 
// 0x63: ProcessType[map[string]main.bigStruct]
	ProcessPointer 23 00 00 00 
	Return 
// 0x69: ProcessExpression[Probe[main.bigMapArg]@0x4a64f3.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 63 00 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x84: ProcessEvent[Probe[main.bigMapArg]@4a64f3]
	PrepareEventRoot 3c 00 00 00 09 00 00 00 
	Call 69 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0x4a64f3.expr[0]]
	Return 
// 0x93: ProcessExpression[Probe[main.inlined]@0x4a63ca.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xa9: ProcessEvent[Probe[main.inlined]@4a63ca]
	PrepareEventRoot 3d 00 00 00 09 00 00 00 
	Call 93 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a63ca.expr[0]]
	Return 
// 0xb8: ProcessExpression[Probe[main.inlined]@0x4a5dce.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xc8: ProcessEvent[Probe[main.inlined]@4a5dce]
	PrepareEventRoot 3d 00 00 00 09 00 00 00 
	Call b8 00 00 00 // ProcessExpression[Probe[main.inlined]@0x4a5dce.expr[0]]
	Return 
// 0xd7: ProcessExpression[Probe[main.intArg]@0x4a60aa.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xed: ProcessEvent[Probe[main.intArg]@4a60aa]
	PrepareEventRoot 34 00 00 00 09 00 00 00 
	Call d7 00 00 00 // ProcessExpression[Probe[main.intArg]@0x4a60aa.expr[0]]
	Return 
// 0xfc: ProcessExpression[Probe[main.intArrayArg]@0x4a622a.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x118: ProcessEvent[Probe[main.intArrayArg]@4a622a]
	PrepareEventRoot 37 00 00 00 19 00 00 00 
	Call fc 00 00 00 // ProcessExpression[Probe[main.intArrayArg]@0x4a622a.expr[0]]
	Return 
// 0x127: ProcessType[string]
	ProcessString 2a 00 00 00 
	Return 
// 0x12d: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call 27 01 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x13d: ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a63a0.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 2d 01 00 00 // ProcessType[[3]string]
	Return 
// 0x15e: ProcessEvent[Probe[main.stringArrayArgFrameless]@4a63a0]
	PrepareEventRoot 3a 00 00 00 31 00 00 00 
	Call 3d 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0x4a63a0.expr[0]]
	Return 
// 0x16d: ProcessType[[]int]
	ProcessSlice 2c 00 00 00 08 00 00 00 
	Return 
// 0x177: ProcessExpression[Probe[main.intSliceArg]@0x4a61aa.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 6d 01 00 00 // ProcessType[[]int]
	Return 
// 0x1a0: ProcessEvent[Probe[main.intSliceArg]@4a61aa]
	PrepareEventRoot 36 00 00 00 19 00 00 00 
	Call 77 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0x4a61aa.expr[0]]
	Return 
// 0x1af: ProcessType[map[string]int]
	ProcessPointer 11 00 00 00 
	Return 
// 0x1b5: ProcessExpression[Probe[main.mapArg]@0x4a648a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call af 01 00 00 // ProcessType[map[string]int]
	Return 
// 0x1d0: ProcessEvent[Probe[main.mapArg]@4a648a]
	PrepareEventRoot 3b 00 00 00 09 00 00 00 
	Call b5 01 00 00 // ProcessExpression[Probe[main.mapArg]@0x4a648a.expr[0]]
	Return 
// 0x1df: ProcessExpression[Probe[main.stringArg]@0x4a612a.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call 27 01 00 00 // ProcessType[string]
	Return 
// 0x201: ProcessEvent[Probe[main.stringArg]@4a612a]
	PrepareEventRoot 35 00 00 00 11 00 00 00 
	Call df 01 00 00 // ProcessExpression[Probe[main.stringArg]@0x4a612a.expr[0]]
	Return 
// 0x210: ProcessExpression[Probe[main.stringArrayArg]@0x4a632a.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 00 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 2d 01 00 00 // ProcessType[[3]string]
	Return 
// 0x231: ProcessEvent[Probe[main.stringArrayArg]@4a632a]
	PrepareEventRoot 39 00 00 00 31 00 00 00 
	Call 10 02 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0x4a632a.expr[0]]
	Return 
// 0x240: ProcessType[[]string]
	ProcessSlice 2e 00 00 00 10 00 00 00 
	Return 
// 0x24a: ProcessExpression[Probe[main.stringSliceArg]@0x4a62aa.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 03 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 40 02 00 00 // ProcessType[[]string]
	Return 
// 0x273: ProcessEvent[Probe[main.stringSliceArg]@4a62aa]
	PrepareEventRoot 38 00 00 00 19 00 00 00 
	Call 4a 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0x4a62aa.expr[0]]
	Return 
// 0x282: ProcessType[****int]
	ProcessPointer 04 00 00 00 
	Return 
// 0x288: ProcessType[*int]
	ProcessPointer 01 00 00 00 
	Return 
// 0x28e: ProcessType[hash<string,main.bigStruct>]
	ProcessGoHmap 33 00 00 00 d0 00 00 00 08 09 10 18 
	Return 
// 0x29c: ProcessType[hash<string,int>]
	ProcessGoHmap 30 00 00 00 d0 00 00 00 08 09 10 18 
	Return 
// 0x2aa: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call 27 01 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x2b6: ProcessType[***int]
	ProcessPointer 05 00 00 00 
	Return 
// 0x2bc: ProcessType[[]key<string>]
	ProcessArrayDataPrep 80 00 00 00 
	Call 27 01 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x2cc: ProcessType[*main.bigStruct]
	ProcessPointer 28 00 00 00 
	Return 
// 0x2d2: ProcessType[[]val<main.bigStruct>]
	ProcessArrayDataPrep 40 00 00 00 
	Call cc 02 00 00 // ProcessType[*main.bigStruct]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x2e2: ProcessType[*bucket<string,main.bigStruct>]
	ProcessPointer 25 00 00 00 
	Return 
// 0x2e8: ProcessType[bucket<string,main.bigStruct>]
	IncrementOutputOffset 08 00 00 00 
	Call bc 02 00 00 // ProcessType[[]key<string>]
	Call d2 02 00 00 // ProcessType[[]val<main.bigStruct>]
	Call e2 02 00 00 // ProcessType[*bucket<string,main.bigStruct>]
	Return 
// 0x2fd: ProcessType[[]bucket<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call e8 02 00 00 // ProcessType[bucket<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x309: ProcessType[*bucket<string,int>]
	ProcessPointer 15 00 00 00 
	Return 
// 0x30f: ProcessType[bucket<string,int>]
	IncrementOutputOffset 08 00 00 00 
	Call bc 02 00 00 // ProcessType[[]key<string>]
	IncrementOutputOffset 40 00 00 00 
	Call 09 03 00 00 // ProcessType[*bucket<string,int>]
	Return 
// 0x324: ProcessType[[]bucket<string,int>.array]
	ProcessSliceDataPrep 
	Call 0f 03 00 00 // ProcessType[bucket<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 8 Enqueue: 3
ID: 3 Len: 8 Enqueue: 642
ID: 4 Len: 8 Enqueue: 694
ID: 5 Len: 8 Enqueue: 51
ID: 6 Len: 8 Enqueue: 648
ID: 7 Len: 16 Enqueue: 295
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 1 Enqueue: 0
ID: 10 Len: 24 Enqueue: 365
ID: 11 Len: 24 Enqueue: 0
ID: 12 Len: 24 Enqueue: 576
ID: 13 Len: 8 Enqueue: 0
ID: 14 Len: 48 Enqueue: 301
ID: 15 Len: 8 Enqueue: 431
ID: 16 Len: 8 Enqueue: 0
ID: 17 Len: 48 Enqueue: 668
ID: 18 Len: 2 Enqueue: 0
ID: 19 Len: 4 Enqueue: 0
ID: 20 Len: 8 Enqueue: 777
ID: 21 Len: 208 Enqueue: 783
ID: 22 Len: 8 Enqueue: 0
ID: 23 Len: 128 Enqueue: 700
ID: 24 Len: 64 Enqueue: 0
ID: 25 Len: 8 Enqueue: 0
ID: 26 Len: 8 Enqueue: 0
ID: 27 Len: 24 Enqueue: 0
ID: 28 Len: 8 Enqueue: 0
ID: 29 Len: 24 Enqueue: 0
ID: 30 Len: 8 Enqueue: 0
ID: 31 Len: 8 Enqueue: 0
ID: 32 Len: 8 Enqueue: 0
ID: 33 Len: 8 Enqueue: 99
ID: 34 Len: 8 Enqueue: 0
ID: 35 Len: 48 Enqueue: 654
ID: 36 Len: 8 Enqueue: 738
ID: 37 Len: 208 Enqueue: 744
ID: 38 Len: 64 Enqueue: 722
ID: 39 Len: 8 Enqueue: 716
ID: 40 Len: 184 Enqueue: 0
ID: 41 Len: 128 Enqueue: 0
ID: 42 Len: 2048 Enqueue: 0
ID: 43 Len: 8 Enqueue: 0
ID: 44 Len: 2048 Enqueue: 0
ID: 45 Len: 8 Enqueue: 0
ID: 46 Len: 2048 Enqueue: 682
ID: 47 Len: 8 Enqueue: 0
ID: 48 Len: 2048 Enqueue: 804
ID: 49 Len: 2048 Enqueue: 0
ID: 50 Len: 8 Enqueue: 0
ID: 51 Len: 2048 Enqueue: 765
ID: 52 Len: 9 Enqueue: 0
ID: 53 Len: 17 Enqueue: 0
ID: 54 Len: 25 Enqueue: 0
ID: 55 Len: 25 Enqueue: 0
ID: 56 Len: 25 Enqueue: 0
ID: 57 Len: 49 Enqueue: 0
ID: 58 Len: 49 Enqueue: 0
ID: 59 Len: 9 Enqueue: 0
ID: 60 Len: 9 Enqueue: 0
ID: 61 Len: 9 Enqueue: 0
ID: 62 Len: 9 Enqueue: 0
ID: 63 Len: 9 Enqueue: 0
