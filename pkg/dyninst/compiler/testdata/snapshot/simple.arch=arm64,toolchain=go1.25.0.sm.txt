// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessExpression[Probe[main.PointerChainArg]@0xb7f00.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 2f 04 00 00 // ProcessType[*****int]
	Return 
// 0x1e: ProcessEvent[Probe[main.PointerChainArg]@b7f00]
	PrepareEventRoot d6 00 00 00 09 00 00 00 
	Call 03 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0xb7f00.expr[0]]
	Return 
// 0x2d: ProcessExpression[Probe[main.PointerSmallChainArg]@0xb7f34.expr[0]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 41 04 00 00 // ProcessType[**int]
	Return 
// 0x48: ProcessEvent[Probe[main.PointerSmallChainArg]@b7f34]
	PrepareEventRoot d7 00 00 00 09 00 00 00 
	Call 2d 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0xb7f34.expr[0]]
	Return 
// 0x57: ProcessExpression[Probe[main.bigMapArg]@0xb8410.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 48 06 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x72: ProcessEvent[Probe[main.bigMapArg]@b8410]
	PrepareEventRoot c8 00 00 00 09 00 00 00 
	Call 57 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0xb8410.expr[0]]
	Return 
// 0x81: ProcessEvent[Probe[main.bigMapArg]Return@b8480]
	PrepareEventRoot c9 00 00 00 00 00 00 00 
	Return 
// 0x8b: ProcessExpression[Probe[main.inlined]@0xb7d28.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0x9b: ProcessEvent[Probe[main.inlined]@b7d28]
	PrepareEventRoot d4 00 00 00 09 00 00 00 
	Call 8b 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb7d28.expr[0]]
	Return 
// 0xaa: ProcessExpression[Probe[main.inlined]@0xb82d8.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xc0: ProcessEvent[Probe[main.inlined]@b82d8]
	PrepareEventRoot d4 00 00 00 09 00 00 00 
	Call aa 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb82d8.expr[0]]
	Return 
// 0xcf: ProcessEvent[Probe[main.inlined]Return@b830c]
	PrepareEventRoot d5 00 00 00 00 00 00 00 
	Return 
// 0xd9: ProcessExpression[Probe[main.intArg]@0xb8008.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xef: ProcessEvent[Probe[main.intArg]@b8008]
	PrepareEventRoot b9 00 00 00 09 00 00 00 
	Call d9 00 00 00 // ProcessExpression[Probe[main.intArg]@0xb8008.expr[0]]
	Return 
// 0xfe: ProcessEvent[Probe[main.intArg]Return@b803c]
	PrepareEventRoot ba 00 00 00 00 00 00 00 
	Return 
// 0x108: ProcessExpression[Probe[main.intArrayArg]@0xb8168.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x124: ProcessEvent[Probe[main.intArrayArg]@b8168]
	PrepareEventRoot bf 00 00 00 19 00 00 00 
	Call 08 01 00 00 // ProcessExpression[Probe[main.intArrayArg]@0xb8168.expr[0]]
	Return 
// 0x133: ProcessEvent[Probe[main.intArrayArg]Return@b81a8]
	PrepareEventRoot c0 00 00 00 00 00 00 00 
	Return 
// 0x13d: ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb82b0.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 21 05 00 00 // ProcessType[[3]string]
	Return 
// 0x15e: ProcessEvent[Probe[main.stringArrayArgFrameless]@b82b0]
	PrepareEventRoot c5 00 00 00 31 00 00 00 
	Call 3d 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb82b0.expr[0]]
	Return 
// 0x16d: ProcessExpression[Probe[main.intSliceArg]@0xb80e8.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 77 05 00 00 // ProcessType[[]int]
	Return 
// 0x196: ProcessEvent[Probe[main.intSliceArg]@b80e8]
	PrepareEventRoot bd 00 00 00 19 00 00 00 
	Call 6d 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0xb80e8.expr[0]]
	Return 
// 0x1a5: ProcessEvent[Probe[main.intSliceArg]Return@b8120]
	PrepareEventRoot be 00 00 00 00 00 00 00 
	Return 
// 0x1af: ProcessExpression[Probe[main.mapArg]@0xb8398.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 42 06 00 00 // ProcessType[map[string]int]
	Return 
// 0x1ca: ProcessEvent[Probe[main.mapArg]@b8398]
	PrepareEventRoot c6 00 00 00 09 00 00 00 
	Call af 01 00 00 // ProcessExpression[Probe[main.mapArg]@0xb8398.expr[0]]
	Return 
// 0x1d9: ProcessEvent[Probe[main.mapArg]Return@b83c4]
	PrepareEventRoot c7 00 00 00 00 00 00 00 
	Return 
// 0x1e3: ProcessEvent[Probe[main.noArgs]@b84b8]
	PrepareEventRoot ca 00 00 00 00 00 00 00 
	Return 
// 0x1ed: ProcessEvent[Probe[main.noArgs]Return@b84ec]
	PrepareEventRoot cb 00 00 00 00 00 00 00 
	Return 
// 0x1f7: ProcessExpression[Probe[main.stringArg]@0xb8078.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call b0 07 00 00 // ProcessType[string]
	Return 
// 0x219: ProcessEvent[Probe[main.stringArg]@b8078]
	PrepareEventRoot bb 00 00 00 11 00 00 00 
	Call f7 01 00 00 // ProcessExpression[Probe[main.stringArg]@0xb8078.expr[0]]
	Return 
// 0x228: ProcessEvent[Probe[main.stringArg]Return@b80b0]
	PrepareEventRoot bc 00 00 00 00 00 00 00 
	Return 
// 0x232: ProcessExpression[Probe[main.stringArrayArg]@0xb8258.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 21 05 00 00 // ProcessType[[3]string]
	Return 
// 0x253: ProcessEvent[Probe[main.stringArrayArg]@b8258]
	PrepareEventRoot c3 00 00 00 31 00 00 00 
	Call 32 02 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0xb8258.expr[0]]
	Return 
// 0x262: ProcessEvent[Probe[main.stringArrayArg]Return@b8298]
	PrepareEventRoot c4 00 00 00 00 00 00 00 
	Return 
// 0x26c: ProcessExpression[Probe[main.stringSliceArg]@0xb81d8.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call a5 05 00 00 // ProcessType[[]string]
	Return 
// 0x295: ProcessEvent[Probe[main.stringSliceArg]@b81d8]
	PrepareEventRoot c1 00 00 00 19 00 00 00 
	Call 6c 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0xb81d8.expr[0]]
	Return 
// 0x2a4: ProcessEvent[Probe[main.stringSliceArg]Return@b8210]
	PrepareEventRoot c2 00 00 00 00 00 00 00 
	Return 
// 0x2ae: ProcessExpression[Probe[main.templateTest]@0xb86d8.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 01 06 00 00 // ProcessType[main.User]
	Return 
// 0x2d7: ProcessExpression[Probe[main.templateTest]@0xb86d8.expr[1]]
	ExprPrepare 
	ExprReadRegister 03 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x2ed: ProcessEvent[Probe[main.templateTest]@b86d8]
	PrepareEventRoot ce 00 00 00 21 00 00 00 
	Call ae 02 00 00 // ProcessExpression[Probe[main.templateTest]@0xb86d8.expr[0]]
	Call d7 02 00 00 // ProcessExpression[Probe[main.templateTest]@0xb86d8.expr[1]]
	Return 
// 0x301: ProcessEvent[Probe[main.templateTest]Return@b8748]
	PrepareEventRoot cf 00 00 00 00 00 00 00 
	Return 
// 0x30b: ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 01 06 00 00 // ProcessType[main.User]
	Return 
// 0x334: ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[1]]
	ExprPrepare 
	ExprReadRegister 03 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x34a: ProcessEvent[Probe[main.templateTest2]@b8770]
	PrepareEventRoot d0 00 00 00 21 00 00 00 
	Call 0b 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[0]]
	Call 34 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[1]]
	Return 
// 0x35e: ProcessExpression[Probe[main.templateTest2]Return@0xb8774.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 02 00 00 00 00 
	ExprSave 01 00 00 00 02 00 00 00 00 00 00 00 
	Return 
// 0x374: ProcessEvent[Probe[main.templateTest2]Return@b8774]
	PrepareEventRoot d1 00 00 00 03 00 00 00 
	Call 5e 03 00 00 // ProcessExpression[Probe[main.templateTest2]Return@0xb8774.expr[0]]
	Return 
// 0x383: ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 01 06 00 00 // ProcessType[main.User]
	Return 
// 0x3ac: ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[1]]
	ExprPrepare 
	ExprReadRegister 03 08 00 00 00 00 
	ExprSave 19 00 00 00 08 00 00 00 01 00 00 00 
	Return 
// 0x3c2: ProcessEvent[Probe[main.templateTest2]@b8770]
	PrepareEventRoot d2 00 00 00 21 00 00 00 
	Call 83 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[0]]
	Call ac 03 00 00 // ProcessExpression[Probe[main.templateTest2]@0xb8770.expr[1]]
	Return 
// 0x3d6: ProcessExpression[Probe[main.templateTest2]Return@0xb8774.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 02 00 00 00 00 
	ExprSave 01 00 00 00 02 00 00 00 00 00 00 00 
	Return 
// 0x3ec: ProcessEvent[Probe[main.templateTest2]Return@b8774]
	PrepareEventRoot d3 00 00 00 03 00 00 00 
	Call d6 03 00 00 // ProcessExpression[Probe[main.templateTest2]Return@0xb8774.expr[0]]
	Return 
// 0x3fb: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]@b8530]
	PrepareEventRoot cc 00 00 00 00 00 00 00 
	Return 
// 0x405: ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0xb86a8.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 4e 06 00 00 // ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x420: ProcessEvent[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@b86a8]
	PrepareEventRoot cd 00 00 00 09 00 00 00 
	Call 05 04 00 00 // ProcessExpression[Probe[main.usesMapsOfMapsThatDoNotAppearAsArguments]Return@0xb86a8.expr[0]]
	Return 
// 0x42f: ProcessType[*****int]
	ProcessPointer 80 00 00 00 
	Return 
// 0x435: ProcessType[****int]
	ProcessPointer b7 00 00 00 
	Return 
// 0x43b: ProcessType[***int]
	ProcessPointer 81 00 00 00 
	Return 
// 0x441: ProcessType[**int]
	ProcessPointer 64 00 00 00 
	Return 
// 0x447: ProcessType[*[]runtime.ancestorInfo]
	ProcessPointer 28 00 00 00 
	Return 
// 0x44d: ProcessType[*bool]
	ProcessPointer 04 00 00 00 
	Return 
// 0x453: ProcessType[*error]
	ProcessPointer 0e 00 00 00 
	Return 
// 0x459: ProcessType[*float32]
	ProcessPointer 12 00 00 00 
	Return 
// 0x45f: ProcessType[*float64]
	ProcessPointer 10 00 00 00 
	Return 
// 0x465: ProcessType[*int]
	ProcessPointer 07 00 00 00 
	Return 
// 0x46b: ProcessType[*int32]
	ProcessPointer 0c 00 00 00 
	Return 
// 0x471: ProcessType[*int64]
	ProcessPointer 0d 00 00 00 
	Return 
// 0x477: ProcessType[*main.bigStruct]
	ProcessPointer 9e 00 00 00 
	Return 
// 0x47d: ProcessType[*runtime._defer]
	ProcessPointer 1b 00 00 00 
	Return 
// 0x483: ProcessType[*runtime._panic]
	ProcessPointer 19 00 00 00 
	Return 
// 0x489: ProcessType[*runtime.cgoCallers]
	ProcessPointer 42 00 00 00 
	Return 
// 0x48f: ProcessType[*runtime.coro]
	ProcessPointer 30 00 00 00 
	Return 
// 0x495: ProcessType[*runtime.g]
	ProcessPointer 16 00 00 00 
	Return 
// 0x49b: ProcessType[*runtime.m]
	ProcessPointer 1d 00 00 00 
	Return 
// 0x4a1: ProcessType[*runtime.p]
	ProcessPointer 88 00 00 00 
	Return 
// 0x4a7: ProcessType[*runtime.sudog]
	ProcessPointer 2a 00 00 00 
	Return 
// 0x4ad: ProcessType[*runtime.synctestBubble]
	ProcessPointer 32 00 00 00 
	Return 
// 0x4b3: ProcessType[*runtime.timer]
	ProcessPointer 2d 00 00 00 
	Return 
// 0x4b9: ProcessType[*runtime.traceBuf]
	ProcessPointer 50 00 00 00 
	Return 
// 0x4bf: ProcessType[*string]
	ProcessPointer 09 00 00 00 
	Return 
// 0x4c5: ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessPointer ae 00 00 00 
	Return 
// 0x4cb: ProcessType[*table<string,int>]
	ProcessPointer 8f 00 00 00 
	Return 
// 0x4d1: ProcessType[*table<string,main.bigStruct>]
	ProcessPointer 97 00 00 00 
	Return 
// 0x4d7: ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessPointer a1 00 00 00 
	Return 
// 0x4dd: ProcessType[*uint]
	ProcessPointer 0a 00 00 00 
	Return 
// 0x4e3: ProcessType[*uint16]
	ProcessPointer 06 00 00 00 
	Return 
// 0x4e9: ProcessType[*uint32]
	ProcessPointer 02 00 00 00 
	Return 
// 0x4ef: ProcessType[*uint64]
	ProcessPointer 08 00 00 00 
	Return 
// 0x4f5: ProcessType[*uint8]
	ProcessPointer 03 00 00 00 
	Return 
// 0x4fb: ProcessType[*uintptr]
	ProcessPointer 01 00 00 00 
	Return 
// 0x501: ProcessType[[2]*runtime.traceBuf]
	ProcessArrayDataPrep 10 00 00 00 
	Call b9 04 00 00 // ProcessType[*runtime.traceBuf]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x511: ProcessType[[2][2]*runtime.traceBuf]
	ProcessArrayDataPrep 20 00 00 00 
	Call 01 05 00 00 // ProcessType[[2]*runtime.traceBuf]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x521: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call b0 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x531: ProcessType[[]*runtime.p]
	ProcessSlice 89 00 00 00 08 00 00 00 
	Return 
// 0x53b: ProcessType[[]*runtime.p.array]
	ProcessSliceDataPrep 
	Call a1 04 00 00 // ProcessType[*runtime.p]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x547: ProcessType[[]*table<int,main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call c5 04 00 00 // ProcessType[*table<int,main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x553: ProcessType[[]*table<string,int>.array]
	ProcessSliceDataPrep 
	Call cb 04 00 00 // ProcessType[*table<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x55f: ProcessType[[]*table<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call d1 04 00 00 // ProcessType[*table<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x56b: ProcessType[[]*table<uint8,map[int]main.aStructNotUsedAsAnArgument>.array]
	ProcessSliceDataPrep 
	Call d7 04 00 00 // ProcessType[*table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x577: ProcessType[[]int]
	ProcessSlice 8b 00 00 00 08 00 00 00 
	Return 
// 0x581: ProcessType[[]noalg.map.group[string]int.array]
	ProcessSliceDataPrep 
	Call 84 06 00 00 // ProcessType[noalg.map.group[string]int]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x58d: ProcessType[[]noalg.map.group[string]main.bigStruct.array]
	ProcessSliceDataPrep 
	Call 8f 06 00 00 // ProcessType[noalg.map.group[string]main.bigStruct]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x599: ProcessType[[]noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument.array]
	ProcessSliceDataPrep 
	Call 9a 06 00 00 // ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x5a5: ProcessType[[]string]
	ProcessSlice 8d 00 00 00 10 00 00 00 
	Return 
// 0x5af: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call b0 07 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x5bb: ProcessType[[]uint8]
	ProcessSlice 84 00 00 00 01 00 00 00 
	Return 
// 0x5c5: ProcessType[[]uintptr]
	ProcessSlice 86 00 00 00 08 00 00 00 
	Return 
// 0x5cf: ProcessType[error]
	ProcessGoInterface 
	Return 
// 0x5d1: ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups b6 00 00 00 88 00 00 00 00 08 
	Return 
// 0x5dd: ProcessType[groupReference<string,int>]
	ProcessGoSwissMapGroups 96 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x5e9: ProcessType[groupReference<string,main.bigStruct>]
	ProcessGoSwissMapGroups a0 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x5f5: ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMapGroups ad 00 00 00 88 00 00 00 00 08 
	Return 
// 0x601: ProcessType[main.User]
	IncrementOutputOffset 08 00 00 00 
	Call b0 07 00 00 // ProcessType[string]
	Return 
// 0x60c: ProcessType[map<int,main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap b5 00 00 00 b1 00 00 00 10 18 
	Return 
// 0x618: ProcessType[map<string,int>]
	ProcessGoSwissMap 95 00 00 00 92 00 00 00 10 18 
	Return 
// 0x624: ProcessType[map<string,main.bigStruct>]
	ProcessGoSwissMap 9f 00 00 00 9a 00 00 00 10 18 
	Return 
// 0x630: ProcessType[map<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	ProcessGoSwissMap ac 00 00 00 a4 00 00 00 10 18 
	Return 
// 0x63c: ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer a9 00 00 00 
	Return 
// 0x642: ProcessType[map[string]int]
	ProcessPointer 71 00 00 00 
	Return 
// 0x648: ProcessType[map[string]main.bigStruct]
	ProcessPointer 76 00 00 00 
	Return 
// 0x64e: ProcessType[map[uint8]map[int]main.aStructNotUsedAsAnArgument]
	ProcessPointer 7b 00 00 00 
	Return 
// 0x654: ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	ProcessArrayDataPrep c0 00 00 00 
	Call a5 06 00 00 // ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x664: ProcessType[noalg.[8]struct { key string; elem int }]
	ProcessArrayDataPrep c0 00 00 00 
	Call b5 06 00 00 // ProcessType[noalg.struct { key string; elem int }]
	ProcessSliceDataRepeat 18 00 00 00 
	Return 
// 0x674: ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessArrayDataPrep 80 00 00 00 
	Call bb 06 00 00 // ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x684: ProcessType[noalg.map.group[string]int]
	IncrementOutputOffset 08 00 00 00 
	Call 64 06 00 00 // ProcessType[noalg.[8]struct { key string; elem int }]
	Return 
// 0x68f: ProcessType[noalg.map.group[string]main.bigStruct]
	IncrementOutputOffset 08 00 00 00 
	Call 54 06 00 00 // ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	Return 
// 0x69a: ProcessType[noalg.map.group[uint8]map[int]main.aStructNotUsedAsAnArgument]
	IncrementOutputOffset 08 00 00 00 
	Call 74 06 00 00 // ProcessType[noalg.[8]struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	Return 
// 0x6a5: ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	Call b0 07 00 00 // ProcessType[string]
	IncrementOutputOffset 10 00 00 00 
	Call 77 04 00 00 // ProcessType[*main.bigStruct]
	Return 
// 0x6b5: ProcessType[noalg.struct { key string; elem int }]
	Call b0 07 00 00 // ProcessType[string]
	Return 
// 0x6bb: ProcessType[noalg.struct { key uint8; elem map[int]main.aStructNotUsedAsAnArgument }]
	IncrementOutputOffset 08 00 00 00 
	Call 3c 06 00 00 // ProcessType[map[int]main.aStructNotUsedAsAnArgument]
	Return 
// 0x6c6: ProcessType[runtime.g]
	IncrementOutputOffset 20 00 00 00 
	Call 83 04 00 00 // ProcessType[*runtime._panic]
	IncrementOutputOffset 08 00 00 00 
	Call 7d 04 00 00 // ProcessType[*runtime._defer]
	IncrementOutputOffset 08 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset b0 00 00 00 
	Call bb 05 00 00 // ProcessType[[]uint8]
	IncrementOutputOffset 40 00 00 00 
	Call 47 04 00 00 // ProcessType[*[]runtime.ancestorInfo]
	IncrementOutputOffset 18 00 00 00 
	Call a7 04 00 00 // ProcessType[*runtime.sudog]
	IncrementOutputOffset 08 00 00 00 
	Call c5 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 20 00 00 00 
	Call b3 04 00 00 // ProcessType[*runtime.timer]
	IncrementOutputOffset 18 00 00 00 
	Call 8f 04 00 00 // ProcessType[*runtime.coro]
	IncrementOutputOffset 08 00 00 00 
	Call ad 04 00 00 // ProcessType[*runtime.synctestBubble]
	Return 
// 0x72b: ProcessType[runtime.m]
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 48 00 00 00 
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 70 00 00 00 
	Call 95 04 00 00 // ProcessType[*runtime.g]
	IncrementOutputOffset 38 00 00 00 
	Call b0 07 00 00 // ProcessType[string]
	IncrementOutputOffset 30 00 00 00 
	Call 31 05 00 00 // ProcessType[[]*runtime.p]
	IncrementOutputOffset 28 00 00 00 
	Call 89 04 00 00 // ProcessType[*runtime.cgoCallers]
	IncrementOutputOffset 10 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 30 01 00 00 
	Call 95 07 00 00 // ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 30 00 00 00 
	Call c5 05 00 00 // ProcessType[[]uintptr]
	IncrementOutputOffset 38 00 00 00 
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	IncrementOutputOffset 08 00 00 00 
	Call a0 07 00 00 // ProcessType[runtime.mTraceState]
	Return 
// 0x795: ProcessType[runtime.mLockProfile]
	IncrementOutputOffset 08 00 00 00 
	Call c5 05 00 00 // ProcessType[[]uintptr]
	Return 
// 0x7a0: ProcessType[runtime.mTraceState]
	IncrementOutputOffset 08 00 00 00 
	Call 11 05 00 00 // ProcessType[[2][2]*runtime.traceBuf]
	Call 9b 04 00 00 // ProcessType[*runtime.m]
	Return 
// 0x7b0: ProcessType[string]
	ProcessString 82 00 00 00 
	Return 
// 0x7b6: ProcessType[table<int,main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call d1 05 00 00 // ProcessType[groupReference<int,main.aStructNotUsedAsAnArgument>]
	Return 
// 0x7c1: ProcessType[table<string,int>]
	IncrementOutputOffset 10 00 00 00 
	Call dd 05 00 00 // ProcessType[groupReference<string,int>]
	Return 
// 0x7cc: ProcessType[table<string,main.bigStruct>]
	IncrementOutputOffset 10 00 00 00 
	Call e9 05 00 00 // ProcessType[groupReference<string,main.bigStruct>]
	Return 
// 0x7d7: ProcessType[table<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	IncrementOutputOffset 10 00 00 00 
	Call f5 05 00 00 // ProcessType[groupReference<uint8,map[int]main.aStructNotUsedAsAnArgument>]
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 4 Enqueue: 0
ID: 3 Len: 1 Enqueue: 0
ID: 4 Len: 1 Enqueue: 0
ID: 5 Len: 8 Enqueue: 1269
ID: 6 Len: 2 Enqueue: 0
ID: 7 Len: 8 Enqueue: 0
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 16 Enqueue: 1968
ID: 10 Len: 8 Enqueue: 0
ID: 11 Len: 8 Enqueue: 1101
ID: 12 Len: 4 Enqueue: 0
ID: 13 Len: 8 Enqueue: 0
ID: 14 Len: 16 Enqueue: 1487
ID: 15 Len: 8 Enqueue: 0
ID: 16 Len: 8 Enqueue: 0
ID: 17 Len: 1 Enqueue: 0
ID: 18 Len: 4 Enqueue: 0
ID: 19 Len: 8 Enqueue: 1275
ID: 20 Len: 8 Enqueue: 1131
ID: 21 Len: 8 Enqueue: 1257
ID: 22 Len: 440 Enqueue: 1734
ID: 23 Len: 16 Enqueue: 0
ID: 24 Len: 8 Enqueue: 1155
ID: 25 Len: 8 Enqueue: 0
ID: 26 Len: 8 Enqueue: 1149
ID: 27 Len: 8 Enqueue: 0
ID: 28 Len: 8 Enqueue: 1179
ID: 29 Len: 1816 Enqueue: 1835
ID: 30 Len: 48 Enqueue: 0
ID: 31 Len: 8 Enqueue: 0
ID: 32 Len: 4 Enqueue: 0
ID: 33 Len: 0 Enqueue: 0
ID: 34 Len: 1 Enqueue: 0
ID: 35 Len: 1 Enqueue: 0
ID: 36 Len: 1 Enqueue: 0
ID: 37 Len: 8 Enqueue: 0
ID: 38 Len: 24 Enqueue: 1467
ID: 39 Len: 8 Enqueue: 1095
ID: 40 Len: 8 Enqueue: 0
ID: 41 Len: 8 Enqueue: 1191
ID: 42 Len: 8 Enqueue: 0
ID: 43 Len: 24 Enqueue: 1477
ID: 44 Len: 8 Enqueue: 1203
ID: 45 Len: 8 Enqueue: 0
ID: 46 Len: 4 Enqueue: 0
ID: 47 Len: 8 Enqueue: 1167
ID: 48 Len: 8 Enqueue: 0
ID: 49 Len: 8 Enqueue: 1197
ID: 50 Len: 8 Enqueue: 0
ID: 51 Len: 32 Enqueue: 0
ID: 52 Len: 32 Enqueue: 0
ID: 53 Len: 12 Enqueue: 0
ID: 54 Len: 16 Enqueue: 0
ID: 55 Len: 8 Enqueue: 1173
ID: 56 Len: 40 Enqueue: 0
ID: 57 Len: 8 Enqueue: 0
ID: 58 Len: 48 Enqueue: 0
ID: 59 Len: 8 Enqueue: 0
ID: 60 Len: 8 Enqueue: 0
ID: 61 Len: 4 Enqueue: 0
ID: 62 Len: 24 Enqueue: 1329
ID: 63 Len: 8 Enqueue: 0
ID: 64 Len: 8 Enqueue: 1185
ID: 65 Len: 8 Enqueue: 1161
ID: 66 Len: 8 Enqueue: 0
ID: 67 Len: 8 Enqueue: 0
ID: 68 Len: 256 Enqueue: 0
ID: 69 Len: 16 Enqueue: 0
ID: 70 Len: 56 Enqueue: 1941
ID: 71 Len: 8 Enqueue: 0
ID: 72 Len: 0 Enqueue: 0
ID: 73 Len: 8 Enqueue: 0
ID: 74 Len: 1 Enqueue: 0
ID: 75 Len: 56 Enqueue: 1952
ID: 76 Len: 8 Enqueue: 0
ID: 77 Len: 32 Enqueue: 1297
ID: 78 Len: 16 Enqueue: 1281
ID: 79 Len: 8 Enqueue: 1209
ID: 80 Len: 8 Enqueue: 0
ID: 81 Len: 48 Enqueue: 0
ID: 82 Len: 0 Enqueue: 0
ID: 83 Len: 392 Enqueue: 0
ID: 84 Len: 384 Enqueue: 0
ID: 85 Len: 192 Enqueue: 0
ID: 86 Len: 24 Enqueue: 0
ID: 87 Len: 0 Enqueue: 0
ID: 88 Len: 24 Enqueue: 0
ID: 89 Len: 304 Enqueue: 0
ID: 90 Len: 256 Enqueue: 0
ID: 91 Len: 32 Enqueue: 0
ID: 92 Len: 160 Enqueue: 0
ID: 93 Len: 16 Enqueue: 0
ID: 94 Len: 8 Enqueue: 0
ID: 95 Len: 8 Enqueue: 1215
ID: 96 Len: 2 Enqueue: 0
ID: 97 Len: 8 Enqueue: 0
ID: 98 Len: 16 Enqueue: 0
ID: 99 Len: 8 Enqueue: 1119
ID: 100 Len: 8 Enqueue: 1125
ID: 101 Len: 8 Enqueue: 1263
ID: 102 Len: 8 Enqueue: 1137
ID: 103 Len: 8 Enqueue: 1107
ID: 104 Len: 8 Enqueue: 1113
ID: 105 Len: 8 Enqueue: 1245
ID: 106 Len: 8 Enqueue: 1251
ID: 107 Len: 24 Enqueue: 1399
ID: 108 Len: 24 Enqueue: 0
ID: 109 Len: 24 Enqueue: 1445
ID: 110 Len: 48 Enqueue: 1313
ID: 111 Len: 8 Enqueue: 1602
ID: 112 Len: 8 Enqueue: 0
ID: 113 Len: 48 Enqueue: 1560
ID: 114 Len: 8 Enqueue: 0
ID: 115 Len: 8 Enqueue: 1227
ID: 116 Len: 8 Enqueue: 1608
ID: 117 Len: 8 Enqueue: 0
ID: 118 Len: 48 Enqueue: 1572
ID: 119 Len: 8 Enqueue: 0
ID: 120 Len: 8 Enqueue: 1233
ID: 121 Len: 8 Enqueue: 1614
ID: 122 Len: 8 Enqueue: 0
ID: 123 Len: 48 Enqueue: 1584
ID: 124 Len: 8 Enqueue: 0
ID: 125 Len: 8 Enqueue: 1239
ID: 126 Len: 24 Enqueue: 1537
ID: 127 Len: 8 Enqueue: 1071
ID: 128 Len: 8 Enqueue: 1077
ID: 129 Len: 8 Enqueue: 1089
ID: 130 Len: 1 Enqueue: 0
ID: 131 Len: 8 Enqueue: 0
ID: 132 Len: 1 Enqueue: 0
ID: 133 Len: 8 Enqueue: 0
ID: 134 Len: 8 Enqueue: 0
ID: 135 Len: 8 Enqueue: 0
ID: 136 Len: 8 Enqueue: 0
ID: 137 Len: 8 Enqueue: 1339
ID: 138 Len: 8 Enqueue: 0
ID: 139 Len: 8 Enqueue: 0
ID: 140 Len: 8 Enqueue: 0
ID: 141 Len: 16 Enqueue: 1455
ID: 142 Len: 8 Enqueue: 0
ID: 143 Len: 32 Enqueue: 1985
ID: 144 Len: 16 Enqueue: 1501
ID: 145 Len: 8 Enqueue: 0
ID: 146 Len: 200 Enqueue: 1668
ID: 147 Len: 192 Enqueue: 1636
ID: 148 Len: 24 Enqueue: 1717
ID: 149 Len: 8 Enqueue: 1363
ID: 150 Len: 200 Enqueue: 1409
ID: 151 Len: 32 Enqueue: 1996
ID: 152 Len: 16 Enqueue: 1513
ID: 153 Len: 8 Enqueue: 0
ID: 154 Len: 200 Enqueue: 1679
ID: 155 Len: 192 Enqueue: 1620
ID: 156 Len: 24 Enqueue: 1701
ID: 157 Len: 8 Enqueue: 1143
ID: 158 Len: 184 Enqueue: 0
ID: 159 Len: 8 Enqueue: 1375
ID: 160 Len: 200 Enqueue: 1421
ID: 161 Len: 32 Enqueue: 2007
ID: 162 Len: 16 Enqueue: 1525
ID: 163 Len: 8 Enqueue: 0
ID: 164 Len: 136 Enqueue: 1690
ID: 165 Len: 128 Enqueue: 1652
ID: 166 Len: 16 Enqueue: 1723
ID: 167 Len: 8 Enqueue: 1596
ID: 168 Len: 8 Enqueue: 0
ID: 169 Len: 48 Enqueue: 1548
ID: 170 Len: 8 Enqueue: 0
ID: 171 Len: 8 Enqueue: 1221
ID: 172 Len: 8 Enqueue: 1387
ID: 173 Len: 136 Enqueue: 1433
ID: 174 Len: 32 Enqueue: 1974
ID: 175 Len: 16 Enqueue: 1489
ID: 176 Len: 8 Enqueue: 0
ID: 177 Len: 136 Enqueue: 0
ID: 178 Len: 128 Enqueue: 0
ID: 179 Len: 16 Enqueue: 0
ID: 180 Len: 8 Enqueue: 0
ID: 181 Len: 8 Enqueue: 1351
ID: 182 Len: 136 Enqueue: 0
ID: 183 Len: 8 Enqueue: 1083
ID: 184 Len: 128 Enqueue: 0
ID: 185 Len: 9 Enqueue: 0
ID: 186 Len: 0 Enqueue: 0
ID: 187 Len: 17 Enqueue: 0
ID: 188 Len: 0 Enqueue: 0
ID: 189 Len: 25 Enqueue: 0
ID: 190 Len: 0 Enqueue: 0
ID: 191 Len: 25 Enqueue: 0
ID: 192 Len: 0 Enqueue: 0
ID: 193 Len: 25 Enqueue: 0
ID: 194 Len: 0 Enqueue: 0
ID: 195 Len: 49 Enqueue: 0
ID: 196 Len: 0 Enqueue: 0
ID: 197 Len: 49 Enqueue: 0
ID: 198 Len: 9 Enqueue: 0
ID: 199 Len: 0 Enqueue: 0
ID: 200 Len: 9 Enqueue: 0
ID: 201 Len: 0 Enqueue: 0
ID: 202 Len: 0 Enqueue: 0
ID: 203 Len: 0 Enqueue: 0
ID: 204 Len: 0 Enqueue: 0
ID: 205 Len: 9 Enqueue: 0
ID: 206 Len: 33 Enqueue: 0
ID: 207 Len: 0 Enqueue: 0
ID: 208 Len: 33 Enqueue: 0
ID: 209 Len: 3 Enqueue: 0
ID: 210 Len: 33 Enqueue: 0
ID: 211 Len: 3 Enqueue: 0
ID: 212 Len: 9 Enqueue: 0
ID: 213 Len: 0 Enqueue: 0
ID: 214 Len: 9 Enqueue: 0
ID: 215 Len: 9 Enqueue: 0
