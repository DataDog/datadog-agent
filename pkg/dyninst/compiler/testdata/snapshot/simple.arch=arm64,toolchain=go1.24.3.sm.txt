// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessExpression[Probe[main.PointerChainArg]@0xb51cc.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 40 02 00 00 // ProcessType[*****int]
	Return 
// 0x1e: ProcessEvent[Probe[main.PointerChainArg]@b51cc]
	PrepareEventRoot 57 00 00 00 09 00 00 00 
	Call 03 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0xb51cc.expr[0]]
	Return 
// 0x2d: ProcessExpression[Probe[main.PointerSmallChainArg]@0xb5204.expr[0]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 52 02 00 00 // ProcessType[**int]
	Return 
// 0x48: ProcessEvent[Probe[main.PointerSmallChainArg]@b5204]
	PrepareEventRoot 58 00 00 00 09 00 00 00 
	Call 2d 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0xb5204.expr[0]]
	Return 
// 0x57: ProcessExpression[Probe[main.bigMapArg]@0xb5690.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 56 03 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x72: ProcessEvent[Probe[main.bigMapArg]@b5690]
	PrepareEventRoot 55 00 00 00 09 00 00 00 
	Call 57 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0xb5690.expr[0]]
	Return 
// 0x81: ProcessExpression[Probe[main.inlined]@0xb555c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0x97: ProcessEvent[Probe[main.inlined]@b555c]
	PrepareEventRoot 56 00 00 00 09 00 00 00 
	Call 81 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb555c.expr[0]]
	Return 
// 0xa6: ProcessExpression[Probe[main.inlined]@0xb4fec.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xb6: ProcessEvent[Probe[main.inlined]@b4fec]
	PrepareEventRoot 56 00 00 00 09 00 00 00 
	Call a6 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb4fec.expr[0]]
	Return 
// 0xc5: ProcessExpression[Probe[main.intArg]@0xb525c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xdb: ProcessEvent[Probe[main.intArg]@b525c]
	PrepareEventRoot 4d 00 00 00 09 00 00 00 
	Call c5 00 00 00 // ProcessExpression[Probe[main.intArg]@0xb525c.expr[0]]
	Return 
// 0xea: ProcessExpression[Probe[main.intArrayArg]@0xb53cc.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x106: ProcessEvent[Probe[main.intArrayArg]@b53cc]
	PrepareEventRoot 50 00 00 00 19 00 00 00 
	Call ea 00 00 00 // ProcessExpression[Probe[main.intArrayArg]@0xb53cc.expr[0]]
	Return 
// 0x115: ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb5540.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call be 02 00 00 // ProcessType[[3]string]
	Return 
// 0x136: ProcessEvent[Probe[main.stringArrayArgFrameless]@b5540]
	PrepareEventRoot 53 00 00 00 31 00 00 00 
	Call 15 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb5540.expr[0]]
	Return 
// 0x145: ProcessExpression[Probe[main.intSliceArg]@0xb534c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call e6 02 00 00 // ProcessType[[]int]
	Return 
// 0x16e: ProcessEvent[Probe[main.intSliceArg]@b534c]
	PrepareEventRoot 4f 00 00 00 19 00 00 00 
	Call 45 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0xb534c.expr[0]]
	Return 
// 0x17d: ProcessExpression[Probe[main.mapArg]@0xb561c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 50 03 00 00 // ProcessType[map[string]int]
	Return 
// 0x198: ProcessEvent[Probe[main.mapArg]@b561c]
	PrepareEventRoot 54 00 00 00 09 00 00 00 
	Call 7d 01 00 00 // ProcessExpression[Probe[main.mapArg]@0xb561c.expr[0]]
	Return 
// 0x1a7: ProcessExpression[Probe[main.stringArg]@0xb52cc.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call a8 03 00 00 // ProcessType[string]
	Return 
// 0x1c9: ProcessEvent[Probe[main.stringArg]@b52cc]
	PrepareEventRoot 4e 00 00 00 11 00 00 00 
	Call a7 01 00 00 // ProcessExpression[Probe[main.stringArg]@0xb52cc.expr[0]]
	Return 
// 0x1d8: ProcessExpression[Probe[main.stringArrayArg]@0xb54cc.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call be 02 00 00 // ProcessType[[3]string]
	Return 
// 0x1f9: ProcessEvent[Probe[main.stringArrayArg]@b54cc]
	PrepareEventRoot 52 00 00 00 31 00 00 00 
	Call d8 01 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0xb54cc.expr[0]]
	Return 
// 0x208: ProcessExpression[Probe[main.stringSliceArg]@0xb544c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 08 03 00 00 // ProcessType[[]string]
	Return 
// 0x231: ProcessEvent[Probe[main.stringSliceArg]@b544c]
	PrepareEventRoot 51 00 00 00 19 00 00 00 
	Call 08 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0xb544c.expr[0]]
	Return 
// 0x240: ProcessType[*****int]
	ProcessPointer 31 00 00 00 
	Return 
// 0x246: ProcessType[****int]
	ProcessPointer 4b 00 00 00 
	Return 
// 0x24c: ProcessType[***int]
	ProcessPointer 32 00 00 00 
	Return 
// 0x252: ProcessType[**int]
	ProcessPointer 1c 00 00 00 
	Return 
// 0x258: ProcessType[*bool]
	ProcessPointer 04 00 00 00 
	Return 
// 0x25e: ProcessType[*error]
	ProcessPointer 0e 00 00 00 
	Return 
// 0x264: ProcessType[*float32]
	ProcessPointer 11 00 00 00 
	Return 
// 0x26a: ProcessType[*float64]
	ProcessPointer 12 00 00 00 
	Return 
// 0x270: ProcessType[*int]
	ProcessPointer 07 00 00 00 
	Return 
// 0x276: ProcessType[*int32]
	ProcessPointer 0c 00 00 00 
	Return 
// 0x27c: ProcessType[*int64]
	ProcessPointer 0d 00 00 00 
	Return 
// 0x282: ProcessType[*main.bigStruct]
	ProcessPointer 48 00 00 00 
	Return 
// 0x288: ProcessType[*string]
	ProcessPointer 09 00 00 00 
	Return 
// 0x28e: ProcessType[*table<string,int>]
	ProcessPointer 39 00 00 00 
	Return 
// 0x294: ProcessType[*table<string,main.bigStruct>]
	ProcessPointer 41 00 00 00 
	Return 
// 0x29a: ProcessType[*uint]
	ProcessPointer 0a 00 00 00 
	Return 
// 0x2a0: ProcessType[*uint16]
	ProcessPointer 06 00 00 00 
	Return 
// 0x2a6: ProcessType[*uint32]
	ProcessPointer 02 00 00 00 
	Return 
// 0x2ac: ProcessType[*uint64]
	ProcessPointer 08 00 00 00 
	Return 
// 0x2b2: ProcessType[*uint8]
	ProcessPointer 03 00 00 00 
	Return 
// 0x2b8: ProcessType[*uintptr]
	ProcessPointer 01 00 00 00 
	Return 
// 0x2be: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call a8 03 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x2ce: ProcessType[[]*table<string,int>.array]
	ProcessSliceDataPrep 
	Call 8e 02 00 00 // ProcessType[*table<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x2da: ProcessType[[]*table<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call 94 02 00 00 // ProcessType[*table<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x2e6: ProcessType[[]int]
	ProcessSlice 35 00 00 00 08 00 00 00 
	Return 
// 0x2f0: ProcessType[[]noalg.map.group[string]int.array]
	ProcessSliceDataPrep 
	Call 7c 03 00 00 // ProcessType[noalg.map.group[string]int]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x2fc: ProcessType[[]noalg.map.group[string]main.bigStruct.array]
	ProcessSliceDataPrep 
	Call 87 03 00 00 // ProcessType[noalg.map.group[string]main.bigStruct]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x308: ProcessType[[]string]
	ProcessSlice 37 00 00 00 10 00 00 00 
	Return 
// 0x312: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call a8 03 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x31e: ProcessType[error]
	ProcessGoInterface 
	Return 
// 0x320: ProcessType[groupReference<string,int>]
	ProcessGoSwissMapGroups 40 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x32c: ProcessType[groupReference<string,main.bigStruct>]
	ProcessGoSwissMapGroups 4a 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x338: ProcessType[map<string,int>]
	ProcessGoSwissMap 3f 00 00 00 3c 00 00 00 10 18 
	Return 
// 0x344: ProcessType[map<string,main.bigStruct>]
	ProcessGoSwissMap 49 00 00 00 44 00 00 00 10 18 
	Return 
// 0x350: ProcessType[map[string]int]
	ProcessPointer 28 00 00 00 
	Return 
// 0x356: ProcessType[map[string]main.bigStruct]
	ProcessPointer 2d 00 00 00 
	Return 
// 0x35c: ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	ProcessArrayDataPrep c0 00 00 00 
	Call 92 03 00 00 // ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x36c: ProcessType[noalg.[8]struct { key string; elem int }]
	ProcessArrayDataPrep c0 00 00 00 
	Call a2 03 00 00 // ProcessType[noalg.struct { key string; elem int }]
	ProcessSliceDataRepeat 18 00 00 00 
	Return 
// 0x37c: ProcessType[noalg.map.group[string]int]
	IncrementOutputOffset 08 00 00 00 
	Call 6c 03 00 00 // ProcessType[noalg.[8]struct { key string; elem int }]
	Return 
// 0x387: ProcessType[noalg.map.group[string]main.bigStruct]
	IncrementOutputOffset 08 00 00 00 
	Call 5c 03 00 00 // ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	Return 
// 0x392: ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	Call a8 03 00 00 // ProcessType[string]
	IncrementOutputOffset 10 00 00 00 
	Call 82 02 00 00 // ProcessType[*main.bigStruct]
	Return 
// 0x3a2: ProcessType[noalg.struct { key string; elem int }]
	Call a8 03 00 00 // ProcessType[string]
	Return 
// 0x3a8: ProcessType[string]
	ProcessString 33 00 00 00 
	Return 
// 0x3ae: ProcessType[table<string,int>]
	IncrementOutputOffset 10 00 00 00 
	Call 20 03 00 00 // ProcessType[groupReference<string,int>]
	Return 
// 0x3b9: ProcessType[table<string,main.bigStruct>]
	IncrementOutputOffset 10 00 00 00 
	Call 2c 03 00 00 // ProcessType[groupReference<string,main.bigStruct>]
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 4 Enqueue: 0
ID: 3 Len: 1 Enqueue: 0
ID: 4 Len: 1 Enqueue: 0
ID: 5 Len: 8 Enqueue: 690
ID: 6 Len: 2 Enqueue: 0
ID: 7 Len: 8 Enqueue: 0
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 16 Enqueue: 936
ID: 10 Len: 8 Enqueue: 0
ID: 11 Len: 8 Enqueue: 600
ID: 12 Len: 4 Enqueue: 0
ID: 13 Len: 8 Enqueue: 0
ID: 14 Len: 16 Enqueue: 798
ID: 15 Len: 8 Enqueue: 0
ID: 16 Len: 1 Enqueue: 0
ID: 17 Len: 4 Enqueue: 0
ID: 18 Len: 8 Enqueue: 0
ID: 19 Len: 8 Enqueue: 696
ID: 20 Len: 8 Enqueue: 630
ID: 21 Len: 8 Enqueue: 678
ID: 22 Len: 8 Enqueue: 648
ID: 23 Len: 2 Enqueue: 0
ID: 24 Len: 8 Enqueue: 0
ID: 25 Len: 16 Enqueue: 0
ID: 26 Len: 8 Enqueue: 618
ID: 27 Len: 8 Enqueue: 636
ID: 28 Len: 8 Enqueue: 624
ID: 29 Len: 8 Enqueue: 684
ID: 30 Len: 8 Enqueue: 606
ID: 31 Len: 8 Enqueue: 612
ID: 32 Len: 8 Enqueue: 666
ID: 33 Len: 8 Enqueue: 672
ID: 34 Len: 24 Enqueue: 742
ID: 35 Len: 24 Enqueue: 0
ID: 36 Len: 24 Enqueue: 776
ID: 37 Len: 48 Enqueue: 702
ID: 38 Len: 8 Enqueue: 848
ID: 39 Len: 8 Enqueue: 0
ID: 40 Len: 48 Enqueue: 824
ID: 41 Len: 8 Enqueue: 0
ID: 42 Len: 8 Enqueue: 654
ID: 43 Len: 8 Enqueue: 854
ID: 44 Len: 8 Enqueue: 0
ID: 45 Len: 48 Enqueue: 836
ID: 46 Len: 8 Enqueue: 0
ID: 47 Len: 8 Enqueue: 660
ID: 48 Len: 8 Enqueue: 576
ID: 49 Len: 8 Enqueue: 582
ID: 50 Len: 8 Enqueue: 594
ID: 51 Len: 2048 Enqueue: 0
ID: 52 Len: 8 Enqueue: 0
ID: 53 Len: 2048 Enqueue: 0
ID: 54 Len: 8 Enqueue: 0
ID: 55 Len: 2048 Enqueue: 786
ID: 56 Len: 8 Enqueue: 0
ID: 57 Len: 32 Enqueue: 942
ID: 58 Len: 16 Enqueue: 800
ID: 59 Len: 8 Enqueue: 0
ID: 60 Len: 200 Enqueue: 892
ID: 61 Len: 192 Enqueue: 876
ID: 62 Len: 24 Enqueue: 930
ID: 63 Len: 8192 Enqueue: 718
ID: 64 Len: 2048 Enqueue: 752
ID: 65 Len: 32 Enqueue: 953
ID: 66 Len: 16 Enqueue: 812
ID: 67 Len: 8 Enqueue: 0
ID: 68 Len: 200 Enqueue: 903
ID: 69 Len: 192 Enqueue: 860
ID: 70 Len: 24 Enqueue: 914
ID: 71 Len: 8 Enqueue: 642
ID: 72 Len: 184 Enqueue: 0
ID: 73 Len: 8192 Enqueue: 730
ID: 74 Len: 2048 Enqueue: 764
ID: 75 Len: 8 Enqueue: 588
ID: 76 Len: 128 Enqueue: 0
ID: 77 Len: 9 Enqueue: 0
ID: 78 Len: 17 Enqueue: 0
ID: 79 Len: 25 Enqueue: 0
ID: 80 Len: 25 Enqueue: 0
ID: 81 Len: 25 Enqueue: 0
ID: 82 Len: 49 Enqueue: 0
ID: 83 Len: 49 Enqueue: 0
ID: 84 Len: 9 Enqueue: 0
ID: 85 Len: 9 Enqueue: 0
ID: 86 Len: 9 Enqueue: 0
ID: 87 Len: 9 Enqueue: 0
ID: 88 Len: 9 Enqueue: 0
