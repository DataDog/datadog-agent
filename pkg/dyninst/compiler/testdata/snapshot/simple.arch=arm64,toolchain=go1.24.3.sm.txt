// Stack machine code
	Illegal 
// 0x1: ChasePointers
	ChasePointers 
	Return 
// 0x3: ProcessType[*****int]
	ProcessPointer 03 00 00 00 
	Return 
// 0x9: ProcessExpression[Probe[main.PointerChainArg]@0xb51cc.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 03 00 00 00 // ProcessType[*****int]
	Return 
// 0x24: ProcessEvent[Probe[main.PointerChainArg]@b51cc]
	PrepareEventRoot 3f 00 00 00 09 00 00 00 
	Call 09 00 00 00 // ProcessExpression[Probe[main.PointerChainArg]@0xb51cc.expr[0]]
	Return 
// 0x33: ProcessType[**int]
	ProcessPointer 06 00 00 00 
	Return 
// 0x39: ProcessExpression[Probe[main.PointerSmallChainArg]@0xb5204.expr[0]]
	ExprPrepare 
	ExprReadRegister 05 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 33 00 00 00 // ProcessType[**int]
	Return 
// 0x54: ProcessEvent[Probe[main.PointerSmallChainArg]@b5204]
	PrepareEventRoot 40 00 00 00 09 00 00 00 
	Call 39 00 00 00 // ProcessExpression[Probe[main.PointerSmallChainArg]@0xb5204.expr[0]]
	Return 
// 0x63: ProcessType[map[string]main.bigStruct]
	ProcessPointer 1f 00 00 00 
	Return 
// 0x69: ProcessExpression[Probe[main.bigMapArg]@0xb5690.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call 63 00 00 00 // ProcessType[map[string]main.bigStruct]
	Return 
// 0x84: ProcessEvent[Probe[main.bigMapArg]@b5690]
	PrepareEventRoot 3d 00 00 00 09 00 00 00 
	Call 69 00 00 00 // ProcessExpression[Probe[main.bigMapArg]@0xb5690.expr[0]]
	Return 
// 0x93: ProcessExpression[Probe[main.inlined]@0xb555c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xa9: ProcessEvent[Probe[main.inlined]@b555c]
	PrepareEventRoot 3e 00 00 00 09 00 00 00 
	Call 93 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb555c.expr[0]]
	Return 
// 0xb8: ProcessExpression[Probe[main.inlined]@0xb4fec.expr[0]]
	ExprPrepare 
	Return 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xc8: ProcessEvent[Probe[main.inlined]@b4fec]
	PrepareEventRoot 3e 00 00 00 09 00 00 00 
	Call b8 00 00 00 // ProcessExpression[Probe[main.inlined]@0xb4fec.expr[0]]
	Return 
// 0xd7: ProcessExpression[Probe[main.intArg]@0xb525c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Return 
// 0xed: ProcessEvent[Probe[main.intArg]@b525c]
	PrepareEventRoot 35 00 00 00 09 00 00 00 
	Call d7 00 00 00 // ProcessExpression[Probe[main.intArg]@0xb525c.expr[0]]
	Return 
// 0xfc: ProcessExpression[Probe[main.intArrayArg]@0xb53cc.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 18 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Return 
// 0x118: ProcessEvent[Probe[main.intArrayArg]@b53cc]
	PrepareEventRoot 38 00 00 00 19 00 00 00 
	Call fc 00 00 00 // ProcessExpression[Probe[main.intArrayArg]@0xb53cc.expr[0]]
	Return 
// 0x127: ProcessType[string]
	ProcessString 2b 00 00 00 
	Return 
// 0x12d: ProcessType[[3]string]
	ProcessArrayDataPrep 30 00 00 00 
	Call 27 01 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x13d: ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb5540.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 2d 01 00 00 // ProcessType[[3]string]
	Return 
// 0x15e: ProcessEvent[Probe[main.stringArrayArgFrameless]@b5540]
	PrepareEventRoot 3b 00 00 00 31 00 00 00 
	Call 3d 01 00 00 // ProcessExpression[Probe[main.stringArrayArgFrameless]@0xb5540.expr[0]]
	Return 
// 0x16d: ProcessType[[]int]
	ProcessSlice 2d 00 00 00 08 00 00 00 
	Return 
// 0x177: ProcessExpression[Probe[main.intSliceArg]@0xb534c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 6d 01 00 00 // ProcessType[[]int]
	Return 
// 0x1a0: ProcessEvent[Probe[main.intSliceArg]@b534c]
	PrepareEventRoot 37 00 00 00 19 00 00 00 
	Call 77 01 00 00 // ProcessExpression[Probe[main.intSliceArg]@0xb534c.expr[0]]
	Return 
// 0x1af: ProcessType[map[string]int]
	ProcessPointer 11 00 00 00 
	Return 
// 0x1b5: ProcessExpression[Probe[main.mapArg]@0xb561c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprSave 01 00 00 00 08 00 00 00 00 00 00 00 
	Call af 01 00 00 // ProcessType[map[string]int]
	Return 
// 0x1d0: ProcessEvent[Probe[main.mapArg]@b561c]
	PrepareEventRoot 3c 00 00 00 09 00 00 00 
	Call b5 01 00 00 // ProcessExpression[Probe[main.mapArg]@0xb561c.expr[0]]
	Return 
// 0x1df: ProcessExpression[Probe[main.stringArg]@0xb52cc.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprSave 01 00 00 00 10 00 00 00 00 00 00 00 
	Call 27 01 00 00 // ProcessType[string]
	Return 
// 0x201: ProcessEvent[Probe[main.stringArg]@b52cc]
	PrepareEventRoot 36 00 00 00 11 00 00 00 
	Call df 01 00 00 // ProcessExpression[Probe[main.stringArg]@0xb52cc.expr[0]]
	Return 
// 0x210: ProcessExpression[Probe[main.stringArrayArg]@0xb54cc.expr[0]]
	ExprPrepare 
	ExprDereferenceCfa 08 00 00 00 30 00 00 00 00 00 00 00 
	ExprSave 01 00 00 00 30 00 00 00 00 00 00 00 
	Call 2d 01 00 00 // ProcessType[[3]string]
	Return 
// 0x231: ProcessEvent[Probe[main.stringArrayArg]@b54cc]
	PrepareEventRoot 3a 00 00 00 31 00 00 00 
	Call 10 02 00 00 // ProcessExpression[Probe[main.stringArrayArg]@0xb54cc.expr[0]]
	Return 
// 0x240: ProcessType[[]string]
	ProcessSlice 2f 00 00 00 10 00 00 00 
	Return 
// 0x24a: ProcessExpression[Probe[main.stringSliceArg]@0xb544c.expr[0]]
	ExprPrepare 
	ExprReadRegister 00 08 00 00 00 00 
	ExprReadRegister 01 08 08 00 00 00 
	ExprReadRegister 02 08 10 00 00 00 
	ExprSave 01 00 00 00 18 00 00 00 00 00 00 00 
	Call 40 02 00 00 // ProcessType[[]string]
	Return 
// 0x273: ProcessEvent[Probe[main.stringSliceArg]@b544c]
	PrepareEventRoot 39 00 00 00 19 00 00 00 
	Call 4a 02 00 00 // ProcessExpression[Probe[main.stringSliceArg]@0xb544c.expr[0]]
	Return 
// 0x282: ProcessType[****int]
	ProcessPointer 04 00 00 00 
	Return 
// 0x288: ProcessType[*int]
	ProcessPointer 01 00 00 00 
	Return 
// 0x28e: ProcessType[map<string,main.bigStruct>]
	ProcessGoSwissMap 33 00 00 00 25 00 00 00 10 18 
	Return 
// 0x29a: ProcessType[map<string,int>]
	ProcessGoSwissMap 31 00 00 00 1a 00 00 00 10 18 
	Return 
// 0x2a6: ProcessType[[]string.array]
	ProcessSliceDataPrep 
	Call 27 01 00 00 // ProcessType[string]
	ProcessSliceDataRepeat 10 00 00 00 
	Return 
// 0x2b2: ProcessType[***int]
	ProcessPointer 05 00 00 00 
	Return 
// 0x2b8: ProcessType[*table<string,main.bigStruct>]
	ProcessPointer 22 00 00 00 
	Return 
// 0x2be: ProcessType[[]*table<string,main.bigStruct>.array]
	ProcessSliceDataPrep 
	Call b8 02 00 00 // ProcessType[*table<string,main.bigStruct>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x2ca: ProcessType[*main.bigStruct]
	ProcessPointer 29 00 00 00 
	Return 
// 0x2d0: ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	Call 27 01 00 00 // ProcessType[string]
	IncrementOutputOffset 10 00 00 00 
	Call ca 02 00 00 // ProcessType[*main.bigStruct]
	Return 
// 0x2e0: ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	ProcessArrayDataPrep c0 00 00 00 
	Call d0 02 00 00 // ProcessType[noalg.struct { key string; elem *main.bigStruct }]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x2f0: ProcessType[noalg.map.group[string]main.bigStruct]
	IncrementOutputOffset 08 00 00 00 
	Call e0 02 00 00 // ProcessType[noalg.[8]struct { key string; elem *main.bigStruct }]
	Return 
// 0x2fb: ProcessType[*table<string,int>]
	ProcessPointer 16 00 00 00 
	Return 
// 0x301: ProcessType[[]*table<string,int>.array]
	ProcessSliceDataPrep 
	Call fb 02 00 00 // ProcessType[*table<string,int>]
	ProcessSliceDataRepeat 08 00 00 00 
	Return 
// 0x30d: ProcessType[noalg.struct { key string; elem int }]
	Call 27 01 00 00 // ProcessType[string]
	Return 
// 0x313: ProcessType[noalg.[8]struct { key string; elem int }]
	ProcessArrayDataPrep c0 00 00 00 
	Call 0d 03 00 00 // ProcessType[noalg.struct { key string; elem int }]
	ProcessSliceDataRepeat 18 00 00 00 
	Return 
// 0x323: ProcessType[noalg.map.group[string]int]
	IncrementOutputOffset 08 00 00 00 
	Call 13 03 00 00 // ProcessType[noalg.[8]struct { key string; elem int }]
	Return 
// 0x32e: ProcessType[groupReference<string,main.bigStruct>]
	ProcessGoSwissMapGroups 34 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x33a: ProcessType[table<string,main.bigStruct>]
	IncrementOutputOffset 10 00 00 00 
	Call 2e 03 00 00 // ProcessType[groupReference<string,main.bigStruct>]
	Return 
// 0x345: ProcessType[groupReference<string,int>]
	ProcessGoSwissMapGroups 32 00 00 00 c8 00 00 00 00 08 
	Return 
// 0x351: ProcessType[table<string,int>]
	IncrementOutputOffset 10 00 00 00 
	Call 45 03 00 00 // ProcessType[groupReference<string,int>]
	Return 
// 0x35c: ProcessType[[]noalg.map.group[string]main.bigStruct.array]
	ProcessSliceDataPrep 
	Call f0 02 00 00 // ProcessType[noalg.map.group[string]main.bigStruct]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// 0x368: ProcessType[[]noalg.map.group[string]int.array]
	ProcessSliceDataPrep 
	Call 23 03 00 00 // ProcessType[noalg.map.group[string]int]
	ProcessSliceDataRepeat 00 00 00 00 
	Return 
// Extra illegal ops to simplify code bound checks
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
	Illegal 
// Types
ID: 1 Len: 8 Enqueue: 0
ID: 2 Len: 8 Enqueue: 3
ID: 3 Len: 8 Enqueue: 642
ID: 4 Len: 8 Enqueue: 690
ID: 5 Len: 8 Enqueue: 51
ID: 6 Len: 8 Enqueue: 648
ID: 7 Len: 16 Enqueue: 295
ID: 8 Len: 8 Enqueue: 0
ID: 9 Len: 1 Enqueue: 0
ID: 10 Len: 24 Enqueue: 365
ID: 11 Len: 24 Enqueue: 0
ID: 12 Len: 24 Enqueue: 576
ID: 13 Len: 8 Enqueue: 0
ID: 14 Len: 48 Enqueue: 301
ID: 15 Len: 8 Enqueue: 431
ID: 16 Len: 8 Enqueue: 0
ID: 17 Len: 48 Enqueue: 666
ID: 18 Len: 8 Enqueue: 0
ID: 19 Len: 8 Enqueue: 0
ID: 20 Len: 8 Enqueue: 0
ID: 21 Len: 8 Enqueue: 763
ID: 22 Len: 32 Enqueue: 849
ID: 23 Len: 2 Enqueue: 0
ID: 24 Len: 16 Enqueue: 837
ID: 25 Len: 8 Enqueue: 0
ID: 26 Len: 200 Enqueue: 803
ID: 27 Len: 192 Enqueue: 787
ID: 28 Len: 24 Enqueue: 781
ID: 29 Len: 8 Enqueue: 99
ID: 30 Len: 8 Enqueue: 0
ID: 31 Len: 48 Enqueue: 654
ID: 32 Len: 8 Enqueue: 0
ID: 33 Len: 8 Enqueue: 696
ID: 34 Len: 32 Enqueue: 826
ID: 35 Len: 16 Enqueue: 814
ID: 36 Len: 8 Enqueue: 0
ID: 37 Len: 200 Enqueue: 752
ID: 38 Len: 192 Enqueue: 736
ID: 39 Len: 24 Enqueue: 720
ID: 40 Len: 8 Enqueue: 714
ID: 41 Len: 184 Enqueue: 0
ID: 42 Len: 128 Enqueue: 0
ID: 43 Len: 2048 Enqueue: 0
ID: 44 Len: 8 Enqueue: 0
ID: 45 Len: 2048 Enqueue: 0
ID: 46 Len: 8 Enqueue: 0
ID: 47 Len: 2048 Enqueue: 678
ID: 48 Len: 8 Enqueue: 0
ID: 49 Len: 8192 Enqueue: 769
ID: 50 Len: 2048 Enqueue: 872
ID: 51 Len: 8192 Enqueue: 702
ID: 52 Len: 2048 Enqueue: 860
ID: 53 Len: 9 Enqueue: 0
ID: 54 Len: 17 Enqueue: 0
ID: 55 Len: 25 Enqueue: 0
ID: 56 Len: 25 Enqueue: 0
ID: 57 Len: 25 Enqueue: 0
ID: 58 Len: 49 Enqueue: 0
ID: 59 Len: 49 Enqueue: 0
ID: 60 Len: 9 Enqueue: 0
ID: 61 Len: 9 Enqueue: 0
ID: 62 Len: 9 Enqueue: 0
ID: 63 Len: 9 Enqueue: 0
ID: 64 Len: 9 Enqueue: 0
