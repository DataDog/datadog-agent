package probe

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/DataDog/datadog-agent/pkg/security/secl/model"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActivityDump) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tree":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ProcessActivityTree")
				return
			}
			if cap(z.ProcessActivityTree) >= int(zb0002) {
				z.ProcessActivityTree = (z.ProcessActivityTree)[:zb0002]
			} else {
				z.ProcessActivityTree = make([]*ProcessActivityNode, zb0002)
			}
			for za0001 := range z.ProcessActivityTree {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ProcessActivityTree", za0001)
						return
					}
					z.ProcessActivityTree[za0001] = nil
				} else {
					if z.ProcessActivityTree[za0001] == nil {
						z.ProcessActivityTree[za0001] = new(ProcessActivityNode)
					}
					err = z.ProcessActivityTree[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "ProcessActivityTree", za0001)
						return
					}
				}
			}
		case "differentiate_args":
			z.DifferentiateArgs, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DifferentiateArgs")
				return
			}
		case "with_graph":
			z.WithGraph, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WithGraph")
				return
			}
		case "format":
			{
				var zb0003 string
				zb0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "OutputFormat")
					return
				}
				z.OutputFormat = OutputFormat(zb0003)
			}
		case "comm":
			z.Comm, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Comm")
				return
			}
		case "container_id":
			z.ContainerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ContainerID")
				return
			}
		case "tags":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0004) {
				z.Tags = (z.Tags)[:zb0004]
			} else {
				z.Tags = make([]string, zb0004)
			}
			for za0002 := range z.Tags {
				z.Tags[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0002)
					return
				}
			}
		case "start":
			z.Start, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActivityDump) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	if z.ProcessActivityTree == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Comm == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.ContainerID == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Tags == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "tree"
		err = en.Append(0xa4, 0x74, 0x72, 0x65, 0x65)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.ProcessActivityTree)))
		if err != nil {
			err = msgp.WrapError(err, "ProcessActivityTree")
			return
		}
		for za0001 := range z.ProcessActivityTree {
			if z.ProcessActivityTree[za0001] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.ProcessActivityTree[za0001].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "ProcessActivityTree", za0001)
					return
				}
			}
		}
	}
	// write "differentiate_args"
	err = en.Append(0xb2, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DifferentiateArgs)
	if err != nil {
		err = msgp.WrapError(err, "DifferentiateArgs")
		return
	}
	// write "with_graph"
	err = en.Append(0xaa, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WithGraph)
	if err != nil {
		err = msgp.WrapError(err, "WithGraph")
		return
	}
	// write "format"
	err = en.Append(0xa6, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.OutputFormat))
	if err != nil {
		err = msgp.WrapError(err, "OutputFormat")
		return
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "comm"
		err = en.Append(0xa4, 0x63, 0x6f, 0x6d, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteString(z.Comm)
		if err != nil {
			err = msgp.WrapError(err, "Comm")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "container_id"
		err = en.Append(0xac, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.ContainerID)
		if err != nil {
			err = msgp.WrapError(err, "ContainerID")
			return
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "tags"
		err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Tags)))
		if err != nil {
			err = msgp.WrapError(err, "Tags")
			return
		}
		for za0002 := range z.Tags {
			err = en.WriteString(z.Tags[za0002])
			if err != nil {
				err = msgp.WrapError(err, "Tags", za0002)
				return
			}
		}
	}
	// write "start"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteTime(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActivityDump) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(9)
	var zb0001Mask uint16 /* 9 bits */
	if z.ProcessActivityTree == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Comm == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.ContainerID == "" {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Tags == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "tree"
		o = append(o, 0xa4, 0x74, 0x72, 0x65, 0x65)
		o = msgp.AppendArrayHeader(o, uint32(len(z.ProcessActivityTree)))
		for za0001 := range z.ProcessActivityTree {
			if z.ProcessActivityTree[za0001] == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.ProcessActivityTree[za0001].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "ProcessActivityTree", za0001)
					return
				}
			}
		}
	}
	// string "differentiate_args"
	o = append(o, 0xb2, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73)
	o = msgp.AppendBool(o, z.DifferentiateArgs)
	// string "with_graph"
	o = append(o, 0xaa, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68)
	o = msgp.AppendBool(o, z.WithGraph)
	// string "format"
	o = append(o, 0xa6, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	o = msgp.AppendString(o, string(z.OutputFormat))
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "comm"
		o = append(o, 0xa4, 0x63, 0x6f, 0x6d, 0x6d)
		o = msgp.AppendString(o, z.Comm)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "container_id"
		o = append(o, 0xac, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64)
		o = msgp.AppendString(o, z.ContainerID)
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "tags"
		o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Tags)))
		for za0002 := range z.Tags {
			o = msgp.AppendString(o, z.Tags[za0002])
		}
	}
	// string "start"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendTime(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendTime(o, z.End)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActivityDump) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tree":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProcessActivityTree")
				return
			}
			if cap(z.ProcessActivityTree) >= int(zb0002) {
				z.ProcessActivityTree = (z.ProcessActivityTree)[:zb0002]
			} else {
				z.ProcessActivityTree = make([]*ProcessActivityNode, zb0002)
			}
			for za0001 := range z.ProcessActivityTree {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ProcessActivityTree[za0001] = nil
				} else {
					if z.ProcessActivityTree[za0001] == nil {
						z.ProcessActivityTree[za0001] = new(ProcessActivityNode)
					}
					bts, err = z.ProcessActivityTree[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ProcessActivityTree", za0001)
						return
					}
				}
			}
		case "differentiate_args":
			z.DifferentiateArgs, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DifferentiateArgs")
				return
			}
		case "with_graph":
			z.WithGraph, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WithGraph")
				return
			}
		case "format":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OutputFormat")
					return
				}
				z.OutputFormat = OutputFormat(zb0003)
			}
		case "comm":
			z.Comm, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Comm")
				return
			}
		case "container_id":
			z.ContainerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContainerID")
				return
			}
		case "tags":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0004) {
				z.Tags = (z.Tags)[:zb0004]
			} else {
				z.Tags = make([]string, zb0004)
			}
			for za0002 := range z.Tags {
				z.Tags[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0002)
					return
				}
			}
		case "start":
			z.Start, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActivityDump) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.ProcessActivityTree {
		if z.ProcessActivityTree[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.ProcessActivityTree[za0001].Msgsize()
		}
	}
	s += 19 + msgp.BoolSize + 11 + msgp.BoolSize + 7 + msgp.StringPrefixSize + len(string(z.OutputFormat)) + 5 + msgp.StringPrefixSize + len(z.Comm) + 13 + msgp.StringPrefixSize + len(z.ContainerID) + 5 + msgp.ArrayHeaderSize
	for za0002 := range z.Tags {
		s += msgp.StringPrefixSize + len(z.Tags[za0002])
	}
	s += 6 + msgp.TimeSize + 4 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FileActivityNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "file":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "File")
					return
				}
				z.File = nil
			} else {
				if z.File == nil {
					z.File = new(model.FileEvent)
				}
				err = z.File.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "File")
					return
				}
			}
		case "generation_type":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "GenerationType")
					return
				}
				z.GenerationType = NodeGenerationType(zb0002)
			}
		case "first_seen":
			z.FirstSeen, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "FirstSeen")
				return
			}
		case "open":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Open")
					return
				}
				z.Open = nil
			} else {
				if z.Open == nil {
					z.Open = new(OpenNode)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Open")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Open")
						return
					}
					switch msgp.UnsafeString(field) {
					case "SyscallEvent":
						err = z.Open.SyscallEvent.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Open", "SyscallEvent")
							return
						}
					case "flags":
						z.Open.Flags, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "Open", "Flags")
							return
						}
					case "mode":
						z.Open.Mode, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "Open", "Mode")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Open")
							return
						}
					}
				}
			}
		case "children":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if z.Children == nil {
				z.Children = make(map[string]*FileActivityNode, zb0004)
			} else if len(z.Children) > 0 {
				for key := range z.Children {
					delete(z.Children, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0001 string
				var za0002 *FileActivityNode
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Children")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(FileActivityNode)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
				}
				z.Children[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FileActivityNode) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.File == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.FirstSeen == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Open == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Children == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "file"
		err = en.Append(0xa4, 0x66, 0x69, 0x6c, 0x65)
		if err != nil {
			return
		}
		if z.File == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.File.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "File")
				return
			}
		}
	}
	// write "generation_type"
	err = en.Append(0xaf, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.GenerationType))
	if err != nil {
		err = msgp.WrapError(err, "GenerationType")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "first_seen"
		err = en.Append(0xaa, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteTime(z.FirstSeen)
		if err != nil {
			err = msgp.WrapError(err, "FirstSeen")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "open"
		err = en.Append(0xa4, 0x6f, 0x70, 0x65, 0x6e)
		if err != nil {
			return
		}
		if z.Open == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 3
			// write "SyscallEvent"
			err = en.Append(0x83, 0xac, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = z.Open.SyscallEvent.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Open", "SyscallEvent")
				return
			}
			// write "flags"
			err = en.Append(0xa5, 0x66, 0x6c, 0x61, 0x67, 0x73)
			if err != nil {
				return
			}
			err = en.WriteUint32(z.Open.Flags)
			if err != nil {
				err = msgp.WrapError(err, "Open", "Flags")
				return
			}
			// write "mode"
			err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
			if err != nil {
				return
			}
			err = en.WriteUint32(z.Open.Mode)
			if err != nil {
				err = msgp.WrapError(err, "Open", "Mode")
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "children"
		err = en.Append(0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Children)))
		if err != nil {
			err = msgp.WrapError(err, "Children")
			return
		}
		for za0001, za0002 := range z.Children {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if za0002 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = za0002.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0001)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FileActivityNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.File == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.FirstSeen == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Open == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Children == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "file"
		o = append(o, 0xa4, 0x66, 0x69, 0x6c, 0x65)
		if z.File == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.File.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "File")
				return
			}
		}
	}
	// string "generation_type"
	o = append(o, 0xaf, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, string(z.GenerationType))
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "first_seen"
		o = append(o, 0xaa, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e)
		o = msgp.AppendTime(o, z.FirstSeen)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "open"
		o = append(o, 0xa4, 0x6f, 0x70, 0x65, 0x6e)
		if z.Open == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "SyscallEvent"
			o = append(o, 0x83, 0xac, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74)
			o, err = z.Open.SyscallEvent.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Open", "SyscallEvent")
				return
			}
			// string "flags"
			o = append(o, 0xa5, 0x66, 0x6c, 0x61, 0x67, 0x73)
			o = msgp.AppendUint32(o, z.Open.Flags)
			// string "mode"
			o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
			o = msgp.AppendUint32(o, z.Open.Mode)
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "children"
		o = append(o, 0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
		o = msgp.AppendMapHeader(o, uint32(len(z.Children)))
		for za0001, za0002 := range z.Children {
			o = msgp.AppendString(o, za0001)
			if za0002 == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = za0002.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0001)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileActivityNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "file":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.File = nil
			} else {
				if z.File == nil {
					z.File = new(model.FileEvent)
				}
				bts, err = z.File.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "File")
					return
				}
			}
		case "generation_type":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenerationType")
					return
				}
				z.GenerationType = NodeGenerationType(zb0002)
			}
		case "first_seen":
			z.FirstSeen, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstSeen")
				return
			}
		case "open":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Open = nil
			} else {
				if z.Open == nil {
					z.Open = new(OpenNode)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Open")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Open")
						return
					}
					switch msgp.UnsafeString(field) {
					case "SyscallEvent":
						bts, err = z.Open.SyscallEvent.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Open", "SyscallEvent")
							return
						}
					case "flags":
						z.Open.Flags, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Open", "Flags")
							return
						}
					case "mode":
						z.Open.Mode, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Open", "Mode")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Open")
							return
						}
					}
				}
			}
		case "children":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if z.Children == nil {
				z.Children = make(map[string]*FileActivityNode, zb0004)
			} else if len(z.Children) > 0 {
				for key := range z.Children {
					delete(z.Children, key)
				}
			}
			for zb0004 > 0 {
				var za0001 string
				var za0002 *FileActivityNode
				zb0004--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Children")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(FileActivityNode)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
				}
				z.Children[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FileActivityNode) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5
	if z.File == nil {
		s += msgp.NilSize
	} else {
		s += z.File.Msgsize()
	}
	s += 16 + msgp.StringPrefixSize + len(string(z.GenerationType)) + 11 + msgp.TimeSize + 5
	if z.Open == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 13 + z.Open.SyscallEvent.Msgsize() + 6 + msgp.Uint32Size + 5 + msgp.Uint32Size
	}
	s += 9 + msgp.MapHeaderSize
	if z.Children != nil {
		for za0001, za0002 := range z.Children {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NodeGenerationType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = NodeGenerationType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NodeGenerationType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NodeGenerationType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeGenerationType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = NodeGenerationType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NodeGenerationType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpenNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SyscallEvent":
			err = z.SyscallEvent.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SyscallEvent")
				return
			}
		case "flags":
			z.Flags, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Flags")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpenNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "SyscallEvent"
	err = en.Append(0x83, 0xac, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.SyscallEvent.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SyscallEvent")
		return
	}
	// write "flags"
	err = en.Append(0xa5, 0x66, 0x6c, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Flags)
	if err != nil {
		err = msgp.WrapError(err, "Flags")
		return
	}
	// write "mode"
	err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpenNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "SyscallEvent"
	o = append(o, 0x83, 0xac, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74)
	o, err = z.SyscallEvent.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SyscallEvent")
		return
	}
	// string "flags"
	o = append(o, 0xa5, 0x66, 0x6c, 0x61, 0x67, 0x73)
	o = msgp.AppendUint32(o, z.Flags)
	// string "mode"
	o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.Mode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpenNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SyscallEvent":
			bts, err = z.SyscallEvent.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SyscallEvent")
				return
			}
		case "flags":
			z.Flags, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Flags")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpenNode) Msgsize() (s int) {
	s = 1 + 13 + z.SyscallEvent.Msgsize() + 6 + msgp.Uint32Size + 5 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OutputFormat) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = OutputFormat(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OutputFormat) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OutputFormat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OutputFormat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = OutputFormat(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OutputFormat) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProcessActivityNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "process":
			err = z.Process.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		case "generation_type":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "GenerationType")
					return
				}
				z.GenerationType = NodeGenerationType(zb0002)
			}
		case "files":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string]*FileActivityNode, zb0003)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 string
				var za0002 *FileActivityNode
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Files", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(FileActivityNode)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Files", za0001)
						return
					}
				}
				z.Files[za0001] = za0002
			}
		case "children":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0004) {
				z.Children = (z.Children)[:zb0004]
			} else {
				z.Children = make([]*ProcessActivityNode, zb0004)
			}
			for za0003 := range z.Children {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
					z.Children[za0003] = nil
				} else {
					if z.Children[za0003] == nil {
						z.Children[za0003] = new(ProcessActivityNode)
					}
					err = z.Children[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProcessActivityNode) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.Files == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Children == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "process"
	err = en.Append(0xa7, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = z.Process.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Process")
		return
	}
	// write "generation_type"
	err = en.Append(0xaf, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.GenerationType))
	if err != nil {
		err = msgp.WrapError(err, "GenerationType")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "files"
		err = en.Append(0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.Files)))
		if err != nil {
			err = msgp.WrapError(err, "Files")
			return
		}
		for za0001, za0002 := range z.Files {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if za0002 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = za0002.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "children"
		err = en.Append(0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Children)))
		if err != nil {
			err = msgp.WrapError(err, "Children")
			return
		}
		for za0003 := range z.Children {
			if z.Children[za0003] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Children[za0003].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0003)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProcessActivityNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.Files == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Children == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "process"
	o = append(o, 0xa7, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73)
	o, err = z.Process.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Process")
		return
	}
	// string "generation_type"
	o = append(o, 0xaf, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, string(z.GenerationType))
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "files"
		o = append(o, 0xa5, 0x66, 0x69, 0x6c, 0x65, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(z.Files)))
		for za0001, za0002 := range z.Files {
			o = msgp.AppendString(o, za0001)
			if za0002 == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = za0002.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Files", za0001)
					return
				}
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "children"
		o = append(o, 0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Children)))
		for za0003 := range z.Children {
			if z.Children[za0003] == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Children[za0003].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0003)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProcessActivityNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "process":
			bts, err = z.Process.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		case "generation_type":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GenerationType")
					return
				}
				z.GenerationType = NodeGenerationType(zb0002)
			}
		case "files":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Files")
				return
			}
			if z.Files == nil {
				z.Files = make(map[string]*FileActivityNode, zb0003)
			} else if len(z.Files) > 0 {
				for key := range z.Files {
					delete(z.Files, key)
				}
			}
			for zb0003 > 0 {
				var za0001 string
				var za0002 *FileActivityNode
				zb0003--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Files")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(FileActivityNode)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Files", za0001)
						return
					}
				}
				z.Files[za0001] = za0002
			}
		case "children":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0004) {
				z.Children = (z.Children)[:zb0004]
			} else {
				z.Children = make([]*ProcessActivityNode, zb0004)
			}
			for za0003 := range z.Children {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Children[za0003] = nil
				} else {
					if z.Children[za0003] == nil {
						z.Children[za0003] = new(ProcessActivityNode)
					}
					bts, err = z.Children[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0003)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProcessActivityNode) Msgsize() (s int) {
	s = 1 + 8 + z.Process.Msgsize() + 16 + msgp.StringPrefixSize + len(string(z.GenerationType)) + 6 + msgp.MapHeaderSize
	if z.Files != nil {
		for za0001, za0002 := range z.Files {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0003 := range z.Children {
		if z.Children[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.Children[za0003].Msgsize()
		}
	}
	return
}
