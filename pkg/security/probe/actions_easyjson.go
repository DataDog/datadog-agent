// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package probe

import (
	json "encoding/json"
	utils "github.com/DataDog/datadog-agent/pkg/security/utils"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB97b45a3DecodeGithubComDataDogDatadogAgentPkgSecurityProbe(in *jlexer.Lexer, out *JKillActionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "signal":
			out.Signal = string(in.String())
		case "scope":
			out.Scope = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "detected_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DetectedAt).UnmarshalJSON(data))
			}
		case "killed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.KilledAt).UnmarshalJSON(data))
			}
		case "exited_at":
			if in.IsNull() {
				in.Skip()
				out.ExitedAt = nil
			} else {
				if out.ExitedAt == nil {
					out.ExitedAt = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitedAt).UnmarshalJSON(data))
				}
			}
		case "ttr":
			out.TTR = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB97b45a3EncodeGithubComDataDogDatadogAgentPkgSecurityProbe(out *jwriter.Writer, in JKillActionReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"signal\":"
		out.RawString(prefix)
		out.String(string(in.Signal))
	}
	{
		const prefix string = ",\"scope\":"
		out.RawString(prefix)
		out.String(string(in.Scope))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		(in.CreatedAt).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"detected_at\":"
		out.RawString(prefix)
		(in.DetectedAt).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"killed_at\":"
		out.RawString(prefix)
		(in.KilledAt).MarshalEasyJSON(out)
	}
	if in.ExitedAt != nil {
		const prefix string = ",\"exited_at\":"
		out.RawString(prefix)
		(*in.ExitedAt).MarshalEasyJSON(out)
	}
	if in.TTR != "" {
		const prefix string = ",\"ttr\":"
		out.RawString(prefix)
		out.String(string(in.TTR))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JKillActionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB97b45a3EncodeGithubComDataDogDatadogAgentPkgSecurityProbe(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JKillActionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB97b45a3DecodeGithubComDataDogDatadogAgentPkgSecurityProbe(l, v)
}
