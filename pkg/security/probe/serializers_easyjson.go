//go:build linux
// +build linux

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package probe

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe(in *jlexer.Lexer, out *selinuxEnforceStatusSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe(out *jwriter.Writer, in selinuxEnforceStatusSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v selinuxEnforceStatusSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *selinuxEnforceStatusSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe1(in *jlexer.Lexer, out *selinuxBoolCommitSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe1(out *jwriter.Writer, in selinuxBoolCommitSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State {
		const prefix string = ",\"state\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.State))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v selinuxBoolCommitSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *selinuxBoolCommitSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe1(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe2(in *jlexer.Lexer, out *selinuxBoolChangeSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe2(out *jwriter.Writer, in selinuxBoolChangeSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v selinuxBoolChangeSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *selinuxBoolChangeSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe2(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe3(in *jlexer.Lexer, out *UserContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe3(out *jwriter.Writer, in UserContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe3(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe4(in *jlexer.Lexer, out *SetuidSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe4(out *jwriter.Writer, in SetuidSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetuidSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetuidSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe4(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe5(in *jlexer.Lexer, out *SetgidSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe5(out *jwriter.Writer, in SetgidSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetgidSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetgidSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe5(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe6(in *jlexer.Lexer, out *SELinuxEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bool":
			if in.IsNull() {
				in.Skip()
				out.BoolChange = nil
			} else {
				if out.BoolChange == nil {
					out.BoolChange = new(selinuxBoolChangeSerializer)
				}
				(*out.BoolChange).UnmarshalEasyJSON(in)
			}
		case "enforce":
			if in.IsNull() {
				in.Skip()
				out.EnforceStatus = nil
			} else {
				if out.EnforceStatus == nil {
					out.EnforceStatus = new(selinuxEnforceStatusSerializer)
				}
				(*out.EnforceStatus).UnmarshalEasyJSON(in)
			}
		case "bool_commit":
			if in.IsNull() {
				in.Skip()
				out.BoolCommit = nil
			} else {
				if out.BoolCommit == nil {
					out.BoolCommit = new(selinuxBoolCommitSerializer)
				}
				(*out.BoolCommit).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe6(out *jwriter.Writer, in SELinuxEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BoolChange != nil {
		const prefix string = ",\"bool\":"
		first = false
		out.RawString(prefix[1:])
		(*in.BoolChange).MarshalEasyJSON(out)
	}
	if in.EnforceStatus != nil {
		const prefix string = ",\"enforce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EnforceStatus).MarshalEasyJSON(out)
	}
	if in.BoolCommit != nil {
		const prefix string = ",\"bool_commit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BoolCommit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SELinuxEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SELinuxEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe6(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe7(in *jlexer.Lexer, out *ProcessCredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.CredentialsSerializer = new(CredentialsSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if m, ok := out.Destination.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Destination.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Destination = in.Interface()
			}
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.CapEffective = append(out.CapEffective, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe7(out *jwriter.Writer, in ProcessCredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Destination.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Destination.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Destination))
		}
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.CapEffective {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CapPermitted {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessCredentialsSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessCredentialsSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe7(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe8(in *jlexer.Lexer, out *ProcessContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ProcessCacheEntrySerializer = new(ProcessCacheEntrySerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(ProcessCacheEntrySerializer)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "ancestors":
			if in.IsNull() {
				in.Skip()
				out.Ancestors = nil
			} else {
				in.Delim('[')
				if out.Ancestors == nil {
					if !in.IsDelim(']') {
						out.Ancestors = make([]*ProcessCacheEntrySerializer, 0, 8)
					} else {
						out.Ancestors = []*ProcessCacheEntrySerializer{}
					}
				} else {
					out.Ancestors = (out.Ancestors)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *ProcessCacheEntrySerializer
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(ProcessCacheEntrySerializer)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Ancestors = append(out.Ancestors, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			out.PPid = uint32(in.Uint32())
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(ProcessCredentialsSerializer)
				}
				(*out.Credentials).UnmarshalEasyJSON(in)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				(*out.Executable).UnmarshalEasyJSON(in)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(ContainerContextSerializer)
				}
				(*out.Container).UnmarshalEasyJSON(in)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Args = append(out.Args, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Envs = append(out.Envs, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe8(out *jwriter.Writer, in ProcessContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Parent).MarshalEasyJSON(out)
	}
	if len(in.Ancestors) != 0 {
		const prefix string = ",\"ancestors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Ancestors {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != 0 {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		out.Raw((*in.ForkTime).MarshalJSON())
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		out.Raw((*in.ExecTime).MarshalJSON())
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		out.Raw((*in.ExitTime).MarshalJSON())
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		(*in.Credentials).MarshalEasyJSON(out)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		(*in.Executable).MarshalEasyJSON(out)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		(*in.Container).MarshalEasyJSON(out)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Args {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Envs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe8(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe9(in *jlexer.Lexer, out *ProcessCacheEntrySerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			out.PPid = uint32(in.Uint32())
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(ProcessCredentialsSerializer)
				}
				(*out.Credentials).UnmarshalEasyJSON(in)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				(*out.Executable).UnmarshalEasyJSON(in)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(ContainerContextSerializer)
				}
				(*out.Container).UnmarshalEasyJSON(in)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Args = append(out.Args, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.Envs = append(out.Envs, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe9(out *jwriter.Writer, in ProcessCacheEntrySerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != 0 {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		out.Raw((*in.ForkTime).MarshalJSON())
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		out.Raw((*in.ExecTime).MarshalJSON())
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		out.Raw((*in.ExitTime).MarshalJSON())
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		(*in.Credentials).MarshalEasyJSON(out)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		(*in.Executable).MarshalEasyJSON(out)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		(*in.Container).MarshalEasyJSON(out)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.Args {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Envs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessCacheEntrySerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessCacheEntrySerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe9(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe10(in *jlexer.Lexer, out *FileSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = uint32(in.Uint32())
		case "gid":
			out.GID = uint32(in.Uint32())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Flags = append(out.Flags, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe10(out *jwriter.Writer, in FileSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Flags {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		out.Raw((*in.Atime).MarshalJSON())
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		out.Raw((*in.Mtime).MarshalJSON())
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		out.Raw((*in.Ctime).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe10(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe11(in *jlexer.Lexer, out *FileEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if in.IsNull() {
				in.Skip()
				out.Destination = nil
			} else {
				if out.Destination == nil {
					out.Destination = new(FileSerializer)
				}
				(*out.Destination).UnmarshalEasyJSON(in)
			}
		case "new_mount_id":
			out.NewMountID = uint32(in.Uint32())
		case "group_id":
			out.GroupID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fstype":
			out.FSType = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = uint32(in.Uint32())
		case "gid":
			out.GID = uint32(in.Uint32())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Flags = append(out.Flags, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe11(out *jwriter.Writer, in FileEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Destination).MarshalEasyJSON(out)
	}
	if in.NewMountID != 0 {
		const prefix string = ",\"new_mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NewMountID))
	}
	if in.GroupID != 0 {
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.GroupID))
	}
	if in.Device != 0 {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fstype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Flags {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		out.Raw((*in.Atime).MarshalJSON())
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		out.Raw((*in.Mtime).MarshalJSON())
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		out.Raw((*in.Ctime).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe11(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe12(in *jlexer.Lexer, out *EventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.FileEventSerializer = new(FileEventSerializer)
	out.SELinuxEventSerializer = new(SELinuxEventSerializer)
	out.BPFEventSerializer = new(BPFEventSerializer)
	out.MMapEventSerializer = new(MMapEventSerializer)
	out.MProtectEventSerializer = new(MProtectEventSerializer)
	out.PTraceEventSerializer = new(PTraceEventSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "evt":
			(out.EventContextSerializer).UnmarshalEasyJSON(in)
		case "file":
			if in.IsNull() {
				in.Skip()
				out.FileEventSerializer = nil
			} else {
				if out.FileEventSerializer == nil {
					out.FileEventSerializer = new(FileEventSerializer)
				}
				(*out.FileEventSerializer).UnmarshalEasyJSON(in)
			}
		case "selinux":
			if in.IsNull() {
				in.Skip()
				out.SELinuxEventSerializer = nil
			} else {
				if out.SELinuxEventSerializer == nil {
					out.SELinuxEventSerializer = new(SELinuxEventSerializer)
				}
				(*out.SELinuxEventSerializer).UnmarshalEasyJSON(in)
			}
		case "bpf":
			if in.IsNull() {
				in.Skip()
				out.BPFEventSerializer = nil
			} else {
				if out.BPFEventSerializer == nil {
					out.BPFEventSerializer = new(BPFEventSerializer)
				}
				(*out.BPFEventSerializer).UnmarshalEasyJSON(in)
			}
		case "mmap":
			if in.IsNull() {
				in.Skip()
				out.MMapEventSerializer = nil
			} else {
				if out.MMapEventSerializer == nil {
					out.MMapEventSerializer = new(MMapEventSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe13(in, out.MMapEventSerializer)
			}
		case "mprotect":
			if in.IsNull() {
				in.Skip()
				out.MProtectEventSerializer = nil
			} else {
				if out.MProtectEventSerializer == nil {
					out.MProtectEventSerializer = new(MProtectEventSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe14(in, out.MProtectEventSerializer)
			}
		case "ptrace":
			if in.IsNull() {
				in.Skip()
				out.PTraceEventSerializer = nil
			} else {
				if out.PTraceEventSerializer == nil {
					out.PTraceEventSerializer = new(PTraceEventSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe15(in, out.PTraceEventSerializer)
			}
		case "usr":
			(out.UserContextSerializer).UnmarshalEasyJSON(in)
		case "process":
			(out.ProcessContextSerializer).UnmarshalEasyJSON(in)
		case "dd":
			(out.DDContextSerializer).UnmarshalEasyJSON(in)
		case "container":
			if in.IsNull() {
				in.Skip()
				out.ContainerContextSerializer = nil
			} else {
				if out.ContainerContextSerializer == nil {
					out.ContainerContextSerializer = new(ContainerContextSerializer)
				}
				(*out.ContainerContextSerializer).UnmarshalEasyJSON(in)
			}
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe12(out *jwriter.Writer, in EventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"evt\":"
		first = false
		out.RawString(prefix[1:])
		(in.EventContextSerializer).MarshalEasyJSON(out)
	}
	if in.FileEventSerializer != nil {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FileEventSerializer).MarshalEasyJSON(out)
	}
	if in.SELinuxEventSerializer != nil {
		const prefix string = ",\"selinux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SELinuxEventSerializer).MarshalEasyJSON(out)
	}
	if in.BPFEventSerializer != nil {
		const prefix string = ",\"bpf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BPFEventSerializer).MarshalEasyJSON(out)
	}
	if in.MMapEventSerializer != nil {
		const prefix string = ",\"mmap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe13(out, *in.MMapEventSerializer)
	}
	if in.MProtectEventSerializer != nil {
		const prefix string = ",\"mprotect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe14(out, *in.MProtectEventSerializer)
	}
	if in.PTraceEventSerializer != nil {
		const prefix string = ",\"ptrace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe15(out, *in.PTraceEventSerializer)
	}
	if true {
		const prefix string = ",\"usr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.UserContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ProcessContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"dd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DDContextSerializer).MarshalEasyJSON(out)
	}
	if in.ContainerContextSerializer != nil {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContainerContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe12(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe15(in *jlexer.Lexer, out *PTraceEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "tracee":
			if in.IsNull() {
				in.Skip()
				out.Tracee = nil
			} else {
				if out.Tracee == nil {
					out.Tracee = new(ProcessContextSerializer)
				}
				(*out.Tracee).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe15(out *jwriter.Writer, in PTraceEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	if in.Tracee != nil {
		const prefix string = ",\"tracee\":"
		out.RawString(prefix)
		(*in.Tracee).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe14(in *jlexer.Lexer, out *MProtectEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vm_start":
			out.VMStart = string(in.String())
		case "vm_end":
			out.VMEnd = string(in.String())
		case "vm_protection":
			out.VMProtection = string(in.String())
		case "new_protection":
			out.ReqProtection = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe14(out *jwriter.Writer, in MProtectEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vm_start\":"
		out.RawString(prefix[1:])
		out.String(string(in.VMStart))
	}
	{
		const prefix string = ",\"vm_end\":"
		out.RawString(prefix)
		out.String(string(in.VMEnd))
	}
	{
		const prefix string = ",\"vm_protection\":"
		out.RawString(prefix)
		out.String(string(in.VMProtection))
	}
	{
		const prefix string = ",\"new_protection\":"
		out.RawString(prefix)
		out.String(string(in.ReqProtection))
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe13(in *jlexer.Lexer, out *MMapEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "length":
			out.Len = uint32(in.Uint32())
		case "protection":
			out.Protection = string(in.String())
		case "flags":
			out.Flags = string(in.String())
		case "file":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				if out.File == nil {
					out.File = new(FileSerializer)
				}
				(*out.File).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe13(out *jwriter.Writer, in MMapEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Offset))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Len))
	}
	{
		const prefix string = ",\"protection\":"
		out.RawString(prefix)
		out.String(string(in.Protection))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.String(string(in.Flags))
	}
	if in.File != nil {
		const prefix string = ",\"file\":"
		out.RawString(prefix)
		(*in.File).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe16(in *jlexer.Lexer, out *EventContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "outcome":
			out.Outcome = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe16(out *jwriter.Writer, in EventContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	if in.Outcome != "" {
		const prefix string = ",\"outcome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Outcome))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe16(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe17(in *jlexer.Lexer, out *DDContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "span_id":
			out.SpanID = uint64(in.Uint64())
		case "trace_id":
			out.TraceID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe17(out *jwriter.Writer, in DDContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SpanID != 0 {
		const prefix string = ",\"span_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.SpanID))
	}
	if in.TraceID != 0 {
		const prefix string = ",\"trace_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TraceID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DDContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DDContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe17(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe18(in *jlexer.Lexer, out *CredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.CapEffective = append(out.CapEffective, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe18(out *jwriter.Writer, in CredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.CapEffective {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.CapPermitted {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialsSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialsSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe18(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe19(in *jlexer.Lexer, out *ContainerContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe19(out *jwriter.Writer, in ContainerContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe19(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe20(in *jlexer.Lexer, out *CapsetSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.CapEffective = append(out.CapEffective, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe20(out *jwriter.Writer, in CapsetSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix[1:])
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.CapEffective {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.CapPermitted {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CapsetSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CapsetSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe20(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe21(in *jlexer.Lexer, out *BPFProgramSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "program_type":
			out.ProgramType = string(in.String())
		case "attach_type":
			out.AttachType = string(in.String())
		case "helpers":
			if in.IsNull() {
				in.Skip()
				out.Helpers = nil
			} else {
				in.Delim('[')
				if out.Helpers == nil {
					if !in.IsDelim(']') {
						out.Helpers = make([]string, 0, 4)
					} else {
						out.Helpers = []string{}
					}
				} else {
					out.Helpers = (out.Helpers)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Helpers = append(out.Helpers, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe21(out *jwriter.Writer, in BPFProgramSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.ProgramType != "" {
		const prefix string = ",\"program_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProgramType))
	}
	if in.AttachType != "" {
		const prefix string = ",\"attach_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AttachType))
	}
	if len(in.Helpers) != 0 {
		const prefix string = ",\"helpers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.Helpers {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFProgramSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFProgramSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe21(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe22(in *jlexer.Lexer, out *BPFMapSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "map_type":
			out.MapType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe22(out *jwriter.Writer, in BPFMapSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.MapType != "" {
		const prefix string = ",\"map_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MapType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFMapSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe22(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFMapSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe22(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe23(in *jlexer.Lexer, out *BPFEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cmd":
			out.Cmd = string(in.String())
		case "map":
			if in.IsNull() {
				in.Skip()
				out.Map = nil
			} else {
				if out.Map == nil {
					out.Map = new(BPFMapSerializer)
				}
				(*out.Map).UnmarshalEasyJSON(in)
			}
		case "program":
			if in.IsNull() {
				in.Skip()
				out.Program = nil
			} else {
				if out.Program == nil {
					out.Program = new(BPFProgramSerializer)
				}
				(*out.Program).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe23(out *jwriter.Writer, in BPFEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cmd\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cmd))
	}
	if in.Map != nil {
		const prefix string = ",\"map\":"
		out.RawString(prefix)
		(*in.Map).MarshalEasyJSON(out)
	}
	if in.Program != nil {
		const prefix string = ",\"program\":"
		out.RawString(prefix)
		(*in.Program).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecurityProbe23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecurityProbe23(l, v)
}
