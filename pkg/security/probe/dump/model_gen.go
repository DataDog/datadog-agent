package dump

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StorageFormat) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageFormat(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StorageFormat) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StorageFormat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageFormat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageFormat(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StorageFormat) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StorageRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "storage_type":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = StorageType(zb0002)
			}
		case "format":
			{
				var zb0003 string
				zb0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Format")
					return
				}
				z.Format = StorageFormat(zb0003)
			}
		case "bool":
			z.Compression, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Compression")
				return
			}
		case "output_directory":
			z.OutputDirectory, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OutputDirectory")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StorageRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "storage_type"
	err = en.Append(0x84, 0xac, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "format"
	err = en.Append(0xa6, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Format))
	if err != nil {
		err = msgp.WrapError(err, "Format")
		return
	}
	// write "bool"
	err = en.Append(0xa4, 0x62, 0x6f, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Compression)
	if err != nil {
		err = msgp.WrapError(err, "Compression")
		return
	}
	// write "output_directory"
	err = en.Append(0xb0, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.OutputDirectory)
	if err != nil {
		err = msgp.WrapError(err, "OutputDirectory")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StorageRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "storage_type"
	o = append(o, 0x84, 0xac, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, int(z.Type))
	// string "format"
	o = append(o, 0xa6, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	o = msgp.AppendString(o, string(z.Format))
	// string "bool"
	o = append(o, 0xa4, 0x62, 0x6f, 0x6f, 0x6c)
	o = msgp.AppendBool(o, z.Compression)
	// string "output_directory"
	o = append(o, 0xb0, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79)
	o = msgp.AppendString(o, z.OutputDirectory)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "storage_type":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = StorageType(zb0002)
			}
		case "format":
			{
				var zb0003 string
				zb0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Format")
					return
				}
				z.Format = StorageFormat(zb0003)
			}
		case "bool":
			z.Compression, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Compression")
				return
			}
		case "output_directory":
			z.OutputDirectory, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OutputDirectory")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StorageRequest) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(string(z.Format)) + 5 + msgp.BoolSize + 17 + msgp.StringPrefixSize + len(z.OutputDirectory)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StorageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StorageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StorageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = StorageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StorageType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
