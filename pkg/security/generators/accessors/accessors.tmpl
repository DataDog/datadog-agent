// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2022-present Datadog, Inc.
// Code generated - DO NOT EDIT.

{{range .BuildTags }}//{{.}}{{end}}

package {{.Name}}

import (
	"net"
    "reflect"
	"math"

	{{if ne $.SourcePkg $.TargetPkg}}"{{.SourcePkg}}"{{end}}
	"github.com/DataDog/datadog-agent/pkg/security/secl/compiler/eval"
	"github.com/DataDog/datadog-agent/pkg/security/secl/containerutils"
)

// to always require the math package
var _ = math.MaxUint16
var _ = net.IP{}

func (_ *Model) GetEventTypes() []eval.EventType {
	return []eval.EventType{
		{{range $Name, $Exists := .EventTypes}}
			{{- if ne $Name ""}}
			eval.EventType("{{$Name}}"),
			{{end -}}
		{{end}}
	}
}

func (_ *Model) GetFieldRestrictions(field eval.Field) []eval.EventType {
	switch field {
	{{range $Name, $Field := .Fields}}
	{{- if $Field.RestrictedTo }}
	case "{{$Name}}":
		return {{ $Field | GetFieldRestrictions }}
	{{end}}
	{{end}}
	}

	return nil
}

func (_ *Model) GetEvaluator(field eval.Field, regID eval.RegisterID) (eval.Evaluator, error) {
	switch field {
	{{range $Name, $Field := .Fields}}
	{{- if $Field.GettersOnly }}
		{{continue}}
	{{end}}

	{{if $Field.Ref}}
	{{$Ref := index $.Fields $Field.Ref}}
		{{if $Ref}}
			{{$Field = $Ref}}
		{{end}}
	{{end}}

	case "{{$Name}}":
		return &{{$Field.GetEvaluatorType}}{
			{{- if $Field.OpOverrides}}
			OpOverrides: {{$Field.OpOverrides}},
			{{- end}}
			{{- if and $Field.Iterator (not $Field.IsIterator) }}
				EvalFnc: func(ctx *eval.Context) []{{$Field.ReturnType}} {
					ctx.AppendResolvedField(field)
					{{if $Field.Handler}}
						ev := ctx.Event.(*Event)
					{{end}}

					{{$Checks := $Field | GetChecks $.AllFields}}

					iterator := &{{$Field.Iterator.ReturnType}}{}

					if regID != "" {
						{{if $Field.Iterator.IsOrigTypePtr}}
						element := iterator.At(ctx, regID, ctx.Registers[regID])
						if element == nil {
							return nil
						}
						{{else}}
						value := iterator.At(ctx, regID, ctx.Registers[regID])
						if value == nil {
							return nil
						}
						element := *value
						{{end}}

						{{range $Check := $Checks}}
							{{if $Field.Iterator.Name | HasPrefix $Check}}
								{{$SubName := $Field.Iterator.Name | TrimPrefix $Check}}
								{{$Check = $SubName | printf "element%s"}}
								if !{{$Check}}() {
									ctx.Error = &eval.ErrNotSupported{Field: field}
									return []{{$Field.ReturnType}}{ {{$Field.GetDefaultScalarReturnValue}} }
								}
							{{end}}
						{{end}}

						{{$SubName := $Field.Iterator.Name | TrimPrefix $Field.Name}}

						{{$Return := $SubName | printf "element%s"}}
						{{if $Field.Handler }}
							{{$SubName = $Field.Iterator.Name | TrimPrefix $Field.Prefix}}
							{{$Handler := $Field.Iterator.Name | TrimPrefix $Field.Handler}}
							{{$Return = print "ev.FieldHandlers." $Handler "(ev, &element" $SubName ")"}}
						{{end}}

						{{if eq $Field.ReturnType "int"}}
							{{if $Field.IsLength}}
								result := len({{".length" | TrimSuffix $Return}})
							{{else}}
								result := int({{$Return}})
							{{end}}
						{{else}}
							result := {{$Return}}
						{{end}}

						{{if not $Field.GetArrayPrefix}}
						return []{{$Field.ReturnType}}{result}
						{{else}}
						return result
						{{end}}
					}

					if result, ok := ctx.{{$Field.GetCacheName}}[field]; ok {
						return result
					}

					{{$Event := "nil"}}
					{{if $Field.Handler }}
						{{$Event = "ev"}}
					{{end}}
					{{$AncestorFunc := "newIterator"}}
					{{if $Field.GetArrayPrefix}}
						{{$AncestorFunc = "newIteratorArray"}}
					{{end}}
					results := {{$AncestorFunc}}(iterator, "{{$Field.Iterator.Name}}", ctx, {{$Event}}, func(ev *Event, current *{{$Field.Iterator.OrigType}}) {{$Field.GetArrayPrefix}}{{$Field.ReturnType}} {
						{{range $Check := $Checks}}
							{{if $Field.Iterator.Name | HasPrefix $Check}}
								{{$SubName := $Field.Iterator.Name | TrimPrefix $Check}}
								{{$Check = $SubName | printf "current%s"}}
								if !{{$Check}}() {
									ctx.Error = &eval.ErrNotSupported{Field: field}
									{{if $Field.GetArrayPrefix}}
									return nil
									{{else}}
									return {{$Field.GetDefaultScalarReturnValue}}
									{{end}}
								}
							{{end}}
						{{end}}

						{{$SubName := $Field.Iterator.Name | TrimPrefix $Field.Name}}

						{{$Return := $SubName | printf "current%s"}}
						{{if $Field.Handler }}
							{{$SubName = $Field.Iterator.Name | TrimPrefix $Field.Prefix}}
							{{$Handler := $Field.Iterator.Name | TrimPrefix $Field.Handler}}
							{{$Return = print "ev.FieldHandlers." $Handler "(ev, &current" $SubName ")"}}
						{{end}}

						{{if eq $Field.ReturnType "int"}}
							{{if $Field.IsLength}}
								return len({{".length" | TrimSuffix $Return}})
							{{else}}
								return int({{$Return}})
							{{end}}
						{{else}}
							return {{$Return}}
						{{end}}
					})

					ctx.{{$Field.GetCacheName}}[field] = results

					return results
				},
			{{- else}}
				{{- $ReturnType := $Field.ReturnType}}
				EvalFnc: func(ctx *eval.Context) {{- if not $Field.IsIterator}}{{$Field.GetArrayPrefix}}{{end}}{{$ReturnType}} {
					ctx.AppendResolvedField(field)
					{{- if not (and $Field.IsLength $Field.IsIterator)}}
						ev := ctx.Event.(*Event)
					{{end}}

					{{$Return := $Field.Name | printf "ev.%s"}}

					{{$Checks := $Field | GetChecks $.AllFields}}
					{{range $Check := $Checks}}
						{{$Check = $Check | printf "ev.%s"}}
						if !{{$Check}}() {
							ctx.Error = &eval.ErrNotSupported{Field: field}
							return {{$Field.GetDefaultReturnValue}}
						}
					{{end}}

					{{- if $Field.Handler}}
						{{$Ptr := "&"}}
						{{$Parent := index $.AllFields $Field.Prefix}}
						{{- if or (not $Parent) $Parent.IsOrigTypePtr}}
							{{$Ptr = ""}}
						{{end}}

						{{$Prefix := $Field.Prefix}}
						{{ if not $Prefix }}
							{{$Return = print "ev.FieldHandlers." $Field.Handler "(ev)"}}
						{{else}}
							{{$Return = print "ev.FieldHandlers." $Field.Handler "(ev, " $Ptr "ev." $Prefix ")"}}
						{{end}}
					{{end}}

					{{- if eq $ReturnType "int"}}
						{{- if and ($Field.IsArray) (ne $Field.OrigType "int") }}
							result := make([]int, len({{$Return}}))
							for i, v := range {{$Return}} {
								result[i] = int(v)
							}
							return result
						{{- else}}
							{{- if ne $Field.OrigType "int"}}
								return int({{$Return}})
							{{- else}}
								{{- if $Field.IsLength }}
									{{- if $Field.IsIterator}}
										iterator := &{{$Field.Iterator.ReturnType}}{}
										{{$Return = "iterator.Len(ctx)"}}
									{{else}}
										{{$Return = ".length" | TrimSuffix $Return | printf "len(%s)"}}
									{{end}}
								{{end}}
								return {{$Return}}
							{{end -}}
						{{end -}}
					{{- else}}
						return {{$Return}}
					{{end -}}
				},
			{{end -}}
			Field: field,
			{{- if $Field.Iterator}}
				{{- if gt $Field.Weight 0}}
				Weight: {{$Field.Weight}} * eval.IteratorWeight,
				{{else}}
				Weight: eval.IteratorWeight,
				{{end}}
			{{else if $Field.Handler}}
				{{- if gt $Field.Weight 0}}
					Weight: {{$Field.Weight}} * eval.HandlerWeight,
				{{else}}
					Weight: eval.HandlerWeight,
				{{end -}}
			{{else}}
				Weight: eval.FunctionWeight,
			{{end}}
		}, nil
	{{end}}
	}

	return nil, &eval.ErrFieldNotFound{Field: field}
}

func (ev *Event) GetFields() []eval.Field {
	return []eval.Field{
		{{range $Name, $Field := .Fields}}
			{{- if $Field.GettersOnly }}
				{{continue}}
			{{end}}

			"{{$Name}}",
		{{end}}
	}
}

func (ev *Event) GetFieldValue(field eval.Field) (interface{}, error) {
	m := &Model{}
	evaluator, err := m.GetEvaluator(field, "")
	if err != nil {
		return nil, err
	}

	ctx := eval.NewContext(ev)
	value := evaluator.Eval(ctx)
	if ctx.Error != nil {
		return nil, ctx.Error
	}
	return value, nil
}

func (ev *Event) GetFieldMetadata(field eval.Field) (eval.EventType, reflect.Kind, error) {
	switch field {
	{{range $Name, $Field := .Fields}}
	{{- if $Field.GettersOnly }}
		{{continue}}
	{{end}}

	case "{{$Name}}":
		return "{{$Field.Event}}", {{$Field | GetFieldReflectType}}, nil
	{{end}}
	}

	return "", reflect.Invalid, &eval.ErrFieldNotFound{Field: field}
}

func (ev *Event) SetFieldValue(field eval.Field, value interface{}) error {
	switch field {
		{{range $Name, $Field := .Fields}}
		{{- if $Field.GettersOnly }}
			{{continue}}
		{{end}}

		{{if $Field.Ref}}
		{{$Ref := index $.Fields $Field.Ref}}
			{{if $Ref}}
				{{$Field = $Ref}}
			{{end}}
		{{end}}

		{{$FieldName := $Field | BuildFirstAccessor $.AllFields}}
		case "{{$Name}}":
			{{- $Field | NewField $.AllFields}}
			{{if $Field.IsLength}}
				return &eval.ErrFieldReadOnly{Field: "{{$Name}}"}
			{{else}}
			{{- if eq $Field.BasicType "string"}}
				{{- if $Field.IsArray}}
					switch rv := value.(type) {
						case string:
							{{$FieldName}} = append({{$FieldName}}, rv)
						case []string:
							{{$FieldName}} = append({{$FieldName}}, rv...)
						default:
							return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
				{{else}}
					rv, ok := value.(string)
					if !ok {
						return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
					{{- if ne $Field.OrigType "string" }}
					{{$FieldName}} = {{$Field.OrigType}}(rv)
					{{else}}
					{{$FieldName}} = rv
					{{end}}
				{{end}}
				return nil
			{{else if eq $Field.BasicType "int"}}
				{{- if $Field.IsArray}}
					switch rv := value.(type) {
						case int:
							{{$FieldName}} = append({{$FieldName}}, {{$Field.OrigType}}(rv))
						case []int:
							for _, i := range rv {
								{{$FieldName}} = append({{$FieldName}}, {{$Field.OrigType}}(i))
							}
						default:
							return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
				{{else}}
					rv, ok := value.(int)
					if !ok {
						return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
					{{- if eq $Field.OrigType "uint16" }}
					if rv < 0 || rv > math.MaxUint16 {
						return &eval.ErrValueOutOfRange{Field: "{{$Name}}"}
					}
					{{- end }}
					{{$FieldName}} = {{$Field.OrigType}}(rv)
				{{end}}
				return nil
			{{else if eq $Field.BasicType "bool"}}
				{{- if $Field.IsArray}}
					switch rv := value.(type) {
						case bool:
							{{$FieldName}} = append({{$FieldName}}, rv)
						case []bool:
							{{$FieldName}} = append({{$FieldName}}, rv...)
						default:
							return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
				{{else}}
					rv, ok := value.(bool)
					if !ok {
						return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
					{{$FieldName}} = rv
				{{end}}
				return nil
			{{else if eq $Field.BasicType "net.IPNet"}}
				{{- if $Field.IsArray}}
					switch rv := value.(type) {
						case net.IPNet:
							{{$FieldName}} = append({{$FieldName}}, rv)
						case []net.IPNet:
							{{$FieldName}} = append({{$FieldName}}, rv...)
						default:
							return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
				{{else}}
					rv, ok := value.(net.IPNet)
					if !ok {
						return &eval.ErrValueTypeMismatch{Field: "{{$Name}}"}
					}
					{{$FieldName}} = rv
				{{end}}
				return nil
			{{end}}
			{{end}}
		{{end}}
	}

	return &eval.ErrFieldNotFound{Field: field}
}
