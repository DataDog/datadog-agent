// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2022-present Datadog, Inc.
// Code generated - DO NOT EDIT.

{{range .BuildTags }}//{{.}}{{end}}

package {{.Name}}

import (
    "time"
)

// ResolveFields resolves all the fields associate to the event type. Context fields are automatically resolved.
func (ev *Event) ResolveFields() {
    ev.resolveFields(false)
}

// ResolveFieldsForAD resolves all the fields associate to the event type. Context fields are automatically resolved.
func (ev *Event) ResolveFieldsForAD() {
    ev.resolveFields(true)
}

func (ev *Event) resolveFields(forADs bool) {
	eventType := ev.GetEventType().String()

    {{ $uniqueResolvers := dict }}
    // resolve context fields that are not related to any event type
    {{- range $Key, $Field := .Fields}}
        {{- if $Field.GettersOnly }}
	        {{continue}}
        {{end}}

        {{if $Field.Ref}}
        {{$Ref := index $.Fields $Field.Ref}}
            {{if $Ref}}
                {{$Field = $Ref}}
            {{end}}
        {{end}}

        {{- if and (eq $Field.Event "") }}
            {{ $resolver := $Field | GetFieldHandler $.AllFields }}
            {{ if and (ne $resolver "") (not (hasKey $uniqueResolvers $resolver)) }}
                {{$Checks := $Field | GetFieldHandlersChecks $.AllFields}}
                {{if $Checks}}
                    if {{$Checks}} {
						_ = {{ $resolver }}
                    }
                {{else}}
					_ = {{ $resolver }}
                {{end}}
				{{ $_ := set $uniqueResolvers $resolver "" }}
            {{end}}
        {{- end -}}
    {{end}}

    // resolve event specific fields
    switch eventType {
    {{- range $Name, $EventType := .EventTypes}}
        {{- if (ne $Name "") }}
        case "{{$Name}}":
            {{- range $Key, $FieldName := $EventType.Fields }}
                {{- $Field := index $.Fields $FieldName }}
                {{- if $Field.GettersOnly }}
	                {{continue}}
                {{end}}

                {{if $Field.Ref}}
                {{$Ref := index $.Fields $Field.Ref}}
                    {{if $Ref}}
                        {{$Field = $Ref}}
                    {{end}}
                {{end}}

                {{ $resolver := $Field | GetFieldHandler $.AllFields }}
                {{ if ne $resolver "" }}
                    {{$Checks := $Field | GetFieldHandlersChecks $.AllFields}}
                    {{if $Checks}}
                        if {{$Checks}} {
							_ = {{ $resolver }}
                        }
                    {{else}}
						_ = {{ $resolver }}
                    {{end}}
                {{end}}
            {{end}}
        {{- end}}
    {{end}}
    }
}

type FieldHandlers interface {
    {{$Handlers := .Fields | GetHandlers}}
    {{range $Proto, $Impl := $Handlers}}
        {{$Proto}}
    {{end}}

    // custom handlers not tied to any fields
    ExtraFieldHandlers
}

type FakeFieldHandlers struct {}

{{$Handlers := .Fields | GetHandlers}}
{{range $Proto, $Impl := $Handlers}}
    func (dfh *FakeFieldHandlers) {{$Proto}} {{$Impl}}
{{end}}
