// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	api "github.com/DataDog/datadog-agent/pkg/security/proto/api"
	mock "github.com/stretchr/testify/mock"
)

// SecurityModuleClientWrapper is an autogenerated mock type for the SecurityModuleClientWrapper type
type SecurityModuleClientWrapper struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) Close() {
	_m.Called()
}

// DumpDiscarders provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) DumpDiscarders() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DumpNetworkNamespace provides a mock function with given fields: snapshotInterfaces
func (_m *SecurityModuleClientWrapper) DumpNetworkNamespace(snapshotInterfaces bool) (*api.DumpNetworkNamespaceMessage, error) {
	ret := _m.Called(snapshotInterfaces)

	var r0 *api.DumpNetworkNamespaceMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (*api.DumpNetworkNamespaceMessage, error)); ok {
		return rf(snapshotInterfaces)
	}
	if rf, ok := ret.Get(0).(func(bool) *api.DumpNetworkNamespaceMessage); ok {
		r0 = rf(snapshotInterfaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DumpNetworkNamespaceMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(snapshotInterfaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DumpProcessCache provides a mock function with given fields: withArgs
func (_m *SecurityModuleClientWrapper) DumpProcessCache(withArgs bool) (string, error) {
	ret := _m.Called(withArgs)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (string, error)); ok {
		return rf(withArgs)
	}
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(withArgs)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(withArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateActivityDump provides a mock function with given fields: request
func (_m *SecurityModuleClientWrapper) GenerateActivityDump(request *api.ActivityDumpParams) (*api.ActivityDumpMessage, error) {
	ret := _m.Called(request)

	var r0 *api.ActivityDumpMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.ActivityDumpParams) (*api.ActivityDumpMessage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.ActivityDumpParams) *api.ActivityDumpMessage); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.ActivityDumpParams) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEncoding provides a mock function with given fields: request
func (_m *SecurityModuleClientWrapper) GenerateEncoding(request *api.TranscodingRequestParams) (*api.TranscodingRequestMessage, error) {
	ret := _m.Called(request)

	var r0 *api.TranscodingRequestMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*api.TranscodingRequestParams) (*api.TranscodingRequestMessage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*api.TranscodingRequestParams) *api.TranscodingRequestMessage); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TranscodingRequestMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*api.TranscodingRequestParams) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityDumpStream provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) GetActivityDumpStream() (api.SecurityModule_GetActivityDumpStreamClient, error) {
	ret := _m.Called()

	var r0 api.SecurityModule_GetActivityDumpStreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (api.SecurityModule_GetActivityDumpStreamClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() api.SecurityModule_GetActivityDumpStreamClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SecurityModule_GetActivityDumpStreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) GetConfig() (*api.SecurityConfigMessage, error) {
	ret := _m.Called()

	var r0 *api.SecurityConfigMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.SecurityConfigMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.SecurityConfigMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityConfigMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) GetEvents() (api.SecurityModule_GetEventsClient, error) {
	ret := _m.Called()

	var r0 api.SecurityModule_GetEventsClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (api.SecurityModule_GetEventsClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() api.SecurityModule_GetEventsClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SecurityModule_GetEventsClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleSetReport provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) GetRuleSetReport() (*api.GetRuleSetReportResultMessage, error) {
	ret := _m.Called()

	var r0 *api.GetRuleSetReportResultMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.GetRuleSetReportResultMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.GetRuleSetReportResultMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRuleSetReportResultMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) GetStatus() (*api.Status, error) {
	ret := _m.Called()

	var r0 *api.Status
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.Status, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Status)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivityDumps provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) ListActivityDumps() (*api.ActivityDumpListMessage, error) {
	ret := _m.Called()

	var r0 *api.ActivityDumpListMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.ActivityDumpListMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.ActivityDumpListMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpListMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfiles provides a mock function with given fields: includeCache
func (_m *SecurityModuleClientWrapper) ListSecurityProfiles(includeCache bool) (*api.SecurityProfileListMessage, error) {
	ret := _m.Called(includeCache)

	var r0 *api.SecurityProfileListMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (*api.SecurityProfileListMessage, error)); ok {
		return rf(includeCache)
	}
	if rf, ok := ret.Get(0).(func(bool) *api.SecurityProfileListMessage); ok {
		r0 = rf(includeCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityProfileListMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includeCache)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadPolicies provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) ReloadPolicies() (*api.ReloadPoliciesResultMessage, error) {
	ret := _m.Called()

	var r0 *api.ReloadPoliciesResultMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.ReloadPoliciesResultMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.ReloadPoliciesResultMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ReloadPoliciesResultMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunSelfTest provides a mock function with given fields:
func (_m *SecurityModuleClientWrapper) RunSelfTest() (*api.SecuritySelfTestResultMessage, error) {
	ret := _m.Called()

	var r0 *api.SecuritySelfTestResultMessage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.SecuritySelfTestResultMessage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.SecuritySelfTestResultMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecuritySelfTestResultMessage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSecurityProfile provides a mock function with given fields: name, tag
func (_m *SecurityModuleClientWrapper) SaveSecurityProfile(name string, tag string) (*api.SecurityProfileSaveMessage, error) {
	ret := _m.Called(name, tag)

	var r0 *api.SecurityProfileSaveMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.SecurityProfileSaveMessage, error)); ok {
		return rf(name, tag)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.SecurityProfileSaveMessage); ok {
		r0 = rf(name, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityProfileSaveMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopActivityDump provides a mock function with given fields: name, containerid, comm
func (_m *SecurityModuleClientWrapper) StopActivityDump(name string, containerid string, comm string) (*api.ActivityDumpStopMessage, error) {
	ret := _m.Called(name, containerid, comm)

	var r0 *api.ActivityDumpStopMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*api.ActivityDumpStopMessage, error)); ok {
		return rf(name, containerid, comm)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *api.ActivityDumpStopMessage); ok {
		r0 = rf(name, containerid, comm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpStopMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, containerid, comm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecurityModuleClientWrapper creates a new instance of SecurityModuleClientWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityModuleClientWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityModuleClientWrapper {
	mock := &SecurityModuleClientWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
