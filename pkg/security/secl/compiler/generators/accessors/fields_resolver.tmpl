// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2022-present Datadog, Inc.

{{range .BuildTags }}// {{.}}{{end}}

// Code generated - DO NOT EDIT.

package {{.Name}}

import (

)

// ResolveFields resolves all the fields associate to the event type. Context fields are automatically resolved.
func (ev *Event) ResolveFields(forADs bool) {
    {{ $uniqueResolvers := dict }}
    // resolve context fields that are not related to any event type
    {{- range $Key, $Field := .Fields}}
        {{- if and (eq $Field.Event "*") }}
            {{ $resolver := $Field | GetFieldResolver $.AllFields }}
            {{ if and (ne $resolver "") (not (hasKey $uniqueResolvers $resolver)) }}
                {{$Checks := $Field | GetChecks $.AllFields}}
                {{if $Checks}}
                    {{range $Check := $Checks}}
                        {{$Check = $Check | printf "ev.%s"}}
                        if {{$Check}}() {
                            {{ $resolver | FieldADPrint $Field }}
                            {{ $_ := set $uniqueResolvers $resolver "" }}
                        }
                    {{end}}
                {{else}}
                    {{ $resolver := $Field | GetFieldResolver $.AllFields }}
                    {{ if and (ne $resolver "") (not (hasKey $uniqueResolvers $resolver)) }}
                        {{ $resolver | FieldADPrint $Field }}
                        {{ $_ := set $uniqueResolvers $resolver "" }}
                    {{end}}
                {{end}}
            {{end}}
        {{- end -}}
    {{end}}

    // resolve event specific fields
    switch ev.GetEventType().String() {
    {{- range $Name, $EventType := .EventTypes}}
        {{- if (ne $Name "*") }}
        case "{{$Name}}":
            {{- range $Key, $FieldName := $EventType.Fields }}
                {{- $Field := index $.Fields $FieldName }}
                {{ $resolver := $Field | GetFieldResolver $.AllFields }}
                {{ if ne $resolver "" }}
                    {{$Checks := $Field | GetChecks $.AllFields}}
                    {{if $Checks}}
                        {{range $Check := $Checks}}
                            {{$Check = $Check | printf "ev.%s"}}
                            if {{$Check}}() {
                                {{ $resolver | FieldADPrint $Field }}
                            }
                        {{end}}
                    {{else}}
                        {{ $resolver | FieldADPrint $Field }}
                    {{end}}
                {{end}}
            {{end}}
        {{- end}}
    {{end}}
    }
}
