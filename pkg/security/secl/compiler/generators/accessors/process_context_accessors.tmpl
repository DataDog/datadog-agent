// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2022-present Datadog, Inc.
// Code generated - DO NOT EDIT.

{{range .BuildTags }}// {{.}}{{end}}

package {{.Name}}

{{range $Name, $Field := .Fields}}

{{ $pascalCaseName := PascalCaseFieldName $Name }}
{{ $getterReturnType := $Field.ReturnType }}

// Get{{$pascalCaseName}} returns the value of the field, resolving if necessary
func (ev *Event) Get{{$pascalCaseName}}() {{ if or ($Field.Iterator) ($Field.IsArray) }}[]{{- $getterReturnType}}{{ else }}{{$getterReturnType}}{{ end }} {
    {{if $Field.Iterator}}
        var values []{{$Field.ReturnType}}

        ctx := eval.NewContext(ev)

        iterator := &{{$Field.Iterator.ReturnType}}{}
        ptr := iterator.Front(ctx)

        for ptr != nil {
            {{if $Field.Iterator.IsOrigTypePtr}}
                element := (*{{$Field.Iterator.OrigType}})(ptr)
            {{else}}
                elementPtr := (*{{$Field.Iterator.OrigType}})(ptr)
                element := *elementPtr
            {{end}}

            {{$SubName := $Field.Iterator.Name | TrimPrefix $Field.Name}}

            {{$Return := $SubName | printf "element%s"}}
            {{if $Field.Handler}}
                {{$SubName = $Field.Iterator.Name | TrimPrefix $Field.Prefix}}
                {{$Handler := $Field.Iterator.Name | TrimPrefix $Field.Handler}}
                {{$Return = print "ev.FieldHandlers." $Handler "(ev, &element" $SubName ")"}}
            {{end}}

            {{if $Field.IsLength}}
            {{$Return = ".length" | TrimSuffix $Return}}
            {{end}}

            {{if and (eq $Field.ReturnType "int") (ne $Field.OrigType "int")}}
                result := int({{$Return}})
            {{else}}
                {{if $Field.IsLength}}
                    result := len({{$Return}})
                {{else}}
                    result := {{$Return}}
                {{end}}
            {{end}}

            {{if not $Field.GetArrayPrefix}}
            values = append(values, result)
            {{else}}
            values = append(values, result...)
            {{end}}

            ptr = iterator.Next()
        }

        return values
    {{else}}

        {{$Return := $Field.Name | printf "ev.%s"}}

        {{if $Field.IsLength}}
            {{$Return = ".length" | TrimSuffix $Field.Name | printf "len(ev.%s)"}}
        {{end}}
        {{if $Field.Handler}}
            {{$Ptr := "&"}}
            {{$Parent := index $.AllFields $Field.Prefix}}
            {{- if or (not $Parent) $Parent.IsOrigTypePtr}}
                {{$Ptr = ""}}
            {{end}}

            {{$Prefix := $Field.Prefix}}
            {{ if not $Prefix }}
                {{$Return = print "ev.FieldHandlers." $Field.Handler "(ev)"}}
            {{else}}
                {{$Return = print "ev.FieldHandlers." $Field.Handler "(ev, " $Ptr "ev." $Prefix ")"}}
            {{end}}
        {{end}}

            {{if eq $Field.ReturnType "string"}}
            if {{ $Return }} != nil {
                return {{$Return}}
            } else {
                return ""
            }
            {{else if eq $Field.ReturnType "int"}}
                {{- if and ($Field.IsArray) (ne $Field.OrigType "int") }}
                    result := make([]int, len({{$Return}}))
                    for i, v := range {{$Return}} {
                        result[i] = int(v)
                    }
                    return result
                {{- else}}
                    {{- if ne $Field.OrigType "int"}}
                        return int({{$Return}})
                    {{- else}}
                        return {{$Return}}
                {{end -}}
            {{end -}}
            {{else if eq $Field.ReturnType "bool"}}
                return {{$Return}}
            {{else if eq $Field.ReturnType "net.IPNet"}}
                if {{ $Return }} != nil {
                    return {{$Return}}
                } else {
                    return nil
                }
            {{end}}
    {{end}}
}
{{end}}
