// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package serializers

import (
	json "encoding/json"
	utils "github.com/DataDog/datadog-agent/pkg/security/utils"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(in *jlexer.Lexer, out *ProcessContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ProcessSerializer = new(ProcessSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(ProcessSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(in, out.Parent)
			}
		case "ancestors":
			if in.IsNull() {
				in.Skip()
				out.Ancestors = nil
			} else {
				in.Delim('[')
				if out.Ancestors == nil {
					if !in.IsDelim(']') {
						out.Ancestors = make([]*ProcessSerializer, 0, 8)
					} else {
						out.Ancestors = []*ProcessSerializer{}
					}
				} else {
					out.Ancestors = (out.Ancestors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ProcessSerializer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ProcessSerializer)
						}
						easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(in, v1)
					}
					out.Ancestors = append(out.Ancestors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			if in.IsNull() {
				in.Skip()
				out.PPid = nil
			} else {
				if out.PPid == nil {
					out.PPid = new(uint32)
				}
				*out.PPid = uint32(in.Uint32())
			}
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(ProcessCredentialsSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(in, out.Credentials)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in, out.Executable)
			}
		case "interpreter":
			if in.IsNull() {
				in.Skip()
				out.Interpreter = nil
			} else {
				if out.Interpreter == nil {
					out.Interpreter = new(FileSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in, out.Interpreter)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(ContainerContextSerializer)
				}
				(*out.Container).UnmarshalEasyJSON(in)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Args = append(out.Args, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Envs = append(out.Envs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		case "is_thread":
			out.IsThread = bool(in.Bool())
		case "is_kworker":
			out.IsKworker = bool(in.Bool())
		case "is_exec_child":
			out.IsExecChild = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(out *jwriter.Writer, in ProcessContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(out, *in.Parent)
	}
	if len(in.Ancestors) != 0 {
		const prefix string = ",\"ancestors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Ancestors {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(out, *v5)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != nil {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		(*in.ForkTime).MarshalEasyJSON(out)
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		(*in.ExecTime).MarshalEasyJSON(out)
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		(*in.ExitTime).MarshalEasyJSON(out)
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(out, *in.Credentials)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out, *in.Executable)
	}
	if in.Interpreter != nil {
		const prefix string = ",\"interpreter\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out, *in.Interpreter)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		(*in.Container).MarshalEasyJSON(out)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Args {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Envs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	if in.IsThread {
		const prefix string = ",\"is_thread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsThread))
	}
	if in.IsKworker {
		const prefix string = ",\"is_kworker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsKworker))
	}
	if in.IsExecChild {
		const prefix string = ",\"is_exec_child\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExecChild))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in *jlexer.Lexer, out *FileSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Flags = append(out.Flags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Hashes = append(out.Hashes, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out *jwriter.Writer, in FileSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Flags {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Hashes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(in *jlexer.Lexer, out *ProcessCredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.CredentialsSerializer = new(CredentialsSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if m, ok := out.Destination.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Destination.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Destination = in.Interface()
			}
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.CapEffective = append(out.CapEffective, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(out *jwriter.Writer, in ProcessCredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Destination.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Destination.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Destination))
		}
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.CapEffective {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.CapPermitted {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(in *jlexer.Lexer, out *ProcessSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			if in.IsNull() {
				in.Skip()
				out.PPid = nil
			} else {
				if out.PPid == nil {
					out.PPid = new(uint32)
				}
				*out.PPid = uint32(in.Uint32())
			}
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(ProcessCredentialsSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(in, out.Credentials)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in, out.Executable)
			}
		case "interpreter":
			if in.IsNull() {
				in.Skip()
				out.Interpreter = nil
			} else {
				if out.Interpreter == nil {
					out.Interpreter = new(FileSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in, out.Interpreter)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(ContainerContextSerializer)
				}
				(*out.Container).UnmarshalEasyJSON(in)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Args = append(out.Args, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.Envs = append(out.Envs, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		case "is_thread":
			out.IsThread = bool(in.Bool())
		case "is_kworker":
			out.IsKworker = bool(in.Bool())
		case "is_exec_child":
			out.IsExecChild = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(out *jwriter.Writer, in ProcessSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != nil {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		(*in.ForkTime).MarshalEasyJSON(out)
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		(*in.ExecTime).MarshalEasyJSON(out)
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		(*in.ExitTime).MarshalEasyJSON(out)
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(out, *in.Credentials)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out, *in.Executable)
	}
	if in.Interpreter != nil {
		const prefix string = ",\"interpreter\":"
		out.RawString(prefix)
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out, *in.Interpreter)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		(*in.Container).MarshalEasyJSON(out)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.Args {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Envs {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	if in.IsThread {
		const prefix string = ",\"is_thread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsThread))
	}
	if in.IsKworker {
		const prefix string = ",\"is_kworker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsKworker))
	}
	if in.IsExecChild {
		const prefix string = ",\"is_exec_child\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExecChild))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(in *jlexer.Lexer, out *NetworkContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(NetworkDeviceSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(in, out.Device)
			}
		case "l3_protocol":
			out.L3Protocol = string(in.String())
		case "l4_protocol":
			out.L4Protocol = string(in.String())
		case "source":
			(out.Source).UnmarshalEasyJSON(in)
		case "destination":
			(out.Destination).UnmarshalEasyJSON(in)
		case "size":
			out.Size = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(out *jwriter.Writer, in NetworkContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Device != nil {
		const prefix string = ",\"device\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(out, *in.Device)
	}
	{
		const prefix string = ",\"l3_protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.L3Protocol))
	}
	{
		const prefix string = ",\"l4_protocol\":"
		out.RawString(prefix)
		out.String(string(in.L4Protocol))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		(in.Source).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		(in.Destination).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(in *jlexer.Lexer, out *NetworkDeviceSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "netns":
			out.NetNS = uint32(in.Uint32())
		case "ifindex":
			out.IfIndex = uint32(in.Uint32())
		case "ifname":
			out.IfName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(out *jwriter.Writer, in NetworkDeviceSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"netns\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.NetNS))
	}
	{
		const prefix string = ",\"ifindex\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IfIndex))
	}
	{
		const prefix string = ",\"ifname\":"
		out.RawString(prefix)
		out.String(string(in.IfName))
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(in *jlexer.Lexer, out *MatchedRuleSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Tags = append(out.Tags, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "policy_name":
			out.PolicyName = string(in.String())
		case "policy_version":
			out.PolicyVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(out *jwriter.Writer, in MatchedRuleSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Tags {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if in.PolicyName != "" {
		const prefix string = ",\"policy_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyName))
	}
	if in.PolicyVersion != "" {
		const prefix string = ",\"policy_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyVersion))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatchedRuleSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatchedRuleSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(in *jlexer.Lexer, out *IPPortSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(out *jwriter.Writer, in IPPortSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Port))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IPPortSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IPPortSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(in *jlexer.Lexer, out *IPPortFamilySerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "family":
			out.Family = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(out *jwriter.Writer, in IPPortFamilySerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix[1:])
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Port))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IPPortFamilySerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IPPortFamilySerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(in *jlexer.Lexer, out *ExitEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cause":
			out.Cause = string(in.String())
		case "code":
			out.Code = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(out *jwriter.Writer, in ExitEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cause\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cause))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Code))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExitEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExitEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(in *jlexer.Lexer, out *EventContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "outcome":
			out.Outcome = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		case "matched_rules":
			if in.IsNull() {
				in.Skip()
				out.MatchedRules = nil
			} else {
				in.Delim('[')
				if out.MatchedRules == nil {
					if !in.IsDelim(']') {
						out.MatchedRules = make([]MatchedRuleSerializer, 0, 0)
					} else {
						out.MatchedRules = []MatchedRuleSerializer{}
					}
				} else {
					out.MatchedRules = (out.MatchedRules)[:0]
				}
				for !in.IsDelim(']') {
					var v31 MatchedRuleSerializer
					(v31).UnmarshalEasyJSON(in)
					out.MatchedRules = append(out.MatchedRules, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(out *jwriter.Writer, in EventContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	if in.Outcome != "" {
		const prefix string = ",\"outcome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Outcome))
	}
	if in.Async {
		const prefix string = ",\"async\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Async))
	}
	if len(in.MatchedRules) != 0 {
		const prefix string = ",\"matched_rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.MatchedRules {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(in *jlexer.Lexer, out *DNSQuestionSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "class":
			out.Class = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "size":
			out.Size = uint16(in.Uint16())
		case "count":
			out.Count = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(out *jwriter.Writer, in DNSQuestionSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix[1:])
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Size))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Count))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSQuestionSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSQuestionSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(in *jlexer.Lexer, out *DNSEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint16(in.Uint16())
		case "question":
			(out.Question).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(out *jwriter.Writer, in DNSEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		(in.Question).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(in *jlexer.Lexer, out *DDContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "span_id":
			out.SpanID = uint64(in.Uint64())
		case "trace_id":
			out.TraceID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(out *jwriter.Writer, in DDContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SpanID != 0 {
		const prefix string = ",\"span_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.SpanID))
	}
	if in.TraceID != 0 {
		const prefix string = ",\"trace_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TraceID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DDContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DDContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(in *jlexer.Lexer, out *ContainerContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(out *jwriter.Writer, in ContainerContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CreatedAt).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(in *jlexer.Lexer, out *BaseEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.FileEventSerializer = new(FileEventSerializer)
	out.DNSEventSerializer = new(DNSEventSerializer)
	out.NetworkContextSerializer = new(NetworkContextSerializer)
	out.ExitEventSerializer = new(ExitEventSerializer)
	out.ProcessContextSerializer = new(ProcessContextSerializer)
	out.DDContextSerializer = new(DDContextSerializer)
	out.ContainerContextSerializer = new(ContainerContextSerializer)
	out.SecurityProfileContextSerializer = new(SecurityProfileContextSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "evt":
			(out.EventContextSerializer).UnmarshalEasyJSON(in)
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "file":
			if in.IsNull() {
				in.Skip()
				out.FileEventSerializer = nil
			} else {
				if out.FileEventSerializer == nil {
					out.FileEventSerializer = new(FileEventSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(in, out.FileEventSerializer)
			}
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNSEventSerializer = nil
			} else {
				if out.DNSEventSerializer == nil {
					out.DNSEventSerializer = new(DNSEventSerializer)
				}
				(*out.DNSEventSerializer).UnmarshalEasyJSON(in)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.NetworkContextSerializer = nil
			} else {
				if out.NetworkContextSerializer == nil {
					out.NetworkContextSerializer = new(NetworkContextSerializer)
				}
				(*out.NetworkContextSerializer).UnmarshalEasyJSON(in)
			}
		case "exit":
			if in.IsNull() {
				in.Skip()
				out.ExitEventSerializer = nil
			} else {
				if out.ExitEventSerializer == nil {
					out.ExitEventSerializer = new(ExitEventSerializer)
				}
				(*out.ExitEventSerializer).UnmarshalEasyJSON(in)
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.ProcessContextSerializer = nil
			} else {
				if out.ProcessContextSerializer == nil {
					out.ProcessContextSerializer = new(ProcessContextSerializer)
				}
				(*out.ProcessContextSerializer).UnmarshalEasyJSON(in)
			}
		case "dd":
			if in.IsNull() {
				in.Skip()
				out.DDContextSerializer = nil
			} else {
				if out.DDContextSerializer == nil {
					out.DDContextSerializer = new(DDContextSerializer)
				}
				(*out.DDContextSerializer).UnmarshalEasyJSON(in)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.ContainerContextSerializer = nil
			} else {
				if out.ContainerContextSerializer == nil {
					out.ContainerContextSerializer = new(ContainerContextSerializer)
				}
				(*out.ContainerContextSerializer).UnmarshalEasyJSON(in)
			}
		case "security_profile":
			if in.IsNull() {
				in.Skip()
				out.SecurityProfileContextSerializer = nil
			} else {
				if out.SecurityProfileContextSerializer == nil {
					out.SecurityProfileContextSerializer = new(SecurityProfileContextSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(in, out.SecurityProfileContextSerializer)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(out *jwriter.Writer, in BaseEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"evt\":"
		first = false
		out.RawString(prefix[1:])
		(in.EventContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	if in.FileEventSerializer != nil {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(out, *in.FileEventSerializer)
	}
	if in.DNSEventSerializer != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DNSEventSerializer).MarshalEasyJSON(out)
	}
	if in.NetworkContextSerializer != nil {
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NetworkContextSerializer).MarshalEasyJSON(out)
	}
	if in.ExitEventSerializer != nil {
		const prefix string = ",\"exit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExitEventSerializer).MarshalEasyJSON(out)
	}
	if in.ProcessContextSerializer != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProcessContextSerializer).MarshalEasyJSON(out)
	}
	if in.DDContextSerializer != nil {
		const prefix string = ",\"dd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DDContextSerializer).MarshalEasyJSON(out)
	}
	if in.ContainerContextSerializer != nil {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContainerContextSerializer).MarshalEasyJSON(out)
	}
	if in.SecurityProfileContextSerializer != nil {
		const prefix string = ",\"security_profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(out, *in.SecurityProfileContextSerializer)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(l, v)
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(in *jlexer.Lexer, out *SecurityProfileContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Tags = append(out.Tags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(out *jwriter.Writer, in SecurityProfileContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Tags {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(in *jlexer.Lexer, out *FileEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if in.IsNull() {
				in.Skip()
				out.Destination = nil
			} else {
				if out.Destination == nil {
					out.Destination = new(FileSerializer)
				}
				easyjsonA970e379DecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in, out.Destination)
			}
		case "new_mount_id":
			out.NewMountID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fstype":
			out.FSType = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Flags = append(out.Flags, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Hashes = append(out.Hashes, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(out *jwriter.Writer, in FileEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonA970e379EncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out, *in.Destination)
	}
	if in.NewMountID != 0 {
		const prefix string = ",\"new_mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NewMountID))
	}
	if in.Device != 0 {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fstype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v39, v40 := range in.Flags {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.Hashes {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}
