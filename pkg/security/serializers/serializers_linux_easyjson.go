//go:build linux
// +build linux

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package serializers

import (
	json "encoding/json"
	utils "github.com/DataDog/datadog-agent/pkg/security/utils"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(in *jlexer.Lexer, out *UserSessionContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "session_type":
			out.SessionType = string(in.String())
		case "k8s_username":
			out.K8SUsername = string(in.String())
		case "k8s_uid":
			out.K8SUID = string(in.String())
		case "k8s_groups":
			if in.IsNull() {
				in.Skip()
				out.K8SGroups = nil
			} else {
				in.Delim('[')
				if out.K8SGroups == nil {
					if !in.IsDelim(']') {
						out.K8SGroups = make([]string, 0, 4)
					} else {
						out.K8SGroups = []string{}
					}
				} else {
					out.K8SGroups = (out.K8SGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.K8SGroups = append(out.K8SGroups, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "k8s_extra":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.K8SExtra = make(map[string][]string)
				} else {
					out.K8SExtra = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.K8SExtra)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(out *jwriter.Writer, in UserSessionContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.SessionType != "" {
		const prefix string = ",\"session_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SessionType))
	}
	if in.K8SUsername != "" {
		const prefix string = ",\"k8s_username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K8SUsername))
	}
	if in.K8SUID != "" {
		const prefix string = ",\"k8s_uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K8SUID))
	}
	if len(in.K8SGroups) != 0 {
		const prefix string = ",\"k8s_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.K8SGroups {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if len(in.K8SExtra) != 0 {
		const prefix string = ",\"k8s_extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.K8SExtra {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v7, v8 := range v6Value {
						if v7 > 0 {
							out.RawByte(',')
						}
						out.String(string(v8))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSessionContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSessionContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(in *jlexer.Lexer, out *UserContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(out *jwriter.Writer, in UserContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers1(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(in *jlexer.Lexer, out *SpliceEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipe_entry_flag":
			out.PipeEntryFlag = string(in.String())
		case "pipe_exit_flag":
			out.PipeExitFlag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(out *jwriter.Writer, in SpliceEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipe_entry_flag\":"
		out.RawString(prefix[1:])
		out.String(string(in.PipeEntryFlag))
	}
	{
		const prefix string = ",\"pipe_exit_flag\":"
		out.RawString(prefix)
		out.String(string(in.PipeExitFlag))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpliceEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpliceEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers2(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(in *jlexer.Lexer, out *SignalEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "pid":
			out.PID = uint32(in.Uint32())
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Target = nil
			} else {
				if out.Target == nil {
					out.Target = new(ProcessContextSerializer)
				}
				(*out.Target).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(out *jwriter.Writer, in SignalEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PID))
	}
	if in.Target != nil {
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		(*in.Target).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignalEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignalEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers3(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(in *jlexer.Lexer, out *SetuidSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(out *jwriter.Writer, in SetuidSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetuidSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetuidSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers4(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(in *jlexer.Lexer, out *SetgidSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(out *jwriter.Writer, in SetgidSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetgidSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetgidSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers5(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(in *jlexer.Lexer, out *SELinuxEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bool":
			if in.IsNull() {
				in.Skip()
				out.BoolChange = nil
			} else {
				if out.BoolChange == nil {
					out.BoolChange = new(SELinuxBoolChangeSerializer)
				}
				(*out.BoolChange).UnmarshalEasyJSON(in)
			}
		case "enforce":
			if in.IsNull() {
				in.Skip()
				out.EnforceStatus = nil
			} else {
				if out.EnforceStatus == nil {
					out.EnforceStatus = new(SELinuxEnforceStatusSerializer)
				}
				(*out.EnforceStatus).UnmarshalEasyJSON(in)
			}
		case "bool_commit":
			if in.IsNull() {
				in.Skip()
				out.BoolCommit = nil
			} else {
				if out.BoolCommit == nil {
					out.BoolCommit = new(SELinuxBoolCommitSerializer)
				}
				(*out.BoolCommit).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(out *jwriter.Writer, in SELinuxEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BoolChange != nil {
		const prefix string = ",\"bool\":"
		first = false
		out.RawString(prefix[1:])
		(*in.BoolChange).MarshalEasyJSON(out)
	}
	if in.EnforceStatus != nil {
		const prefix string = ",\"enforce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EnforceStatus).MarshalEasyJSON(out)
	}
	if in.BoolCommit != nil {
		const prefix string = ",\"bool_commit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BoolCommit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SELinuxEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SELinuxEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers6(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(in *jlexer.Lexer, out *SELinuxEnforceStatusSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(out *jwriter.Writer, in SELinuxEnforceStatusSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SELinuxEnforceStatusSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SELinuxEnforceStatusSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers7(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(in *jlexer.Lexer, out *SELinuxBoolCommitSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(out *jwriter.Writer, in SELinuxBoolCommitSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State {
		const prefix string = ",\"state\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.State))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SELinuxBoolCommitSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SELinuxBoolCommitSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers8(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(in *jlexer.Lexer, out *SELinuxBoolChangeSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(out *jwriter.Writer, in SELinuxBoolChangeSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SELinuxBoolChangeSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SELinuxBoolChangeSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers9(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(in *jlexer.Lexer, out *ProcessSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			if in.IsNull() {
				in.Skip()
				out.PPid = nil
			} else {
				if out.PPid == nil {
					out.PPid = new(uint32)
				}
				*out.PPid = uint32(in.Uint32())
			}
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(ProcessCredentialsSerializer)
				}
				(*out.Credentials).UnmarshalEasyJSON(in)
			}
		case "user_session":
			if in.IsNull() {
				in.Skip()
				out.UserSession = nil
			} else {
				if out.UserSession == nil {
					out.UserSession = new(UserSessionContextSerializer)
				}
				(*out.UserSession).UnmarshalEasyJSON(in)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(FileSerializer)
				}
				(*out.Executable).UnmarshalEasyJSON(in)
			}
		case "interpreter":
			if in.IsNull() {
				in.Skip()
				out.Interpreter = nil
			} else {
				if out.Interpreter == nil {
					out.Interpreter = new(FileSerializer)
				}
				(*out.Interpreter).UnmarshalEasyJSON(in)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(ContainerContextSerializer)
				}
				(*out.Container).UnmarshalEasyJSON(in)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Args = append(out.Args, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Envs = append(out.Envs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		case "is_thread":
			out.IsThread = bool(in.Bool())
		case "is_kworker":
			out.IsKworker = bool(in.Bool())
		case "is_exec_child":
			out.IsExecExec = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(out *jwriter.Writer, in ProcessSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != nil {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		(*in.ForkTime).MarshalEasyJSON(out)
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		(*in.ExecTime).MarshalEasyJSON(out)
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		(*in.ExitTime).MarshalEasyJSON(out)
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		(*in.Credentials).MarshalEasyJSON(out)
	}
	if in.UserSession != nil {
		const prefix string = ",\"user_session\":"
		out.RawString(prefix)
		(*in.UserSession).MarshalEasyJSON(out)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		(*in.Executable).MarshalEasyJSON(out)
	}
	if in.Interpreter != nil {
		const prefix string = ",\"interpreter\":"
		out.RawString(prefix)
		(*in.Interpreter).MarshalEasyJSON(out)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		(*in.Container).MarshalEasyJSON(out)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Args {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.Envs {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	if in.IsThread {
		const prefix string = ",\"is_thread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsThread))
	}
	if in.IsKworker {
		const prefix string = ",\"is_kworker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsKworker))
	}
	if in.IsExecExec {
		const prefix string = ",\"is_exec_child\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExecExec))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers10(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(in *jlexer.Lexer, out *ProcessCredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.CredentialsSerializer = new(CredentialsSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if m, ok := out.Destination.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Destination.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Destination = in.Interface()
			}
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.CapEffective = append(out.CapEffective, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(out *jwriter.Writer, in ProcessCredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Destination.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Destination.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Destination))
		}
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.CapEffective {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.CapPermitted {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessCredentialsSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessCredentialsSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers11(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(in *jlexer.Lexer, out *PTraceEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "tracee":
			if in.IsNull() {
				in.Skip()
				out.Tracee = nil
			} else {
				if out.Tracee == nil {
					out.Tracee = new(ProcessContextSerializer)
				}
				(*out.Tracee).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(out *jwriter.Writer, in PTraceEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	if in.Tracee != nil {
		const prefix string = ",\"tracee\":"
		out.RawString(prefix)
		(*in.Tracee).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PTraceEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PTraceEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers12(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(in *jlexer.Lexer, out *NetworkDeviceSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "netns":
			out.NetNS = uint32(in.Uint32())
		case "ifindex":
			out.IfIndex = uint32(in.Uint32())
		case "ifname":
			out.IfName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(out *jwriter.Writer, in NetworkDeviceSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"netns\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.NetNS))
	}
	{
		const prefix string = ",\"ifindex\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IfIndex))
	}
	{
		const prefix string = ",\"ifname\":"
		out.RawString(prefix)
		out.String(string(in.IfName))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkDeviceSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkDeviceSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers13(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(in *jlexer.Lexer, out *MountEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mp":
			if in.IsNull() {
				in.Skip()
				out.MountPoint = nil
			} else {
				if out.MountPoint == nil {
					out.MountPoint = new(FileSerializer)
				}
				(*out.MountPoint).UnmarshalEasyJSON(in)
			}
		case "root":
			if in.IsNull() {
				in.Skip()
				out.Root = nil
			} else {
				if out.Root == nil {
					out.Root = new(FileSerializer)
				}
				(*out.Root).UnmarshalEasyJSON(in)
			}
		case "mount_id":
			out.MountID = uint32(in.Uint32())
		case "parent_mount_id":
			out.ParentMountID = uint32(in.Uint32())
		case "bind_src_mount_id":
			out.BindSrcMountID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fs_type":
			out.FSType = string(in.String())
		case "mountpoint.path":
			out.MountPointPath = string(in.String())
		case "source.path":
			out.MountSourcePath = string(in.String())
		case "mountpoint.path_error":
			out.MountRootPathResolutionError = string(in.String())
		case "source.path_error":
			out.MountSourcePathResolutionError = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(out *jwriter.Writer, in MountEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MountPoint != nil {
		const prefix string = ",\"mp\":"
		first = false
		out.RawString(prefix[1:])
		(*in.MountPoint).MarshalEasyJSON(out)
	}
	if in.Root != nil {
		const prefix string = ",\"root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Root).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MountID))
	}
	{
		const prefix string = ",\"parent_mount_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.ParentMountID))
	}
	{
		const prefix string = ",\"bind_src_mount_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BindSrcMountID))
	}
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fs_type\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.MountPointPath != "" {
		const prefix string = ",\"mountpoint.path\":"
		out.RawString(prefix)
		out.String(string(in.MountPointPath))
	}
	if in.MountSourcePath != "" {
		const prefix string = ",\"source.path\":"
		out.RawString(prefix)
		out.String(string(in.MountSourcePath))
	}
	if in.MountRootPathResolutionError != "" {
		const prefix string = ",\"mountpoint.path_error\":"
		out.RawString(prefix)
		out.String(string(in.MountRootPathResolutionError))
	}
	if in.MountSourcePathResolutionError != "" {
		const prefix string = ",\"source.path_error\":"
		out.RawString(prefix)
		out.String(string(in.MountSourcePathResolutionError))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers14(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(in *jlexer.Lexer, out *ModuleEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "loaded_from_memory":
			if in.IsNull() {
				in.Skip()
				out.LoadedFromMemory = nil
			} else {
				if out.LoadedFromMemory == nil {
					out.LoadedFromMemory = new(bool)
				}
				*out.LoadedFromMemory = bool(in.Bool())
			}
		case "argv":
			if in.IsNull() {
				in.Skip()
				out.Argv = nil
			} else {
				in.Delim('[')
				if out.Argv == nil {
					if !in.IsDelim(']') {
						out.Argv = make([]string, 0, 4)
					} else {
						out.Argv = []string{}
					}
				} else {
					out.Argv = (out.Argv)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Argv = append(out.Argv, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			if in.IsNull() {
				in.Skip()
				out.ArgsTruncated = nil
			} else {
				if out.ArgsTruncated == nil {
					out.ArgsTruncated = new(bool)
				}
				*out.ArgsTruncated = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(out *jwriter.Writer, in ModuleEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.LoadedFromMemory != nil {
		const prefix string = ",\"loaded_from_memory\":"
		out.RawString(prefix)
		out.Bool(bool(*in.LoadedFromMemory))
	}
	if len(in.Argv) != 0 {
		const prefix string = ",\"argv\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v22, v23 := range in.Argv {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated != nil {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ArgsTruncated))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModuleEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModuleEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers15(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(in *jlexer.Lexer, out *MProtectEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vm_start":
			out.VMStart = string(in.String())
		case "vm_end":
			out.VMEnd = string(in.String())
		case "vm_protection":
			out.VMProtection = string(in.String())
		case "req_protection":
			out.ReqProtection = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(out *jwriter.Writer, in MProtectEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vm_start\":"
		out.RawString(prefix[1:])
		out.String(string(in.VMStart))
	}
	{
		const prefix string = ",\"vm_end\":"
		out.RawString(prefix)
		out.String(string(in.VMEnd))
	}
	{
		const prefix string = ",\"vm_protection\":"
		out.RawString(prefix)
		out.String(string(in.VMProtection))
	}
	{
		const prefix string = ",\"req_protection\":"
		out.RawString(prefix)
		out.String(string(in.ReqProtection))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MProtectEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MProtectEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers16(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(in *jlexer.Lexer, out *MMapEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "length":
			out.Len = uint64(in.Uint64())
		case "protection":
			out.Protection = string(in.String())
		case "flags":
			out.Flags = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(out *jwriter.Writer, in MMapEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Offset))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Len))
	}
	{
		const prefix string = ",\"protection\":"
		out.RawString(prefix)
		out.String(string(in.Protection))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.String(string(in.Flags))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MMapEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MMapEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers17(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers18(in *jlexer.Lexer, out *FileSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.Flags = append(out.Flags, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Hashes = append(out.Hashes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers18(out *jwriter.Writer, in FileSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Flags {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v28, v29 := range in.Hashes {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers18(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers19(in *jlexer.Lexer, out *FileEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if in.IsNull() {
				in.Skip()
				out.Destination = nil
			} else {
				if out.Destination == nil {
					out.Destination = new(FileSerializer)
				}
				(*out.Destination).UnmarshalEasyJSON(in)
			}
		case "new_mount_id":
			out.NewMountID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fstype":
			out.FSType = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Flags = append(out.Flags, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Hashes = append(out.Hashes, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers19(out *jwriter.Writer, in FileEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Destination).MarshalEasyJSON(out)
	}
	if in.NewMountID != 0 {
		const prefix string = ",\"new_mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NewMountID))
	}
	if in.Device != 0 {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fstype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.Flags {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v34, v35 := range in.Hashes {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers19(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers20(in *jlexer.Lexer, out *EventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseEventSerializer = new(BaseEventSerializer)
	out.NetworkContextSerializer = new(NetworkContextSerializer)
	out.DDContextSerializer = new(DDContextSerializer)
	out.SecurityProfileContextSerializer = new(SecurityProfileContextSerializer)
	out.SELinuxEventSerializer = new(SELinuxEventSerializer)
	out.BPFEventSerializer = new(BPFEventSerializer)
	out.MMapEventSerializer = new(MMapEventSerializer)
	out.MProtectEventSerializer = new(MProtectEventSerializer)
	out.PTraceEventSerializer = new(PTraceEventSerializer)
	out.ModuleEventSerializer = new(ModuleEventSerializer)
	out.SignalEventSerializer = new(SignalEventSerializer)
	out.SpliceEventSerializer = new(SpliceEventSerializer)
	out.DNSEventSerializer = new(DNSEventSerializer)
	out.BindEventSerializer = new(BindEventSerializer)
	out.MountEventSerializer = new(MountEventSerializer)
	out.AnomalyDetectionSyscallEventSerializer = new(AnomalyDetectionSyscallEventSerializer)
	out.UserContextSerializer = new(UserContextSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "network":
			if in.IsNull() {
				in.Skip()
				out.NetworkContextSerializer = nil
			} else {
				if out.NetworkContextSerializer == nil {
					out.NetworkContextSerializer = new(NetworkContextSerializer)
				}
				(*out.NetworkContextSerializer).UnmarshalEasyJSON(in)
			}
		case "dd":
			if in.IsNull() {
				in.Skip()
				out.DDContextSerializer = nil
			} else {
				if out.DDContextSerializer == nil {
					out.DDContextSerializer = new(DDContextSerializer)
				}
				(*out.DDContextSerializer).UnmarshalEasyJSON(in)
			}
		case "security_profile":
			if in.IsNull() {
				in.Skip()
				out.SecurityProfileContextSerializer = nil
			} else {
				if out.SecurityProfileContextSerializer == nil {
					out.SecurityProfileContextSerializer = new(SecurityProfileContextSerializer)
				}
				easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers21(in, out.SecurityProfileContextSerializer)
			}
		case "selinux":
			if in.IsNull() {
				in.Skip()
				out.SELinuxEventSerializer = nil
			} else {
				if out.SELinuxEventSerializer == nil {
					out.SELinuxEventSerializer = new(SELinuxEventSerializer)
				}
				(*out.SELinuxEventSerializer).UnmarshalEasyJSON(in)
			}
		case "bpf":
			if in.IsNull() {
				in.Skip()
				out.BPFEventSerializer = nil
			} else {
				if out.BPFEventSerializer == nil {
					out.BPFEventSerializer = new(BPFEventSerializer)
				}
				(*out.BPFEventSerializer).UnmarshalEasyJSON(in)
			}
		case "mmap":
			if in.IsNull() {
				in.Skip()
				out.MMapEventSerializer = nil
			} else {
				if out.MMapEventSerializer == nil {
					out.MMapEventSerializer = new(MMapEventSerializer)
				}
				(*out.MMapEventSerializer).UnmarshalEasyJSON(in)
			}
		case "mprotect":
			if in.IsNull() {
				in.Skip()
				out.MProtectEventSerializer = nil
			} else {
				if out.MProtectEventSerializer == nil {
					out.MProtectEventSerializer = new(MProtectEventSerializer)
				}
				(*out.MProtectEventSerializer).UnmarshalEasyJSON(in)
			}
		case "ptrace":
			if in.IsNull() {
				in.Skip()
				out.PTraceEventSerializer = nil
			} else {
				if out.PTraceEventSerializer == nil {
					out.PTraceEventSerializer = new(PTraceEventSerializer)
				}
				(*out.PTraceEventSerializer).UnmarshalEasyJSON(in)
			}
		case "module":
			if in.IsNull() {
				in.Skip()
				out.ModuleEventSerializer = nil
			} else {
				if out.ModuleEventSerializer == nil {
					out.ModuleEventSerializer = new(ModuleEventSerializer)
				}
				(*out.ModuleEventSerializer).UnmarshalEasyJSON(in)
			}
		case "signal":
			if in.IsNull() {
				in.Skip()
				out.SignalEventSerializer = nil
			} else {
				if out.SignalEventSerializer == nil {
					out.SignalEventSerializer = new(SignalEventSerializer)
				}
				(*out.SignalEventSerializer).UnmarshalEasyJSON(in)
			}
		case "splice":
			if in.IsNull() {
				in.Skip()
				out.SpliceEventSerializer = nil
			} else {
				if out.SpliceEventSerializer == nil {
					out.SpliceEventSerializer = new(SpliceEventSerializer)
				}
				(*out.SpliceEventSerializer).UnmarshalEasyJSON(in)
			}
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNSEventSerializer = nil
			} else {
				if out.DNSEventSerializer == nil {
					out.DNSEventSerializer = new(DNSEventSerializer)
				}
				(*out.DNSEventSerializer).UnmarshalEasyJSON(in)
			}
		case "bind":
			if in.IsNull() {
				in.Skip()
				out.BindEventSerializer = nil
			} else {
				if out.BindEventSerializer == nil {
					out.BindEventSerializer = new(BindEventSerializer)
				}
				(*out.BindEventSerializer).UnmarshalEasyJSON(in)
			}
		case "mount":
			if in.IsNull() {
				in.Skip()
				out.MountEventSerializer = nil
			} else {
				if out.MountEventSerializer == nil {
					out.MountEventSerializer = new(MountEventSerializer)
				}
				(*out.MountEventSerializer).UnmarshalEasyJSON(in)
			}
		case "anomaly_detection_syscall":
			if in.IsNull() {
				in.Skip()
				out.AnomalyDetectionSyscallEventSerializer = nil
			} else {
				if out.AnomalyDetectionSyscallEventSerializer == nil {
					out.AnomalyDetectionSyscallEventSerializer = new(AnomalyDetectionSyscallEventSerializer)
				}
				easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers22(in, out.AnomalyDetectionSyscallEventSerializer)
			}
		case "usr":
			if in.IsNull() {
				in.Skip()
				out.UserContextSerializer = nil
			} else {
				if out.UserContextSerializer == nil {
					out.UserContextSerializer = new(UserContextSerializer)
				}
				(*out.UserContextSerializer).UnmarshalEasyJSON(in)
			}
		case "evt":
			(out.EventContextSerializer).UnmarshalEasyJSON(in)
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "file":
			if in.IsNull() {
				in.Skip()
				out.FileEventSerializer = nil
			} else {
				if out.FileEventSerializer == nil {
					out.FileEventSerializer = new(FileEventSerializer)
				}
				(*out.FileEventSerializer).UnmarshalEasyJSON(in)
			}
		case "exit":
			if in.IsNull() {
				in.Skip()
				out.ExitEventSerializer = nil
			} else {
				if out.ExitEventSerializer == nil {
					out.ExitEventSerializer = new(ExitEventSerializer)
				}
				(*out.ExitEventSerializer).UnmarshalEasyJSON(in)
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.ProcessContextSerializer = nil
			} else {
				if out.ProcessContextSerializer == nil {
					out.ProcessContextSerializer = new(ProcessContextSerializer)
				}
				(*out.ProcessContextSerializer).UnmarshalEasyJSON(in)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.ContainerContextSerializer = nil
			} else {
				if out.ContainerContextSerializer == nil {
					out.ContainerContextSerializer = new(ContainerContextSerializer)
				}
				(*out.ContainerContextSerializer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers20(out *jwriter.Writer, in EventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NetworkContextSerializer != nil {
		const prefix string = ",\"network\":"
		first = false
		out.RawString(prefix[1:])
		(*in.NetworkContextSerializer).MarshalEasyJSON(out)
	}
	if in.DDContextSerializer != nil {
		const prefix string = ",\"dd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DDContextSerializer).MarshalEasyJSON(out)
	}
	if in.SecurityProfileContextSerializer != nil {
		const prefix string = ",\"security_profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers21(out, *in.SecurityProfileContextSerializer)
	}
	if in.SELinuxEventSerializer != nil {
		const prefix string = ",\"selinux\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SELinuxEventSerializer).MarshalEasyJSON(out)
	}
	if in.BPFEventSerializer != nil {
		const prefix string = ",\"bpf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BPFEventSerializer).MarshalEasyJSON(out)
	}
	if in.MMapEventSerializer != nil {
		const prefix string = ",\"mmap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MMapEventSerializer).MarshalEasyJSON(out)
	}
	if in.MProtectEventSerializer != nil {
		const prefix string = ",\"mprotect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MProtectEventSerializer).MarshalEasyJSON(out)
	}
	if in.PTraceEventSerializer != nil {
		const prefix string = ",\"ptrace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PTraceEventSerializer).MarshalEasyJSON(out)
	}
	if in.ModuleEventSerializer != nil {
		const prefix string = ",\"module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ModuleEventSerializer).MarshalEasyJSON(out)
	}
	if in.SignalEventSerializer != nil {
		const prefix string = ",\"signal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SignalEventSerializer).MarshalEasyJSON(out)
	}
	if in.SpliceEventSerializer != nil {
		const prefix string = ",\"splice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SpliceEventSerializer).MarshalEasyJSON(out)
	}
	if in.DNSEventSerializer != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DNSEventSerializer).MarshalEasyJSON(out)
	}
	if in.BindEventSerializer != nil {
		const prefix string = ",\"bind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BindEventSerializer).MarshalEasyJSON(out)
	}
	if in.MountEventSerializer != nil {
		const prefix string = ",\"mount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MountEventSerializer).MarshalEasyJSON(out)
	}
	if in.AnomalyDetectionSyscallEventSerializer != nil {
		const prefix string = ",\"anomaly_detection_syscall\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers22(out, *in.AnomalyDetectionSyscallEventSerializer)
	}
	if in.UserContextSerializer != nil {
		const prefix string = ",\"usr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UserContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"evt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.EventContextSerializer).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	if in.FileEventSerializer != nil {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FileEventSerializer).MarshalEasyJSON(out)
	}
	if in.ExitEventSerializer != nil {
		const prefix string = ",\"exit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ExitEventSerializer).MarshalEasyJSON(out)
	}
	if in.ProcessContextSerializer != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProcessContextSerializer).MarshalEasyJSON(out)
	}
	if in.ContainerContextSerializer != nil {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContainerContextSerializer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers20(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers20(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers22(in *jlexer.Lexer, out *AnomalyDetectionSyscallEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "syscall":
			out.Syscall = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers22(out *jwriter.Writer, in AnomalyDetectionSyscallEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"syscall\":"
		out.RawString(prefix[1:])
		out.String(string(in.Syscall))
	}
	out.RawByte('}')
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers21(in *jlexer.Lexer, out *SecurityProfileContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Tags = append(out.Tags, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "event_in_profile":
			out.EventInProfile = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers21(out *jwriter.Writer, in SecurityProfileContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Tags {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"event_in_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.EventInProfile))
	}
	out.RawByte('}')
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers23(in *jlexer.Lexer, out *CredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.CapEffective = append(out.CapEffective, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers23(out *jwriter.Writer, in CredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.CapEffective {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.CapPermitted {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CredentialsSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CredentialsSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers23(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers24(in *jlexer.Lexer, out *CapsetSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.CapEffective = append(out.CapEffective, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers24(out *jwriter.Writer, in CapsetSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix[1:])
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.CapEffective {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.CapPermitted {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CapsetSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers24(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CapsetSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers24(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers25(in *jlexer.Lexer, out *BindEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr":
			(out.Addr).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers25(out *jwriter.Writer, in BindEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr\":"
		out.RawString(prefix[1:])
		(in.Addr).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers25(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers25(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers26(in *jlexer.Lexer, out *BPFProgramSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "program_type":
			out.ProgramType = string(in.String())
		case "attach_type":
			out.AttachType = string(in.String())
		case "helpers":
			if in.IsNull() {
				in.Skip()
				out.Helpers = nil
			} else {
				in.Delim('[')
				if out.Helpers == nil {
					if !in.IsDelim(']') {
						out.Helpers = make([]string, 0, 4)
					} else {
						out.Helpers = []string{}
					}
				} else {
					out.Helpers = (out.Helpers)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.Helpers = append(out.Helpers, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers26(out *jwriter.Writer, in BPFProgramSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.ProgramType != "" {
		const prefix string = ",\"program_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProgramType))
	}
	if in.AttachType != "" {
		const prefix string = ",\"attach_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AttachType))
	}
	if len(in.Helpers) != 0 {
		const prefix string = ",\"helpers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Helpers {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFProgramSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers26(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFProgramSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers26(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers27(in *jlexer.Lexer, out *BPFMapSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "map_type":
			out.MapType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers27(out *jwriter.Writer, in BPFMapSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.MapType != "" {
		const prefix string = ",\"map_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MapType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFMapSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers27(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFMapSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers27(l, v)
}
func easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers28(in *jlexer.Lexer, out *BPFEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cmd":
			out.Cmd = string(in.String())
		case "map":
			if in.IsNull() {
				in.Skip()
				out.Map = nil
			} else {
				if out.Map == nil {
					out.Map = new(BPFMapSerializer)
				}
				(*out.Map).UnmarshalEasyJSON(in)
			}
		case "program":
			if in.IsNull() {
				in.Skip()
				out.Program = nil
			} else {
				if out.Program == nil {
					out.Program = new(BPFProgramSerializer)
				}
				(*out.Program).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers28(out *jwriter.Writer, in BPFEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cmd\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cmd))
	}
	if in.Map != nil {
		const prefix string = ",\"map\":"
		out.RawString(prefix)
		(*in.Map).MarshalEasyJSON(out)
	}
	if in.Program != nil {
		const prefix string = ",\"program\":"
		out.RawString(prefix)
		(*in.Program).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BPFEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc0fdbeEncodeGithubComDataDogDatadogAgentPkgSecuritySerializers28(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BPFEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc0fdbeDecodeGithubComDataDogDatadogAgentPkgSecuritySerializers28(l, v)
}
