// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/DataDog/datadog-agent/pkg/security/proto/api"

	empty "github.com/golang/protobuf/ptypes/empty"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SecurityAgentAPIClient is an autogenerated mock type for the SecurityAgentAPIClient type
type SecurityAgentAPIClient struct {
	mock.Mock
}

type SecurityAgentAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityAgentAPIClient) EXPECT() *SecurityAgentAPIClient_Expecter {
	return &SecurityAgentAPIClient_Expecter{mock: &_m.Mock}
}

// SendActivityDumpStream provides a mock function with given fields: ctx, opts
func (_m *SecurityAgentAPIClient) SendActivityDumpStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendActivityDumpStream")
	}

	var r0 grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityAgentAPIClient_SendActivityDumpStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActivityDumpStream'
type SecurityAgentAPIClient_SendActivityDumpStream_Call struct {
	*mock.Call
}

// SendActivityDumpStream is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *SecurityAgentAPIClient_Expecter) SendActivityDumpStream(ctx interface{}, opts ...interface{}) *SecurityAgentAPIClient_SendActivityDumpStream_Call {
	return &SecurityAgentAPIClient_SendActivityDumpStream_Call{Call: _e.mock.On("SendActivityDumpStream",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *SecurityAgentAPIClient_SendActivityDumpStream_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *SecurityAgentAPIClient_SendActivityDumpStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *SecurityAgentAPIClient_SendActivityDumpStream_Call) Return(_a0 grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty], _a1 error) *SecurityAgentAPIClient_SendActivityDumpStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityAgentAPIClient_SendActivityDumpStream_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[api.ActivityDumpStreamMessage, empty.Empty], error)) *SecurityAgentAPIClient_SendActivityDumpStream_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function with given fields: ctx, opts
func (_m *SecurityAgentAPIClient) SendEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityAgentAPIClient_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type SecurityAgentAPIClient_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *SecurityAgentAPIClient_Expecter) SendEvent(ctx interface{}, opts ...interface{}) *SecurityAgentAPIClient_SendEvent_Call {
	return &SecurityAgentAPIClient_SendEvent_Call{Call: _e.mock.On("SendEvent",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *SecurityAgentAPIClient_SendEvent_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *SecurityAgentAPIClient_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *SecurityAgentAPIClient_SendEvent_Call) Return(_a0 grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty], _a1 error) *SecurityAgentAPIClient_SendEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityAgentAPIClient_SendEvent_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[api.SecurityEventMessage, empty.Empty], error)) *SecurityAgentAPIClient_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityAgentAPIClient creates a new instance of SecurityAgentAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityAgentAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityAgentAPIClient {
	mock := &SecurityAgentAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
