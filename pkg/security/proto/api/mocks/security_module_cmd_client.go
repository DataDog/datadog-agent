// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/DataDog/datadog-agent/pkg/security/proto/api"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SecurityModuleCmdClient is an autogenerated mock type for the SecurityModuleCmdClient type
type SecurityModuleCmdClient struct {
	mock.Mock
}

type SecurityModuleCmdClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityModuleCmdClient) EXPECT() *SecurityModuleCmdClient_Expecter {
	return &SecurityModuleCmdClient_Expecter{mock: &_m.Mock}
}

// DumpActivity provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) DumpActivity(ctx context.Context, in *api.ActivityDumpParams, opts ...grpc.CallOption) (*api.ActivityDumpMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DumpActivity")
	}

	var r0 *api.ActivityDumpMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpParams, ...grpc.CallOption) (*api.ActivityDumpMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpParams, ...grpc.CallOption) *api.ActivityDumpMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ActivityDumpParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_DumpActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpActivity'
type SecurityModuleCmdClient_DumpActivity_Call struct {
	*mock.Call
}

// DumpActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.ActivityDumpParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) DumpActivity(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_DumpActivity_Call {
	return &SecurityModuleCmdClient_DumpActivity_Call{Call: _e.mock.On("DumpActivity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_DumpActivity_Call) Run(run func(ctx context.Context, in *api.ActivityDumpParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_DumpActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.ActivityDumpParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_DumpActivity_Call) Return(_a0 *api.ActivityDumpMessage, _a1 error) *SecurityModuleCmdClient_DumpActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_DumpActivity_Call) RunAndReturn(run func(context.Context, *api.ActivityDumpParams, ...grpc.CallOption) (*api.ActivityDumpMessage, error)) *SecurityModuleCmdClient_DumpActivity_Call {
	_c.Call.Return(run)
	return _c
}

// DumpDiscarders provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) DumpDiscarders(ctx context.Context, in *api.DumpDiscardersParams, opts ...grpc.CallOption) (*api.DumpDiscardersMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DumpDiscarders")
	}

	var r0 *api.DumpDiscardersMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpDiscardersParams, ...grpc.CallOption) (*api.DumpDiscardersMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpDiscardersParams, ...grpc.CallOption) *api.DumpDiscardersMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DumpDiscardersMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpDiscardersParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_DumpDiscarders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpDiscarders'
type SecurityModuleCmdClient_DumpDiscarders_Call struct {
	*mock.Call
}

// DumpDiscarders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.DumpDiscardersParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) DumpDiscarders(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_DumpDiscarders_Call {
	return &SecurityModuleCmdClient_DumpDiscarders_Call{Call: _e.mock.On("DumpDiscarders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_DumpDiscarders_Call) Run(run func(ctx context.Context, in *api.DumpDiscardersParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_DumpDiscarders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.DumpDiscardersParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_DumpDiscarders_Call) Return(_a0 *api.DumpDiscardersMessage, _a1 error) *SecurityModuleCmdClient_DumpDiscarders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_DumpDiscarders_Call) RunAndReturn(run func(context.Context, *api.DumpDiscardersParams, ...grpc.CallOption) (*api.DumpDiscardersMessage, error)) *SecurityModuleCmdClient_DumpDiscarders_Call {
	_c.Call.Return(run)
	return _c
}

// DumpNetworkNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) DumpNetworkNamespace(ctx context.Context, in *api.DumpNetworkNamespaceParams, opts ...grpc.CallOption) (*api.DumpNetworkNamespaceMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DumpNetworkNamespace")
	}

	var r0 *api.DumpNetworkNamespaceMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) (*api.DumpNetworkNamespaceMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) *api.DumpNetworkNamespaceMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DumpNetworkNamespaceMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_DumpNetworkNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpNetworkNamespace'
type SecurityModuleCmdClient_DumpNetworkNamespace_Call struct {
	*mock.Call
}

// DumpNetworkNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.DumpNetworkNamespaceParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) DumpNetworkNamespace(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_DumpNetworkNamespace_Call {
	return &SecurityModuleCmdClient_DumpNetworkNamespace_Call{Call: _e.mock.On("DumpNetworkNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_DumpNetworkNamespace_Call) Run(run func(ctx context.Context, in *api.DumpNetworkNamespaceParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_DumpNetworkNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.DumpNetworkNamespaceParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_DumpNetworkNamespace_Call) Return(_a0 *api.DumpNetworkNamespaceMessage, _a1 error) *SecurityModuleCmdClient_DumpNetworkNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_DumpNetworkNamespace_Call) RunAndReturn(run func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) (*api.DumpNetworkNamespaceMessage, error)) *SecurityModuleCmdClient_DumpNetworkNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DumpProcessCache provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) DumpProcessCache(ctx context.Context, in *api.DumpProcessCacheParams, opts ...grpc.CallOption) (*api.SecurityDumpProcessCacheMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DumpProcessCache")
	}

	var r0 *api.SecurityDumpProcessCacheMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) (*api.SecurityDumpProcessCacheMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) *api.SecurityDumpProcessCacheMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityDumpProcessCacheMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_DumpProcessCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpProcessCache'
type SecurityModuleCmdClient_DumpProcessCache_Call struct {
	*mock.Call
}

// DumpProcessCache is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.DumpProcessCacheParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) DumpProcessCache(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_DumpProcessCache_Call {
	return &SecurityModuleCmdClient_DumpProcessCache_Call{Call: _e.mock.On("DumpProcessCache",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_DumpProcessCache_Call) Run(run func(ctx context.Context, in *api.DumpProcessCacheParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_DumpProcessCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.DumpProcessCacheParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_DumpProcessCache_Call) Return(_a0 *api.SecurityDumpProcessCacheMessage, _a1 error) *SecurityModuleCmdClient_DumpProcessCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_DumpProcessCache_Call) RunAndReturn(run func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) (*api.SecurityDumpProcessCacheMessage, error)) *SecurityModuleCmdClient_DumpProcessCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) GetConfig(ctx context.Context, in *api.GetConfigParams, opts ...grpc.CallOption) (*api.SecurityConfigMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *api.SecurityConfigMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetConfigParams, ...grpc.CallOption) (*api.SecurityConfigMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetConfigParams, ...grpc.CallOption) *api.SecurityConfigMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityConfigMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.GetConfigParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type SecurityModuleCmdClient_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.GetConfigParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) GetConfig(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_GetConfig_Call {
	return &SecurityModuleCmdClient_GetConfig_Call{Call: _e.mock.On("GetConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_GetConfig_Call) Run(run func(ctx context.Context, in *api.GetConfigParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.GetConfigParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_GetConfig_Call) Return(_a0 *api.SecurityConfigMessage, _a1 error) *SecurityModuleCmdClient_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_GetConfig_Call) RunAndReturn(run func(context.Context, *api.GetConfigParams, ...grpc.CallOption) (*api.SecurityConfigMessage, error)) *SecurityModuleCmdClient_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuleSetReport provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) GetRuleSetReport(ctx context.Context, in *api.GetRuleSetReportParams, opts ...grpc.CallOption) (*api.GetRuleSetReportMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleSetReport")
	}

	var r0 *api.GetRuleSetReportMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetRuleSetReportParams, ...grpc.CallOption) (*api.GetRuleSetReportMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetRuleSetReportParams, ...grpc.CallOption) *api.GetRuleSetReportMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetRuleSetReportMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.GetRuleSetReportParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_GetRuleSetReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuleSetReport'
type SecurityModuleCmdClient_GetRuleSetReport_Call struct {
	*mock.Call
}

// GetRuleSetReport is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.GetRuleSetReportParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) GetRuleSetReport(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_GetRuleSetReport_Call {
	return &SecurityModuleCmdClient_GetRuleSetReport_Call{Call: _e.mock.On("GetRuleSetReport",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_GetRuleSetReport_Call) Run(run func(ctx context.Context, in *api.GetRuleSetReportParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_GetRuleSetReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.GetRuleSetReportParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_GetRuleSetReport_Call) Return(_a0 *api.GetRuleSetReportMessage, _a1 error) *SecurityModuleCmdClient_GetRuleSetReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_GetRuleSetReport_Call) RunAndReturn(run func(context.Context, *api.GetRuleSetReportParams, ...grpc.CallOption) (*api.GetRuleSetReportMessage, error)) *SecurityModuleCmdClient_GetRuleSetReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) GetStatus(ctx context.Context, in *api.GetStatusParams, opts ...grpc.CallOption) (*api.Status, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *api.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetStatusParams, ...grpc.CallOption) (*api.Status, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetStatusParams, ...grpc.CallOption) *api.Status); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.GetStatusParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type SecurityModuleCmdClient_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.GetStatusParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) GetStatus(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_GetStatus_Call {
	return &SecurityModuleCmdClient_GetStatus_Call{Call: _e.mock.On("GetStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_GetStatus_Call) Run(run func(ctx context.Context, in *api.GetStatusParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.GetStatusParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_GetStatus_Call) Return(_a0 *api.Status, _a1 error) *SecurityModuleCmdClient_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_GetStatus_Call) RunAndReturn(run func(context.Context, *api.GetStatusParams, ...grpc.CallOption) (*api.Status, error)) *SecurityModuleCmdClient_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivityDumps provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) ListActivityDumps(ctx context.Context, in *api.ActivityDumpListParams, opts ...grpc.CallOption) (*api.ActivityDumpListMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActivityDumps")
	}

	var r0 *api.ActivityDumpListMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpListParams, ...grpc.CallOption) (*api.ActivityDumpListMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpListParams, ...grpc.CallOption) *api.ActivityDumpListMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpListMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ActivityDumpListParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_ListActivityDumps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivityDumps'
type SecurityModuleCmdClient_ListActivityDumps_Call struct {
	*mock.Call
}

// ListActivityDumps is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.ActivityDumpListParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) ListActivityDumps(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_ListActivityDumps_Call {
	return &SecurityModuleCmdClient_ListActivityDumps_Call{Call: _e.mock.On("ListActivityDumps",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_ListActivityDumps_Call) Run(run func(ctx context.Context, in *api.ActivityDumpListParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_ListActivityDumps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.ActivityDumpListParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_ListActivityDumps_Call) Return(_a0 *api.ActivityDumpListMessage, _a1 error) *SecurityModuleCmdClient_ListActivityDumps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_ListActivityDumps_Call) RunAndReturn(run func(context.Context, *api.ActivityDumpListParams, ...grpc.CallOption) (*api.ActivityDumpListMessage, error)) *SecurityModuleCmdClient_ListActivityDumps_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityProfiles provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) ListSecurityProfiles(ctx context.Context, in *api.SecurityProfileListParams, opts ...grpc.CallOption) (*api.SecurityProfileListMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfiles")
	}

	var r0 *api.SecurityProfileListMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SecurityProfileListParams, ...grpc.CallOption) (*api.SecurityProfileListMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.SecurityProfileListParams, ...grpc.CallOption) *api.SecurityProfileListMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityProfileListMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.SecurityProfileListParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_ListSecurityProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityProfiles'
type SecurityModuleCmdClient_ListSecurityProfiles_Call struct {
	*mock.Call
}

// ListSecurityProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.SecurityProfileListParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) ListSecurityProfiles(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_ListSecurityProfiles_Call {
	return &SecurityModuleCmdClient_ListSecurityProfiles_Call{Call: _e.mock.On("ListSecurityProfiles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_ListSecurityProfiles_Call) Run(run func(ctx context.Context, in *api.SecurityProfileListParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_ListSecurityProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.SecurityProfileListParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_ListSecurityProfiles_Call) Return(_a0 *api.SecurityProfileListMessage, _a1 error) *SecurityModuleCmdClient_ListSecurityProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_ListSecurityProfiles_Call) RunAndReturn(run func(context.Context, *api.SecurityProfileListParams, ...grpc.CallOption) (*api.SecurityProfileListMessage, error)) *SecurityModuleCmdClient_ListSecurityProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadPolicies provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) ReloadPolicies(ctx context.Context, in *api.ReloadPoliciesParams, opts ...grpc.CallOption) (*api.ReloadPoliciesResultMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReloadPolicies")
	}

	var r0 *api.ReloadPoliciesResultMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) (*api.ReloadPoliciesResultMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) *api.ReloadPoliciesResultMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ReloadPoliciesResultMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_ReloadPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadPolicies'
type SecurityModuleCmdClient_ReloadPolicies_Call struct {
	*mock.Call
}

// ReloadPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.ReloadPoliciesParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) ReloadPolicies(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_ReloadPolicies_Call {
	return &SecurityModuleCmdClient_ReloadPolicies_Call{Call: _e.mock.On("ReloadPolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_ReloadPolicies_Call) Run(run func(ctx context.Context, in *api.ReloadPoliciesParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_ReloadPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.ReloadPoliciesParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_ReloadPolicies_Call) Return(_a0 *api.ReloadPoliciesResultMessage, _a1 error) *SecurityModuleCmdClient_ReloadPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_ReloadPolicies_Call) RunAndReturn(run func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) (*api.ReloadPoliciesResultMessage, error)) *SecurityModuleCmdClient_ReloadPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// RunSelfTest provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) RunSelfTest(ctx context.Context, in *api.RunSelfTestParams, opts ...grpc.CallOption) (*api.SecuritySelfTestResultMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunSelfTest")
	}

	var r0 *api.SecuritySelfTestResultMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) (*api.SecuritySelfTestResultMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) *api.SecuritySelfTestResultMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecuritySelfTestResultMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_RunSelfTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunSelfTest'
type SecurityModuleCmdClient_RunSelfTest_Call struct {
	*mock.Call
}

// RunSelfTest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.RunSelfTestParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) RunSelfTest(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_RunSelfTest_Call {
	return &SecurityModuleCmdClient_RunSelfTest_Call{Call: _e.mock.On("RunSelfTest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_RunSelfTest_Call) Run(run func(ctx context.Context, in *api.RunSelfTestParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_RunSelfTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.RunSelfTestParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_RunSelfTest_Call) Return(_a0 *api.SecuritySelfTestResultMessage, _a1 error) *SecurityModuleCmdClient_RunSelfTest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_RunSelfTest_Call) RunAndReturn(run func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) (*api.SecuritySelfTestResultMessage, error)) *SecurityModuleCmdClient_RunSelfTest_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSecurityProfile provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) SaveSecurityProfile(ctx context.Context, in *api.SecurityProfileSaveParams, opts ...grpc.CallOption) (*api.SecurityProfileSaveMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveSecurityProfile")
	}

	var r0 *api.SecurityProfileSaveMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SecurityProfileSaveParams, ...grpc.CallOption) (*api.SecurityProfileSaveMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.SecurityProfileSaveParams, ...grpc.CallOption) *api.SecurityProfileSaveMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityProfileSaveMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.SecurityProfileSaveParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_SaveSecurityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSecurityProfile'
type SecurityModuleCmdClient_SaveSecurityProfile_Call struct {
	*mock.Call
}

// SaveSecurityProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.SecurityProfileSaveParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) SaveSecurityProfile(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_SaveSecurityProfile_Call {
	return &SecurityModuleCmdClient_SaveSecurityProfile_Call{Call: _e.mock.On("SaveSecurityProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_SaveSecurityProfile_Call) Run(run func(ctx context.Context, in *api.SecurityProfileSaveParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_SaveSecurityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.SecurityProfileSaveParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_SaveSecurityProfile_Call) Return(_a0 *api.SecurityProfileSaveMessage, _a1 error) *SecurityModuleCmdClient_SaveSecurityProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_SaveSecurityProfile_Call) RunAndReturn(run func(context.Context, *api.SecurityProfileSaveParams, ...grpc.CallOption) (*api.SecurityProfileSaveMessage, error)) *SecurityModuleCmdClient_SaveSecurityProfile_Call {
	_c.Call.Return(run)
	return _c
}

// StopActivityDump provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) StopActivityDump(ctx context.Context, in *api.ActivityDumpStopParams, opts ...grpc.CallOption) (*api.ActivityDumpStopMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopActivityDump")
	}

	var r0 *api.ActivityDumpStopMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpStopParams, ...grpc.CallOption) (*api.ActivityDumpStopMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ActivityDumpStopParams, ...grpc.CallOption) *api.ActivityDumpStopMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ActivityDumpStopMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ActivityDumpStopParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_StopActivityDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopActivityDump'
type SecurityModuleCmdClient_StopActivityDump_Call struct {
	*mock.Call
}

// StopActivityDump is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.ActivityDumpStopParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) StopActivityDump(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_StopActivityDump_Call {
	return &SecurityModuleCmdClient_StopActivityDump_Call{Call: _e.mock.On("StopActivityDump",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_StopActivityDump_Call) Run(run func(ctx context.Context, in *api.ActivityDumpStopParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_StopActivityDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.ActivityDumpStopParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_StopActivityDump_Call) Return(_a0 *api.ActivityDumpStopMessage, _a1 error) *SecurityModuleCmdClient_StopActivityDump_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_StopActivityDump_Call) RunAndReturn(run func(context.Context, *api.ActivityDumpStopParams, ...grpc.CallOption) (*api.ActivityDumpStopMessage, error)) *SecurityModuleCmdClient_StopActivityDump_Call {
	_c.Call.Return(run)
	return _c
}

// TranscodingRequest provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleCmdClient) TranscodingRequest(ctx context.Context, in *api.TranscodingRequestParams, opts ...grpc.CallOption) (*api.TranscodingRequestMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TranscodingRequest")
	}

	var r0 *api.TranscodingRequestMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.TranscodingRequestParams, ...grpc.CallOption) (*api.TranscodingRequestMessage, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.TranscodingRequestParams, ...grpc.CallOption) *api.TranscodingRequestMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TranscodingRequestMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.TranscodingRequestParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityModuleCmdClient_TranscodingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranscodingRequest'
type SecurityModuleCmdClient_TranscodingRequest_Call struct {
	*mock.Call
}

// TranscodingRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *api.TranscodingRequestParams
//   - opts ...grpc.CallOption
func (_e *SecurityModuleCmdClient_Expecter) TranscodingRequest(ctx interface{}, in interface{}, opts ...interface{}) *SecurityModuleCmdClient_TranscodingRequest_Call {
	return &SecurityModuleCmdClient_TranscodingRequest_Call{Call: _e.mock.On("TranscodingRequest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityModuleCmdClient_TranscodingRequest_Call) Run(run func(ctx context.Context, in *api.TranscodingRequestParams, opts ...grpc.CallOption)) *SecurityModuleCmdClient_TranscodingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*api.TranscodingRequestParams), variadicArgs...)
	})
	return _c
}

func (_c *SecurityModuleCmdClient_TranscodingRequest_Call) Return(_a0 *api.TranscodingRequestMessage, _a1 error) *SecurityModuleCmdClient_TranscodingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityModuleCmdClient_TranscodingRequest_Call) RunAndReturn(run func(context.Context, *api.TranscodingRequestParams, ...grpc.CallOption) (*api.TranscodingRequestMessage, error)) *SecurityModuleCmdClient_TranscodingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityModuleCmdClient creates a new instance of SecurityModuleCmdClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityModuleCmdClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityModuleCmdClient {
	mock := &SecurityModuleCmdClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
