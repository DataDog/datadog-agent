//go:build linux
// +build linux

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dump

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	sync "sync"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9a9a4de6DecodeGithubComDataDogDatadogAgentPkgSecuritySecurityProfileDump(in *jlexer.Lexer, out *ActivityDump) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Mutex = new(sync.Mutex)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "service":
			out.Service = string(in.String())
		case "ddsource":
			out.Source = string(in.String())
		case "ddtags":
			out.DDTags = string(in.String())
		case "agent_version":
			out.AgentVersion = string(in.String())
		case "agent_commit":
			out.AgentCommit = string(in.String())
		case "kernel_version":
			out.KernelVersion = string(in.String())
		case "linux_distribution":
			out.LinuxDistribution = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "protobuf_version":
			out.ProtobufVersion = string(in.String())
		case "differentiate_args":
			out.DifferentiateArgs = bool(in.Bool())
		case "comm":
			out.Comm = string(in.String())
		case "start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Start).UnmarshalJSON(data))
			}
		case "end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.End).UnmarshalJSON(data))
			}
		case "activity_dump_size":
			out.Size = uint64(in.Uint64())
		case "serialization":
			out.Serialization = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9a9a4de6EncodeGithubComDataDogDatadogAgentPkgSecuritySecurityProfileDump(out *jwriter.Writer, in ActivityDump) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	if in.Service != "" {
		const prefix string = ",\"service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Service))
	}
	if in.Source != "" {
		const prefix string = ",\"ddsource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.DDTags != "" {
		const prefix string = ",\"ddtags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DDTags))
	}
	{
		const prefix string = ",\"agent_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AgentVersion))
	}
	{
		const prefix string = ",\"agent_commit\":"
		out.RawString(prefix)
		out.String(string(in.AgentCommit))
	}
	{
		const prefix string = ",\"kernel_version\":"
		out.RawString(prefix)
		out.String(string(in.KernelVersion))
	}
	{
		const prefix string = ",\"linux_distribution\":"
		out.RawString(prefix)
		out.String(string(in.LinuxDistribution))
	}
	{
		const prefix string = ",\"arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"protobuf_version\":"
		out.RawString(prefix)
		out.String(string(in.ProtobufVersion))
	}
	{
		const prefix string = ",\"differentiate_args\":"
		out.RawString(prefix)
		out.Bool(bool(in.DifferentiateArgs))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Raw((in.Start).MarshalJSON())
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.Raw((in.End).MarshalJSON())
	}
	if in.Size != 0 {
		const prefix string = ",\"activity_dump_size\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Size))
	}
	if in.Serialization != "" {
		const prefix string = ",\"serialization\":"
		out.RawString(prefix)
		out.String(string(in.Serialization))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActivityDump) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9a9a4de6EncodeGithubComDataDogDatadogAgentPkgSecuritySecurityProfileDump(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActivityDump) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9a9a4de6DecodeGithubComDataDogDatadogAgentPkgSecuritySecurityProfileDump(l, v)
}
