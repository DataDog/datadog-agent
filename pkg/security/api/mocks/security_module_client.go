// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/DataDog/datadog-agent/pkg/security/api"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SecurityModuleClient is an autogenerated mock type for the SecurityModuleClient type
type SecurityModuleClient struct {
	mock.Mock
}

// DumpActivity provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) DumpActivity(ctx context.Context, in *api.DumpActivityParams, opts ...grpc.CallOption) (*api.SecurityActivityDumpMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityActivityDumpMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpActivityParams, ...grpc.CallOption) *api.SecurityActivityDumpMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityActivityDumpMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpActivityParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DumpNetworkNamespace provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) DumpNetworkNamespace(ctx context.Context, in *api.DumpNetworkNamespaceParams, opts ...grpc.CallOption) (*api.DumpNetworkNamespaceMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.DumpNetworkNamespaceMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) *api.DumpNetworkNamespaceMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DumpNetworkNamespaceMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpNetworkNamespaceParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DumpProcessCache provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) DumpProcessCache(ctx context.Context, in *api.DumpProcessCacheParams, opts ...grpc.CallOption) (*api.SecurityDumpProcessCacheMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityDumpProcessCacheMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) *api.SecurityDumpProcessCacheMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityDumpProcessCacheMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.DumpProcessCacheParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateGraph provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GenerateGraph(ctx context.Context, in *api.GenerateGraphParams, opts ...grpc.CallOption) (*api.SecurityGraphGeneratedMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityGraphGeneratedMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.GenerateGraphParams, ...grpc.CallOption) *api.SecurityGraphGeneratedMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityGraphGeneratedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GenerateGraphParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateProfile provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GenerateProfile(ctx context.Context, in *api.GenerateProfileParams, opts ...grpc.CallOption) (*api.SecurityProfileGeneratedMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityProfileGeneratedMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.GenerateProfileParams, ...grpc.CallOption) *api.SecurityProfileGeneratedMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityProfileGeneratedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GenerateProfileParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GetConfig(ctx context.Context, in *api.GetConfigParams, opts ...grpc.CallOption) (*api.SecurityConfigMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityConfigMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetConfigParams, ...grpc.CallOption) *api.SecurityConfigMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityConfigMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetConfigParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GetEvents(ctx context.Context, in *api.GetEventParams, opts ...grpc.CallOption) (api.SecurityModule_GetEventsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.SecurityModule_GetEventsClient
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetEventParams, ...grpc.CallOption) api.SecurityModule_GetEventsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SecurityModule_GetEventsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetEventParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessEvents provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GetProcessEvents(ctx context.Context, in *api.GetProcessEventParams, opts ...grpc.CallOption) (api.SecurityModule_GetProcessEventsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.SecurityModule_GetProcessEventsClient
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetProcessEventParams, ...grpc.CallOption) api.SecurityModule_GetProcessEventsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SecurityModule_GetProcessEventsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetProcessEventParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) GetStatus(ctx context.Context, in *api.GetStatusParams, opts ...grpc.CallOption) (*api.Status, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Status
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetStatusParams, ...grpc.CallOption) *api.Status); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetStatusParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivityDumps provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) ListActivityDumps(ctx context.Context, in *api.ListActivityDumpsParams, opts ...grpc.CallOption) (*api.SecurityActivityDumpListMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityActivityDumpListMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.ListActivityDumpsParams, ...grpc.CallOption) *api.SecurityActivityDumpListMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityActivityDumpListMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.ListActivityDumpsParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadPolicies provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) ReloadPolicies(ctx context.Context, in *api.ReloadPoliciesParams, opts ...grpc.CallOption) (*api.ReloadPoliciesResultMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.ReloadPoliciesResultMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) *api.ReloadPoliciesResultMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ReloadPoliciesResultMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.ReloadPoliciesParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunSelfTest provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) RunSelfTest(ctx context.Context, in *api.RunSelfTestParams, opts ...grpc.CallOption) (*api.SecuritySelfTestResultMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecuritySelfTestResultMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) *api.SecuritySelfTestResultMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecuritySelfTestResultMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.RunSelfTestParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopActivityDump provides a mock function with given fields: ctx, in, opts
func (_m *SecurityModuleClient) StopActivityDump(ctx context.Context, in *api.StopActivityDumpParams, opts ...grpc.CallOption) (*api.SecurityActivityDumpStoppedMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.SecurityActivityDumpStoppedMessage
	if rf, ok := ret.Get(0).(func(context.Context, *api.StopActivityDumpParams, ...grpc.CallOption) *api.SecurityActivityDumpStoppedMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SecurityActivityDumpStoppedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.StopActivityDumpParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecurityModuleClient creates a new instance of SecurityModuleClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecurityModuleClient(t testing.TB) *SecurityModuleClient {
	mock := &SecurityModuleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
