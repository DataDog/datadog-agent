syntax = "proto3";

option go_package = "pkg/security/api";

package api;

message GetEventParams {}

message SecurityEventMessage {
    string RuleID = 1;
    bytes Data = 2;
    repeated string Tags = 3;
    string Service = 4;
}

message DumpProcessCacheParams {
    bool WithArgs = 1;
}

message SecurityDumpProcessCacheMessage {
    string Filename = 1;
}

message GetConfigParams {}

message SecurityConfigMessage {
    bool RuntimeEnabled = 1;
    bool FIMEnabled = 2;
}

message RunSelfTestParams {}

message ReloadPoliciesParams{}

message ReloadPoliciesResultMessage{}

message SecuritySelfTestResultMessage {
    bool Ok = 1;
    string Error = 2;
}

message DumpActivityParams {
    repeated string Tags = 1;
    string comm = 2;
    int32 timeout = 3;
    bool with_graph = 4;
    bool differentiate_args = 5;
}

message SecurityActivityDumpMessage {
    string OutputFilename = 1;
    string GraphFilename = 2;
}

message ListActivityDumpsParams {}

message SecurityActivityDumpListMessage {
    repeated string DumpTags = 1;
}

message StopActivityDumpParams {
    repeated string Tags = 1;
    string Comm = 2;
}

message SecurityActivityDumpStoppedMessage {
    string Error = 1;
}

message GenerateProfileParams {
    string ActivityDumpFile = 1;
}

message SecurityProfileGeneratedMessage {
    string ProfilePath = 1;
}

service SecurityModule {
    rpc GetEvents(GetEventParams) returns (stream SecurityEventMessage) {}
    rpc DumpProcessCache(DumpProcessCacheParams) returns (SecurityDumpProcessCacheMessage) {}
    rpc DumpActivity(DumpActivityParams) returns (SecurityActivityDumpMessage) {}
    rpc ListActivityDumps(ListActivityDumpsParams) returns (SecurityActivityDumpListMessage) {}
    rpc StopActivityDump(StopActivityDumpParams) returns (SecurityActivityDumpStoppedMessage) {}
    rpc GenerateProfile(GenerateProfileParams) returns (SecurityProfileGeneratedMessage) {}
    rpc GetConfig(GetConfigParams) returns (SecurityConfigMessage) {}
    rpc RunSelfTest(RunSelfTestParams) returns (SecuritySelfTestResultMessage) {}
    rpc ReloadPolicies(ReloadPoliciesParams) returns (ReloadPoliciesResultMessage) {}
}
