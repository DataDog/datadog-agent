#ifndef _RAW_PACKET_TEST_H
#define _RAW_PACKET_TEST_H

#include "helpers/network/raw.h"
#include "baloum.h"

SEC("test/raw_packet_tail_calls")
int raw_packet_tail_calls(struct __sk_buff *skb) {
    struct raw_packet_event_t *evt = get_raw_packet_event();
    assert_not_null(evt, "unable to get raw packet event")

    // tcp dst port 5555 and tcp[tcpflags] == tcp-syn
    unsigned char data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45, 0x10,
        0x00, 0x30, 0xf4, 0xa2, 0x40, 0x00, 0x40, 0x06,
        0x48, 0x13, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00,
        0x00, 0x01, 0xa2, 0x36, 0x15, 0xb3, 0x1c, 0x5b,
        0x89, 0x33, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02,
        0xff, 0xd7, 0xfe, 0x24, 0x00, 0x00, 0x02, 0x04,
        0xff, 0xd7, 0x01, 0x03, 0x03, 0x07
    };
    baloum_memcpy(evt->data, data, sizeof(data));

    bpf_tail_call_compat(skb, &raw_packet_classifier_router, RAW_PACKET_FILTER);

    return 1;
}

SEC("test/raw_packet_bpfdoor_magic_number")
int raw_packet_bpfdoor_magic_number(struct __sk_buff *skb) {
    struct raw_packet_event_t *evt = get_raw_packet_event();
    assert_not_null(evt, "unable to get raw packet event")

    // tcp[((tcp[12]&0xf0)>>2)+26:4]=0x39393939
    unsigned char data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x64, 0x1f, 0x40, 0x00, 0x00, 0x40, 0x06, 0x5d, 0x52, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00,
        0x00, 0x01, 0x04, 0xd2, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02,
        0x16, 0xd0, 0xb4, 0x1d, 0x00, 0x00, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        0x39, 0x39, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00
    };
    baloum_memcpy(evt->data, data, sizeof(data));

    bpf_tail_call_compat(skb, &raw_packet_classifier_router, RAW_PACKET_FILTER);

    return 1;
}

#endif
