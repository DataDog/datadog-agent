// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.0
// source: pkg/security/adproto/activity_dump.proto

package adproto

import (
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	bits "math/bits"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *ActivityDump) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityDump) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ActivityDump) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Tree) > 0 {
		for iNdEx := len(m.Tree) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Tree[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarint(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarint(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarint(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessActivityNode) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessActivityNode) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ProcessActivityNode) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Children[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DNSNames) > 0 {
		for iNdEx := len(m.DNSNames) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.DNSNames[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Files[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GenerationType) > 0 {
		i -= len(m.GenerationType)
		copy(dAtA[i:], m.GenerationType)
		i = encodeVarint(dAtA, i, uint64(len(m.GenerationType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Process != nil {
		size, err := m.Process.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessInfo) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ProcessInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.EnvsTruncated {
		i--
		if m.EnvsTruncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Envs) > 0 {
		for iNdEx := len(m.Envs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Envs[iNdEx])
			copy(dAtA[i:], m.Envs[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.Envs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.ArgsTruncated {
		i--
		if m.ArgsTruncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Argv0) > 0 {
		i -= len(m.Argv0)
		copy(dAtA[i:], m.Argv0)
		i = encodeVarint(dAtA, i, uint64(len(m.Argv0)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarint(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Credentials != nil {
		size, err := m.Credentials.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7a
	}
	if m.ExecTime != nil {
		if marshalto, ok := interface{}(m.ExecTime).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := marshalto.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ExecTime)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ExitTime != nil {
		if marshalto, ok := interface{}(m.ExitTime).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := marshalto.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ExitTime)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ForkTime != nil {
		if marshalto, ok := interface{}(m.ForkTime).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := marshalto.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.ForkTime)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Comm) > 0 {
		i -= len(m.Comm)
		copy(dAtA[i:], m.Comm)
		i = encodeVarint(dAtA, i, uint64(len(m.Comm)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TTY) > 0 {
		i -= len(m.TTY)
		copy(dAtA[i:], m.TTY)
		i = encodeVarint(dAtA, i, uint64(len(m.TTY)))
		i--
		dAtA[i] = 0x52
	}
	if m.TraceID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.TraceID))
		i--
		dAtA[i] = 0x48
	}
	if m.SpanID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.SpanID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ContainerID) > 0 {
		i -= len(m.ContainerID)
		copy(dAtA[i:], m.ContainerID)
		i = encodeVarint(dAtA, i, uint64(len(m.ContainerID)))
		i--
		dAtA[i] = 0x3a
	}
	if m.File != nil {
		size, err := m.File.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.IsThread {
		i--
		if m.IsThread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Cookie != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Cookie))
		i--
		dAtA[i] = 0x20
	}
	if m.Ppid != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Ppid))
		i--
		dAtA[i] = 0x18
	}
	if m.Tid != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileActivityNode) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileActivityNode) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *FileActivityNode) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Children[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Open != nil {
		size, err := m.Open.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if m.FirstSeen != nil {
		if marshalto, ok := interface{}(m.FirstSeen).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := marshalto.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.FirstSeen)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.GenerationType) > 0 {
		i -= len(m.GenerationType)
		copy(dAtA[i:], m.GenerationType)
		i = encodeVarint(dAtA, i, uint64(len(m.GenerationType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.File != nil {
		size, err := m.File.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenNode) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenNode) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *OpenNode) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Mode != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if m.Flags != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x10
	}
	if m.Retval != 0 {
		i = encodeVarint(dAtA, i, uint64((uint64(m.Retval)<<1)^uint64((m.Retval>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSNode) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSNode) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DNSNode) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Requests[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSInfo) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DNSInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Count != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x28
	}
	if m.Size != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Size))
		i--
		dAtA[i] = 0x20
	}
	if m.Class != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Class))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileInfo) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.FileSystem) > 0 {
		i -= len(m.FileSystem)
		copy(dAtA[i:], m.FileSystem)
		i = encodeVarint(dAtA, i, uint64(len(m.FileSystem)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Basename) > 0 {
		i -= len(m.Basename)
		copy(dAtA[i:], m.Basename)
		i = encodeVarint(dAtA, i, uint64(len(m.Basename)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarint(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x5a
	}
	if m.InUpperLayer {
		i--
		if m.InUpperLayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.INode != 0 {
		i = encodeVarint(dAtA, i, uint64(m.INode))
		i--
		dAtA[i] = 0x48
	}
	if m.MountID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.MountID))
		i--
		dAtA[i] = 0x40
	}
	if m.MTime != 0 {
		i = encodeVarint(dAtA, i, uint64(m.MTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CTime != 0 {
		i = encodeVarint(dAtA, i, uint64(m.CTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Mode != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarint(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x22
	}
	if m.GID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.GID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarint(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.UID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.UID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Credentials) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Credentials) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.CapPermitted != 0 {
		i = encodeVarint(dAtA, i, uint64(m.CapPermitted))
		i--
		dAtA[i] = 0x70
	}
	if m.CapEffective != 0 {
		i = encodeVarint(dAtA, i, uint64(m.CapEffective))
		i--
		dAtA[i] = 0x68
	}
	if len(m.FSGroup) > 0 {
		i -= len(m.FSGroup)
		copy(dAtA[i:], m.FSGroup)
		i = encodeVarint(dAtA, i, uint64(len(m.FSGroup)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FSUser) > 0 {
		i -= len(m.FSUser)
		copy(dAtA[i:], m.FSUser)
		i = encodeVarint(dAtA, i, uint64(len(m.FSUser)))
		i--
		dAtA[i] = 0x5a
	}
	if m.FSGID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.FSGID))
		i--
		dAtA[i] = 0x50
	}
	if m.FSUID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.FSUID))
		i--
		dAtA[i] = 0x48
	}
	if len(m.EffectiveGroup) > 0 {
		i -= len(m.EffectiveGroup)
		copy(dAtA[i:], m.EffectiveGroup)
		i = encodeVarint(dAtA, i, uint64(len(m.EffectiveGroup)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EffectiveUser) > 0 {
		i -= len(m.EffectiveUser)
		copy(dAtA[i:], m.EffectiveUser)
		i = encodeVarint(dAtA, i, uint64(len(m.EffectiveUser)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EffectiveGID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.EffectiveGID))
		i--
		dAtA[i] = 0x30
	}
	if m.EffectiveUID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.EffectiveUID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarint(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarint(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.GID))
		i--
		dAtA[i] = 0x10
	}
	if m.UID != 0 {
		i = encodeVarint(dAtA, i, uint64(m.UID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarint(dAtA []byte, offset int, v uint64) int {
	offset -= sov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var vtprotoPool_ActivityDump = sync.Pool{
	New: func() interface{} {
		return &ActivityDump{}
	},
}

func (m *ActivityDump) ResetVT() {
	f0 := m.Tags[:0]
	for _, mm := range m.Tree {
		mm.ResetVT()
	}
	m.Reset()
	m.Tags = f0
}
func (m *ActivityDump) ReturnToVTPool() {
	if m != nil {
		m.ResetVT()
		vtprotoPool_ActivityDump.Put(m)
	}
}
func ActivityDumpFromVTPool() *ActivityDump {
	return vtprotoPool_ActivityDump.Get().(*ActivityDump)
}

var vtprotoPool_ProcessActivityNode = sync.Pool{
	New: func() interface{} {
		return &ProcessActivityNode{}
	},
}

func (m *ProcessActivityNode) ResetVT() {
	m.Process.ReturnToVTPool()
	for _, mm := range m.Files {
		mm.ResetVT()
	}
	for _, mm := range m.Children {
		mm.ResetVT()
	}
	m.Reset()
}
func (m *ProcessActivityNode) ReturnToVTPool() {
	if m != nil {
		m.ResetVT()
		vtprotoPool_ProcessActivityNode.Put(m)
	}
}
func ProcessActivityNodeFromVTPool() *ProcessActivityNode {
	return vtprotoPool_ProcessActivityNode.Get().(*ProcessActivityNode)
}

var vtprotoPool_ProcessInfo = sync.Pool{
	New: func() interface{} {
		return &ProcessInfo{}
	},
}

func (m *ProcessInfo) ResetVT() {
	m.File.ReturnToVTPool()
	f0 := m.Args[:0]
	f1 := m.Envs[:0]
	m.Reset()
	m.Args = f0
	m.Envs = f1
}
func (m *ProcessInfo) ReturnToVTPool() {
	if m != nil {
		m.ResetVT()
		vtprotoPool_ProcessInfo.Put(m)
	}
}
func ProcessInfoFromVTPool() *ProcessInfo {
	return vtprotoPool_ProcessInfo.Get().(*ProcessInfo)
}

var vtprotoPool_FileActivityNode = sync.Pool{
	New: func() interface{} {
		return &FileActivityNode{}
	},
}

func (m *FileActivityNode) ResetVT() {
	m.File.ReturnToVTPool()
	for _, mm := range m.Children {
		mm.ResetVT()
	}
	m.Reset()
}
func (m *FileActivityNode) ReturnToVTPool() {
	if m != nil {
		m.ResetVT()
		vtprotoPool_FileActivityNode.Put(m)
	}
}
func FileActivityNodeFromVTPool() *FileActivityNode {
	return vtprotoPool_FileActivityNode.Get().(*FileActivityNode)
}

var vtprotoPool_FileInfo = sync.Pool{
	New: func() interface{} {
		return &FileInfo{}
	},
}

func (m *FileInfo) ResetVT() {
	m.Reset()
}
func (m *FileInfo) ReturnToVTPool() {
	if m != nil {
		m.ResetVT()
		vtprotoPool_FileInfo.Put(m)
	}
}
func FileInfoFromVTPool() *FileInfo {
	return vtprotoPool_FileInfo.Get().(*FileInfo)
}
func (m *ActivityDump) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.Tree) > 0 {
		for _, e := range m.Tree {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *ProcessActivityNode) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Process != nil {
		l = m.Process.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.GenerationType)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.DNSNames) > 0 {
		for _, e := range m.DNSNames {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *ProcessInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sov(uint64(m.Pid))
	}
	if m.Tid != 0 {
		n += 1 + sov(uint64(m.Tid))
	}
	if m.Ppid != 0 {
		n += 1 + sov(uint64(m.Ppid))
	}
	if m.Cookie != 0 {
		n += 1 + sov(uint64(m.Cookie))
	}
	if m.IsThread {
		n += 2
	}
	if m.File != nil {
		l = m.File.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.SpanID != 0 {
		n += 1 + sov(uint64(m.SpanID))
	}
	if m.TraceID != 0 {
		n += 1 + sov(uint64(m.TraceID))
	}
	l = len(m.TTY)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Comm)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.ForkTime != nil {
		if size, ok := interface{}(m.ForkTime).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ForkTime)
		}
		n += 1 + l + sov(uint64(l))
	}
	if m.ExitTime != nil {
		if size, ok := interface{}(m.ExitTime).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ExitTime)
		}
		n += 1 + l + sov(uint64(l))
	}
	if m.ExecTime != nil {
		if size, ok := interface{}(m.ExecTime).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.ExecTime)
		}
		n += 1 + l + sov(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	l = len(m.Argv0)
	if l > 0 {
		n += 2 + l + sov(uint64(l))
	}
	if m.ArgsTruncated {
		n += 3
	}
	if len(m.Envs) > 0 {
		for _, s := range m.Envs {
			l = len(s)
			n += 2 + l + sov(uint64(l))
		}
	}
	if m.EnvsTruncated {
		n += 3
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *FileActivityNode) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.File != nil {
		l = m.File.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.GenerationType)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.FirstSeen != nil {
		if size, ok := interface{}(m.FirstSeen).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.FirstSeen)
		}
		n += 1 + l + sov(uint64(l))
	}
	if m.Open != nil {
		l = m.Open.SizeVT()
		n += 1 + l + sov(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *OpenNode) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Retval != 0 {
		n += 1 + soz(uint64(m.Retval))
	}
	if m.Flags != 0 {
		n += 1 + sov(uint64(m.Flags))
	}
	if m.Mode != 0 {
		n += 1 + sov(uint64(m.Mode))
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *DNSNode) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *DNSInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sov(uint64(m.Type))
	}
	if m.Class != 0 {
		n += 1 + sov(uint64(m.Class))
	}
	if m.Size != 0 {
		n += 1 + sov(uint64(m.Size))
	}
	if m.Count != 0 {
		n += 1 + sov(uint64(m.Count))
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *FileInfo) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sov(uint64(m.UID))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.GID != 0 {
		n += 1 + sov(uint64(m.GID))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sov(uint64(m.Mode))
	}
	if m.CTime != 0 {
		n += 1 + sov(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sov(uint64(m.MTime))
	}
	if m.MountID != 0 {
		n += 1 + sov(uint64(m.MountID))
	}
	if m.INode != 0 {
		n += 1 + sov(uint64(m.INode))
	}
	if m.InUpperLayer {
		n += 2
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Basename)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.FileSystem)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func (m *Credentials) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sov(uint64(m.UID))
	}
	if m.GID != 0 {
		n += 1 + sov(uint64(m.GID))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.EffectiveUID != 0 {
		n += 1 + sov(uint64(m.EffectiveUID))
	}
	if m.EffectiveGID != 0 {
		n += 1 + sov(uint64(m.EffectiveGID))
	}
	l = len(m.EffectiveUser)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.EffectiveGroup)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.FSUID != 0 {
		n += 1 + sov(uint64(m.FSUID))
	}
	if m.FSGID != 0 {
		n += 1 + sov(uint64(m.FSGID))
	}
	l = len(m.FSUser)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	l = len(m.FSGroup)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.CapEffective != 0 {
		n += 1 + sov(uint64(m.CapEffective))
	}
	if m.CapPermitted != 0 {
		n += 1 + sov(uint64(m.CapPermitted))
	}
	if m.unknownFields != nil {
		n += len(m.unknownFields)
	}
	return n
}

func sov(x uint64) (n int) {
	return (bits.Len64(x|1) + 6) / 7
}
func soz(x uint64) (n int) {
	return sov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
