// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bin/syscall_tester
// +build functionaltests

package syscall_tester

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSyscalltester = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6f\x6c\x14\xc7\xdd\x7e\x76\x6f\x0c\x1b\x38\x9f\x0f\xe3\x04\x07\xc8\xfb\x6e\xde\x1c\xbc\x4e\x0a\xe7\xb3\xe3\x42\x12\xa8\x8a\xc1\x36\xa1\x35\x7f\x42\x80\x28\x4a\xc2\x70\xbe\x5b\xfb\x4e\xdc\xed\x59\x77\x7b\x09\x8e\x92\x14\x38\x08\x75\x0d\xea\x41\xf8\x90\x0f\x69\xeb\xa8\x55\x4b\xab\xb6\x8a\x54\xaa\x26\x51\x13\x4c\x4d\x42\x5a\xe5\x03\x49\xa4\x7c\xa8\x22\x35\x51\x40\x32\x8d\x23\x20\xb8\x29\x6a\x80\xa9\xe6\xcf\xdd\xed\x1d\x8e\xd4\x7e\x69\x3e\x74\x1f\x6b\xbc\xfb\xcc\xef\x99\x99\xdf\xfc\xd9\xdd\x99\xdb\x9d\xef\x74\xf7\xf6\x68\x9a\x86\x12\x74\xf8\xc0\x59\xb1\x48\x8c\x0e\x00\xc6\x3d\x32\xbe\x03\x26\x66\xa3\x05\xb7\x61\x21\x66\x08\x0e\x74\xec\x26\x06\x0f\x3b\x34\x80\x07\x02\x19\x7c\x00\x8e\x6a\xc0\xd1\x3d\xc4\xe0\x61\x2e\x80\xb9\xca\xa6\xa9\x20\xb0\x9b\x18\x3c\xc4\x7d\x00\x0f\xdc\x8e\xa0\xb2\x07\xb9\x13\xc4\xe0\xa1\x64\xaf\x73\xdb\x4d\x00\xa3\xc4\xe0\xe1\x05\x0d\x78\x41\xab\x4e\xef\x6f\x05\xfc\x27\x88\xc1\xc3\x42\x0d\x30\x35\x08\xbf\xb9\x5d\x07\xd0\xd4\x0a\x34\x9d\x20\x06\x0f\x13\x00\x78\x98\x81\x4a\x1d\x8e\x69\xc0\xb1\x3d\xc4\xe0\xa1\x0b\x40\x97\xcb\xb6\xe9\x9c\x13\xdf\x67\x02\xfb\x46\x89\xc1\xc3\x4a\x00\x2b\x5d\xf6\x07\xce\x39\x71\x4c\x83\x19\xaa\x5a\x9b\xcf\x39\x71\xb7\x7f\x53\x00\xa6\x5c\xed\xd3\x9a\x4a\xf6\xb5\xa6\xe2\x4b\x53\x49\x3b\xbf\x2b\x9c\xcb\x84\xdb\xa5\xad\x49\xb5\xed\xda\x0d\x5b\xf1\x9b\x67\x7b\xdf\x5f\x7b\x7c\x6e\xe8\xd1\x46\xfd\xf5\xc2\x62\x6d\xe8\xc7\x2b\xb6\xbf\x4a\x54\xfe\x9a\xd2\x40\xe9\xf5\x72\xdf\x02\x33\x95\xbd\x4e\xb6\x21\x6f\x45\x11\xf7\xab\x6f\x7f\x3c\x56\xeb\xef\x12\xd7\x79\x23\x80\xdb\x6b\xf8\xfc\x1a\xfe\xb0\x8b\xf3\x8c\xef\xae\xb1\xff\x7f\x0d\x9f\xcd\xeb\x3c\x4a\x0c\xee\xf7\x1c\x34\x00\xa9\x64\x5f\x8c\xd7\x77\x19\xe8\xba\x8d\x34\xe7\xc4\x93\x36\xcd\xe7\xac\x38\x06\xb3\x49\xdb\xe9\x47\x2c\x91\x79\xc2\x46\xd4\xc9\x24\x91\x73\xb2\xb1\xf4\x20\x28\xe5\x69\x68\xce\x89\x66\x1d\x9a\x8e\x26\x6d\xac\xed\x5d\xb7\x7a\x0d\x6d\x0f\xb7\x95\xcf\x22\xa0\x74\x20\x9d\xb1\x95\x8a\xaa\x51\xae\x8b\xa3\x0e\x0d\x9a\xf8\x2f\xdb\x8e\x63\x4e\x32\x59\xcf\x5b\xae\x5b\xc5\x05\x05\xd7\xb1\x51\xd9\xaf\x9e\x20\xc6\x0c\x02\xf8\xc7\x88\x31\x53\x03\x82\xfc\xa8\x03\x4d\xfc\xe8\x03\x9a\xf9\xb1\x0e\x58\xc8\x8f\x33\xa6\x1b\x09\x1e\x3c\x78\xf0\xe0\xc1\x83\x07\x0f\x1e\x3c\x78\xf0\xf0\x9f\xc7\xe5\x86\xff\xf9\xe2\xc1\xc2\xa4\x31\xf1\x1e\x80\x3d\xe3\x97\x5b\x81\x91\xc2\x55\xc6\xd8\xfe\x31\x47\x67\x67\x0a\xa7\x8c\x47\xc6\xdd\x7a\xf6\x75\x32\x46\x0c\xb6\xc8\x18\x23\x86\xe0\x8b\xf8\x2a\x28\xc1\x4f\xcf\x7f\xc8\x18\x63\x8b\xf8\x6a\x28\xc1\x6d\xe7\xcf\x08\xce\x57\x45\x09\xbe\x8c\x3a\x3f\x26\x38\x5f\x1d\x25\x9a\x39\x7f\x49\x70\xbe\x4a\x4a\xf0\xe5\xe2\xf9\x51\xc6\x18\xf7\xa7\xed\xd3\xed\xc3\x1f\x15\xce\x5e\xdc\xb4\x65\xf3\xc4\x1d\xc2\xad\x47\x5b\x81\x43\x85\x55\xef\x31\xb6\xe9\x50\xe1\xcc\xbb\x8c\x6d\x7a\x60\xdb\xe9\xb1\xc8\x11\x62\x6c\x9a\xf8\x05\x63\x6c\x6a\x64\x61\x68\xbc\xbf\xd8\x5f\x2c\xf2\xf4\xe2\x4c\xfe\x15\x4b\x86\xd2\xdf\xcb\x2d\x63\xc4\xf8\x06\xff\xe7\x84\x5e\xe6\x5e\xef\x1f\x73\x16\x6c\x1d\x3e\x57\x98\x6c\x4a\xf0\x58\x5e\xe5\xe0\x1f\xc7\x0f\x1d\x5f\xcc\x8d\xfd\xc5\xd2\x99\x3a\xc8\xf4\x4b\xf9\xbf\xe1\x3f\x9c\x9c\xf8\xdf\x93\xff\xd0\xb5\x33\xef\x5c\x71\xcc\x57\x45\x5e\xef\x3a\xf3\x44\x5e\xc1\x4d\x32\xb3\x77\x65\x66\xce\x62\x94\xf2\xe1\xfe\xed\x16\xe5\x23\x2f\xcb\x35\x26\x12\x8c\xb1\x37\xeb\x78\x9c\x56\x2e\xd9\xad\xff\xe4\x7b\x15\xff\x45\x92\xe6\x91\x6e\xff\xc8\x7a\xa3\xf0\xb4\x41\x1a\xf6\xf1\x55\xf8\xa1\x3a\x63\x94\x18\xc3\x24\x34\x71\xf0\x3a\x63\xa7\xbb\xaf\xf2\xe5\xec\x79\xbe\x7e\xe5\xca\x55\xc2\x72\xe4\x3a\x63\xc3\xdd\x57\x44\x84\x9f\x47\xec\x11\x11\x53\x22\x82\x8c\xac\xbf\x32\xb2\x75\x6a\x98\x84\x86\x7b\x43\x64\x78\x4b\xc8\x98\x68\x97\x39\x41\x64\x72\xb5\x70\xaa\xf9\xb1\xf1\x62\xb1\xaa\x7c\x65\x2d\x3c\x6d\x68\x0d\xdf\x97\x6e\x6c\x54\x6e\xd4\x55\x12\x9f\x8f\x96\xdc\x20\xa2\xf8\x2b\xc3\x1f\x0d\x6b\xa7\x3b\x49\xff\x28\x31\x26\x5e\xbb\xc6\x58\xe1\x0a\x1a\xf6\x9b\x42\x64\x14\x26\xb4\x91\xf5\xfe\xc2\x49\xa2\x3c\x99\xf0\x33\xee\xe4\xd5\xf3\x0b\x85\xfd\xca\xa1\x7a\x9b\x97\xe0\x0f\x0d\x77\x85\xc8\xc4\x8f\xae\xdd\xe0\x22\x6f\xaf\xad\x13\x3b\xf9\xa8\x79\x63\xf1\x52\xe0\xa1\x6d\x0f\x16\x26\xfd\xc3\x9f\x8c\x3c\x15\x6a\x99\x68\xb8\xc6\xd8\xa1\x1f\x04\x19\x63\x87\xf6\xf3\x8c\xef\x1c\x3f\xf9\x85\xee\xdc\xd9\xf6\x79\xa9\x93\x1f\x47\x61\x92\x3c\xc4\x9c\xd0\x12\x11\x8e\xfe\x96\xab\x0a\x6f\x6a\x85\x53\xc1\x7b\x2f\xe7\x3f\x2e\x9c\xf2\x3f\xb2\x9d\x3e\x56\x1e\x13\xce\x62\xd1\x3f\xe3\x23\x4b\x42\xe3\xee\x6b\xe9\xc0\x35\xc6\xf6\x8c\xff\x6c\x09\x70\xc3\xf5\xe3\xc1\x83\x07\x0f\x1e\x3c\x78\xf0\xe0\xc1\x83\x07\x0f\x5f\x15\x7c\xe2\x7d\xb0\x8e\x4d\x29\x2b\x9a\xb3\xcc\xc1\x68\x2e\x67\x46\xcd\xfe\x64\x8a\x9f\x3b\x89\x25\x66\xdc\xca\x39\x49\x3b\xea\x24\x33\xb6\x99\x4f\xc6\xcd\xa8\x1d\xaf\x8a\x1b\x48\xc6\x4d\x27\x63\x8a\x57\xb3\xb3\x6a\xb2\x89\x65\xd2\xe9\xa8\x1d\x9f\x25\x5f\xdc\xde\xdd\x8e\xad\xf6\x4e\x3b\xf3\x84\x5d\x32\x98\x3b\x16\xe5\x76\xcc\x82\xb6\xc0\xb7\xe2\x1e\xf5\x7e\xfc\x97\x17\x18\x7b\x0a\x80\xff\x22\x63\x5b\x00\xf4\x5e\x64\x2c\xc1\x8f\x9f\x31\x36\x0a\xe0\xf7\x9f\x31\x36\x09\xe0\xe4\x67\x8c\x41\x93\xef\xc4\x39\xb4\x27\x37\x43\x7b\xca\xd0\x16\xf8\x09\xf9\xae\x26\xdf\xdb\xf2\x35\xe3\x4b\x17\x18\x5b\xc1\x05\x5d\x33\x0d\x1e\x17\x01\xf0\xc1\x05\xc6\xea\x54\x3a\x53\xbd\xdb\x6f\xb9\xc0\xd8\x0e\x1e\x11\x30\x7a\x02\xfe\x6f\x35\xcc\x76\xc8\x2e\x7c\x73\xfe\x8a\xbb\xda\x43\xff\x77\x3f\x00\xee\xc3\x4f\x2e\x31\x66\x71\x4d\x77\xc0\xd8\xaf\xf7\x06\xfc\x07\x7c\x9d\x81\xe0\xb3\xa4\x33\xd0\x54\xa8\x5b\x13\x30\xd3\x81\x50\x67\xa0\xa5\x2b\xb0\xa4\x2b\x10\x59\x1f\x30\xd7\x06\x9a\x3a\xc7\x03\xc1\xce\x37\x03\xfe\xce\xd3\x01\xa3\xf3\x8d\x00\x91\x7e\x1d\x07\xf0\xd6\xa5\x8a\x0f\x3c\xee\x2d\x00\xaf\x5c\x62\x8c\x7c\x15\x83\xc0\x83\x07\x0f\x1e\x3c\x78\xf0\xe0\xc1\x83\x07\x0f\x1e\xfe\xcb\x30\x7a\x98\x18\x83\x87\x89\x51\xfa\x46\xdd\x0f\xf9\x0d\x7a\x3d\x5f\x7f\x3e\x47\x8c\x5b\x21\xbf\xd9\x5e\xa0\xbe\xd5\x9e\xcf\xd7\x6e\x27\x88\xb1\x50\xf1\xbf\x5d\x67\x99\xc9\x3d\xc4\xe0\xeb\xba\x83\x7b\x89\xc1\xd7\xb3\xfe\xbd\xc4\x98\xa5\xd6\x8f\xb3\xd5\x5a\xef\x66\x55\x1e\x5f\x7b\x63\x8c\x18\x3a\x5f\x7f\xaa\xef\xbb\xe7\x00\x98\x07\x60\x65\x81\x18\xfc\xbc\xa3\x40\x8c\x46\x00\x86\xfa\x86\x9e\x1f\xaf\x33\x96\x21\x05\x62\x30\xc6\x32\xdc\xcf\x8b\x8c\x65\xa6\xf6\xca\xf7\xf1\xff\x2e\x9a\x4e\x54\xd2\xf5\x14\x89\xb1\xad\x48\x8c\xfe\x22\x31\x1e\x2f\x12\xe3\xd9\x62\xc5\xb6\x76\xcd\x9a\xfb\xcc\x96\xad\x7d\x79\xdb\xc9\x9b\xf7\x86\xef\x0e\x47\x96\xb6\x2d\xcf\x0b\xda\xf6\x4c\x7b\x24\x1c\xe9\xb8\x53\x46\x43\x69\x62\xa9\xa8\x3d\x60\x3e\x6e\x65\x73\xc9\x8c\x6d\xb6\xb5\x85\x23\xe1\xc8\xd2\xf6\x67\x64\x12\x91\x20\xdc\xf6\x25\x3e\x1d\xdd\x23\xcb\xf5\xa9\x9d\x02\xc7\xca\x5c\x7e\xc9\xfe\x76\x99\x8b\x16\xc4\x64\x99\xcb\xd5\xb3\x7f\x6f\x89\xcb\x15\xf6\xc1\x32\x97\x1f\x63\x4f\x95\xf9\x4c\xc1\x79\x5b\x4a\x2e\xab\xdb\x51\xe6\x37\x09\xbe\xb2\xcc\x67\x49\x07\x8b\x25\x3e\x5b\xd0\x48\x99\xfb\xa5\xb9\xcc\xeb\x05\xe7\x63\x47\xf2\x80\x4c\x3f\x5a\xe2\x0d\x82\xee\x2b\x73\xf9\x05\xfa\x58\x99\xcf\x91\xf5\x39\x51\xe2\x8d\x82\x07\xcb\x7c\x6e\x55\x1f\xfa\xd4\xaf\x21\x57\xcb\x5c\x8d\xb4\xb1\x12\xbf\x45\x50\xb3\xcc\xe7\x09\xde\x52\xe6\xcd\x55\xfd\xe0\xc3\xad\x95\xbd\x1a\x62\x8c\x5f\x62\xbc\x86\x17\x55\xfd\x74\xd4\x8b\x1a\x45\x0e\x57\xf8\xed\x00\x06\x5d\x7c\xb9\xca\x5f\x5e\x53\xcd\xe8\x71\xf9\xaf\x61\x2e\xd2\xea\xba\x2b\xe9\x87\x5c\xf5\xd5\xd0\x88\xe7\x6b\xca\xaf\xf5\xe7\xe7\x00\x9e\x7f\xb1\xa4\x9f\x53\xe5\x3f\xb7\xff\xce\x55\x1e\xd0\x28\x7e\x67\x69\x2a\xe7\xdf\x84\x77\x5c\xe5\x71\xfb\x59\x57\x7f\xf0\xab\xf5\xef\xae\xf6\xd3\x70\x0b\xea\x35\x60\xd5\x73\xf2\x1a\x6f\x44\x3d\x6e\x73\x39\xc4\x7b\xa7\xb5\x86\xaf\xd2\x80\x0f\x8b\x72\x8f\x43\xa3\x5e\x8f\x03\x5a\xa5\xfd\x4d\xcc\xc3\xb6\x1a\x7d\x42\x03\xba\xd5\x78\xe1\xfa\x67\xb4\x4a\xff\x04\x31\x0f\xf3\xb4\xca\x78\x6a\xd4\x03\xd8\xef\xca\x8f\xdb\x8f\xb8\xf2\x33\x01\xbc\xa8\x01\x21\x65\x9f\xa3\xcf\xc3\xaf\xb5\xea\x3d\x17\xaf\xd5\x94\xff\x67\x0d\x38\x73\x84\x18\x96\xaa\xdf\x38\x80\x25\xe5\xfc\x9b\xf1\x57\x6e\x2f\xaa\xfa\xeb\xf5\x18\xd1\xe4\x78\x5f\xa1\xf4\xba\x2e\xc7\x77\x29\xff\x9b\x74\xb7\xff\xcd\xb8\x59\x07\x22\x47\x88\x31\xaa\xf4\xf3\x75\xe0\xa5\xc3\xc4\x78\x5a\xf1\xbb\xf4\x6a\x7f\xee\x73\xa5\xe7\xfe\x9f\xd5\x2a\xd7\x5f\xa3\x3e\x1b\x88\x65\x9d\x9c\x93\xef\xef\x0f\xc7\x10\xb7\xb2\xd6\x40\x32\xe7\x58\x59\xea\xa4\x69\x2c\x95\xb1\xad\x1c\x28\x8d\x67\xe8\x40\x2a\xd3\x17\x4d\xd1\xb8\x93\xc9\xe6\x68\x34\xbf\x0b\xb1\x4c\x7a\x30\x65\x39\x56\x3c\xbc\x7c\x59\x7b\xfb\xf4\x22\xda\x9f\xb4\x93\x34\x9a\xcd\x46\x87\xa8\x65\x3b\xd9\x21\xf4\x67\xa3\x69\x8b\xc6\xf3\xe9\xf4\x10\x28\x75\x31\x9a\xb4\x93\x4e\x95\x34\x37\x94\x8b\x45\x53\x29\xea\x58\xdc\x9f\x70\x0c\x94\xf6\x6c\xee\x5c\xdf\x4d\xbb\x37\x74\x51\x0a\x5a\x9d\x22\x0e\xda\xf5\xf0\x86\xce\xf5\xeb\xd6\x54\x5b\xc4\x8e\x15\x50\xba\x76\xc3\x56\xda\x7d\xbf\xca\xe1\xfe\xae\xcd\xa0\x6b\x7b\x37\xae\xee\xec\xa5\x1b\x7b\x7a\x1e\xec\xde\x42\xb7\x74\xae\xee\xed\xa6\xa5\xdd\x30\xb1\x5c\x5e\xf8\xae\x36\xc9\xac\x5a\x55\xd9\x09\x23\x7e\x88\xad\x44\xb4\x81\xd2\x5d\xf7\x2c\x0b\x0f\x58\x0e\x1d\x8c\x51\x27\x91\xb7\x77\x86\xfb\x76\xa9\xfd\x36\xee\x84\xd3\xe9\x06\x41\xad\x78\xd4\x89\xf2\xe6\x8b\x3a\xd1\xb2\xb7\x55\x9b\x6d\x28\x8d\xe7\x32\x34\x11\xb5\xe3\x29\xab\x76\x5b\xcf\x0d\xbb\x77\xaa\x4b\x2c\x57\x86\xb7\x08\x68\x3c\x45\xb3\x56\x2a\x13\x8b\x3a\x16\x4f\xe2\x24\x63\x74\x30\x69\x81\xf6\x0f\xd2\xc4\x13\xa0\xb4\x2f\x97\x53\x2e\x88\x8d\x40\xea\x37\x67\xaa\x7a\x42\x6c\x1b\xaa\xce\x7f\xcb\xfa\x35\xaa\x3b\x10\xce\x0d\xa5\x9d\x68\x1f\xc2\x39\x27\x2b\x8f\x89\xd2\x59\xd2\x76\xac\xec\x20\xc2\x76\xc6\xb1\xc2\x03\x76\x3e\xdc\x97\x4f\xa6\xe2\x4b\x93\x71\x15\xd5\xb9\x7a\xdd\x52\x27\x3a\x00\x61\x4b\x44\x73\x09\x84\xe3\x43\x76\x6e\x28\x2d\x8f\x4e\x56\x5a\xd4\x93\xb0\x8a\xd0\x2c\xc2\x59\x2b\xc5\x75\xf2\x64\x30\xe5\xf0\x02\x93\x0e\xc2\x8e\xb5\xcb\x41\x58\x74\x63\x38\x9b\x11\xcd\x1c\xb6\x12\x6a\xd0\x25\xe2\xd9\x0a\x93\x29\xe4\x88\x91\x29\x4a\xe7\xf1\x21\x3b\x9a\x4e\xc6\x10\x1e\xc8\x38\xe2\x9f\x2c\x40\x66\xd6\x97\xcb\x21\x1c\xcb\xa4\xd3\x96\xed\xe0\x5f\xc6\x02\x35\x37\xd2\xd5\x73\xfa\xa8\x06\xf5\x14\x92\x28\xdd\x4e\xee\x50\xfb\xca\x74\xf5\xfc\x3e\xc6\xef\x43\x55\xf7\x66\x89\x65\x2e\x1d\x7f\xae\xbf\xad\xc9\xfb\x56\xad\xae\x0b\xc0\xe7\x8c\x65\x74\xf5\xbc\x9f\x54\xba\x3a\x97\x8e\x87\x0d\x6a\x9e\xa5\xab\x79\x80\x5f\x07\x76\xab\x77\x0b\x9a\xd2\xf0\xa7\xec\x36\xd7\xde\x38\x3e\x3f\x38\xa8\xcb\x39\x5a\x6d\x3d\xb6\x03\x60\xaa\x5c\x3e\x6f\x98\xd2\x65\xfa\x52\xb9\xba\x0a\x3b\xd5\xbc\x4c\x57\xf3\x09\xe2\x93\xef\x1a\xdc\xe5\x72\x3c\x09\x88\x59\x85\xae\xe6\x19\x1d\x3e\x39\xa7\x73\xd7\x83\xf3\x82\xd2\xad\x56\xf3\x8f\x95\x3e\x39\x47\xe4\xba\x5b\x5c\xba\x83\x2a\x7f\x31\xb3\xe1\xf7\xc5\xe0\xf4\xed\x7c\xc0\xa5\xe3\xf3\x95\x48\x10\xd8\xe1\xd2\x05\x95\xf6\x88\x4b\xc7\xef\xeb\xc5\x20\xf0\x8a\x5e\xad\xe3\x78\xde\xa5\xe3\xcf\xa3\xde\xb9\xa8\x9a\x3d\x94\xca\xfd\xa1\x6b\xbc\x88\x79\x8f\x09\xec\x9b\x46\xf7\x53\x97\x4e\xec\xab\x34\xe5\x9e\xca\x5a\xdd\x71\x97\x8e\xcf\x93\xc6\x4c\xe0\x83\x69\x74\xaf\x03\x62\x6e\xe2\x53\xcf\x77\x7f\x6b\xc5\xe6\x1e\x2f\x7f\x02\xc4\x2c\xcc\xa7\xe6\x09\xc1\x2f\xd1\xbd\xaf\xea\xea\x53\xf3\x87\xa6\xd6\xca\x9e\x51\x77\xbf\xfd\x45\xf9\xe7\x53\xf3\xb0\xab\x5f\x92\xdf\x59\x97\x4e\xcc\x2f\x22\x37\x8e\x7b\x1e\x3e\x75\xe9\xf8\x73\xde\x8c\x00\xc6\x34\xf5\xbd\xac\xca\xf7\xa9\xf9\x56\x4b\xa4\xba\xdc\xd2\x78\xbe\xa2\xce\x23\x8a\x73\xdd\xb6\x1a\x9d\xe6\xee\x33\x85\xdd\x11\x60\x15\x91\xd7\xff\xd7\x5c\xd7\xd1\x4d\xa5\x3a\x28\x8c\x75\x00\x3d\xfa\x8d\xe5\xce\xa9\xd1\xcd\x58\x0e\xb8\xb6\x1d\x97\x75\xff\x0c\x00\x00\xff\xff\x23\xdb\x30\x44\x90\x3c\x00\x00")

func bindataSyscalltesterBytes() ([]byte, error) {
	return bindataRead(
		_bindataSyscalltester,
		"/syscall_tester",
	)
}

func bindataSyscalltester() (*asset, error) {
	bytes, err := bindataSyscalltesterBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/syscall_tester",
		size:        15504,
		md5checksum: "",
		mode:        os.FileMode(509),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/syscall_tester": bindataSyscalltester,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"syscall_tester": {Func: bindataSyscalltester, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
