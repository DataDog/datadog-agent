// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bin/syscall_tester
// +build functionaltests

package syscall_tester

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSyscalltester = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x0f\x6c\x1b\xd7\x79\xff\xdd\xf1\x6c\x5f\x6c\x9a\xa6\x65\x35\x56\x6c\x77\xe3\x1c\x3a\x75\x3a\x9b\xa2\x14\x25\x71\x16\x07\xb3\x6c\xc9\x7f\x36\xc9\x51\x1c\xcb\x59\xd1\x24\x17\x8a\x3c\x8a\x6c\xf8\x6f\xe4\x29\xb1\x3a\x27\xb3\xcb\xb9\x0d\xc7\xba\xa3\x33\xcf\x49\x50\x74\x50\x53\x34\xcd\x86\x16\x08\x50\x37\x11\xb6\x60\x56\x26\xc7\x4a\xb6\x02\x75\xb2\xa2\x5d\xd6\x01\x73\x97\x78\xa0\x51\x39\x70\x1b\xc7\x56\x64\x39\x6f\xf8\xde\x7b\x47\x1e\x19\xa9\xda\xd6\x00\x05\x56\x7e\xc2\xe3\xdd\xef\xbd\xef\xfb\xde\xf7\xbd\xf7\x8e\xf7\x3d\xea\x7d\x7f\xda\xdd\xb3\x5d\x51\x14\xd8\xa4\xc2\x05\x42\x67\x4a\x9a\xde\x01\x20\x72\x87\xa8\xef\x80\x0f\x4b\xb0\x1e\x9f\xc4\x1a\x2c\xe4\x18\xe8\x38\xa8\xe9\x54\x1e\x52\x00\x2a\x1a\x44\x71\x01\x38\xa6\x00\xc7\x0e\x69\x3a\x95\x15\x00\x56\xc8\x36\x45\x16\x4e\x07\x35\x9d\x8a\x57\x03\xa8\x50\x3b\xbc\xb2\xdd\x0b\xa0\xa4\xe9\x54\xac\xeb\x00\x2a\x0b\x9c\xed\x3e\x00\x23\x9a\x4e\xe5\x98\x0b\xa0\xe2\x94\x77\xb7\x02\xee\x93\x9a\x4e\x65\x83\x02\x74\x28\xe0\x76\x53\xbb\x0a\xa0\xb9\x15\x68\x3e\xa9\xe9\x54\xca\x00\xa8\x2c\x44\xd5\x87\xe7\x15\xe0\xf9\x43\x9a\x4e\xa5\x0b\x40\x97\xa3\xad\xef\x9c\x15\x39\xb0\x16\x38\xf0\xac\xa6\x53\xd9\x0c\x60\xb3\xa3\xfd\x9e\x73\x56\x04\xb3\xd0\x42\xe9\xd6\x9e\x73\x56\xc4\x69\xdf\x25\x00\x97\x1c\xe3\xd3\x9a\x88\x0f\xb4\x26\x22\x1b\x13\xf1\xd4\xd0\xfe\x40\x2e\x1d\x68\x17\x6d\xcd\x72\x6c\x77\xec\xee\xc7\x4b\x4f\xce\xf4\xbd\xdb\xfd\xf2\xb7\xfe\xed\xd5\x5e\x3d\xb9\xfa\x6f\x8f\x0f\x1f\x7e\x51\xd5\xa4\x7e\x45\xf2\x40\xf2\xab\x95\xb9\x05\x96\xc8\x76\x3e\x96\x3e\x75\x2d\x64\xdd\xa6\x5f\x14\xd7\x7c\xe7\x0f\xdf\x1e\xab\xb7\xf9\x1e\xc7\x7d\x13\x80\x4f\xd5\x61\x5f\x1d\x7e\xdc\x81\xa9\xed\x8f\xea\xda\x3b\xeb\xf0\xaa\x3a\xbc\xab\x0e\xdf\x5a\x87\x37\xd7\xe1\x00\xd9\x3e\xa6\xe9\xe4\xfb\x72\xb4\x70\x5f\xb4\x11\x1b\x2f\x03\x12\xf1\x81\x30\x8d\xe1\x6d\x30\x76\xdd\x6d\xe4\xac\x48\x3c\x65\x0c\xe5\xcc\x08\xa2\xe9\x8c\x99\x42\xc6\xcc\x66\xd3\x59\x44\xc3\x89\x74\xce\x44\xce\x8a\x98\xd9\x2c\xa2\xf1\x84\x99\x4a\x23\x64\xa5\xe3\x88\x66\xb2\xf1\x94\x15\x45\x6e\x38\x17\x0e\x25\x12\xc8\x59\xd9\x70\x32\x03\xc3\x20\xc5\x46\xce\x0a\x65\x2d\x23\x19\x8a\xa7\xb0\xa3\x67\xd7\xd6\x6d\x46\x7b\xa0\xad\x72\x17\x84\x61\x0c\x26\xd3\x29\xc9\x65\x40\x3e\x5f\x2a\xbf\x8a\x3b\xf1\xa7\x40\xe1\x9f\x62\xfe\x88\x96\xc7\xe3\x4b\x69\xf6\x3e\x27\xeb\xbc\x1c\xab\xb0\x64\xfb\xcc\x49\x4d\x5f\xa8\x09\xdf\x17\x2c\x01\xdc\x63\x9a\xbe\x48\x01\xbc\x74\x55\x81\x66\xba\xba\x80\x16\xba\x2e\x00\xd6\xd0\x75\x21\xe0\xa3\xeb\x22\xc0\x4f\x57\x1d\x58\x4f\xd7\xeb\x80\x0d\x74\x5d\x3c\xdb\xaa\x6d\x50\x83\x1a\xd4\xa0\x06\x35\xa8\x41\x0d\x6a\x50\x83\x1a\xf4\xff\x85\xde\x5b\xf6\x5b\x57\xef\xcd\x4f\xea\xe5\x15\x0a\x70\x68\xfc\xbd\x56\xa0\x98\x9f\x61\x8c\x1d\x1e\xb3\x54\x76\x26\x7f\x4a\xff\xec\xb8\x93\x9f\xdd\xaa\x8d\x69\x3a\x5b\xa7\x8f\x69\x3a\xc7\xeb\x68\xe7\x11\xa3\xdb\xf3\x67\x19\x63\x6c\x1d\xed\x40\x62\xd4\x76\xfe\x0c\xc7\xb4\x13\x89\xd1\x16\xe6\xfc\x18\xc7\xb4\x23\x89\xb5\x10\x7e\x81\x63\xda\x99\xc4\x68\xab\x78\x7e\x84\x63\xda\xa1\xc4\xd6\x13\x2e\x71\x4c\x3b\x95\x58\x90\xf0\x41\x8e\x69\xc7\x12\xdb\x44\x38\xc3\x31\xed\x5c\x62\x5b\x08\x3f\xc4\x18\x23\x7f\xda\x2e\x3c\x58\xf8\x69\xfe\x9d\x8b\x7d\x7b\xf7\x94\x6f\x04\xb9\xb5\xa6\x15\x38\x92\xef\x7b\x8b\xb1\xbe\x23\xf9\xb3\xff\xca\x58\xdf\x3d\xfb\x26\xc6\xc6\x8e\x6b\x7a\x5f\xf9\x73\x8c\xb1\x4b\xc5\x35\xfe\xf1\x68\x29\x5a\x2a\x91\x3c\xbf\x13\x7f\x25\xbb\xc1\xfe\x1b\xa5\x0d\xd7\x5d\xf4\x61\xf9\x47\xc9\xeb\xc3\x63\xd6\xea\xfe\xc2\xb9\xfc\x64\x73\x8c\x6a\x69\xc8\xbc\xaf\x8f\x1f\x39\x71\x13\x35\x46\x4b\xf6\x9d\xbc\x08\xf9\x8d\xf4\x51\xf8\xc7\x57\xca\xbf\xfd\xca\xb4\xaa\x9c\x79\x63\xca\xf2\xfd\x1d\xd7\xf5\xa6\xb5\x92\xeb\xf2\xf6\x09\x65\x6f\x0a\x65\xd6\x4d\xb0\xf5\x90\x7d\x07\xef\xda\x4c\xa3\x3f\x24\xfa\xd5\xcb\x31\xc6\xd8\xe9\x05\x54\xa7\x54\x7a\x76\xf2\xff\xec\xcf\xab\xf6\x73\x91\xf5\xc5\x6e\x77\xb1\x57\xcf\x3f\xa6\x6b\xcb\xfe\x8c\x46\xe8\xeb\xdc\x20\xcd\x7f\x64\x81\x3e\xa2\xe9\x85\x2e\xbf\x56\x0e\x7f\xc8\xd8\x44\xf7\x0c\xed\x49\xcf\xf7\x02\x20\x91\x2d\xc4\x53\x2e\x7c\xc8\x58\xa1\x7b\x8a\x57\xb8\xa9\x62\x3f\xaf\xb8\xc4\x2b\xb4\x62\xef\x54\xb1\xff\xd2\x84\xe6\x7f\x11\x00\x69\x2a\xf4\xf8\xf5\xc2\x5e\xbf\xbb\xdc\x26\x34\x82\x2b\x9b\xc9\x9f\x5a\xff\xc0\x78\x69\x5e\x7b\xee\xb6\xed\xf9\x97\x6b\x55\x7b\xbe\x69\xdb\xa3\x71\x9e\xa7\x6c\x9e\x93\xd7\xb8\x65\xf9\xc7\xa6\xb0\xec\xf0\x2a\x1a\xf5\x05\xcf\x8c\x70\x45\x65\xcb\x21\x1e\xe5\xe2\x53\x54\xfd\x9d\x6b\x55\xd3\x39\xdf\xb7\x79\xc5\xc5\xaa\x73\x5f\xe5\x15\x93\xc5\xee\x4b\xc5\xde\x8b\xc5\xfe\xc9\x09\xcd\x6f\xd4\x7b\x76\xdf\x35\xc6\x8a\xbd\x53\x05\xb7\xbf\xd0\x5d\x2e\x7f\x30\x33\x8b\x9f\x36\xf5\x17\xce\xed\xcb\x4f\x76\xcc\xed\xf0\x8b\xb6\x33\xff\xc9\xd5\x4c\x71\x8b\x07\x6a\x26\x40\x77\x18\xcd\x6d\xbc\x32\xc3\x58\xdb\xeb\xb6\xd9\x5a\xb1\xff\x52\x71\xe8\xe2\x84\xe6\xff\xb4\x02\x4c\x74\xf9\xf9\xef\x62\x85\x2e\x61\x6c\xc1\xf2\x7b\x27\xba\xfc\xcd\x50\x80\x42\xef\x64\xf9\xab\xa2\x1b\x61\xed\x54\xfe\x54\xc7\x83\x4e\x73\xe7\x9d\x1f\x7c\x5d\x9a\x7b\xcb\xcc\x5c\xeb\xe5\x33\x33\x75\xeb\x65\xe7\xcc\x6c\xeb\xc5\x5b\x3f\xaa\xca\x6c\xe3\x38\x9f\x3d\x3b\x6d\x7b\xbe\x71\x75\x2e\x7b\x5e\xbf\x5a\x67\xcf\xe8\xd5\xd9\xec\xf9\x61\xbd\x3d\x7f\x7c\xf5\xff\x60\xcf\x51\xdb\x9e\x15\x57\xe7\x5f\xbf\x6c\x7a\xce\xf5\x7b\x62\x7a\xd6\xf5\x7b\x61\xba\x6e\xfd\x4e\x4e\xd7\xad\xdf\x9f\x4c\x7f\x64\xfd\xfe\xa0\xde\xb3\xa7\xa6\x9d\xeb\xf7\x8e\xe9\x5f\xbe\x7e\x7f\xa9\xbf\x3f\xb1\xfd\xbd\x71\x7a\xae\xf1\xdf\x35\x5d\x37\xfe\x9b\xa6\x67\x1b\xff\xd3\xf5\x56\xfe\xfc\x83\xb9\xc6\xbf\x45\xd8\x23\x1b\xf3\x8f\xe9\xca\xb2\xbf\xa8\x35\x6b\xdd\xb3\xd2\xac\x2f\x7f\x50\x35\xeb\x4d\xa5\x32\x0d\x64\xce\x54\xe1\xa7\x05\x65\xa2\x53\xbb\xeb\x59\x4d\x2f\xfb\x3f\x60\x2c\x4f\xd3\xe0\xe3\xdd\xe9\xf9\xb2\x52\xec\x75\xe7\x5f\xa1\x19\x2b\xf4\xf8\xb5\xf2\x77\xb9\xd1\x33\xe7\x8f\x28\x62\x32\x84\xec\x66\x92\x2d\x4f\xcd\x23\xbb\xe8\xaa\x90\xbd\xa7\x46\x76\x1b\xc9\x7e\x7b\x3e\xd9\xbf\x97\xb2\x9f\xa8\x91\xed\x21\xd9\xcc\x7c\xb2\xad\x33\x42\xf6\x2d\x38\x65\xf7\x92\x6c\xc7\x7c\xb2\x79\x29\xfb\xb5\x1a\xd9\x7b\x49\x76\xea\xca\x3c\xb2\x3f\x96\xb2\xa1\x1a\xd9\xfb\x49\xf6\xe5\xf9\x64\x8b\xd7\x84\xec\x3a\x7b\x3e\x69\xa1\xd2\x94\x9a\x72\x4a\x69\x7d\x94\xbf\x77\xa5\x32\xad\x7c\x6d\xb4\x3c\x20\xdf\xda\xf4\xfe\xeb\x2f\x3f\x4c\x51\xc0\xab\xd7\x7f\x0a\xb8\x6f\xdf\xbd\xf9\x49\x77\xe1\x67\xc5\x03\xfe\xf5\x65\x76\x99\xb1\x23\x5f\xf3\x32\xc6\x8e\x1c\x76\x33\xc6\x6e\x1e\x7f\xe5\xaa\x6a\xdd\xdc\x76\xd9\x7e\x69\x3f\x82\xfc\xa4\x76\x1f\xb3\xfc\x1b\x78\x39\xf6\x3d\xe2\xca\x9f\x56\xf2\xa7\xbc\x77\xbc\x37\xf4\x76\xfe\x94\xfb\xb3\x0f\x1a\x0f\x54\xde\xf1\xd6\x4d\xfc\x7d\x3b\x5e\xdc\xe0\x1f\x77\xc6\x56\x2f\x5d\x61\xec\xd0\xf8\x53\x37\x01\x1f\x89\xa7\x1a\xd4\xa0\x06\x35\xa8\x41\x0d\xfa\x75\x90\x8b\xff\x3f\x58\x45\x5f\xc2\x0c\xe5\x4c\x5f\x26\x94\xcb\xf9\x42\xbe\x68\x3c\x41\xf7\x56\x6c\x83\x2f\x62\xe6\xac\x78\x2a\x64\xc5\xd3\x29\xdf\x50\x3c\xe2\x0b\xa5\x22\x35\x75\x83\xf1\x88\xcf\x4a\xfb\xc2\xb1\xf4\xa3\xa9\xc5\xbf\xb2\x9a\xa8\xd4\x93\xc5\xf6\x50\x3c\x61\xf2\xba\x74\xc6\x4c\xf9\x32\xd9\xf4\x23\xf1\x88\x19\xe1\x3a\x3f\xa6\x6e\x42\xd6\xaf\x6e\x70\xe2\x63\x72\x9c\xab\xb9\xa5\xfd\xe3\x1a\xc1\x8f\x43\x53\x62\x0e\x4d\xe1\x74\x32\x19\x4a\x45\x16\x43\x74\x05\x7b\x30\x91\x70\xe2\x5b\xda\x61\x2b\x40\x7f\xea\xe1\x54\xfa\xd1\x94\x2d\xe9\x7b\x68\x5d\xee\xa1\xc5\x80\xb2\xda\x75\xe7\x26\x79\x2e\xe2\xc4\x05\xc6\x0e\x00\xd8\xfb\x2e\x63\x7b\x01\x1c\x7b\x97\xb1\x18\x80\xc8\x65\xc6\x46\x00\xfc\xf0\x32\x63\x93\x00\xde\xba\xcc\x18\x6d\x5d\x9b\xe5\xfa\x55\x3e\xbf\x07\xca\x01\x5d\x59\xed\xd6\xb4\x27\x14\xf1\xbf\xf2\x35\x00\xa6\x2e\x30\x76\x27\x31\x74\x2d\xd2\xa9\x2e\x08\xc0\xff\x2e\x63\x0b\xa4\x9c\x4f\x9e\xe9\x08\x5e\x10\xfa\xe1\xd1\xb7\x7b\xdc\x7f\xb0\x6c\x89\xa5\xed\xc7\xef\xaf\xba\xf3\xd3\xed\xfe\xb5\x3b\x01\x90\x0d\x2f\xbf\xcf\x98\x49\x3c\xdd\x1e\xfd\xb0\xda\xe3\x71\x7f\xc9\xd5\xe9\xf1\x7e\x51\xeb\xf4\x34\xe7\x17\x6c\xf3\xf8\x92\x1e\x7f\xa7\x67\x7d\x97\x67\x43\x97\x27\xd8\xeb\xf1\xed\xf0\x34\x77\x8e\x7b\xbc\x9d\xa7\x3d\xee\xce\x09\x8f\xde\xf9\xaa\x47\x13\x76\x9d\x00\x70\xf6\xfd\xaa\x0d\x54\xf7\x1a\x80\x37\xde\x67\x4c\xfb\x75\x3c\xfc\x0d\x6a\x50\x83\x1a\xd4\xa0\x06\x35\xa8\x41\x0d\x6a\xd0\x6f\x30\x9d\x3d\xaa\xe9\x2f\x1c\xd5\x74\xfb\x8c\xba\x1b\xe2\x0c\xfa\x52\x00\xf7\x3f\xa3\xe9\x37\x40\x9c\xd9\x5e\x2d\xcf\x6a\xaf\xa2\x18\xfe\xa4\xa6\xaf\x91\xf8\xfd\x0f\x59\x7a\xf2\x90\xa6\x53\x7c\x7f\xf6\x0b\x9a\xce\xcf\x7b\x7f\x41\xd3\x17\x03\x38\x22\xcf\x59\x53\xcc\xff\x09\xd9\x1f\xed\xbd\x31\xa6\xe9\x2a\x80\x9d\xf2\x7c\xf7\x72\x00\x2b\x69\x5f\x90\xd7\x74\xba\x1f\xcd\x6b\x7a\x93\x94\x5b\x01\x40\x07\xf0\x21\x63\xe9\x27\xf2\x9a\xce\x18\x4b\x93\x9d\x17\x19\x4b\xa7\xf2\xe2\xff\xf1\xff\x5b\x6a\x3e\x59\x95\xdb\x5e\xd2\xf4\x7d\x25\x4d\x8f\x96\x34\xfd\x91\x92\xa6\x7f\xb1\xa4\xe9\xc7\x4b\x9a\xfe\x5c\x49\xd3\x5f\x2c\x69\xfa\xe9\x52\x95\x77\xc7\xb6\x6d\xbf\xe7\x5b\xdf\x3f\x30\x94\xb2\x86\x7c\x77\x04\x6e\x09\x04\x37\xb6\xdd\x3e\xc4\x61\xdb\xe3\xed\xc1\x40\xb0\xe3\x66\x51\x0d\xc9\x13\x4e\x84\x52\x83\xbe\x47\xcc\x6c\x8e\xb6\x98\x6d\x6d\x81\x60\x20\xb8\xb1\xfd\x71\x21\xc2\x05\x02\x6d\x73\xd8\x78\xec\x90\xe8\xd7\x25\x33\x07\x9e\xaf\x60\x71\xb2\xfd\xfb\x15\xcc\x47\x14\x93\x15\x2c\x76\x55\x34\x07\x02\x8b\x9d\xd7\xd9\x0a\xe6\x19\x01\xb0\xc7\xce\x85\x45\x1c\x3f\x51\xc1\xc2\xdd\xd1\x0a\xbe\x8e\xe3\xd7\x2a\x58\x1e\x98\x2e\xd9\x78\x09\x87\xc1\x0a\xe6\x2b\x88\xe7\x52\x08\xbc\x94\x63\x5a\x4b\x02\x7b\x84\xfc\x88\x8d\x97\x71\x78\xe0\x59\x1b\x8b\xd3\xe0\xa3\x15\xbc\x9c\x63\xf7\x49\x1b\x37\x09\xff\x2a\x78\x45\xcd\x9c\xba\xe4\x2e\x79\xa6\x82\xe5\xca\x1b\xb3\xf1\xf5\xc2\xde\x0a\x5e\xc9\xf1\xa6\x0a\x6e\xa9\x99\x07\x17\x6e\xa8\xe6\x6e\xf0\x35\xff\x73\x46\x1e\x06\x8f\x0a\x7e\x15\x4b\xb9\x47\x19\x07\xfe\x1d\x00\x2f\x38\xf0\xed\x00\xf8\x49\x05\xfe\x8c\xb5\x60\xbb\xc3\x7e\x05\x2b\x90\x94\xcf\xa1\xcd\x3f\xec\xf0\x57\x41\x13\x9e\xae\xeb\xbf\xde\x9e\xbf\xa1\xe9\xf8\x86\xcd\xbf\xbc\xc6\x7e\x6a\x7f\xc9\xd1\x1f\xd0\xc4\xf7\xdf\xcd\x15\xfd\xcd\x78\xc3\xd1\x1f\xb5\xbf\xe3\x98\x0f\x7a\x0a\xaf\x38\xc6\x4f\xc1\xf5\x58\xaa\x00\x7d\xcf\x88\x67\xbe\x09\x4b\xf1\x49\x87\x41\x34\x3b\xad\x0a\xb0\xe5\xaf\x34\xfd\xbf\x64\xfb\x16\x05\xf0\x1d\x15\xf9\x09\x4d\xea\x52\xfc\xb3\x52\x1d\x7f\x1f\x56\x62\x9f\x52\x9b\xcf\x10\x53\x80\x7e\xb9\x5e\x88\xff\x71\xa5\x3a\x3f\x5e\xac\xc4\xe1\xba\xfe\x56\x2a\xd5\xf5\xd5\xa4\x7a\xf0\x94\x02\x1c\x7c\xb2\xda\xff\x73\xd4\xdf\x71\x4d\xff\x8a\xc4\x2f\xd5\xc9\xbf\xee\xb0\x87\xf4\xff\xc8\xd1\xee\x03\x70\x4e\x01\x3a\x64\xfb\x72\x75\x25\x7e\xa1\x00\x99\xbf\xd4\xf4\x6f\x4a\x7d\x2e\xb5\x36\xff\xa2\x49\xad\x1b\x8f\x3a\xbc\x55\x05\xce\x3e\xad\xe9\xa6\x94\xdf\x53\xd7\x3e\x0e\x60\x4b\xc5\x9e\x16\x84\x55\xc0\x7b\x54\x8e\xb7\xba\x14\x7f\x52\xc7\xff\x03\x45\x3c\x6f\x77\x4a\x7d\x5f\xa9\x6b\x1f\x51\xc5\xf3\x66\xdb\xf7\x2d\xd5\x39\x9e\x2d\xf8\xae\x0a\x8c\x1d\xd7\xf4\x55\xaa\x90\x1f\x55\x01\xdf\xb1\xea\x78\x05\x15\xe0\x05\x07\x9e\xa8\xd3\xff\x63\x87\x3e\x1a\x9f\xa7\x15\xe0\xe2\xd1\x2a\x7f\x8f\x5a\xfd\xbe\x68\x52\x97\x00\xe1\xac\x95\xb3\x86\xa2\xd1\x40\x18\x11\x33\x6b\x0e\xc6\x73\x96\x99\x35\xac\xa4\x11\x4e\xa4\x53\x66\x0e\x86\x11\x49\x1b\x83\x89\xf4\x40\x28\x61\x44\xac\x74\x36\x67\x84\x86\xf6\x23\x9c\x4e\x66\x12\xa6\x65\x46\x02\xb7\xdf\xd6\xde\x3e\x3b\x93\x11\x8d\xa7\xe2\x46\x28\x9b\x0d\x0d\x1b\x66\xca\xca\x0e\x23\x9a\x0d\x25\x4d\x23\x32\x94\x4c\x0e\xc3\x30\x1c\xc8\x88\xa7\xe2\x56\x0d\xab\x4c\x77\x31\x2c\x93\xec\x09\x84\x61\x18\xdb\xf7\x74\xf6\x76\x1b\xdd\xbb\xbb\x0c\x03\x46\xad\x44\x04\x46\xd7\x67\x76\x77\xf6\xee\xda\x56\xdb\xc2\x13\x5f\x60\x18\x3b\x76\xf7\x1b\xdd\x3b\xa5\x86\x9d\x5d\x7b\x60\xec\xe8\xb9\x7b\x6b\x67\x8f\x71\xf7\xf6\xed\xf7\x76\xef\x35\xf6\x76\x6e\xed\xe9\x36\xec\xa4\x9a\x70\x6e\x88\xdb\x2e\x73\x6d\xb6\x6c\xa9\x26\xd4\xd8\xbf\x2d\x1a\x76\x3a\x8e\x61\xec\xdf\x74\x5b\x60\xd0\xb4\x8c\x4c\xd8\xb0\x62\x43\xa9\x87\x03\x03\xfb\x65\x1e\x8f\x53\x70\x36\xbe\x0c\x0c\x33\x12\xb2\x42\x32\xfb\xa7\xca\xde\x26\xfb\xa9\xf4\x92\xa8\xef\x56\xa4\x0d\xd5\x76\x40\xaa\x2a\x1e\xd7\xe4\xfd\x18\x46\x24\x97\x36\x62\xa1\x54\x24\x61\x56\x7e\x2e\xad\xba\x50\x9b\x97\xf4\x91\xcc\xa2\x1a\xff\x45\x36\x52\x6d\xc7\x95\x41\xa3\x91\x17\x79\x4d\x4e\x5f\x8c\x48\xc2\xc8\x9a\x89\x74\x38\x64\x99\xa4\xd6\x8a\x87\x8d\x4c\xdc\xb4\xa7\xb8\x46\x3d\x4f\x7c\xaa\xd1\x1e\xcd\x18\xb1\x47\x61\x18\x03\xb9\x9c\x74\x8e\x67\x3b\x25\x6a\x07\x28\x64\xa5\xe3\xb5\x46\xed\xed\xdd\x26\xd7\x0a\x02\xb9\xe1\xa4\x15\x1a\x40\x20\x67\x65\xc5\x35\x66\xdf\xc5\x53\x96\x99\xcd\x20\x90\x4a\x5b\x66\x60\x30\x35\x14\x18\x18\x8a\x27\x22\x1b\xe3\x11\x59\xd5\xb9\x75\xd7\x46\x2b\x34\x08\xde\x16\x0b\xe5\x62\x08\x44\x86\x53\xb9\xe1\xa4\xb8\x5a\x59\xd1\x22\xc3\x8a\x1a\x60\x64\x11\xc8\x9a\x09\xe2\x13\x37\x99\x84\x45\x1d\xc6\x2d\x04\x2c\x73\xbf\x85\x00\x5f\x63\x81\x6c\x9a\xaf\x81\x80\x19\x93\x4f\x44\x2c\x92\xad\x22\x21\x21\x96\xb3\x90\xb0\xef\x23\xc3\xa9\x50\x32\x1e\x46\x60\x30\x6d\xf1\x0f\xd1\x81\x50\x36\x90\xcb\x21\x10\x4e\x27\x93\x66\xca\xc2\xff\x94\x56\xcb\xb8\x53\x95\x31\xcf\x31\x05\xf2\x8d\x2e\xc8\xfe\x2a\xbe\x11\xe0\x91\x8a\x2a\x63\xa1\xe7\x15\xc0\xef\xe0\xb3\x7f\x4b\xbe\xcd\xc1\x47\x31\xd2\xf7\x95\xda\x7c\x3d\x9b\xaf\x0b\xc0\x65\xc6\xd2\xaa\x8c\x9d\x26\xa5\xbe\x05\x0e\x3e\x2a\xbb\x65\x0c\xab\xca\x98\xca\xab\x02\x67\xe4\xef\xf7\x8a\xe4\xa1\x88\x65\x9f\x23\xef\x90\x62\xad\xb3\xaa\x88\x7f\xeb\xfd\x78\x10\x00\x93\xfd\x52\x0c\x96\x72\x89\x98\xda\xee\x57\x95\xe5\x61\x19\xf3\xaa\x32\x36\x7b\xc2\x25\x7e\xcf\x77\xf6\x4b\xf4\x79\x80\x47\x68\xaa\x8c\xd9\x46\x5d\xc2\x1e\xa7\x1f\xf4\xc5\x9b\x97\x7c\x5b\x65\x2c\xf7\x9a\x4b\xc4\xdf\xc4\x77\xbd\x83\xef\xcb\x52\x3f\x8f\x12\xe9\x3b\xdb\x3b\xfb\x38\x7f\xc9\xc1\x47\xb1\x5f\xd0\x0b\x8c\x38\xf8\xbc\x92\xf7\x49\x07\x1f\xbd\xa3\xce\x78\x81\x82\x5e\xcb\x47\xf4\xb4\x83\x8f\xde\xe5\xf7\xdf\x80\x9a\x48\xcc\xee\xf7\xaf\x1d\xeb\x85\xc7\x90\x3e\xd4\xbc\x0f\x6d\xbe\xe7\x1c\x7c\x3c\x67\x75\x6d\x6d\x1e\xa5\xcd\x77\xc2\xc1\x47\x31\xe7\xe8\x5a\xe0\xdf\x67\xe1\xfb\x07\x80\xc7\x79\x2e\x19\x2b\xb9\x5b\xab\x6d\xce\xf5\xf2\x4f\x00\x8f\x68\x5d\x32\xe6\xf2\xce\xc1\xf7\x23\xe9\xab\x4b\xc6\x62\xcd\xad\xd5\x7c\x5c\xe7\xbc\xfd\x87\xb4\xcf\x25\x63\xda\x99\x39\xf4\xbd\xe3\xe0\xe3\xb1\x5a\x50\xac\x97\x7a\xbe\x0b\x0e\x3e\x8a\x79\x82\x41\x40\x9f\xc5\xdf\xf7\x64\xff\x2e\x19\x1b\x6f\xaa\xe3\xb3\xef\xa7\xa4\x3e\xbb\x2f\xe2\xdb\xe7\xe0\x53\x1c\xc5\x31\x4d\x28\x05\x81\x8b\x9a\x78\xfe\x7f\xd7\xf1\x1c\x5d\x67\xfb\x20\xe9\xe0\xad\xc0\xdb\x6a\xad\x3e\xc8\x3d\xa3\x93\x2f\xbc\x09\x70\xa4\x74\x57\xf8\xfe\x3b\x00\x00\xff\xff\x78\x2e\xd7\xff\xec\x3d\x00\x00")

func bindataSyscalltesterBytes() ([]byte, error) {
	return bindataRead(
		_bindataSyscalltester,
		"/syscall_tester",
	)
}

func bindataSyscalltester() (*asset, error) {
	bytes, err := bindataSyscalltesterBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/syscall_tester",
		size:        15852,
		md5checksum: "",
		mode:        os.FileMode(509),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/syscall_tester": bindataSyscalltester,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"syscall_tester": {Func: bindataSyscalltester, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
