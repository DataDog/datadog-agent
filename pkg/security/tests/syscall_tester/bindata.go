// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bin/syscall_tester
// +build functionaltests

package syscall_tester

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSyscalltester = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6c\x14\xc7\x1d\xfe\x76\x6f\x0c\x0b\x9c\xcf\x87\x71\x82\x03\x24\xbd\x34\x86\x3a\xa9\x39\x9f\x1d\x17\x92\x42\x15\x0c\x36\x84\xd6\xfc\x09\x01\xa2\x28\x4d\x86\xf3\xdd\xd9\xb7\xe2\xfe\x58\x77\x7b\x09\x8e\x92\x14\x38\x08\x75\x0d\xea\x41\x90\x9a\x87\xb4\x75\xa4\xaa\xa1\x55\x5b\xe5\x81\xaa\x49\xd5\x14\x53\x93\x90\x56\x79\x20\x89\xd4\x87\x28\x52\x13\x05\xa4\xa3\x71\x04\x04\x37\x45\x0d\x30\xd5\x6f\x76\xee\x6e\xef\x70\x1e\xf2\xd2\x3c\x74\x3f\x6b\x6e\xf7\x9b\xdf\x37\x33\xbf\xf9\xb3\xbb\x33\xde\x9d\x1f\xf4\xf6\xad\xd5\x34\x0d\x25\xe8\xf0\x80\x58\xa1\xc0\x8c\x2e\x00\xc6\x3d\x76\x7c\x17\x02\x98\x83\x56\xdc\x8a\x45\x98\x21\x39\xd0\xb5\x9b\x19\x14\x76\x68\x00\x05\x06\x3b\x78\x00\x1c\xd5\x80\xa3\x7b\x98\x41\x61\x1e\x80\x79\xca\xa6\xa9\x20\xb1\x9b\x19\x14\xa2\x1e\x80\x02\xd9\xe1\x57\x76\x3f\x39\xc1\x0c\x0a\x25\x7b\x9d\xd3\x1e\x00\x30\xc6\x0c\x0a\x2f\x68\xc0\x0b\x5a\x75\x7a\x6f\x3b\xe0\x3d\xc1\x0c\x0a\x8b\x34\x20\xa0\x41\xfa\x4d\x76\x1d\x40\x53\x3b\xd0\x74\x82\x19\x14\x8a\x00\x28\xcc\x40\xa5\x0e\xc7\x34\xe0\xd8\x1e\x66\x50\xe8\x01\xd0\xe3\xb0\x6d\x3e\x67\x45\xf7\x05\x80\x7d\x63\xcc\xa0\xb0\x12\xc0\x4a\x87\xfd\x81\x73\x56\x14\xd3\x60\x86\xaa\xd6\x96\x73\x56\xd4\xe9\xdf\x14\x80\x29\x47\xfb\xb4\x27\xcc\xfe\xf6\x44\x74\x69\xc2\x4c\xe5\x76\x05\xb3\xe9\x60\xa7\x6d\x6b\x52\x6d\xbb\x6e\xe3\x36\xec\xef\xbd\x6f\xd6\x4b\x07\xf5\xb6\xe3\xc5\xdc\x4f\xcc\x77\x6f\x6b\xbd\xeb\xdc\xc6\xf7\x98\xca\x5f\x53\x1a\x28\xbd\x5e\xee\x5b\x60\xa6\xb2\xd7\xd9\x6d\x48\xad\x28\xe3\x7e\xfb\xbd\x8f\xc6\x6b\xfd\x6d\x73\x9c\x37\x02\xb8\xbd\x86\x2f\xa8\xe1\x0f\x3b\x38\x65\x7c\x77\x8d\xfd\x1b\x35\x7c\x0e\xd5\x79\x8c\x19\xe4\xf7\x5c\x34\x00\x09\xb3\x3f\x42\xf5\x5d\x06\xbe\x7e\x13\xcf\x5a\x51\x33\xc5\x73\xd9\x58\x14\x43\x19\x33\x65\x0d\x20\x12\x4f\x3f\x91\x42\xd8\x4a\x9b\xc8\x5a\x99\x48\x72\x08\x9c\x53\x1a\x9e\xb5\xc2\x19\x8b\x27\xc3\x66\x0a\xeb\xfa\xd6\xaf\x5e\xc3\x3b\x83\x1d\xe5\xb3\x10\x38\x1f\x4c\xa6\x53\x4a\xc5\xd5\x28\xd7\xe5\x51\x87\x06\x4d\xfe\xda\x6d\x47\x98\x6b\x9a\xf5\xd4\x72\xbd\x2a\xce\x2f\xb9\x8e\x4d\xca\x7e\xf5\x04\x33\x66\x30\xc0\x3b\xce\x8c\x99\x1a\xe0\xa7\xa3\x0e\x34\xd1\xd1\x03\x34\xd3\xb1\x0e\x58\x44\xc7\x19\xd3\x8d\x04\x17\x2e\x5c\xb8\x70\xe1\xc2\x85\x0b\x17\x2e\x5c\xb8\xf8\xdf\xe3\x72\xc3\x6d\x9f\x3f\x98\x9f\x34\x8a\xef\x02\xd8\x33\x71\xb9\x1d\x18\xcd\x5f\x15\x42\xec\x1f\xb7\x74\x71\x26\x7f\xca\x78\x64\xc2\xa9\x17\xdf\x62\xe3\xcc\x10\x8b\x8d\x71\x66\x48\xbe\x98\x56\x41\x71\x3a\x3d\xff\x81\x10\x42\x2c\xa6\xd5\x50\x9c\x6c\xe7\xcf\x48\x4e\xab\xa2\x38\x2d\xa3\xce\x8f\x4b\x4e\xab\xa3\x78\x33\xf1\x97\x25\xa7\x55\x52\x9c\x96\x8b\xe7\xc7\x84\x10\xe4\x4f\xc7\x27\x8f\x8d\x7c\x98\x3f\x7b\x71\xf3\xd6\x2d\xc5\x3b\xa4\x5b\xdf\x6f\x07\x0e\xe5\x57\xbd\x2b\xc4\xe6\x43\xf9\x33\xef\x08\xb1\xf9\x81\xed\xa7\xc7\x43\x47\x98\xb1\xb9\xf8\x6b\x21\xc4\xd4\xe8\xa2\x96\x89\x81\xc2\x40\xa1\x40\xe9\xe5\x99\xfd\x57\x28\x19\x4a\x7f\xaf\xb4\x8e\x33\xe3\x3b\xf4\x63\xb5\xbc\x42\x5e\xef\x1f\xb7\x16\x6e\x1b\x39\x97\x9f\x6c\x8a\x53\x2c\x55\xd9\xff\xd7\x89\x43\xc7\x97\x90\x71\xa0\x50\x3a\x53\x07\x3b\xfd\x52\xfa\x19\xf9\xcb\xc9\xe2\xd7\x4e\xfe\x47\xd7\xce\xbc\x7d\xc5\x0a\xfc\x51\xe6\xf5\x8e\x35\x5f\xe6\xe5\xdf\x6c\x67\xf6\x8e\x9d\x99\xb5\x04\xa5\x7c\xc8\xbf\xdd\xb2\x7c\xe4\xec\x72\x8d\x62\x5c\x08\xf1\x46\x1d\xc5\x69\xe5\x92\x9d\xfa\x8f\x7f\x54\xf1\x5f\x26\x69\x1e\xed\xf5\x8e\x6e\x30\xf2\x4f\x1b\xac\x61\x1f\xad\xc2\x0f\xd5\x19\x63\xcc\x18\x61\x2d\xc5\x83\xd7\x85\x38\xdd\x7b\x95\x96\xb3\xe7\x69\xfd\x4a\xca\x55\xd2\x72\xe4\xba\x10\x23\xbd\x57\x64\x84\x97\x22\xf6\xc8\x88\x29\x19\xc1\x46\x37\x5c\x19\xdd\x36\x35\xc2\x5a\x46\xfa\x5a\xd8\xc8\xd6\x16\xa3\xd8\x69\xe7\x04\x99\xc9\xd5\xfc\xa9\xe6\x47\x27\x0a\x85\xaa\xf2\x95\x35\xff\xb4\xa1\x35\xfc\xd8\x76\x63\x93\x72\xa3\xae\x92\xf8\x7c\xb8\xe4\x06\x93\xc5\x5f\x19\xf9\x70\x44\x3b\xdd\xcd\x06\xc6\x98\x51\x7c\xed\x9a\x10\xf9\x2b\x68\xd8\x1f\x90\x22\x23\x5f\xd4\x46\x37\x78\xf3\x27\x99\xf2\xa4\xe8\x15\xe4\xe4\xd5\xf3\x8b\xa4\xfd\xca\xa1\xfa\x04\x95\xe0\x6d\x19\xe9\x69\x61\xc5\x9f\x5f\xbb\xc1\x45\x6a\xaf\x6d\xc5\x9d\x34\x6a\x5e\x5f\xb2\x14\x78\x68\xfb\x83\xf9\x49\xef\xc8\xc7\xa3\x4f\xb5\xb4\x16\x1b\xae\x09\x71\xe8\xa7\x7e\x21\xc4\xa1\xfd\x94\xf1\x9d\x13\x27\x3f\xd7\xad\x3b\x3b\x3e\x2b\x75\xf2\xe3\xc8\x4f\xb2\x87\x84\xd5\xd2\x26\xc3\xd1\xdf\x93\x2a\xff\x86\x96\x3f\xe5\xbf\xf7\x72\xee\xa3\xfc\x29\xef\x23\x8f\xf1\x47\xcb\x63\xc2\x5a\x22\xfb\x67\x62\xb4\xad\x65\xc2\x79\x2d\x1d\xb8\x26\xc4\x9e\x89\x97\xda\x80\x1b\xae\x1f\x17\x2e\x5c\xb8\x70\xe1\xc2\x85\x0b\x17\x2e\x5c\xb8\xf8\xaa\xe0\x91\xef\x83\x75\x6c\x4e\xc4\xc2\xd9\x58\x60\x28\x9c\xcd\x06\xc2\x81\x01\x33\x41\xe7\x56\xbc\x2d\x10\x8d\x65\x2d\x33\x15\xb6\xcc\x74\x2a\x90\x33\xa3\x81\x70\x2a\x5a\x15\x37\x68\x46\x03\x56\x3a\x20\x5f\xcd\xce\xae\xc9\x26\x92\x4e\x26\xc3\xa9\xe8\x6c\xf5\xe2\x76\x5b\x6a\x67\x2a\xfd\x44\xaa\x14\x1d\xd8\xb1\x38\xbb\x63\x36\x95\xbf\xd0\xb3\xe2\x1e\xf5\x7e\xfc\x37\x17\x84\x78\x0a\x80\xf7\xa2\x10\x5b\x01\xf4\x5d\x14\x22\x4e\xc7\x4f\x85\x18\x03\xf0\xa7\x4f\x85\x98\x04\x70\xf2\x53\x21\xa0\xd9\xef\xc4\x09\xda\x93\x5b\xa0\x3d\x65\x68\x0b\xbd\x8c\xfd\x50\xb3\xdf\xdb\xd2\x9a\xf1\xe5\x0b\x42\xac\x20\x41\xcf\x4c\x83\xe2\x42\x00\xde\xbf\x20\x44\x9d\x4a\x17\x50\xef\xf6\x5b\x2f\x08\xb1\x83\x22\x7c\xc6\x5a\x9f\xf7\xbb\x0d\x73\x2c\xb6\x0b\xf7\x2d\x58\x71\x57\x67\xcb\xd7\xef\x07\x40\x3e\xfc\xe2\x92\x10\x31\xd2\xf4\xfa\x8c\xfd\x7a\x9f\xcf\x7b\xc0\xd3\xed\xf3\x3f\xcb\xba\x7d\x4d\xf9\xba\x35\xbe\x40\xd2\xd7\xd2\xed\x6b\xed\xf1\xb5\xf5\xf8\x42\x1b\x7c\x81\x75\xbe\xa6\xee\x09\x9f\xbf\xfb\x0d\x9f\xb7\xfb\xb4\xcf\xe8\x7e\xdd\xc7\x6c\xbf\x8e\x03\x78\xf3\x52\xc5\x07\x8a\x7b\x13\xc0\xab\x97\x84\x60\x5f\xc5\x20\x70\xe1\xc2\x85\x0b\x17\x2e\x5c\xb8\x70\xe1\xc2\x85\x8b\xff\x33\x8c\x1d\x66\xc6\xd0\x61\x66\x94\xbe\x51\xf7\xc2\xfe\x06\xbd\x9e\xd6\x9f\xcf\x31\xe3\x16\xd8\xdf\x6c\x2f\x54\xdf\x6a\x2f\xa0\xb5\xdb\x09\x66\x2c\x52\xfc\x5f\xd7\x45\x7a\x72\x0f\x33\x68\x5d\x77\x70\x2f\x33\x68\x3d\xeb\xdd\xcb\x8c\xd9\x6a\xfd\x38\x47\xad\xf5\x6e\x52\xe5\xd1\xda\x1b\xe3\xcc\xd0\x69\xfd\xa9\xbe\xef\x9e\x0b\x60\x3e\x80\x95\x79\x66\xd0\x79\x57\x9e\x19\x8d\x00\x0c\xf5\x0d\x3d\x1d\xaf\x0b\x91\x66\x79\x66\x08\x21\xd2\xe4\xe7\x45\x21\xd2\x53\x7b\xed\xf7\xf1\x5f\x16\x4d\x27\x2a\xe9\xd6\x16\x98\xb1\xbd\xc0\x8c\x81\x02\x33\x1e\x2f\x30\xe3\xd9\x42\xc5\xb6\x6e\xcd\x9a\x6f\x07\x5a\xb7\xf5\xe7\x52\x56\x2e\x70\x6f\xf0\xee\x60\x68\x69\xc7\xf2\x9c\xa4\x1d\xcf\x74\x86\x82\xa1\xae\x3b\xed\x68\x28\x4d\x24\x11\x4e\x0d\x06\x1e\x8f\x65\xb2\x66\x3a\x15\xe8\xe8\x08\x86\x82\xa1\xa5\x9d\xcf\xd8\x49\x64\x82\x60\xc7\x17\xf8\x74\x74\x8f\x5d\xae\x47\xed\x14\x38\x56\xe6\xf6\x97\xec\x6f\x95\xb9\x6c\x41\x4c\x96\xb9\xbd\x7a\xf6\xee\x2d\x71\x7b\x85\x7d\xb0\xcc\xed\x8f\xb1\xa7\xca\x7c\xa6\xe4\xd4\x96\x36\xb7\xab\xdb\x55\xe6\xb3\x24\x5f\x59\xe6\xb3\x6d\x07\x0b\x25\x3e\x47\xd2\x50\x99\x7b\x6d\x73\x99\xd7\x4b\x4e\x63\xc7\xe6\x3e\x3b\xfd\x58\x89\x37\x48\xba\xaf\xcc\xed\x2f\xd0\xc7\xcb\x7c\xae\x5d\x9f\x13\x25\xde\x28\xb9\xbf\xcc\xe7\x55\xf5\xa1\x47\xfd\x37\xe4\x6a\x99\xab\x91\x36\x5e\xe2\x37\x4b\x1a\x28\xf3\xf9\x92\xb7\x96\x79\x73\x55\x3f\x78\x70\x4b\x65\xaf\x86\x1c\xe3\x97\x04\xd5\xf0\xa2\xaa\x9f\x8e\x7a\x59\xa3\xd0\xe1\x0a\xbf\x1d\xc0\x90\x83\x2f\x57\xf9\xdb\xd7\x54\x33\xd6\x3a\xfc\xd7\x30\x0f\x49\x75\xdd\x95\xf4\xc3\x8e\xfa\x6a\x68\xc4\xf3\x35\xe5\xd7\xfa\xf3\x2b\x00\xcf\xbf\x58\xd2\xcf\xad\xf2\x9f\xec\x7f\x70\x94\x07\x34\xca\xff\xb3\x34\x95\xf3\x6f\xc2\xdb\x8e\xf2\xc8\x7e\xd6\xd1\x1f\x74\xb5\xfe\xdb\xd1\x7e\x1a\x6e\x46\xbd\x06\xac\x7a\xce\xbe\xc6\x1b\x51\x8f\x5b\x1d\x0e\x51\xef\xb4\xd7\xf0\x55\x1a\xf0\x41\xc1\xde\xe3\xd0\xa8\xd7\xe3\x80\x56\x69\xff\x00\xe6\x63\x7b\x8d\x3e\xae\x01\xbd\x6a\xbc\x90\xfe\x19\xad\xd2\x3f\x7e\xcc\xc7\x7c\xad\x32\x9e\x1a\x75\x1f\xf6\x3b\xf2\x23\xfb\x11\x47\x7e\x01\x00\x2f\x6a\x40\x8b\xb2\xcf\xd5\xe7\xe3\x77\x5a\xf5\x9e\x8b\xd7\x6a\xca\x7f\x4f\x03\xce\x1c\x61\x46\x4c\xd5\x6f\x02\x40\x5b\x39\xff\x66\xfc\x93\xec\x05\x55\x7f\xbd\x1e\xa3\x9a\x3d\xde\x57\x28\xbd\xae\xdb\xe3\xbb\x94\xff\x2c\xdd\xe9\x7f\x33\x6e\xd2\x81\xd0\x11\x66\x8c\x29\xfd\x02\xbd\xba\xfc\xbb\x1c\x7a\xf2\x77\x99\x0e\xbc\x7c\x98\x19\x4f\x2b\xfd\x59\xad\x72\xfd\x35\xea\x73\x80\x48\xc6\xca\x5a\xb9\x81\x81\x60\x04\xd1\x58\x26\x36\x68\x66\xad\x58\x86\x5b\x49\x1e\x49\xa4\x53\xb1\x2c\x38\x8f\xa6\xf9\x60\x22\xdd\x1f\x4e\xf0\xa8\x95\xce\x64\x79\x38\xb7\x0b\x91\x74\x72\x28\x11\xb3\x62\xd1\xe0\xf2\x65\x9d\x9d\xd3\x8b\xf8\x80\x99\x32\x79\x38\x93\x09\x0f\xf3\x58\xca\xca\x0c\x63\x20\x13\x4e\xc6\x78\x34\x97\x4c\x0e\x83\x73\x07\xe3\x66\xca\xb4\xaa\xa4\xd9\xe1\x6c\x24\x9c\x48\x70\x2b\x46\xfe\x04\x23\xe0\x7c\xed\x96\xee\x0d\xbd\xbc\x77\x63\x0f\xe7\xe0\xd5\x29\xa2\xe0\x3d\x0f\x6f\xec\xde\xb0\x7e\x4d\xb5\x45\xee\x58\x01\xe7\xeb\x36\x6e\xe3\xbd\xf7\xab\x1c\xee\xef\xd9\x02\xbe\xae\x6f\xd3\xea\xee\x3e\xbe\x69\xed\xda\x07\x7b\xb7\xf2\xad\xdd\xab\xfb\x7a\x79\x69\x37\x4c\x24\x9b\x93\xbe\xab\x4d\x32\xab\x56\x55\x76\xc2\xc8\x7f\xc4\x56\x22\x3a\xc0\xf9\xae\x7b\x96\x05\x07\x63\x16\x1f\x8a\x70\x2b\x9e\x4b\xed\x0c\xf6\xef\x52\xfb\x6d\x9c\x09\xa7\xd3\x0d\x81\xc7\xa2\x61\x2b\x4c\xcd\x17\xb6\xc2\x65\x6f\xab\x36\xdb\x70\x1e\xcd\xa6\x79\x3c\x9c\x8a\x26\x62\xb5\xdb\x7a\x6e\xd8\xbd\x53\x5d\x62\xb9\x32\xd4\x22\xe0\xd1\x04\xcf\xc4\x12\xe9\x48\xd8\x8a\x51\x12\xcb\x8c\xf0\x21\x33\x06\x3e\x30\xc4\xe3\x4f\x80\xf3\xfe\x6c\x56\xb9\x20\x37\x02\x85\xad\xb4\x59\x9d\xdf\xd6\x0d\x6b\x54\xf3\xcb\x66\xe0\xaa\x8f\x80\x60\x76\x38\x69\x85\xfb\x11\xcc\x5a\x19\xfb\x18\x2f\x9d\x99\x29\x2b\x96\x19\x42\x30\x95\xb6\x62\xc1\xc1\x54\x2e\xd8\x9f\x33\x13\xd1\xa5\x66\x54\x45\x75\xaf\x5e\xbf\xd4\x0a\x0f\x42\xda\xe2\xe1\x6c\x1c\xc1\xe8\x70\x2a\x3b\x9c\xb4\x8f\x56\xc6\xb6\xa8\xe7\x60\x15\xe1\x19\x04\x33\xb1\x04\xe9\xec\x93\xa1\x84\x45\x05\x9a\x16\x82\x56\x6c\x97\x85\xa0\xec\xc4\x60\x26\x2d\x1b\x39\x18\x8b\xab\x21\x17\x8f\x66\x2a\xcc\x4e\x61\x8f\x17\x3b\x45\xe9\x3c\x3a\x9c\x0a\x27\xcd\x08\x82\x83\x69\x4b\xfe\xd8\x05\xd8\x99\xf5\x67\xb3\x08\x46\xd2\xc9\x64\x2c\x65\xe1\x4b\x60\xa1\x9a\x1b\xe9\xea\x39\x7d\x54\x83\x7a\x0a\xd9\x28\xdd\x4e\xee\x50\xfb\xca\x74\xf5\xfc\x3e\x46\xf7\xa1\xaa\x7b\xb3\x8d\x65\x0e\x1d\x3d\xd7\xdf\xd2\xec\xfb\x56\xad\xae\x07\xc0\x67\x42\xa4\x75\xf5\xbc\x9f\x54\xba\x3a\x87\x8e\xc2\x46\x35\xcf\xd2\xd5\x3c\xc0\xab\x03\xbb\xd5\xbb\x05\x4d\x69\xe8\x29\xbb\xdd\xb1\x37\x8e\xe6\x07\x07\x75\x7b\x8e\x56\x5b\x8f\xc7\x00\x08\x55\x2e\xcd\x1b\xa6\x74\x3b\x7d\xa9\x5c\x5d\x85\x9d\x6a\x5e\xa6\xab\xf9\x04\xf3\xd8\xef\x1a\x9c\xe5\x12\x9e\x04\xe4\xac\x42\x57\xf3\x8c\x2e\x8f\x3d\xa7\x73\xd6\x83\x78\x5e\xe9\x56\xab\xf9\xc7\x4a\x8f\x3d\x47\x24\xdd\xcd\x0e\xdd\x41\x95\xbf\x9c\xd9\xd0\x7d\xd1\x3f\x7d\x3b\x1f\x70\xe8\x68\xbe\x12\xf2\x03\x3b\x1c\x3a\xbf\xd2\x1e\x71\xe8\xe8\xbe\x5e\xf0\x03\xaf\xea\xd5\x3a\xc2\xf3\x0e\x1d\x3d\x8f\xfa\xe6\xa1\x6a\xf6\x50\x2a\xf7\x67\x8e\xf1\x22\xe7\x3d\x01\x60\xef\x34\xba\x5f\x3a\x74\x72\x5f\x65\xc0\xde\x53\x59\xab\x3b\xee\xd0\xd1\x3c\x69\x3c\x00\xbc\x3f\x8d\xee\xcf\x80\x9c\x9b\x78\xd4\xf3\xdd\xdb\x5e\xb1\x39\xc7\xcb\xdf\x00\x39\x0b\xf3\xa8\x79\x82\xff\x0b\x74\x7f\x57\x75\xf5\xa8\xf9\x43\x53\x7b\x65\xcf\xa8\xb3\xdf\xfe\xa1\xfc\xf3\xa8\x79\xd8\xd5\x2f\xc8\xef\xac\x43\x27\xe7\x17\xa1\x1b\xc7\x3d\x85\x4f\x1c\x3a\x7a\xce\x07\x42\x80\x31\x4d\x7d\x2f\xab\xf2\x3d\x6a\xbe\xd5\x1a\xaa\x2e\xb7\x34\x9e\xaf\xa8\xf3\x90\xe2\xa4\xdb\x5e\xa3\xd3\x9c\x7d\xa6\xb0\x3b\x04\xac\x62\xf6\xf5\xff\x4d\xc7\x75\x34\xab\x54\x07\x85\xf1\x2e\xa0\x47\xbf\xb1\xdc\xb9\x35\x3a\xb6\x1c\x70\x6c\x3b\x2e\xeb\xfe\x1b\x00\x00\xff\xff\x50\x37\xc1\xf9\x90\x3c\x00\x00")

func bindataSyscalltesterBytes() ([]byte, error) {
	return bindataRead(
		_bindataSyscalltester,
		"/syscall_tester",
	)
}

func bindataSyscalltester() (*asset, error) {
	bytes, err := bindataSyscalltesterBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/syscall_tester",
		size:        15504,
		md5checksum: "",
		mode:        os.FileMode(509),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/syscall_tester": bindataSyscalltester,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"syscall_tester": {Func: bindataSyscalltester, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
