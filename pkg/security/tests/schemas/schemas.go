// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/security/tests/schemas/chmod.schema.json
// pkg/security/tests/schemas/container.json
// pkg/security/tests/schemas/container_context.json
// pkg/security/tests/schemas/container_event.json
// pkg/security/tests/schemas/container_path.json
// pkg/security/tests/schemas/datetime.json
// pkg/security/tests/schemas/event.json
// pkg/security/tests/schemas/exec.schema.json
// pkg/security/tests/schemas/file.json
// pkg/security/tests/schemas/host_event.json
// pkg/security/tests/schemas/open.schema.json
// pkg/security/tests/schemas/process.json
// pkg/security/tests/schemas/process_context.json
// pkg/security/tests/schemas/rename.schema.json
// pkg/security/tests/schemas/usr.json
// +build functionaltests

package schemas

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataChmodSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\xd2\x97\xe8\x01\xaa\xa8\xa2\xf6\xb8\x10\x39\x40\x61\x5a\x29\x8a\xb8\x7b\x85\x1d\x27\x41\x86\x84\x45\x77\x61\x85\xff\x9f\xc1\x8f\x0f\xe2\x54\x11\x42\x08\x7d\x71\xad\x80\x03\xa7\x0d\xa1\x02\xd1\xb8\x86\xb1\xbd\xd3\x6a\x3d\xc9\x1b\x6d\xbf\x58\x67\x79\x8f\xac\xde\xd6\xdb\xf5\x6b\xcd\xce\xf5\xab\x73\xbb\xec\x42\x6b\x2b\x0e\xba\xdb\x84\xc6\xd9\xc0\xa3\x81\xe0\xe8\xcf\x3d\xb4\x38\xab\x5c\x1d\xdf\x7a\xda\x90\xf7\xf1\x33\x8c\xd3\x65\x36\xad\x67\x21\xf8\xb4\x97\x03\x34\x8c\xb1\x56\x2b\xe4\x52\x81\xfd\x80\x5f\x50\x38\xfd\xe2\xd2\xe2\x57\xa5\xeb\x08\xed\x30\xbd\xc4\x38\xdb\xcd\x7c\xc3\x70\x9f\x4f\x06\x37\xd6\x46\xdd\x58\x6d\xc0\xa2\x04\x97\xf4\xc7\x9a\xc0\x92\x75\xf3\xa1\x25\x2b\x2d\x7c\xff\x48\x0b\x5d\xc4\x9a\xac\xbc\x26\x68\x38\x0a\x9a\x2d\xde\x25\x1d\xbf\x50\x63\xc5\xc7\x8c\x14\x05\xa8\x74\x42\x0f\x89\xaf\xa4\x4b\xc8\x18\xce\x17\x5c\x80\xdc\x41\xfd\x27\x46\xf1\xde\x9f\xf6\x76\x14\x1c\xd4\x83\x6c\xee\xe7\x52\x96\x49\x59\x1e\xb4\x03\x87\x52\x71\x94\xb7\xef\xc3\xed\x58\x86\x90\xdd\xee\xf4\xaa\x54\xbe\xfa\x0b\x00\x00\xff\xff\x44\x3a\x48\xdd\x67\x05\x00\x00")

func bindataChmodSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataChmodSchemaJson,
		"/chmod.schema.json",
	)
}

func bindataChmodSchemaJson() (*asset, error) {
	bytes, err := bindataChmodSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/chmod.schema.json",
		size:        1383,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\xae\xc2\x20\x10\x45\xf7\xfd\x8a\x09\x79\xcb\xd7\x52\x59\xf2\x2b\xc6\x05\xd2\xb1\xa5\x89\x80\xc3\xb8\x30\x86\x7f\x37\x50\xaa\xe9\x8e\x7b\x2f\xe7\x64\xde\x1d\x00\x80\xf8\x4b\x76\xc1\xbb\x11\x1a\xc4\xc2\x1c\x93\x96\x72\x4d\xc1\xf7\x5b\x3d\x04\x9a\xe5\x44\xe6\xc6\x52\x8d\x6a\xec\x4f\x4a\xb6\xff\xff\x0d\x77\x53\x41\x6d\xf0\x6c\x9c\x47\x1a\x0a\xbc\x8f\xfc\x8a\x58\xd6\x70\x5d\xd1\xf2\xde\x46\x0a\x11\x89\x1d\x26\xa1\x61\xbb\xa2\xf6\xd5\xf4\xcb\x07\x43\x62\x72\x7e\x16\xdf\x31\xd7\x57\x6e\x46\xc2\xc7\xd3\x11\x16\xfe\x7c\xf0\xd5\x70\xe9\xf2\x27\x00\x00\xff\xff\x12\xe6\xde\xdb\xec\x00\x00\x00")

func bindataContainerJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerJson,
		"/container.json",
	)
}

func bindataContainerJson() (*asset, error) {
	bytes, err := bindataContainerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container.json",
		size:        236,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainercontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x0a\x82\x40\x10\x45\xdf\xfd\x8a\x61\xe9\x31\x1d\xf3\x71\x7f\x25\x22\x4c\xc7\x5c\x29\x77\x9b\x9d\xa0\x08\xff\x3d\xc6\x55\x21\xe8\x6d\x38\x9c\xb9\xf7\x7e\x32\x00\x00\xb3\x8b\x4d\x4f\xf7\xda\x58\x30\xbd\x48\x88\x16\x71\x88\x7e\xcc\x13\x2e\x3c\x5f\xb1\xe5\xba\x13\xac\xca\xaa\xcc\x0f\x15\x2e\xfe\x7e\x79\x77\xad\xbe\x36\x7e\x94\xda\x8d\xc4\x67\xbd\xe8\x25\x85\x86\xac\x92\xbc\x03\xa9\xe5\x2f\x03\x35\xb2\xd2\xc0\x3e\x10\x8b\xa3\x68\x2c\xa4\x35\x33\xdf\xb2\x7e\x70\x6a\x63\xea\x34\xa8\x73\x37\xb2\x88\xb8\xa9\xa9\x6e\x93\xa7\xf9\x9a\x96\x22\xa6\xc7\xd3\x31\xe9\xd0\xe3\xbf\x9a\x99\x9d\xb2\xe9\x1b\x00\x00\xff\xff\xb9\xfa\x42\x76\x12\x01\x00\x00")

func bindataContainercontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainercontextJson,
		"/container_context.json",
	)
}

func bindataContainercontextJson() (*asset, error) {
	bytes, err := bindataContainercontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_context.json",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainereventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x52\x29\x4e\xce\x48\xcd\x4d\x54\xb2\x52\x50\xca\x28\x29\x29\x28\xb6\xd2\xd7\xcf\x2a\xce\xcf\xd3\x85\x08\xeb\xe5\x17\xa5\xeb\xa7\x14\x25\xa6\x95\xe8\x1b\x19\x18\x19\xe8\x1a\x1a\xe9\x43\xd5\xeb\x40\xb5\x67\xa6\x80\xb4\x26\xe7\xe7\x95\x24\x66\xe6\xa5\x16\xc5\xa7\x96\xa5\xe6\x95\xe8\x81\x8c\x80\x29\x49\xcc\xc9\xf1\x4f\x53\xb2\x52\x88\x06\x73\x41\xa0\x1a\xce\x82\x98\x51\x94\x0a\x92\x57\x4a\xcb\xcc\x49\xb5\xd2\xd7\xd7\xcf\xc8\x2f\x2e\x41\x36\x07\xae\xba\x56\x87\x58\x23\x10\xee\x01\xb1\x52\x2b\x30\x4c\x02\xb3\x62\xb9\x6a\x01\x01\x00\x00\xff\xff\xef\xab\x6c\xf9\x06\x01\x00\x00")

func bindataContainereventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainereventJson,
		"/container_event.json",
	)
}

func bindataContainereventJson() (*asset, error) {
	bytes, err := bindataContainereventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_event.json",
		size:        262,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainerpathJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x41\xae\xc2\x30\x0c\x05\xf7\x3d\x85\x15\xfd\x55\xf5\x1b\x97\x2c\x7b\x19\x64\x25\xa6\x09\x08\x27\x72\xbc\x41\x88\xbb\xa3\x88\x76\x3b\x6f\xe6\xbd\x27\x00\x00\xf7\xd7\x63\xe6\x27\xb9\x0d\x5c\x36\x6b\x7d\x43\xbc\xf7\x2a\xcb\x0f\xfb\xaa\x3b\x26\xa5\x9b\x61\x58\xc3\xba\x5c\x02\x1e\xfe\xff\x91\x97\x34\xd2\x58\xc5\xa8\x08\xeb\xb5\x91\x65\x3f\x1e\x4e\xc3\x5e\x8d\x87\xd2\x4d\x8b\xec\x27\x6d\x64\xc6\x2a\x63\xf0\x73\xaa\xf1\xc1\xea\x67\x37\x7d\xbe\x01\x00\x00\xff\xff\x66\xad\xfc\xe4\x96\x00\x00\x00")

func bindataContainerpathJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerpathJson,
		"/container_path.json",
	)
}

func bindataContainerpathJson() (*asset, error) {
	bytes, err := bindataContainerpathJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_path.json",
		size:        150,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDatetimeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\xca\x83\x30\x10\x86\xf7\x9e\x22\x0c\xdf\xd2\x98\x31\x7c\x9b\xe6\x12\x3d\x80\x58\x08\x35\xfe\x14\x8d\x92\xcc\xa6\x48\xee\x5e\xa2\xd6\x62\x4b\x69\xc8\xe2\xcd\xcc\xf3\x90\x77\x4e\x18\x63\x0c\xfe\xfc\xb5\x35\x83\x06\xc5\xa0\x25\x9a\xbc\x12\xe2\xe6\x47\xcb\xd7\x71\x36\xba\x46\x54\x4e\xd7\x24\x24\x4a\xe4\xb9\x14\x1b\x9f\x6e\x7a\x57\x45\xb5\xd2\x64\xa8\x1b\x4c\x16\xdd\xe7\x4e\xf7\xfd\xb9\x06\xc5\x8a\xe5\x19\xcf\xbc\xa7\x05\xa0\xfb\x64\xa2\xed\xc9\x75\xb6\xd9\xb4\x7d\x3b\x69\x22\xe3\x6c\x04\x2e\x05\xf2\x53\x39\xff\x07\xbe\x06\xf9\x0a\xb0\x4b\x21\xfd\xf6\x8f\x1d\x09\xd4\xdb\xf0\x77\x81\x8f\x12\x88\x98\xf3\xe5\xc2\x01\x0c\xc9\x31\x95\x49\x78\x04\x00\x00\xff\xff\x99\x6a\xef\xa9\x5d\x01\x00\x00")

func bindataDatetimeJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatetimeJson,
		"/datetime.json",
	)
}

func bindataDatetimeJson() (*asset, error) {
	bytes, err := bindataDatetimeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/datetime.json",
		size:        349,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcb\x6e\xc2\x30\x10\xbc\xfb\x2b\xac\x15\x47\x60\x69\x8e\xf9\x95\xaa\x07\x37\xd9\x04\xa3\xc6\x76\xd7\x0b\x12\xaa\xf8\xf7\xca\x38\x20\xb9\x79\x5c\xca\x75\x66\x67\x76\xc6\xde\x1f\xa5\xb5\xd6\xb0\x89\xcd\x91\x06\x03\xb5\x86\xa3\x48\x88\x35\xe2\x29\x7a\xb7\xcb\xf0\xde\x73\x8f\x2d\x9b\x4e\xb0\x3a\x54\x87\xdd\x5b\x85\xe3\xfc\x76\x94\xdb\x36\x49\xe9\x42\x4e\xf6\x49\xf8\x20\xe4\x1a\x28\x31\xfe\xf3\x44\x8d\x3c\xd0\xc0\x3e\x10\x8b\xa5\x08\xb5\xce\x09\xee\x38\x5d\xa4\x00\x96\x2d\x9e\xec\x82\xd5\x93\x77\x66\xa0\x59\xa6\xf0\x8e\xc2\xd6\xf5\x30\x19\xba\x6d\xa7\x8e\x8d\x11\xea\x3d\x5f\x5f\xeb\xea\xcf\xd2\xf8\x7f\x45\x55\x2b\x2b\x80\xe9\xfb\x6c\x99\xd2\x2f\xbd\x2f\x3c\xd2\x5a\xd5\x95\xc0\x05\xf3\xa1\x66\x02\x40\x6b\x64\x5a\x0c\x36\x4c\x5d\x2a\xd4\xd9\x2f\xaa\x11\x31\x4d\x89\x1d\x28\xdf\x8f\x2a\x7b\x8d\x76\xf3\x3d\xee\x77\xf3\x77\x9f\xca\x79\x6e\xbf\x01\x00\x00\xff\xff\x77\xb8\x98\xe7\xe1\x02\x00\x00")

func bindataEventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataEventJson,
		"/event.json",
	)
}

func bindataEventJson() (*asset, error) {
	bytes, err := bindataEventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/event.json",
		size:        737,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataExecSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x93\x41\x4e\xc3\x30\x10\x45\xf7\x39\x85\x65\xb1\x6c\xeb\x92\x65\x2e\xc1\x01\x50\x85\x4c\x32\xc1\xae\x82\x6d\xc6\x03\xa2\xaa\x7c\x77\xe4\xa4\x69\x65\x62\x43\x16\xec\xc8\xca\xf9\xff\xcf\xe4\x65\x32\x39\x57\x8c\x31\xc6\xef\x7c\xab\xe0\x55\xf2\x86\x71\x45\xe4\x7c\x23\xc4\xd1\x5b\xb3\x9d\xe4\x9d\xc5\x17\xd1\xa1\xec\x49\xd4\xfb\x7a\xbf\xbd\xaf\xc5\x25\xbf\xb9\x94\xeb\x2e\x96\xc2\x27\xb4\xbb\x58\x37\xeb\x74\x72\x10\x0d\xfb\x7c\x84\x96\x66\x55\x9a\xd3\x43\xcf\x1b\xf6\x38\xde\xc6\xeb\x7c\x3d\x4d\xed\x10\xa2\xcf\x7b\x3d\x40\x23\x84\x68\xad\x21\xa9\x0d\xe0\x13\x7c\x80\xa1\xe9\x11\xd7\x92\xb0\x59\xdb\x47\x59\x4f\xf9\x16\xe3\xe9\x30\xf3\x0d\xc3\xcf\x7c\x3a\xba\xa9\x36\xea\x0e\xad\x03\x24\x0d\x3e\xeb\x8f\x99\xc8\x52\x74\xcb\x43\xcb\x26\x11\xde\xde\x35\x42\x97\xb0\x66\x93\xb7\x09\x3a\x49\x8a\x17\xc3\x87\xac\x13\x16\x6a\xaa\x84\x94\x91\x93\x02\x93\x9f\xd0\xaf\xc4\x37\xd2\x25\x64\x0a\x17\x56\x2c\x40\xe9\x43\xfd\x25\xc6\xea\x77\xff\xb7\xdb\xf1\xfd\x37\xab\x42\xf5\x15\x00\x00\xff\xff\x29\x04\xcc\xb4\x77\x04\x00\x00")

func bindataExecSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataExecSchemaJson,
		"/exec.schema.json",
	)
}

func bindataExecSchemaJson() (*asset, error) {
	bytes, err := bindataExecSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/exec.schema.json",
		size:        1143,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFileJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8e\xf2\x30\x0c\xdd\x73\x8a\xaa\x62\x09\x84\x8f\x65\xaf\xf2\x69\x84\x32\xad\x9b\x1a\xd1\xa4\xe3\xb8\x0b\x34\xe2\xee\xa3\x50\x28\x2a\x6d\xd2\x8c\xa6\x6c\xfd\xf3\xec\xf7\xe2\xd8\xdf\xab\x24\x49\x92\x74\x6d\xf3\x0a\x6a\x99\x66\x49\x5a\x31\x37\x36\x13\xe2\x64\x8d\xde\x76\xe6\x9d\x21\x25\x0a\x92\x25\x8b\xc3\xfe\xb0\xdf\xfe\x3b\x88\x7b\xfc\xe6\x9e\x8e\x85\x4b\x2d\xf1\x0c\x3b\x97\xf7\xb0\xf3\xa5\x01\xe7\x30\x9f\x27\xc8\xf9\x61\x6d\xc8\x34\x40\x8c\x60\xd3\x2c\xe9\x1a\xb8\xd9\x5d\xfa\xc0\xe2\xc7\xe8\xbd\x1e\xac\xa7\x5f\x72\x35\xe9\x19\x60\x5b\x26\xd4\x2a\x1d\x05\x5d\x37\x63\x44\x2d\xeb\x71\x97\x7f\x42\xcc\x8d\x66\x89\x1a\xe8\x18\xee\x76\x4d\x50\x3e\x64\xce\x84\x10\xc3\xbc\x4e\xf8\xa8\x82\xa8\x4d\x11\xc1\x01\x35\x83\x02\x8a\xc3\xac\xdf\x01\xd9\x6a\x3e\xde\x46\x6b\x49\x58\x27\x9f\xbd\x58\x86\x7a\xd9\x67\x6c\x2d\xd0\xb2\x88\x8a\x4c\xdb\x2c\x0b\x59\x9b\x02\x4b\xcc\x25\xa3\xd1\x47\xc6\xd0\x28\xbf\x8e\x5b\x21\x19\x5c\xc6\x2f\x06\x2d\xaf\xa4\x56\xf0\xfe\x3a\x05\x58\x46\x7d\x23\x35\x2f\xd7\xe4\x22\xe9\xa3\x66\x16\x4a\x1f\x17\x9c\xf7\x51\x4d\xef\x80\x06\x58\xf5\x20\x6d\xe0\x0b\x2c\x5b\x49\x2d\x5b\x69\xd2\xe3\xa9\x9f\x12\x7c\xb5\x48\xe0\x1a\xf8\x1f\xd6\x62\x86\xc0\xa4\xf7\x23\x6e\x35\x9c\xa5\xf2\xbf\x7b\xcf\x5c\x12\xc9\x8b\x6f\x80\x90\xa1\xb6\x41\x12\x91\xfa\xfa\xbe\x75\x4f\x20\x96\xe8\xc0\xf2\x42\x3b\x2c\x7b\x77\x3e\x7d\x47\xd0\x7b\x59\x7c\xe7\x21\xb4\xe3\xc3\x8b\x3a\x6a\x93\xcd\x2c\xa0\x81\xf7\x29\x53\x27\xcf\x75\x75\x5d\xfd\x04\x00\x00\xff\xff\x40\x82\xe8\xe1\x0c\x09\x00\x00")

func bindataFileJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFileJson,
		"/file.json",
	)
}

func bindataFileJson() (*asset, error) {
	bytes, err := bindataFileJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/file.json",
		size:        2316,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataHosteventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\xca\x83\x30\x10\x85\xf7\x9e\x22\x0c\xff\x52\x1d\x7f\x97\xb9\x44\x0f\x50\x8a\x04\x1d\xab\x45\x8d\x64\xa6\xa5\x20\xde\xbd\x44\xad\xb4\xd2\x85\x98\x4d\x26\xf3\xde\xf7\xc2\x1b\x02\xa5\x94\x82\x3f\xce\x2b\x6a\x0d\x68\x05\x95\x48\xcf\x1a\xf1\xc6\xb6\x8b\xe6\x75\x6c\xdd\x15\x0b\x67\x4a\xc1\x34\x49\x93\xe8\x3f\xc5\xc5\x1f\x2e\x78\x5d\x4c\xa8\x65\xc9\xe8\x41\x9d\xc4\x9e\x7e\xab\xa6\x69\x4e\x25\x68\x75\x9e\x9e\xfe\x0c\xeb\x34\xe3\x8e\xbc\x0e\x65\xdd\x90\x46\xc4\x8f\x88\xd5\x38\x86\x7b\x69\x7f\x1f\x86\xef\xec\x0e\xb3\xbd\xb3\x39\x31\x67\xb9\xed\x84\x9e\xfb\x0b\x14\x46\x08\xf4\x66\xfb\xf3\x07\xef\x94\xba\xdd\xd6\x9b\xe2\x83\xef\xe9\x12\x8c\xaf\x00\x00\x00\xff\xff\xd2\xc0\x49\xeb\xdc\x01\x00\x00")

func bindataHosteventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataHosteventJson,
		"/host_event.json",
	)
}

func bindataHosteventJson() (*asset, error) {
	bytes, err := bindataHosteventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/host_event.json",
		size:        476,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataOpenSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x41\x6e\xc3\x20\x10\xbc\xe7\x15\x08\xf5\x98\x84\xd4\x47\x7f\xa2\x0f\xa8\xa2\x8a\xda\xeb\x40\xe4\x02\x85\x6d\xd5\x28\xe2\xef\x15\x76\x9c\x04\x19\x12\xa4\xf6\x52\x95\x13\x9e\x99\x5d\xcf\x0e\x88\xe3\x82\x10\x42\xe8\x83\x6b\x04\xbc\x71\x5a\x13\x2a\x10\x8d\xab\x19\xdb\x3b\xad\x56\x23\xbc\xd6\x76\xc7\x5a\xcb\x3b\x64\xd5\xa6\xda\xac\x1e\x2b\x76\xd2\x2f\x4f\xe5\xb2\x0d\xa5\xf0\x05\xcd\x3a\xd4\x4d\x38\x1e\x0c\x04\x42\xbf\xee\xa1\xc1\x09\xe5\xea\xf0\xd4\xd1\x9a\x3c\x0f\x9f\x61\x1d\xcf\xbb\xb1\x9d\x85\xc0\xd3\x4e\xf6\x50\x33\xc6\x1a\xad\x90\x4b\x05\xf6\x05\x3e\x41\xe1\xf8\x8b\x73\x89\x5f\x96\xf6\x11\xda\x61\xba\xc5\xb0\xdb\x4e\xfe\xfa\xfe\xb6\x3f\x19\xd8\x18\x1b\x70\x63\xb5\x01\x8b\x12\x5c\x92\x1f\x34\xc1\x4b\x96\xcd\x87\x96\x54\x5a\x78\xff\x90\x16\xda\xc8\x6b\x52\x79\x49\xd0\x70\x14\x34\x2b\xde\x26\x19\x3f\x43\x63\xc4\xc7\x1e\x29\x0a\x50\xe9\x84\xee\x3a\xbe\x38\x9d\x9b\x8c\xcd\xf9\x82\x0b\x90\x3b\xa8\xdf\xb4\x51\x3c\xfb\xbf\xbd\x1d\x05\x07\x75\x27\x9b\xdb\xb9\x94\x65\x52\x96\x07\x6d\xc1\xa1\x54\x1c\xe5\xf5\xfb\x70\xbd\xe6\x21\xfc\xe5\x71\xbb\x9e\xef\xdc\x8f\x07\x1d\x9f\xcf\x85\xff\x0e\x00\x00\xff\xff\xb6\xa8\x93\x09\x4e\x06\x00\x00")

func bindataOpenSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataOpenSchemaJson,
		"/open.schema.json",
	)
}

func bindataOpenSchemaJson() (*asset, error) {
	bytes, err := bindataOpenSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/open.schema.json",
		size:        1614,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcessJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x6e\xe2\x30\x10\xbe\xf3\x14\x51\xd4\x23\x6d\x5a\x8e\xbc\xc1\x9e\xf6\x01\x10\x42\xae\x33\x06\x77\xf1\x4f\xed\xc9\x6a\x51\xc5\xbb\xaf\x12\x68\x20\xb1\x9d\x5f\xa3\xdd\x6b\xec\xf9\xe6\xf7\x1b\x4f\xe6\x6b\x91\x24\x49\x92\x3e\x59\x7a\x00\x41\xd2\x75\x92\x1e\x10\xb5\x5d\x67\xd9\x87\x55\xf2\xf9\xf2\xf9\x45\x99\x7d\x96\x1b\xc2\x30\x5b\xbd\xae\x5e\x9f\xdf\x56\xd9\xf5\xfe\xf2\x2a\xce\xf3\x52\x54\x1b\x45\xc1\xda\x97\x52\xf4\xfb\x08\x4f\x1a\xca\x33\xf5\xfe\x01\x14\xbf\xbf\x6a\xa3\x34\x18\xe4\x60\xd3\x75\x72\xb1\xe1\x72\xbb\x02\xba\x7d\x68\x40\x70\x89\xb0\x07\x93\xd6\xa7\xe7\xe5\x4d\xb2\x98\x2c\xb9\x9f\xae\xd3\x82\x09\x8b\x5a\x34\x5c\xee\x03\x3a\x8d\x2a\xf4\x34\x51\xf8\x03\xb4\x40\xf2\x7e\x84\x1d\x55\x12\x09\x97\x60\x76\x9a\xe0\xc1\x85\x7b\x32\xc0\x4a\x38\xc6\x8f\xb0\xce\xb2\xac\x79\xff\x92\xa6\x3e\x1d\x7e\xe4\x21\x86\x52\x25\xc4\x6c\x17\xb9\x54\x39\x4c\x4c\xcf\x1d\x8c\x50\x85\xc4\xdd\xe4\x44\x23\x9e\xa6\x79\xc2\x94\xf9\xb5\x43\x2e\x3c\x2e\xb4\x93\x93\x13\x84\xf2\x66\x4f\x5a\xe2\xa1\x51\x03\x39\x48\xe4\xe4\x68\xc3\xce\x35\x68\x5b\x9f\x06\xe8\x5b\x9f\xfb\xc8\xd8\x1f\x71\x8f\x91\x37\x44\x1f\xd5\x1c\xc8\x76\x2a\xba\x10\x7d\xb4\x9f\x67\xa3\x9f\xd4\xb3\x8c\x84\xf8\x91\x84\xf8\xa1\x84\xf8\xb1\x84\x07\x04\x93\xd9\xf8\xd1\x64\x36\x7e\x38\x99\x8d\x1f\x4f\x66\x1f\x10\x50\x4a\xf4\x0e\x18\x03\x8a\xfc\xb7\xdb\x93\x1c\x68\x62\x0c\x39\xa5\x2e\x4e\x75\x89\x23\x08\x7f\x37\x19\x6c\x62\xc0\xcc\x4a\xb6\x90\xfc\xb3\x80\x1f\x57\x25\x68\x0a\x18\xec\xa1\x06\x23\x38\x22\x0c\x48\xc9\xff\xee\xe1\xa2\x03\x28\x35\xf0\x59\x70\x53\xb9\xb9\xf1\xb7\xf4\x40\x17\x0d\xf5\xad\x50\xa7\x08\x52\x33\xc8\x85\xde\xda\xeb\x4d\x5d\xe3\x7c\xdb\x33\x2e\xc4\x7e\x0e\xbd\x33\x94\x83\x3d\x86\x79\x92\x78\x86\x80\x59\x88\x3d\xb3\x64\x7d\x6f\xd4\x4c\xd9\xa5\xd0\x3f\xd9\x39\x3e\x8c\xea\x72\xe2\x11\x90\x81\xc9\x71\x1e\x6c\x19\x3e\x7b\xb2\x08\xee\x88\xec\x00\x8f\x49\x63\xfc\x17\x2e\xfe\x5b\x24\x54\xce\x19\xa7\x04\xb9\x92\xfe\x71\xd6\xc1\x1f\x55\xc9\x07\x22\xf7\x30\x17\x78\x46\xab\xac\x08\x14\x22\x6d\x90\x09\xa1\x72\xee\xaa\xc9\xee\xc2\x0a\x94\xc7\xf0\x2e\xee\x26\xaa\x27\xdc\x03\xba\x6c\xdd\x2f\x46\xfc\xae\xb6\x7f\x62\x16\x77\xa0\xa9\x92\xf0\x93\x35\x12\xf1\x35\xb2\x3b\x8f\x29\xf0\xc0\xe3\x0b\xb2\x28\x89\xbc\x79\xdb\xce\xa8\xa4\xca\x12\x6f\xd4\xfe\x81\x47\x82\x4b\x2e\x2a\xa7\x56\x83\x58\xa7\x47\x29\x9d\x1b\xa5\xe5\x55\xe1\xb6\x55\x14\xdb\x6b\x51\x78\x09\x5a\x6d\x97\x5a\x2b\xa3\xd6\x1e\xa8\x63\x07\xd2\xde\x6c\x74\xed\x2b\x7a\x96\x10\x81\x9f\x70\xff\x2c\xe2\xdd\x26\x78\x97\x02\x8d\x08\xe4\xa0\x41\xe6\x20\xa9\xb3\x63\xeb\x5a\x20\x6d\xee\xf8\xb9\x0d\xb0\x76\xd3\x81\x70\xc9\xc7\x79\x71\x5e\xfc\x0d\x00\x00\xff\xff\xfe\xdf\x01\x39\x59\x14\x00\x00")

func bindataProcessJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcessJson,
		"/process.json",
	)
}

func bindataProcessJson() (*asset, error) {
	bytes, err := bindataProcessJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process.json",
		size:        5209,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcesscontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\x92\x4b\xf4\x00\x55\x55\x51\x3c\x6e\x88\x1c\xa0\xc3\x54\x6a\x14\xe5\xee\x15\x06\x5b\x8d\x8c\x9d\x34\xf1\xf2\xf3\xff\xd7\x1b\x18\x9f\x2a\xc6\x18\xe3\x4f\x41\xef\xe0\xa0\xb8\x64\x7c\x47\xe4\x83\x14\x62\x1f\x9c\x5d\x27\x79\xe3\xf0\x53\x34\xa8\x5a\x12\xf5\xb6\xde\xae\x9f\x6b\x91\xfd\xab\x1c\x37\x4d\x8c\x7a\x74\x1a\x42\x78\xd7\xce\x12\xfc\xd0\x26\x56\x0c\x16\x3a\x7a\x88\x1e\xf7\xb1\x07\x4d\x83\xea\xd1\x79\x40\x32\x10\xb8\x64\x89\x65\xd0\x63\xd3\x85\xd8\x1f\xa8\xae\x7b\x69\xb9\x64\xaf\x17\x72\xfc\x4e\x13\x25\xa1\x21\x44\x3f\x6f\x4d\x07\x52\x08\x91\x9b\x13\xdb\x24\x72\x5e\xdd\xda\x3b\x43\x3e\xf5\x29\x04\x4b\x8b\x9e\x3b\x38\x17\x78\xc7\x46\x65\x35\x04\x72\xb8\x0c\xc8\xfe\x3e\x8e\x42\x54\x47\x3e\xdf\xd9\x9b\x0d\xc1\xe1\x7a\xe7\x03\x43\xf5\x83\xdd\x35\x72\x5c\x3c\x65\x2c\xe0\xff\xef\x7b\x8c\x5e\xbb\xf1\xe2\xc9\x0c\x14\x47\xf8\xfa\x36\x08\x4d\x71\x63\x47\x57\xde\x91\x9b\xde\xb2\xe8\x79\x9b\x2e\x72\x55\x3e\x4f\x7a\xc6\x2d\xe3\x8d\x3f\x5f\x95\xa2\xe7\xdf\x00\x00\x00\xff\xff\x69\x16\x74\x58\x24\x04\x00\x00")

func bindataProcesscontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcesscontextJson,
		"/process_context.json",
	)
}

func bindataProcesscontextJson() (*asset, error) {
	bytes, err := bindataProcesscontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process_context.json",
		size:        1060,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataRenameSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xd1\x6e\x83\x20\x14\x7d\xf7\x2b\x08\xd9\x63\x5b\x3a\x1f\xfd\x89\x7d\xc0\x62\x16\xa6\xd7\x49\xa3\xe0\xe0\x6e\x49\xd3\xf0\xef\x0b\x5a\x6d\x89\x60\x59\xb2\xb7\xf9\x84\xe7\x9c\x7b\x39\x9c\x4b\xb8\x64\x84\x10\x42\x9f\x4c\xd5\x42\xcf\x69\x41\x68\x8b\x38\x98\x82\xb1\x93\x51\x72\x3f\xc1\x07\xa5\x3f\x58\xad\x79\x83\x2c\x3f\xe6\xc7\xfd\x73\xce\xae\xfa\xdd\xb5\x5c\xd4\xae\x54\x83\xe4\x3d\x1c\x5c\xe5\xcc\xe0\x79\x00\x47\xa9\xf7\x13\x54\x38\xa3\x5c\x9e\x5f\x1a\x5a\x90\xd7\xf1\xd7\x7d\x97\x65\x35\x35\xd4\xe0\x78\xda\x88\x0e\x0a\xc6\x58\xa5\x24\x72\x21\x41\xbf\xc1\x37\x48\x9c\xb6\x58\x4a\xec\x2e\xb5\x4f\xab\x0c\x86\x5b\x8c\xab\x72\xf6\xd7\x75\xdb\xfe\x84\x63\x7d\x6c\xc4\x07\xad\x06\xd0\x28\xc0\x04\xf9\x51\xe3\xbc\x44\xd9\x78\x68\x41\xa5\x86\xcf\x2f\xa1\xa1\xf6\xbc\x06\x95\xb7\x04\x07\x8e\x2d\x8d\x8a\xcb\x20\x63\x57\xa8\x8f\x58\xdf\x23\xc5\x16\x64\x38\xa1\x87\x8e\x6f\x4e\xd7\x26\x7d\x73\x36\xe1\x02\xc4\x06\xf5\x97\x36\x92\xcf\xfe\x6f\x6f\x47\xc2\xa0\x1e\x64\xb3\x9d\x4b\x5a\x26\x69\x79\xd0\x1a\x0c\x0a\xc9\x51\xdc\xbf\x0f\xf7\x5f\x19\x69\x9f\x30\xde\xd5\x06\x5b\xc2\xf4\x93\xfd\xee\x84\x8b\xba\x57\x35\xc4\x67\x4d\xa2\xf3\x26\xc1\x99\x87\xd1\xe8\x4d\x98\x1e\xdc\xcc\x66\x3f\x01\x00\x00\xff\xff\x82\xb6\xa8\x78\x83\x06\x00\x00")

func bindataRenameSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataRenameSchemaJson,
		"/rename.schema.json",
	)
}

func bindataRenameSchemaJson() (*asset, error) {
	bytes, err := bindataRenameSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/rename.schema.json",
		size:        1667,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataUsrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x4d\x0e\x82\x30\x10\x85\xf7\x3d\x45\xd3\xb8\x04\x8a\x2c\xb9\x8a\x71\x81\x30\x42\x49\xa4\x75\x66\xba\x30\x86\xbb\x9b\xf2\x97\x34\x88\x1b\xb7\x5f\xe7\x7d\xef\xf5\x2d\xa4\x94\x52\x9d\xa8\xee\xe0\x51\xa9\x52\xaa\x8e\xd9\x51\xa9\x75\x4f\x76\x48\x67\x9c\x59\x6c\x75\x83\xd5\x9d\x75\x91\x17\x79\x7a\x2e\xf4\x72\x9f\x2c\x71\xd3\x84\xa8\x27\xcc\x42\x6c\xc5\xfc\x72\x10\xb8\xbd\xf5\x50\xf3\x4a\x1d\x5a\x07\xc8\x06\x48\x95\x72\xee\x9f\xb8\x27\x8c\xc0\xb1\x62\x7b\x3d\x50\x6d\xef\xd3\xac\x3d\x8f\xcc\xc4\x68\x86\x56\xed\x8e\xc6\x64\xef\x6b\xd1\x7a\xf7\x87\x52\xfc\x28\x50\x08\x4f\x6f\x10\xc2\xe4\xcb\xd7\xaf\x1c\x0e\x8a\xf8\x55\xc4\x75\xa3\x18\xc5\x27\x00\x00\xff\xff\x5e\x62\xd5\xde\xe6\x01\x00\x00")

func bindataUsrJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataUsrJson,
		"/usr.json",
	)
}

func bindataUsrJson() (*asset, error) {
	bytes, err := bindataUsrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/usr.json",
		size:        486,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/chmod.schema.json":      bindataChmodSchemaJson,
	"/container.json":         bindataContainerJson,
	"/container_context.json": bindataContainercontextJson,
	"/container_event.json":   bindataContainereventJson,
	"/container_path.json":    bindataContainerpathJson,
	"/datetime.json":          bindataDatetimeJson,
	"/event.json":             bindataEventJson,
	"/exec.schema.json":       bindataExecSchemaJson,
	"/file.json":              bindataFileJson,
	"/host_event.json":        bindataHosteventJson,
	"/open.schema.json":       bindataOpenSchemaJson,
	"/process.json":           bindataProcessJson,
	"/process_context.json":   bindataProcesscontextJson,
	"/rename.schema.json":     bindataRenameSchemaJson,
	"/usr.json":               bindataUsrJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"chmod.schema.json":      {Func: bindataChmodSchemaJson, Children: map[string]*bintree{}},
		"container.json":         {Func: bindataContainerJson, Children: map[string]*bintree{}},
		"container_context.json": {Func: bindataContainercontextJson, Children: map[string]*bintree{}},
		"container_event.json":   {Func: bindataContainereventJson, Children: map[string]*bintree{}},
		"container_path.json":    {Func: bindataContainerpathJson, Children: map[string]*bintree{}},
		"datetime.json":          {Func: bindataDatetimeJson, Children: map[string]*bintree{}},
		"event.json":             {Func: bindataEventJson, Children: map[string]*bintree{}},
		"exec.schema.json":       {Func: bindataExecSchemaJson, Children: map[string]*bintree{}},
		"file.json":              {Func: bindataFileJson, Children: map[string]*bintree{}},
		"host_event.json":        {Func: bindataHosteventJson, Children: map[string]*bintree{}},
		"open.schema.json":       {Func: bindataOpenSchemaJson, Children: map[string]*bintree{}},
		"process.json":           {Func: bindataProcessJson, Children: map[string]*bintree{}},
		"process_context.json":   {Func: bindataProcesscontextJson, Children: map[string]*bintree{}},
		"rename.schema.json":     {Func: bindataRenameSchemaJson, Children: map[string]*bintree{}},
		"usr.json":               {Func: bindataUsrJson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
