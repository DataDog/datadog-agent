// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/security/tests/schemas/container.json
// pkg/security/tests/schemas/container_context.json
// pkg/security/tests/schemas/container_path.json
// pkg/security/tests/schemas/event.json
// pkg/security/tests/schemas/exec.schema.json
// pkg/security/tests/schemas/file.json
// pkg/security/tests/schemas/process.json
// pkg/security/tests/schemas/process_context.json
// pkg/security/tests/schemas/usr.json
// +build functionaltests

package schemas

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataContainerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\xae\xc2\x20\x10\x45\xf7\xfd\x8a\x09\x79\xcb\xd7\x52\x59\xf2\x2b\xc6\x05\xd2\xb1\xa5\x89\x80\xc3\xb8\x30\x86\x7f\x37\x50\xaa\xe9\x8e\x7b\x2f\xe7\x64\xde\x1d\x00\x80\xf8\x4b\x76\xc1\xbb\x11\x1a\xc4\xc2\x1c\x93\x96\x72\x4d\xc1\xf7\x5b\x3d\x04\x9a\xe5\x44\xe6\xc6\x52\x8d\x6a\xec\x4f\x4a\xb6\xff\xff\x0d\x77\x53\x41\x6d\xf0\x6c\x9c\x47\x1a\x0a\xbc\x8f\xfc\x8a\x58\xd6\x70\x5d\xd1\xf2\xde\x46\x0a\x11\x89\x1d\x26\xa1\x61\xbb\xa2\xf6\xd5\xf4\xcb\x07\x43\x62\x72\x7e\x16\xdf\x31\xd7\x57\x6e\x46\xc2\xc7\xd3\x11\x16\xfe\x7c\xf0\xd5\x70\xe9\xf2\x27\x00\x00\xff\xff\x12\xe6\xde\xdb\xec\x00\x00\x00")

func bindataContainerJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerJson,
		"/container.json",
	)
}

func bindataContainerJson() (*asset, error) {
	bytes, err := bindataContainerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container.json",
		size:        236,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainercontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x0a\x82\x40\x10\x45\xdf\xfd\x8a\x61\xe9\x31\x1d\xf3\x71\x7f\x25\x22\x4c\xc7\x5c\x29\x77\x9b\x9d\xa0\x08\xff\x3d\xc6\x55\x21\xe8\x6d\x38\x9c\xb9\xf7\x7e\x32\x00\x00\xb3\x8b\x4d\x4f\xf7\xda\x58\x30\xbd\x48\x88\x16\x71\x88\x7e\xcc\x13\x2e\x3c\x5f\xb1\xe5\xba\x13\xac\xca\xaa\xcc\x0f\x15\x2e\xfe\x7e\x79\x77\xad\xbe\x36\x7e\x94\xda\x8d\xc4\x67\xbd\xe8\x25\x85\x86\xac\x92\xbc\x03\xa9\xe5\x2f\x03\x35\xb2\xd2\xc0\x3e\x10\x8b\xa3\x68\x2c\xa4\x35\x33\xdf\xb2\x7e\x70\x6a\x63\xea\x34\xa8\x73\x37\xb2\x88\xb8\xa9\xa9\x6e\x93\xa7\xf9\x9a\x96\x22\xa6\xc7\xd3\x31\xe9\xd0\xe3\xbf\x9a\x99\x9d\xb2\xe9\x1b\x00\x00\xff\xff\xb9\xfa\x42\x76\x12\x01\x00\x00")

func bindataContainercontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainercontextJson,
		"/container_context.json",
	)
}

func bindataContainercontextJson() (*asset, error) {
	bytes, err := bindataContainercontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_context.json",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataContainerpathJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x41\xae\xc2\x30\x0c\x05\xf7\x3d\x85\x15\xfd\x55\xf5\x1b\x97\x2c\x7b\x19\x64\x25\xa6\x09\x08\x27\x72\xbc\x41\x88\xbb\xa3\x88\x76\x3b\x6f\xe6\xbd\x27\x00\x00\xf7\xd7\x63\xe6\x27\xb9\x0d\x5c\x36\x6b\x7d\x43\xbc\xf7\x2a\xcb\x0f\xfb\xaa\x3b\x26\xa5\x9b\x61\x58\xc3\xba\x5c\x02\x1e\xfe\xff\x91\x97\x34\xd2\x58\xc5\xa8\x08\xeb\xb5\x91\x65\x3f\x1e\x4e\xc3\x5e\x8d\x87\xd2\x4d\x8b\xec\x27\x6d\x64\xc6\x2a\x63\xf0\x73\xaa\xf1\xc1\xea\x67\x37\x7d\xbe\x01\x00\x00\xff\xff\x66\xad\xfc\xe4\x96\x00\x00\x00")

func bindataContainerpathJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataContainerpathJson,
		"/container_path.json",
	)
}

func bindataContainerpathJson() (*asset, error) {
	bytes, err := bindataContainerpathJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/container_path.json",
		size:        150,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEventJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x6e\x85\x20\x10\xbc\xf3\x15\x84\xf4\xf8\xde\xe3\xd5\xa3\xbf\xd2\xf4\x40\x71\xab\x98\x08\x74\x59\x4d\x4c\xe3\xbf\x37\x88\x9a\x58\xc5\x4b\x7b\x9d\xd9\x99\x9d\x81\xfd\x66\x9c\x73\x2e\x5e\x82\x6e\xa0\x53\xa2\xe4\xa2\x21\xf2\xa1\x94\xb2\x0d\xce\xde\x13\xfc\x70\x58\xcb\x0a\xd5\x27\xc9\xe2\x59\x3c\xef\xaf\x85\x5c\xe6\x6f\x8b\xdc\x54\x51\x0a\x03\x58\x7a\x44\xe1\x4a\xd0\xe8\x21\x32\xee\xa3\x05\x4d\x2b\xea\xd1\x79\x40\x32\x10\x44\xc9\x53\x82\x19\x87\x81\x76\x40\xde\x62\x63\x33\x56\x1b\x6f\x55\x07\xa7\xcc\xce\x3b\x10\x1a\x5b\x8b\xc3\xd0\x74\x3b\x3a\x6a\x45\x50\x3b\x1c\xff\xd7\xd5\xf5\xa4\xdd\x9f\xa2\xb2\x8b\x15\x02\xe1\xab\x37\x08\xf1\x97\xde\x32\x8f\x74\x55\xf5\x22\xf0\x8e\x79\x67\x27\x01\x44\xa5\xe8\x58\x2c\x5b\x28\x15\x59\xf4\xe7\xc1\xe7\x43\xf9\xbd\x80\xa5\x00\xd3\x4f\x00\x00\x00\xff\xff\x80\x89\xa3\x61\xd2\x02\x00\x00")

func bindataEventJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataEventJson,
		"/event.json",
	)
}

func bindataEventJson() (*asset, error) {
	bytes, err := bindataEventJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/event.json",
		size:        722,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataExecSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\xc1\x6e\x83\x30\x0c\xbd\xf7\x2b\xa2\xa8\xc7\xb6\xe9\x38\xf2\x13\xfb\x80\x09\x4d\x2c\x98\x91\x8a\x25\x99\xe3\x4e\xad\x2a\xfe\x7d\x0a\x94\x56\x90\x20\xaa\x09\x69\x87\x2d\x17\x82\xfd\x9e\xf3\xf0\x8b\xb9\xac\x18\x63\x8c\xaf\x9d\xac\xe0\x23\xe7\x29\xe3\x15\x91\x75\xa9\x10\x07\x67\xf4\xb6\x0b\xef\x0c\xbe\x8b\x02\xf3\x92\x44\xb2\x4f\xf6\xdb\xa7\x44\x5c\xf1\x9b\x2b\x5d\x15\x9e\x0a\x27\x90\x3b\xcf\xeb\xe3\x74\xb6\xe0\x13\xe6\xed\x00\x92\xfa\x68\xae\xcf\xcf\x25\x4f\xd9\x4b\xfb\xea\xd7\xe5\xb6\xeb\x00\x75\x3d\x02\xc4\x81\x37\xc2\x1a\xc1\xe3\x79\xa9\x6a\x48\x85\x10\xf0\x05\x9a\x3a\x25\x01\xa1\xd9\xfc\xb4\xaa\x7f\x2e\x5e\xf4\xe8\x70\xf1\x9a\x16\x8d\x04\xe7\x5e\xa5\xd1\x04\xa7\xe5\x1b\xe1\xeb\xe6\x4a\x03\xce\x9d\x30\x88\x64\xab\xc8\xc9\xff\xce\xff\x86\xf3\x53\xbe\xb4\xbb\xac\x1f\xd3\xc0\x8b\x91\x59\xca\x67\x43\x61\xdc\xa2\xb1\x80\xa4\xc0\x45\xf3\x2d\xc6\x0b\x9e\xcc\xb2\xc9\x7f\x47\x14\x89\xf0\x79\x54\x08\x45\xf4\xde\x0c\x90\xf7\x8b\x6b\x73\xaa\xc2\xc6\xf4\x2b\x8b\x66\x9a\x99\x46\x8e\x6c\xe3\x54\x81\x8e\x77\x68\x56\xf1\x5d\x69\x28\x72\x28\xae\x79\x60\xaa\xa6\x8c\x5a\x52\xc6\xc3\xdf\xfe\x67\x6f\xc7\x78\xcc\x56\xcd\x77\x00\x00\x00\xff\xff\x43\x27\x19\xe1\x7d\x07\x00\x00")

func bindataExecSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataExecSchemaJson,
		"/exec.schema.json",
	)
}

func bindataExecSchemaJson() (*asset, error) {
	bytes, err := bindataExecSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/exec.schema.json",
		size:        1917,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFileJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xc1\x6e\x83\x30\x0c\x86\xef\x7d\x8a\x28\xea\xb1\x6d\x3a\x8e\xbc\xca\x34\xa1\x0c\x0c\xb8\x1a\x0e\x73\xcc\xa1\x9a\x78\xf7\x29\xa5\x74\x42\x2c\x0c\xa9\xec\x88\x9d\xff\x4b\xf8\xfd\xfb\x6b\xa7\x94\x52\x7a\xef\xf3\x1a\x1a\xab\x53\xa5\x6b\x91\xd6\xa7\xc6\x5c\xbc\xa3\xe3\x50\x3e\x39\xae\x4c\xc1\xb6\x14\x93\x9c\x93\xf3\xf1\x25\x31\xf7\xf3\x87\xbb\x1c\x8b\x20\x2d\xf1\x03\x4e\x41\x37\xd6\xe5\xda\x42\x68\xb8\xf7\x0b\xe4\x32\x56\x5b\x76\x2d\xb0\x20\x78\x9d\xaa\xe1\x01\xb7\x7a\x90\x4f\x2a\x71\xc6\xa3\x1b\x61\xfd\xf4\xad\xd4\xbf\x76\x26\x6c\x2f\x8c\x54\xe9\xd9\xa1\xfe\x30\x27\x92\x6d\xe6\xaf\x7c\x8a\x98\x3b\x12\x8b\x04\x9c\x2d\xbf\x76\xcf\x50\x8e\x36\xa7\xc6\x98\xa9\x6e\x30\x7e\xd5\x85\x48\xae\x58\xf1\x0f\x48\x02\x15\xf0\x3a\x66\xf3\x1f\xc8\x8e\x24\xbb\x45\x6b\x4b\x6c\xb0\xcf\x5f\xbd\x40\xb3\xed\x18\x3b\x0f\xbc\x2d\xb1\x62\xd7\xb5\xdb\x22\x1b\x57\x60\x89\xb9\x15\x74\x94\x09\x6e\x1e\xe5\xda\x52\x05\xcf\x82\x77\x0b\xd7\x68\x86\xcf\x0e\x19\x42\x2a\x5e\x23\xfb\x1e\xdb\xda\xe8\x2a\xc4\xf2\xbc\x14\xca\xe5\x64\xc5\xf2\x11\x9d\xf2\xaa\x59\xfd\xe1\xf8\xa4\xfb\xf6\xf8\x1a\xfc\xec\x77\xfd\x77\x00\x00\x00\xff\xff\x1a\x0c\xd7\xd8\xed\x05\x00\x00")

func bindataFileJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFileJson,
		"/file.json",
	)
}

func bindataFileJson() (*asset, error) {
	bytes, err := bindataFileJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/file.json",
		size:        1517,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcessJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4b\x6e\xe3\x30\x0c\xdd\xe7\x14\x86\xd1\x65\x5a\x37\x59\xe6\x06\xb3\x9a\x03\x04\x41\xa0\xda\x54\xa2\x22\xfa\x54\xa2\x07\x13\x14\xb9\xfb\xc0\xce\xd7\xb6\x28\x7f\x83\x01\xba\xb5\xa4\x27\xea\x89\xef\x89\xe6\xf7\x2c\x8a\xa2\x28\x7e\x71\xe9\x1e\x24\x8b\x57\x51\xbc\x47\x34\x6e\x95\x24\x9f\x4e\xab\xd7\xf3\xe7\x37\x6d\x77\x49\x66\x19\xc7\x64\xf9\xbe\x7c\x7f\x5d\x2c\x93\xcb\xfc\xf9\x65\xb9\xc8\x8a\xa5\xc6\xea\x14\x9c\x7b\x2b\x96\x5e\x87\xf0\x68\xa0\x18\xd3\x1f\x9f\x90\xe2\xf5\xab\xb1\xda\x80\x45\x01\x2e\x5e\x45\xe7\x18\xce\xb3\x4b\xa0\xfb\x87\x0a\x84\x50\x08\x3b\xb0\xf1\x6d\xf4\x34\xbf\xaf\xcc\x07\xaf\xdc\x0d\xdf\xd3\x81\xa5\x97\x3a\xb4\x42\xed\x88\x3d\xad\xce\xcd\xb0\xa5\xf0\x17\xd2\x1c\xd9\xc7\x01\xb6\xa9\x56\xc8\x84\x02\xbb\x35\x0c\xf7\x4d\xb8\x17\x0b\xbc\x80\xe3\xe2\x00\xab\x24\x49\xaa\xf3\xcf\xd7\xd4\xb6\x87\x1f\xb9\x4b\xa0\xa9\x96\x72\xf4\x11\x85\xd2\x19\x0c\xbc\x9e\x07\x18\xa9\x73\x85\xdb\xc1\x17\x8d\x78\x1c\xc8\x81\x85\x0c\x14\x0a\x76\x70\x34\x40\x45\x1a\xb7\x51\x42\x22\xb7\x71\x5f\xc2\xb7\x9f\xca\x13\xe4\x1d\xd1\x97\xce\xad\xc7\x0d\x21\xfa\xa4\x35\x2e\x46\xbf\x70\x46\x05\x09\xd3\x33\x09\xd3\x53\x09\xd3\x73\x09\x4f\x20\x93\xbb\xe9\xd9\xe4\x6e\x7a\x3a\xb9\x9b\x9e\x4f\xee\x9e\x40\x68\xca\xcc\x16\x38\x87\x14\xc5\x9f\xa6\x11\x36\xa0\x99\xb5\xec\x18\x37\x71\xca\x49\x02\x41\xfa\xdd\xa4\x73\x88\x44\x98\xe5\x5a\x29\xd4\xaf\xcb\x0e\x0b\x62\x4a\xae\xc4\x57\x0e\xd7\x59\x68\x73\xe8\x4c\x82\x01\x2b\x05\x22\x74\xb8\xb5\x1f\x40\xc2\x2c\xb0\x57\x6c\xe1\x2b\x17\xb6\x64\x62\xed\x7f\x18\x08\x2f\xa6\xdc\x8f\xb4\x30\xca\x88\x68\x37\x21\x3d\x81\x16\x36\x29\xcf\x80\xc6\x5a\x95\xd2\x9a\x45\x95\xf1\x4d\x4b\x01\x31\xf5\xe3\xed\xad\xaa\x1a\xd8\x7d\x7c\x42\x31\xd9\xc1\x1e\x7a\x39\x4f\xb8\xba\xbc\xcd\xeb\x55\x65\x86\x36\xf4\xd7\x7a\x8d\x33\xf4\xf2\x64\xf9\x0c\x48\xa2\x96\x1c\x07\x5b\xd0\xe7\x8e\x0e\xa1\x59\x34\x37\x80\xfb\x5c\xe3\xf4\xef\xf1\xf4\x2f\xa7\xd4\x99\xe0\x22\x65\x28\xb4\xda\xa2\x98\x3c\x93\xf7\x4c\xed\x60\x2c\xf0\x08\x4b\x2e\x05\x44\x89\x96\x54\x02\x95\xce\xa1\x9c\x0c\x27\x16\x91\x1e\xdd\x5f\x8b\xe6\x45\xb5\xd0\xdd\xc1\x65\x6f\x7e\xd1\xe3\x07\xb6\xfe\xef\x3a\x7b\x00\x8d\xb5\x82\xdf\xbc\x72\x11\xdf\x3d\xdd\xb9\x4f\x82\x13\x8f\x3c\xa8\xbc\x10\xf2\x7a\xb1\x19\x91\x49\x65\x24\x5e\xd6\xfe\xc3\x89\xa4\x50\x42\x96\x87\x5a\x76\x52\x9d\xe9\xb5\xe9\x58\x96\xe6\x97\x0d\x37\xb5\xa4\xd8\x5c\x92\xc2\x2b\xd0\xb2\xdf\x54\x6b\x22\xd5\x3a\x43\x81\xae\x48\xbd\xd7\x11\xea\x60\xb4\xb4\x25\x88\x96\x81\xbf\x16\xa9\x9c\x2b\x03\x03\x2a\x03\x95\x36\x7a\x69\xa1\x46\xd1\xfa\x41\x75\x1b\x42\x8b\xeb\x00\xc2\x99\xe5\xd3\xec\xf4\x2f\x00\x00\xff\xff\x00\x4c\x07\x6d\x40\x14\x00\x00")

func bindataProcessJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcessJson,
		"/process.json",
	)
}

func bindataProcessJson() (*asset, error) {
	bytes, err := bindataProcessJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process.json",
		size:        5184,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataProcesscontextJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x41\x6e\xc3\x20\x10\x45\xf7\x3e\x05\x42\x5d\x26\x21\xf5\x92\x4b\xf4\x00\x55\x55\x51\x3c\x6e\x88\x1c\xa0\xc3\x54\x6a\x14\xe5\xee\x15\x06\x5b\x8d\x8c\x9d\x34\xf1\xf2\xf3\xff\xd7\x1b\x18\x9f\x2a\xc6\x18\xe3\x4f\x41\xef\xe0\xa0\xb8\x64\x7c\x47\xe4\x83\x14\x62\x1f\x9c\x5d\x27\x79\xe3\xf0\x53\x34\xa8\x5a\x12\xf5\xb6\xde\xae\x9f\x6b\x91\xfd\xab\x1c\x37\x4d\x8c\x7a\x74\x1a\x42\x78\xd7\xce\x12\xfc\xd0\x26\x56\x0c\x16\x3a\x7a\x88\x1e\xf7\xb1\x07\x4d\x83\xea\xd1\x79\x40\x32\x10\xb8\x64\x89\x65\xd0\x63\xd3\x85\xd8\x1f\xa8\xae\x7b\x69\xb9\x64\xaf\x17\x72\xfc\x4e\x13\x25\xa1\x21\x44\x3f\x6f\x4d\x07\x52\x08\x91\x9b\x13\xdb\x24\x72\x5e\xdd\xda\x3b\x43\x3e\xf5\x29\x04\x4b\x8b\x9e\x3b\x38\x17\x78\xc7\x46\x65\x35\x04\x72\xb8\x0c\xc8\xfe\x3e\x8e\x42\x54\x47\x3e\xdf\xd9\x9b\x0d\xc1\xe1\x7a\xe7\x03\x43\xf5\x83\xdd\x35\x72\x5c\x3c\x65\x2c\xe0\xff\xef\x7b\x8c\x5e\xbb\xf1\xe2\xc9\x0c\x14\x47\xf8\xfa\x36\x08\x4d\x71\x63\x47\x57\xde\x91\x9b\xde\xb2\xe8\x79\x9b\x2e\x72\x55\x3e\x4f\x7a\xc6\x2d\xe3\x8d\x3f\x5f\x95\xa2\xe7\xdf\x00\x00\x00\xff\xff\x69\x16\x74\x58\x24\x04\x00\x00")

func bindataProcesscontextJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataProcesscontextJson,
		"/process_context.json",
	)
}

func bindataProcesscontextJson() (*asset, error) {
	bytes, err := bindataProcesscontextJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/process_context.json",
		size:        1060,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataUsrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x4d\x0e\x82\x30\x10\x85\xf7\x3d\x45\xd3\xb8\x04\x8a\x2c\xb9\x8a\x71\x81\x30\x40\x89\xd2\x3a\x33\x2c\x8c\xe1\xee\xa6\xfc\x25\x0d\xe2\xc6\xed\xf7\xfa\xbe\x79\x7d\x0b\x29\xa5\x54\x27\x2a\x5b\x78\x14\x2a\x97\xaa\x65\x76\x94\x6b\xdd\x91\xed\xe3\x19\x27\x16\x1b\x5d\x61\x51\xb3\xce\xd2\x2c\x8d\xcf\x99\x5e\xde\x47\x4b\xdd\x54\xbe\x5a\x9b\x3b\x24\xbe\xb7\x72\x7e\x39\xf0\x81\xbd\x75\x50\xf2\x4a\x1d\x5a\x07\xc8\x06\x48\xe5\x72\x1e\x30\xf1\x81\x30\x00\xc7\x8a\x2d\x3d\x50\x6d\xf9\xb4\x6b\xcf\x03\x33\x31\x9a\xbe\x51\xbb\x47\x63\xb4\xf7\x35\x68\x07\xf7\x87\x52\xfc\x38\xa0\x10\x9e\x83\x41\xf0\x93\x2f\x5f\xbf\x72\x38\x28\xe0\x57\x11\x9e\x1b\xc5\xf8\x09\x00\x00\xff\xff\xd2\xf0\x69\x81\xe6\x01\x00\x00")

func bindataUsrJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataUsrJson,
		"/usr.json",
	)
}

func bindataUsrJson() (*asset, error) {
	bytes, err := bindataUsrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/usr.json",
		size:        486,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/container.json":         bindataContainerJson,
	"/container_context.json": bindataContainercontextJson,
	"/container_path.json":    bindataContainerpathJson,
	"/event.json":             bindataEventJson,
	"/exec.schema.json":       bindataExecSchemaJson,
	"/file.json":              bindataFileJson,
	"/process.json":           bindataProcessJson,
	"/process_context.json":   bindataProcesscontextJson,
	"/usr.json":               bindataUsrJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"container.json":         {Func: bindataContainerJson, Children: map[string]*bintree{}},
		"container_context.json": {Func: bindataContainercontextJson, Children: map[string]*bintree{}},
		"container_path.json":    {Func: bindataContainerpathJson, Children: map[string]*bintree{}},
		"event.json":             {Func: bindataEventJson, Children: map[string]*bintree{}},
		"exec.schema.json":       {Func: bindataExecSchemaJson, Children: map[string]*bintree{}},
		"file.json":              {Func: bindataFileJson, Children: map[string]*bintree{}},
		"process.json":           {Func: bindataProcessJson, Children: map[string]*bintree{}},
		"process_context.json":   {Func: bindataProcesscontextJson, Children: map[string]*bintree{}},
		"usr.json":               {Func: bindataUsrJson, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
