// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

package workloadmeta

import "time"

// Kind is the kind of an entity.
type Kind string

// ContainerRuntime is the container runtime used by a container.
type ContainerRuntime string

// ECSLaunchType is the launch type of an ECS task.
type ECSLaunchType string

// EventType is the type of an event.
type EventType int

// List of enumerable constants for the types above.
const (
	KindContainer     Kind = "container"
	KindKubernetesPod Kind = "kubernetes_pod"
	KindECSTask       Kind = "ecs_task"

	ContainerRuntimeDocker ContainerRuntime = "docker"

	ECSLaunchTypeEC2      ECSLaunchType = "ec2"
	ECSLaunchTypeFargate  ECSLaunchType = "fargate"
	ECSLaunchTypeExternal ECSLaunchType = "external"

	EventTypeSet EventType = iota
	EventTypeUnset
)

// Entity is an item in the metadata store. It exists as an interface to avoid
// usage of interface{}.
type Entity interface {
	GetID() EntityID
}

// EntityID represents the ID of an Entity.
type EntityID struct {
	Kind Kind
	ID   string
}

// GetID satisfies the Entity interface for EntityID to allow a standalone
// EntityID to be passed in events of type EventTypeUnset without the need to
// build a full, concrete entity.
func (i EntityID) GetID() EntityID {
	return i
}

var _ Entity = EntityID{}

// EntityMeta represents generic metadata about an Entity.
type EntityMeta struct {
	Name        string
	Namespace   string
	Annotations map[string]string
	Labels      map[string]string
}

// ContainerImage is the an image used by a container.
type ContainerImage struct {
	ID        string
	RawName   string
	Name      string
	ShortName string
	Tag       string
}

// ContainerState is the state of a container.
type ContainerState struct {
	Running    bool
	StartedAt  time.Time
	FinishedAt time.Time
}

// ContainerPort is a port open in the container.
type ContainerPort struct {
	Name string
	Port int
}

// Container is a containerized workload.
type Container struct {
	EntityID
	EntityMeta
	Image   ContainerImage
	EnvVars map[string]string
	Ports   []ContainerPort
	Runtime ContainerRuntime
	State   ContainerState
}

// GetID returns the Container's EntityID.
func (c Container) GetID() EntityID {
	return c.EntityID
}

var _ Entity = Container{}

// KubernetesPod is a Kubernetes Pod.
type KubernetesPod struct {
	EntityID
	EntityMeta
	Owners                     []KubernetesPodOwner
	PersistentVolumeClaimNames []string
	Containers                 []string
	Ready                      bool
	Phase                      string
	IP                         string
	PriorityClass              string
}

// GetID returns the KubernetesPod's EntityID.
func (p KubernetesPod) GetID() EntityID {
	return p.EntityID
}

var _ Entity = KubernetesPod{}

// KubernetesPodOwner is extracted from a pod's owner references.
type KubernetesPodOwner struct {
	Kind string
	Name string
	ID   string
}

// ECSTask is an ECS Task.
type ECSTask struct {
	EntityID
	EntityMeta
	Containers []Container
	LaunchType ECSLaunchType
}

// GetID returns an ECSTasks's EntityID.
func (t ECSTask) GetID() EntityID {
	return t.EntityID
}

var _ Entity = ECSTask{}

// Event is an event generated by a metadata collector.
type Event struct {
	Type   EventType
	Source string
	Entity Entity
}

// EventBundle is a collection of events, and a channel that needs to be closed
// when the receiving subscriber wants to unblock the notifier.
type EventBundle struct {
	Events []Event
	Ch     chan struct{}
}
