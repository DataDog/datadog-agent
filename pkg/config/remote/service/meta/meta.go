// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta/config.json
// meta/director.json

package meta


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\xcd\x6a\x23\x49\x0c\xc7\xcf\xed\xa7\x08\x7d\xce\x2c\x52\x7d\x49\x95\xe7\xd8\xd3\x2e\x83\x51\x49\xaa\xd8\x8c\x63\x1b\x77\x67\xd8\x30\xe4\xdd\x17\xb7\x9d\x2f\xf6\xb2\x30\x03\x03\x81\xbe\x54\xab\x90\xf4\xfb\xeb\xaf\xfa\xb1\x1a\xc6\x69\x7b\xbf\x97\xf9\xf1\xe4\xd3\x78\x77\xf3\xf7\x6a\x18\x7e\xac\x86\x61\x18\xbf\xf9\xd3\xd6\xc6\xbb\x9b\xb1\x79\x8b\x68\xc4\xb9\x30\x47\x15\x90\x12\xb4\x47\x8c\x86\x8d\x30\x34\xa4\xdc\x2c\x70\x8e\x1c\xc0\xab\x88\x62\x0a\x31\xb2\x48\xe5\x62\x29\x12\x8c\xb7\x4b\xbe\x69\x7b\x7f\xce\x26\x64\x2d\x43\x56\xe9\x35\x25\x69\x64\x4e\xde\xd5\x4b\xad\x0d\x63\x29\x08\x9e\x8b\xba\x19\xd4\xdc\x73\x4d\x0c\x12\x85\xa3\x9a\x2b\x16\x41\x77\x0f\x9d\x7a\xa8\x3d\x81\x10\x4b\xa8\xd0\x93\x46\x2e\xc5\x51\x8b\x2a\x71\x6b\xd0\x0c\x4a\xae\x46\x21\x26\x0f\x6a\x31\x27\x56\xb6\xd6\x94\x2b\xf0\xb8\x1a\x86\xe7\xdb\xff\x52\x1a\x24\xce\x29\x67\x77\x8e\x35\xa5\x08\xd5\x24\x37\x4c\x08\x9c\x8a\x57\xac\x99\x3b\x9a\x40\xad\x94\xba\x46\x76\x4b\x86\x1d\x82\x63\xa2\x58\x6a\xfe\x48\x19\x2c\xb9\xe4\x94\x0a\x77\xc1\x18\x21\xe4\x8e\x14\x40\x2a\x54\xd2\xee\x99\x63\x73\xe1\xe0\xa8\xe0\x26\xc9\x1b\x9a\xa5\x0c\x5d\x43\x63\xab\x41\x0b\x15\x93\x12\xa8\x9a\x96\x46\x8e\x2c\x48\xa9\xc5\xa8\x3d\x13\x72\x69\x29\x39\x58\xe2\xd0\xbc\x47\xa5\xaa\x49\xa8\x07\xc5\x8c\x2d\xd7\x5e\x20\x2d\x94\xab\xe1\xeb\xed\x75\xbe\x7e\x66\x3c\x13\x8f\xeb\xf9\xe9\xe8\xe7\x16\x4f\x87\xc3\xbc\x34\x3d\xea\x61\x3f\x6d\xa7\xd9\xf7\xf3\x7a\xda\xcb\x71\xda\x1c\xe6\xf1\xee\x66\x3e\x3d\xfa\x12\xf6\x7f\x8e\xdb\x8b\x39\x46\xac\x04\x5f\x00\xbf\x00\xfe\x09\x70\xb7\x7c\x7f\x5d\x72\x7c\xf3\xa7\xe9\x5a\x62\xf8\x79\xc7\x5c\x13\x5d\xc7\xb3\xde\xc8\xb4\x59\xcb\xee\xfe\x70\xda\xce\x9b\x87\x17\x9b\x2e\x72\x6f\x24\xe4\x72\xd1\xfe\x72\xcc\x18\xc6\xe5\xf4\xf5\xf6\x35\xc5\x0b\xb2\x5b\xc8\x19\xeb\xf8\x16\xf9\x2e\xbb\xd7\x62\xc3\x78\x7c\x6c\xbb\xad\x9e\x6f\x96\xae\xc1\x81\x62\x68\xb5\x50\xc9\x1c\x43\x60\x30\xd7\xe4\x81\x23\x84\x10\x83\x50\xe7\x22\xd0\x94\x38\x50\xb4\x46\xde\x52\x33\x3b\x9b\xba\x38\x5c\x5a\x78\xbe\x16\x9a\x74\xe3\x0f\x1f\x3a\x58\xbd\x46\x7f\xde\x78\xbf\x5d\xac\xa0\xd9\xc5\x89\x23\x59\xcd\xd8\x29\x53\x69\xc6\x04\xb9\x44\x2e\x15\xc1\x1d\xaa\x5b\x2b\x50\xd4\xa8\x54\x6f\x51\x51\x48\xe5\xac\xa4\xb4\xd6\xfe\x97\x58\x2f\x6b\x3b\x9e\x0e\x3b\x7f\xb3\xda\xe2\xe2\x8f\x0a\xbc\x47\xfe\x35\x6f\xd7\xaf\x98\xd2\x07\x99\xe7\xcd\xc9\xa7\xcd\x61\x77\xde\xca\xf0\xce\x0b\xef\xd6\xef\x93\x10\xcd\x72\xba\xf7\x79\xfa\x44\x40\xdb\x07\x9f\x66\x79\x38\x7e\x06\xa4\xd7\xa5\x9a\x8e\xae\xeb\xef\x7e\x9a\xb6\x87\xfd\xf2\xd0\xff\x71\x69\x62\x7c\xfb\x87\xab\xe1\x79\xf5\xfc\x6f\x00\x00\x00\xff\xff\xde\x52\x4d\xbe\x31\x08\x00\x00")

func bindataConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigJson,
		"config.json",
	)
}



func bindataConfigJson() (*asset, error) {
	bytes, err := bindataConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "config.json",
		size: 2097,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1633993850, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDirectorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\xcd\x6a\x23\x49\x0c\xc7\xcf\xed\xa7\x08\x7d\xce\x2c\x52\x7d\x49\x95\xe7\xd8\xd3\x2e\x83\x51\x49\xaa\xd8\x8c\x63\x1b\x77\x67\xd8\x30\xe4\xdd\x17\xb7\x9d\x2f\xf6\xb2\x30\x03\x03\x81\xbe\x54\xab\x90\xf4\xfb\xeb\xaf\xfa\xb1\x1a\xc6\x69\x7b\xbf\x97\xf9\xf1\xe4\xd3\x78\x77\xf3\xf7\x6a\x18\x7e\xac\x86\x61\x18\xbf\xf9\xd3\xd6\xc6\xbb\x9b\xb1\x79\x8b\x68\xc4\xb9\x30\x47\x15\x90\x12\xb4\x47\x8c\x86\x8d\x30\x34\xa4\xdc\x2c\x70\x8e\x1c\xc0\xab\x88\x62\x0a\x31\xb2\x48\xe5\x62\x29\x12\x8c\xb7\x4b\xbe\x69\x7b\x7f\xce\x26\x64\x2d\x43\x56\xe9\x35\x25\x69\x64\x4e\xde\xd5\x4b\xad\x0d\x63\x29\x08\x9e\x8b\xba\x19\xd4\xdc\x73\x4d\x0c\x12\x85\xa3\x9a\x2b\x16\x41\x77\x0f\x9d\x7a\xa8\x3d\x81\x10\x4b\xa8\xd0\x93\x46\x2e\xc5\x51\x8b\x2a\x71\x6b\xd0\x0c\x4a\xae\x46\x21\x26\x0f\x6a\x31\x27\x56\xb6\xd6\x94\x2b\xf0\xb8\x1a\x86\xe7\xdb\xff\x52\x1a\x24\xce\x29\x67\x77\x8e\x35\xa5\x08\xd5\x24\x37\x4c\x08\x9c\x8a\x57\xac\x99\x3b\x9a\x40\xad\x94\xba\x46\x76\x4b\x86\x1d\x82\x63\xa2\x58\x6a\xfe\x48\x19\x2c\xb9\xe4\x94\x0a\x77\xc1\x18\x21\xe4\x8e\x14\x40\x2a\x54\xd2\xee\x99\x63\x73\xe1\xe0\xa8\xe0\x26\xc9\x1b\x9a\xa5\x0c\x5d\x43\x63\xab\x41\x0b\x15\x93\x12\xa8\x9a\x96\x46\x8e\x2c\x48\xa9\xc5\xa8\x3d\x13\x72\x69\x29\x39\x58\xe2\xd0\xbc\x47\xa5\xaa\x49\xa8\x07\xc5\x8c\x2d\xd7\x5e\x20\x2d\x94\xab\xe1\xeb\xed\x75\xbe\x7e\x66\x3c\x13\x8f\xeb\xf9\xe9\xe8\xe7\x16\x4f\x87\xc3\xbc\x34\x3d\xea\x61\x3f\x6d\xa7\xd9\xf7\xf3\x7a\xda\xcb\x71\xda\x1c\xe6\xf1\xee\x66\x3e\x3d\xfa\x12\xf6\x7f\x8e\xdb\x8b\x39\x46\xac\x04\x5f\x00\xbf\x00\xfe\x09\x70\xb7\x7c\x7f\x5d\x72\x7c\xf3\xa7\xe9\x5a\x62\xf8\x79\xc7\x5c\x13\x5d\xc7\xb3\xde\xc8\xb4\x59\xcb\xee\xfe\x70\xda\xce\x9b\x87\x17\x9b\x2e\x72\x6f\x24\xe4\x72\xd1\xfe\x72\xcc\x18\xc6\xe5\xf4\xf5\xf6\x35\xc5\x0b\xb2\x5b\xc8\x19\xeb\xf8\x16\xf9\x2e\xbb\xd7\x62\xc3\x78\x7c\x6c\xbb\xad\x9e\x6f\x96\xae\xc1\x81\x62\x68\xb5\x50\xc9\x1c\x43\x60\x30\xd7\xe4\x81\x23\x84\x10\x83\x50\xe7\x22\xd0\x94\x38\x50\xb4\x46\xde\x52\x33\x3b\x9b\xba\x38\x5c\x5a\x78\xbe\x16\x9a\x74\xe3\x0f\x1f\x3a\x58\xbd\x46\x7f\xde\x78\xbf\x5d\xac\xa0\xd9\xc5\x89\x23\x59\xcd\xd8\x29\x53\x69\xc6\x04\xb9\x44\x2e\x15\xc1\x1d\xaa\x5b\x2b\x50\xd4\xa8\x54\x6f\x51\x51\x48\xe5\xac\xa4\xb4\xd6\xfe\x97\x58\x2f\x6b\x3b\x9e\x0e\x3b\x7f\xb3\xda\xe2\xe2\x8f\x0a\xbc\x47\xfe\x35\x6f\xd7\xaf\x98\xd2\x07\x99\xe7\xcd\xc9\xa7\xcd\x61\x77\xde\xca\xf0\xce\x0b\xef\xd6\xef\x93\x10\xcd\x72\xba\xf7\x79\xfa\x44\x40\xdb\x07\x9f\x66\x79\x38\x7e\x06\xa4\xd7\xa5\x9a\x8e\xae\xeb\xef\x7e\x9a\xb6\x87\xfd\xf2\xd0\xff\x71\x69\x62\x7c\xfb\x87\xab\xe1\x79\xf5\xfc\x6f\x00\x00\x00\xff\xff\xde\x52\x4d\xbe\x31\x08\x00\x00")

func bindataDirectorJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDirectorJson,
		"director.json",
	)
}



func bindataDirectorJson() (*asset, error) {
	bytes, err := bindataDirectorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "director.json",
		size: 2097,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1633993850, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"config.json":   bindataConfigJson,
	"director.json": bindataDirectorJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"config.json": {Func: bindataConfigJson, Children: map[string]*bintree{}},
	"director.json": {Func: bindataDirectorJson, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
