// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta/config.json
// meta/director.json
// meta/meta.go

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x41\x8f\x1b\x37\x0c\x85\xff\x8b\xce\x93\x82\xa4\x28\x4a\x9a\xdf\xd1\x53\x83\x85\x41\x51\xd4\x7a\x10\xaf\x6d\xcc\xcc\x06\x5d\x04\xfe\xef\x85\xdd\x34\x48\xd1\xf4\xb4\xd8\x9b\x74\x79\xef\x7d\x14\x9f\xbe\x85\x6d\x79\x3e\x7b\x0f\xf3\xb7\x70\xd8\xdf\xae\x1e\xe6\xb0\x5e\x2e\x7b\x98\x82\x5d\xce\xdb\xb2\xed\x7e\xde\x0f\xdb\x59\xaf\xdb\xf1\xb2\x87\x79\x5f\x5f\x7d\x0a\xfe\xe7\x75\x59\x7d\x0b\x73\x20\x20\xfc\x04\xf5\x13\xc4\xdf\xa1\xcc\x5c\x67\xe4\x3f\xc2\x14\xbe\xf8\xdb\x76\x97\xa4\xda\x60\x68\xa3\xde\x64\xf4\x6e\x5a\x81\xd2\xa8\x99\x78\x34\x06\x19\x43\xb8\x8d\x9c\x87\x66\x97\xa4\x39\xd7\xda\x3d\xbb\x41\x95\x62\x68\x91\xeb\x5d\xe3\x8b\xbf\x2d\xfd\x70\xd4\xed\x78\xd0\xd3\xf3\x65\x5d\xf6\xe3\xcb\x16\xe6\xcf\x61\x3b\x2a\x25\x09\xd3\xfd\x90\x90\xc2\xd3\xc3\xf7\x3b\x84\x77\x4a\x09\xeb\xdf\x59\xbe\xea\xe9\xae\x74\x7d\x6d\xa7\xc5\xc2\x1c\x34\x16\xd1\x64\xea\x02\x39\xa3\x14\x1f\xe2\x04\xc9\x63\x4b\x35\x9b\x63\xa9\xd2\xc9\xa3\x16\xad\x80\x3e\x86\x57\xad\x9a\x25\x69\xf2\x22\x2d\xa5\x70\x9b\xc2\x66\x47\x7f\xf9\xd9\xe9\x36\x85\xd8\xa0\x48\x2a\x54\x8b\x36\xe8\x83\x0b\x79\x46\xe3\x38\x62\x44\x30\xe8\xc8\x20\xce\x2e\xa3\x33\xe7\x6a\xcd\x1c\x22\x52\x21\x45\x6f\x1d\x41\x3f\x08\xd7\x7a\x06\x07\x88\x89\xad\x14\x21\x4e\x26\x6c\xc0\x1d\x15\xdc\x7b\x37\xb0\x0c\xdd\x8b\x51\x62\x72\xaf\x63\x14\xc2\xec\xce\x9c\xe2\x40\xc1\xfe\x7f\xb8\xcd\x2a\x5a\x92\x21\x42\x85\x87\xe7\x04\x9c\xba\xe6\xd4\x88\x09\xb1\x39\xc4\x92\x6b\x6c\xdd\xd2\x00\x33\x1f\x56\x1b\x17\xd0\xa1\xd9\xac\xe4\x96\x3f\x08\x37\x66\x47\x8e\x83\x72\x8c\x3d\x0e\x95\xe6\x82\xc3\x5a\x2b\xb5\x94\x91\x38\x41\xef\x50\x65\x44\x26\xce\x3e\x62\xa6\xaa\x29\x96\x3e\x1a\x53\x19\x43\xf1\xd7\xb8\xb7\x29\xac\x97\x93\x3f\xd6\xfa\xd1\x90\x7f\xc2\x3f\xd2\xbe\x7b\x14\x4f\x53\xd8\x8f\xab\x6f\xc7\xcb\xa9\x87\x19\xef\x11\x7e\x94\xee\x67\xa3\x77\xaf\xd8\x7f\x8d\x76\x5d\x9f\x7d\xdf\xfe\xed\xf3\xee\xe6\xfe\xc2\x67\x79\xf1\x6d\xd7\x97\xeb\x07\x13\xdd\x67\x77\x75\x3b\x7c\xf5\x75\x5b\x2e\xe7\x30\x07\xfc\x0d\xc2\x14\x7e\xdc\x1f\xd3\x5d\x9e\xcf\xba\xbf\x3e\x7e\xb1\xcf\xdf\xe3\x84\xf9\xfd\xef\xf8\x50\x0e\x73\x10\xee\x9a\x4a\xc4\x0c\x24\xc8\xde\x30\x26\xa5\xaa\xd2\xb9\x25\xd6\x32\xa4\x27\x4c\x89\x1c\x8c\x1b\x73\x74\xa4\x22\x50\xad\xc7\xc4\x0d\xbc\x22\xf5\xd8\x8a\x81\x51\xaa\x75\x18\x67\x82\xec\xac\x5a\x7a\x04\xca\x91\x13\xb5\x58\xc4\x5d\x7a\x8c\xa8\xc8\x22\x44\xe8\xa3\x58\x47\x37\x16\x90\x70\x7b\xba\xfd\x15\x00\x00\xff\xff\x35\x89\x09\x2a\xdd\x05\x00\x00")

func bindataConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataConfigJson,
		"config.json",
	)
}

func bindataConfigJson() (*asset, error) {
	bytes, err := bindataConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "config.json",
		size:        1501,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1630677956, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDirectorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xd1\x6a\x2b\x39\x0c\x86\xdf\x45\xd7\xd3\x45\x96\x6d\xd9\x9e\xe7\xd8\xab\x2d\x25\xc8\xb6\x9c\x19\x9a\x64\xc2\x78\x5a\xb6\x94\xbc\xfb\x32\xd9\x9e\x52\x38\xe7\xae\xf4\xca\x36\x98\xff\xfb\xa5\x5f\x7a\x87\x3e\x1f\x2f\x5a\x61\x7c\x87\xc3\xf6\x76\x55\x18\x61\x5d\x96\x0d\x06\x28\xcb\xa5\xcf\x7d\xd3\xcb\x76\xe8\x17\xb9\xf6\x69\xd9\x60\xdc\xd6\x17\x1d\x40\xff\xbd\xce\xab\x76\x18\x81\x90\xcc\x03\xa6\x07\xb4\x7f\x63\x1c\x3d\x8d\xc6\xff\x03\x03\x3c\xeb\x5b\xdf\x25\x9d\x0f\x99\x53\xb4\xcd\x89\xf3\xb6\x26\x52\x2b\x6a\x11\x23\x25\x14\xa6\xd0\x24\xfb\x5a\x85\xb8\xb6\x1a\x51\x1a\x36\xeb\x1c\x07\x16\x54\xf4\x55\xed\xae\xf1\xac\x6f\x73\x3d\x4c\xd2\xa7\x83\x9c\x8e\xcb\x3a\x6f\xd3\xb9\xc3\xf8\x08\x7d\x12\xf2\x0c\xc3\x7e\xf1\x86\xe0\xe9\xce\xfd\x28\x42\x2b\x79\x6f\xd2\xff\x5e\x5e\xe5\xb4\x2b\x5d\x5f\xf2\x69\x2e\x30\x82\x6b\x91\x8b\x46\x26\x4a\xca\x85\x6c\x2b\xc1\x66\x5f\x50\x30\x35\x93\x1b\x19\x97\xc5\x57\x57\x05\x9b\x6d\x98\x44\x82\xb2\x6f\x85\x8d\x0d\x26\x7a\x4e\x70\x1b\xa0\x97\x49\xcf\x5f\x49\xb7\x01\x52\xf4\x2e\x48\x53\x83\xad\xf9\xd2\x84\x53\xc9\xde\x66\x22\x63\x91\x38\x52\x8a\xa9\xb9\x12\x4b\xf6\x26\x3a\xb1\x52\xb4\x66\x17\x5c\x0d\x96\x4c\xa6\x1c\x7f\xa8\xdc\x8a\x06\x11\x63\xaa\xc1\x71\x49\xc2\xec\xac\x1a\x42\x0d\xd1\x53\x69\x1c\x8c\x44\x53\x55\x98\x73\xa5\xe2\xa2\xc1\x60\x9c\x57\x92\xd4\xb0\x14\x2b\xf8\xe7\x72\x6f\x03\xac\xcb\x49\xef\x39\xdf\x47\xe6\x97\xf9\xbb\xdb\x6f\x27\xff\x34\xc0\x36\xad\xda\xa7\xe5\x54\x61\x34\xbb\x85\xcf\x29\xfc\x0a\xfa\x76\xcf\x7f\x07\x6d\xb2\x1e\x75\xeb\x3f\xcf\x99\xcf\xda\x37\x39\x5f\x7f\x98\xb4\xf7\xee\xaa\xe5\xf0\xaa\x6b\x9f\x97\x0b\x8c\x60\xfe\x42\x18\xe0\xf3\x7d\xef\xee\x7c\xbc\xc8\xf6\x72\x5f\xeb\xc7\x0f\x3b\xfb\xaa\x7c\x37\xc7\xbb\x32\x8c\x60\x31\x5b\xca\x39\xbb\x5a\xb4\x14\x1f\x9a\x89\x2d\x1a\x4b\xb6\x54\xf6\xe4\xac\x68\xae\x86\x25\x5a\x4a\x54\x42\xc8\xb2\x9f\x6c\x38\xa9\x4f\x39\x47\x0d\x25\x3a\xdb\x38\xb8\xc8\x4e\x33\xdb\x98\xb9\x64\xf1\x25\x73\x43\xf2\xd8\x04\x5d\x56\x1f\xa5\x04\xd2\x66\x23\xfb\x1a\xc4\xb4\xc6\x69\xff\xa6\x18\xe0\xf6\x74\xfb\x2f\x00\x00\xff\xff\xc8\x12\x65\xfb\xee\x04\x00\x00")

func bindataDirectorJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDirectorJson,
		"director.json",
	)
}

func bindataDirectorJson() (*asset, error) {
	bytes, err := bindataDirectorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "director.json",
		size:        1262,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1630677900, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMetaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdb\x8e\xdc\xb8\x11\x7d\x96\xbe\x82\x69\x60\x83\xee\x60\xd2\xad\xfb\xc5\x80\x5f\x76\xec\x00\x0e\xb0\x5e\x20\xf1\x5b\x2a\x58\x50\x14\xd9\xab\xec\x74\x6b\x22\xa9\x37\x35\xb3\xf0\xbf\x07\x87\xc5\xbe\xd8\x6b\x8f\x5f\x76\x00\xf5\x48\x14\xab\x78\xaa\xea\xd4\xa1\xb8\xdb\xa9\xfb\xb1\xb7\x6a\x6f\x8f\x76\xd2\x8b\xed\x55\xf7\xa4\xf6\xe3\x5f\xbb\xe1\xd8\xeb\x45\x6f\xd5\x9b\x1f\xd5\xfb\x1f\x3f\xa8\xb7\x6f\xde\x7d\xd8\xc6\xbb\x9d\x9a\xc7\xd3\x64\xec\xfc\x0a\xf7\x07\xbb\xe8\x9d\x19\x8f\x6e\xd8\x6f\xff\x33\x8f\xc7\xcb\x58\x3f\x4c\xd6\x2c\xe3\xf4\xe9\x28\x7e\xb6\xfb\x31\x8e\x1f\xb5\xf9\x45\xef\xad\x1f\x8d\xe3\x78\x38\x3c\x8e\xd3\xa2\xd6\x71\xb4\xea\x9e\x16\x3b\xaf\xe2\x68\x65\xc6\xc3\xe3\x64\xe7\x79\xb7\x7f\x1e\x1e\x31\xe0\x0e\x0b\xfe\x0d\xa3\xfc\xee\x86\xf1\xb4\x0c\x0f\x78\x18\xbd\xc1\xa3\x5e\x7e\xde\xb9\xe1\xc1\xe2\x06\x03\xf3\x32\x0d\xc7\xbd\x7f\xb7\x0c\x07\xbb\x8a\x37\x71\xec\x4e\x47\xa3\x42\x68\xff\xb0\xba\x5f\xe3\x46\xfd\xeb\xdf\x58\xf6\x4e\x1d\xf5\xc1\x2a\x31\xdb\xa8\xf5\x79\xd4\x4e\xd3\x38\x6d\xd4\x6f\x71\xb4\x7f\xf6\x4f\xea\xd5\x6b\x05\x54\xdb\xf7\xf6\x7f\x70\x62\xa7\xb5\x87\x8d\xe7\xef\x4f\xce\xd9\xc9\xbb\xdd\x6c\xe2\x68\x70\xde\xe0\x4f\xaf\xd5\x71\x78\x80\x8b\x68\xb2\xcb\x69\x3a\xe2\xf1\x4e\xb9\xc3\xb2\x7d\x0b\xef\x6e\xbd\x82\x23\xf5\xdd\x7f\x5f\xa9\xef\x7e\x5d\x09\x12\xbf\xd6\x26\x8e\x3e\xc6\x71\xf4\xab\x9e\x54\x77\x72\x4a\xd6\x91\x45\xe2\xe8\x27\x81\xf3\x5a\x0d\xe3\xf6\x7e\x7c\x7c\x5a\xff\xb9\x3b\xb9\x3b\xb5\x7f\xde\xc4\x91\x79\x78\x7b\x46\xba\xbd\x7f\x18\x67\xbb\xde\xc4\x7f\x14\x1e\xb8\x11\xff\x5f\x71\x64\xa7\x49\x70\x87\xc1\xee\xe4\xb6\xdf\x03\xfa\x7a\x73\x87\x19\xf1\xc7\x38\x8e\x97\xa7\x47\xab\xf4\x3c\xdb\x05\x39\x3f\x99\x05\x6e\x7c\x80\xa1\x20\x71\x34\x1c\xdd\xa8\x14\x8a\xfa\xee\xe8\xc6\xb7\x0c\x3b\x6f\x76\x1d\x52\xc3\x71\xb1\x93\xd3\xc6\xc2\x7c\x9c\xb7\x7f\x0b\xaf\xe2\xe8\x87\x37\xe5\xfd\xcf\xd6\xfc\x32\x9f\x0e\xeb\x4d\xa8\xeb\xc5\x43\x20\xc1\x79\xf6\x0d\x04\xcf\x82\xf0\x17\x8c\xa2\x79\x78\xbe\x8c\x0d\xc7\xa5\x2a\xe2\xe8\x80\xae\x09\x7f\x61\xd9\x1f\xc6\xde\xfa\x17\x1f\x86\xe0\x02\xc4\xdb\xe2\x29\x8e\x0e\x7d\x69\x02\x9a\x1b\x2c\x9e\x90\x6b\x37\x7c\x8e\x67\xa3\xde\xeb\x83\xbd\xc0\x06\xae\x90\x4b\x37\x6c\x81\x30\xfe\xf8\x82\xed\x3f\x87\x67\xd8\x7a\xa4\x9f\x9a\x22\x90\x17\x4d\x11\xc3\x7a\x73\x1b\xd1\xa7\x0e\x10\xf6\xb7\x1c\x20\xe0\xf5\xe6\x1a\xfc\xef\x3c\xf8\x8c\xbc\xe8\xe4\x0b\xa5\xfb\xcc\xcb\x35\x9d\x2f\x7a\x7a\x37\xbf\x19\xa6\xf5\x46\x75\xe3\xf8\x70\xeb\x41\x3f\xcc\xdf\xc8\xe1\xd3\x2c\x29\x14\x76\xfd\xf6\xf1\xc6\x3a\x50\x18\x5d\xf9\x53\x30\xbc\xf7\x2a\xf8\xf7\x79\x3c\xaa\xd7\x81\xbf\xeb\x15\x71\xea\x88\x9b\x8e\x38\x69\x88\x93\xe4\xcb\x97\x73\xc4\x5d\x41\xdc\x16\xc4\x45\x4a\xdc\x38\xe2\xb4\x23\xce\x6b\xe2\xc4\x10\x37\xa5\xcc\x81\x1f\x63\x89\xdb\x9c\xb8\xc9\x88\x75\x41\x9c\x35\xc4\x85\x26\x6e\x35\x71\xef\x88\xfb\x94\xb8\xc4\xfb\x5c\xec\xe0\xaf\x4c\x89\xfb\x82\xb8\xd6\xc4\x69\x42\xac\x1d\x71\xd5\x13\x1b\x23\x57\x52\x11\x97\x3d\x71\x52\x10\x3b\x4b\x6c\x9d\xd8\xf6\x3d\x71\x0e\x4c\x8d\xf8\x75\x85\xe0\xec\x1b\xe2\xb6\x23\xae\xe1\xb3\x95\xf9\x75\x4f\x9c\x22\x06\xc4\x62\xc5\x1e\x6b\xe0\x7d\x6e\x89\x6b\xe4\xc0\x11\xbb\x9c\xb8\xab\x89\xeb\x44\xfc\x00\xb3\xb6\xc4\x29\xd6\xad\x88\xbb\x84\xb8\xb4\xc4\x59\xb0\x69\x1b\x89\x15\xf8\x10\x7b\xdf\x11\x77\x19\xb1\x85\x6f\x3c\x5b\xf1\x8b\xf1\xb2\x95\xd8\x70\xef\x52\x99\xd7\xd4\x82\xa1\x74\x72\x01\x67\xa2\x43\x9c\x78\x57\x8a\x9d\x1f\x47\x4c\x39\x71\x96\xc8\xe5\x4c\xc8\x49\x49\x9c\xe6\xc4\xa6\x08\x78\x53\xc9\x5b\x69\x88\xab\x9a\xd8\x16\xc4\xb9\x23\x36\x99\xe4\x00\xf1\xbb\x46\x70\xd4\x15\x71\x5b\x4b\xad\x7a\x4d\x5c\x25\xc4\x55\x43\xac\x73\xc1\x5e\x15\x92\xd7\xca\x12\x97\x9a\xb8\x41\xad\x50\x5b\xe4\x18\xb8\x1a\xa9\x01\x6a\x94\xb6\xc4\x05\xf2\x87\x9c\xf4\xc4\xad\x91\xf8\xaa\x9b\x35\xf2\x96\xb8\xaf\x65\xad\xbc\x27\xee\x3a\xe1\x40\x8b\x7a\x64\xb2\x76\x9b\x12\xdb\x4e\x72\x6a\x73\xe1\x55\xe7\x88\xb3\x9e\xd8\xf5\xa1\x36\x45\xc8\x31\xe2\xc0\x73\x2e\xb5\xab\x4a\xb1\x73\x95\xd8\x9a\x8e\x38\xad\xa4\x76\x06\xbc\x4a\x89\xf3\x8e\x38\xd3\xc4\x59\x49\x9c\xb4\xc1\x16\x78\x13\xb9\x90\x27\x8c\x19\x8c\xd7\x32\xbf\x01\x97\x6a\xe1\x32\x6c\x80\x0f\xb9\x46\x6d\x90\x4f\xab\x89\x6d\x2b\x5c\xf1\xbc\xeb\x85\x5f\xba\x26\x36\x65\xc8\xbd\x91\x5c\x01\x0f\xf8\x8a\xdc\xc2\x2e\xc9\x24\x2f\xc8\x39\xea\x83\x9e\xb4\x99\xd4\xd6\xb4\xc4\x55\x4e\x5c\xa0\xdf\x4a\xe1\x35\x9e\x75\x2b\x75\x30\x67\xbb\x8a\x58\xf7\xc4\x4d\x22\x7c\x6e\xd0\x33\xb5\x8c\xb5\x21\xd6\xaa\x25\x76\x19\x71\x96\x49\x2e\x75\x29\xb9\x84\x4f\xe0\x43\x9d\x0a\x70\x0e\x7d\x00\xff\xad\xc4\x94\x57\xa1\xdf\xc0\x8b\x44\xfa\x0d\xf9\x2b\x0b\xa9\x0d\xde\xdb\x46\x7a\xda\x73\x14\x3c\x08\xf9\xcf\x1b\xa9\x6b\x81\xda\x27\x32\xcf\x34\xc2\x5f\x13\xfa\x08\xf8\xf3\x5c\xf8\x5e\x69\x62\xd3\x4b\xae\x80\xb3\x04\xd6\x94\xb8\x00\x7e\xe8\x4e\x2f\x7c\x01\x9f\xa1\x59\xe0\x12\x74\x03\xfc\x4b\x6a\xe2\x06\x38\x5a\x89\x1b\xb9\xf4\xb6\x58\xa7\x22\xae\xa0\x27\x89\xf8\x48\x11\x8f\x91\x1e\x86\x8e\xa1\xaf\xa1\x65\xd0\x14\xc4\x04\x4d\x02\xee\x3a\x0b\x7a\x14\x6a\x83\x3c\x59\x13\x74\xce\x48\x9d\x0a\xc4\x92\x4a\xcf\x22\x77\xe0\x3f\x62\xf0\x39\x82\xf6\x9d\x63\xc8\x24\x8f\xe8\x09\xc4\x8a\xfa\xc2\x47\xa7\x85\x9f\xe0\x34\xf0\x83\x5f\x5d\x2a\x9c\x40\x4f\xc3\xbe\xea\x04\x3f\xf0\xa1\xee\xd0\x65\xe4\x0c\x5c\x29\x2b\xd1\xe3\xb4\x96\x5e\x40\xff\xa3\x76\xda\x48\xef\xb7\xd5\x35\x5f\x79\x7d\xad\x73\x63\xa5\x66\x88\xb1\x31\xd2\x8f\x89\x95\x5e\x04\x1e\xe8\x1a\x7a\x00\x31\x64\xe8\xc1\x52\xf6\x00\xf4\x27\xea\x8a\x3a\x40\x5b\xcb\x44\xfa\x0e\x35\x46\x9e\x91\x1b\x70\x10\xf9\xd3\xe0\x25\xec\xdb\x80\x03\x5a\xaa\x65\x0f\x38\xeb\x05\xb4\x10\x75\x44\xde\xa0\xbd\x59\xc0\x0e\xcd\xc0\x5e\x02\xec\x7d\x45\xec\xb4\xf4\x0d\x7a\xb4\x0e\x7a\xe6\xdf\x65\xd2\x83\xa8\x25\x6a\x54\x38\xf1\x0f\xbe\x62\xaf\xd2\x9d\x70\xc7\xd4\xa2\x07\xe8\x1d\xd4\x20\x0d\x7b\x43\x9a\x8a\x56\x23\x36\x6b\x45\x33\xc1\x49\xf4\xbb\xd7\xeb\x46\xd6\x83\xa6\xd5\x61\x2f\x6a\x83\x56\x43\x03\xbc\x56\xf7\xa2\x3f\x36\xec\x13\x18\xf3\x3d\x15\xf4\x1d\x31\x42\x0f\x10\x27\xe2\x82\x7e\x80\xaf\xd0\x6d\xd4\xd4\xcf\x0b\x7a\x0f\xbd\xa9\x8d\xe8\xba\xd7\xff\x4e\xfa\x04\x9c\x41\x0f\xc1\xce\x6b\x7f\x7f\xd5\x74\xbf\xd7\x18\xe1\x03\xb4\xcb\x63\xb4\xa2\x79\xe0\x17\xf4\xd3\xef\x73\x56\xb8\x85\x71\x60\xf7\xfa\x5a\x48\xbf\x43\x03\x91\x0f\xec\x0d\xa8\x29\xb8\x80\xfd\x06\x7b\x32\xe2\x82\x8e\x40\xff\xc0\x49\xf4\x4a\x56\x48\x2f\x63\x9f\x00\x2e\xd4\x1e\x9a\x82\x7a\xfb\x9a\xb4\xa2\x3b\xa8\x5d\x7e\xfe\x1e\x80\x86\x1a\xe9\x51\xf4\x38\x78\x97\x86\x7d\x0d\xba\xe9\xe7\x64\xb2\x3e\x7a\xd8\xd7\xac\x90\x58\xbb\xa0\x09\x2e\x68\x51\x13\xf6\x23\xf4\x2a\xd6\x44\xae\xd2\x46\x72\xd9\x84\x3e\x05\x8f\xc0\x5f\xaf\x11\xc0\xab\x85\xbf\xc8\x3b\xf8\x5c\x36\xe2\x1f\xf9\xc2\x1c\xe0\xd1\x67\x8d\x0a\xba\x65\xc3\x7e\x88\xb9\xe8\x1b\xf4\x10\xf4\xd6\xf3\x30\x11\xde\x21\xc7\x2e\xe8\xca\xed\x77\x13\x2e\xe8\x36\xe2\x45\x5f\x43\x13\x50\xef\xe4\x32\x6f\xf5\xd9\xb1\xef\xfa\xa1\x16\x4e\x24\x5f\x3a\xe9\x9d\xcf\x2d\x37\x27\xc5\x38\x8a\x7e\xff\xad\x77\x17\x47\x38\xaa\x5e\x0e\xc0\xab\xbb\x38\xda\xf8\xd3\xcd\x57\xd6\xc4\x72\x7f\xf1\x87\x9e\xdb\xe5\xfc\xa9\xe7\x72\xb6\xfc\x1a\xd0\x6f\x1d\xdf\x2e\xa7\x2e\x7f\x6c\xba\x3a\x3a\x7f\xd3\x62\x3e\x8e\x0e\xaf\xd4\x0d\xe4\xff\x07\x00\x00\xff\xff\x42\x68\xcd\x3a\x00\x10\x00\x00")

func bindataMetaGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataMetaGo,
		"meta.go",
	)
}

func bindataMetaGo() (*asset, error) {
	bytes, err := bindataMetaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "meta.go",
		size:        12288,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1630678179, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"config.json":   bindataConfigJson,
	"director.json": bindataDirectorJson,
	"meta.go":       bindataMetaGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"config.json":   {Func: bindataConfigJson, Children: map[string]*bintree{}},
	"director.json": {Func: bindataDirectorJson, Children: map[string]*bintree{}},
	"meta.go":       {Func: bindataMetaGo, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
