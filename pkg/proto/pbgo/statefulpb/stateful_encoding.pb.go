// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.3
// source: datadog/stateful/stateful_encoding.proto

package statefulpb

import (
	context "context"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// See Status Code Mappings section below for more details
type BatchStatus_Status int32

const (
	BatchStatus_UNKNOWN BatchStatus_Status = 0
	BatchStatus_OK      BatchStatus_Status = 1
)

// Enum value maps for BatchStatus_Status.
var (
	BatchStatus_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
	}
	BatchStatus_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"OK":      1,
	}
)

func (x BatchStatus_Status) Enum() *BatchStatus_Status {
	p := new(BatchStatus_Status)
	*p = x
	return p
}

func (x BatchStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_datadog_stateful_stateful_encoding_proto_enumTypes[0].Descriptor()
}

func (BatchStatus_Status) Type() protoreflect.EnumType {
	return &file_datadog_stateful_stateful_encoding_proto_enumTypes[0]
}

func (x BatchStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchStatus_Status.Descriptor instead.
func (BatchStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{10, 0}
}

type DictEntryDefine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictEntryDefine) Reset() {
	*x = DictEntryDefine{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictEntryDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictEntryDefine) ProtoMessage() {}

func (x *DictEntryDefine) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictEntryDefine.ProtoReflect.Descriptor instead.
func (*DictEntryDefine) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{0}
}

func (x *DictEntryDefine) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DictEntryDefine) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DictEntryDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictEntryDelete) Reset() {
	*x = DictEntryDelete{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictEntryDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictEntryDelete) ProtoMessage() {}

func (x *DictEntryDelete) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictEntryDelete.ProtoReflect.Descriptor instead.
func (*DictEntryDelete) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{1}
}

func (x *DictEntryDelete) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// pos_list is used to indicate where dynamic values should be inserted
// it's more accurate than a marker
type PatternDefine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatternId     uint64                 `protobuf:"varint,1,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	Template      string                 `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	ParamCount    uint32                 `protobuf:"varint,3,opt,name=param_count,json=paramCount,proto3" json:"param_count,omitempty"`
	PosList       []uint32               `protobuf:"varint,4,rep,packed,name=pos_list,json=posList,proto3" json:"pos_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatternDefine) Reset() {
	*x = PatternDefine{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatternDefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternDefine) ProtoMessage() {}

func (x *PatternDefine) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternDefine.ProtoReflect.Descriptor instead.
func (*PatternDefine) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{2}
}

func (x *PatternDefine) GetPatternId() uint64 {
	if x != nil {
		return x.PatternId
	}
	return 0
}

func (x *PatternDefine) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *PatternDefine) GetParamCount() uint32 {
	if x != nil {
		return x.ParamCount
	}
	return 0
}

func (x *PatternDefine) GetPosList() []uint32 {
	if x != nil {
		return x.PosList
	}
	return nil
}

type PatternUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatternId     uint64                 `protobuf:"varint,1,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	NewTemplate   string                 `protobuf:"bytes,2,opt,name=new_template,json=newTemplate,proto3" json:"new_template,omitempty"`
	ParamCount    uint32                 `protobuf:"varint,3,opt,name=param_count,json=paramCount,proto3" json:"param_count,omitempty"`
	PosList       []uint32               `protobuf:"varint,4,rep,packed,name=pos_list,json=posList,proto3" json:"pos_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatternUpdate) Reset() {
	*x = PatternUpdate{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatternUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternUpdate) ProtoMessage() {}

func (x *PatternUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternUpdate.ProtoReflect.Descriptor instead.
func (*PatternUpdate) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{3}
}

func (x *PatternUpdate) GetPatternId() uint64 {
	if x != nil {
		return x.PatternId
	}
	return 0
}

func (x *PatternUpdate) GetNewTemplate() string {
	if x != nil {
		return x.NewTemplate
	}
	return ""
}

func (x *PatternUpdate) GetParamCount() uint32 {
	if x != nil {
		return x.ParamCount
	}
	return 0
}

func (x *PatternUpdate) GetPosList() []uint32 {
	if x != nil {
		return x.PosList
	}
	return nil
}

type PatternDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatternId     uint64                 `protobuf:"varint,1,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatternDelete) Reset() {
	*x = PatternDelete{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatternDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternDelete) ProtoMessage() {}

func (x *PatternDelete) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternDelete.ProtoReflect.Descriptor instead.
func (*PatternDelete) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{4}
}

func (x *PatternDelete) GetPatternId() uint64 {
	if x != nil {
		return x.PatternId
	}
	return 0
}

type Log struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Log_Structured
	//	*Log_Raw
	Content       isLog_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{5}
}

func (x *Log) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Log) GetContent() isLog_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Log) GetStructured() *StructuredLog {
	if x != nil {
		if x, ok := x.Content.(*Log_Structured); ok {
			return x.Structured
		}
	}
	return nil
}

func (x *Log) GetRaw() string {
	if x != nil {
		if x, ok := x.Content.(*Log_Raw); ok {
			return x.Raw
		}
	}
	return ""
}

type isLog_Content interface {
	isLog_Content()
}

type Log_Structured struct {
	Structured *StructuredLog `protobuf:"bytes,2,opt,name=structured,proto3,oneof"`
}

type Log_Raw struct {
	Raw string `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

func (*Log_Structured) isLog_Content() {}

func (*Log_Raw) isLog_Content() {}

type StructuredLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PatternId     uint64                 `protobuf:"varint,1,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	DynamicValues []*DynamicValue        `protobuf:"bytes,2,rep,name=dynamic_values,json=dynamicValues,proto3" json:"dynamic_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructuredLog) Reset() {
	*x = StructuredLog{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructuredLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredLog) ProtoMessage() {}

func (x *StructuredLog) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredLog.ProtoReflect.Descriptor instead.
func (*StructuredLog) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{6}
}

func (x *StructuredLog) GetPatternId() uint64 {
	if x != nil {
		return x.PatternId
	}
	return 0
}

func (x *StructuredLog) GetDynamicValues() []*DynamicValue {
	if x != nil {
		return x.DynamicValues
	}
	return nil
}

// TODO not sure we need numeric type
type DynamicValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*DynamicValue_IntValue
	//	*DynamicValue_FloatValue
	//	*DynamicValue_StringValue
	//	*DynamicValue_DictIndex
	Value         isDynamicValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicValue) Reset() {
	*x = DynamicValue{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValue) ProtoMessage() {}

func (x *DynamicValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValue.ProtoReflect.Descriptor instead.
func (*DynamicValue) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{7}
}

func (x *DynamicValue) GetValue() isDynamicValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*DynamicValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *DynamicValue) GetFloatValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*DynamicValue_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *DynamicValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*DynamicValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *DynamicValue) GetDictIndex() uint64 {
	if x != nil {
		if x, ok := x.Value.(*DynamicValue_DictIndex); ok {
			return x.DictIndex
		}
	}
	return 0
}

type isDynamicValue_Value interface {
	isDynamicValue_Value()
}

type DynamicValue_IntValue struct {
	IntValue int64 `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof"`
}

type DynamicValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type DynamicValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type DynamicValue_DictIndex struct {
	DictIndex uint64 `protobuf:"varint,4,opt,name=dict_index,json=dictIndex,proto3,oneof"`
}

func (*DynamicValue_IntValue) isDynamicValue_Value() {}

func (*DynamicValue_FloatValue) isDynamicValue_Value() {}

func (*DynamicValue_StringValue) isDynamicValue_Value() {}

func (*DynamicValue_DictIndex) isDynamicValue_Value() {}

type Datum struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*Datum_PatternDefine
	//	*Datum_PatternUpdate
	//	*Datum_PatternDelete
	//	*Datum_DictEntryDefine
	//	*Datum_DictEntryDelete
	//	*Datum_Logs
	Data          isDatum_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datum) Reset() {
	*x = Datum{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{8}
}

func (x *Datum) GetData() isDatum_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Datum) GetPatternDefine() *PatternDefine {
	if x != nil {
		if x, ok := x.Data.(*Datum_PatternDefine); ok {
			return x.PatternDefine
		}
	}
	return nil
}

func (x *Datum) GetPatternUpdate() *PatternUpdate {
	if x != nil {
		if x, ok := x.Data.(*Datum_PatternUpdate); ok {
			return x.PatternUpdate
		}
	}
	return nil
}

func (x *Datum) GetPatternDelete() *PatternDelete {
	if x != nil {
		if x, ok := x.Data.(*Datum_PatternDelete); ok {
			return x.PatternDelete
		}
	}
	return nil
}

func (x *Datum) GetDictEntryDefine() *DictEntryDefine {
	if x != nil {
		if x, ok := x.Data.(*Datum_DictEntryDefine); ok {
			return x.DictEntryDefine
		}
	}
	return nil
}

func (x *Datum) GetDictEntryDelete() *DictEntryDelete {
	if x != nil {
		if x, ok := x.Data.(*Datum_DictEntryDelete); ok {
			return x.DictEntryDelete
		}
	}
	return nil
}

func (x *Datum) GetLogs() *Log {
	if x != nil {
		if x, ok := x.Data.(*Datum_Logs); ok {
			return x.Logs
		}
	}
	return nil
}

type isDatum_Data interface {
	isDatum_Data()
}

type Datum_PatternDefine struct {
	PatternDefine *PatternDefine `protobuf:"bytes,1,opt,name=pattern_define,json=patternDefine,proto3,oneof"`
}

type Datum_PatternUpdate struct {
	PatternUpdate *PatternUpdate `protobuf:"bytes,2,opt,name=pattern_update,json=patternUpdate,proto3,oneof"`
}

type Datum_PatternDelete struct {
	PatternDelete *PatternDelete `protobuf:"bytes,3,opt,name=pattern_delete,json=patternDelete,proto3,oneof"`
}

type Datum_DictEntryDefine struct {
	DictEntryDefine *DictEntryDefine `protobuf:"bytes,4,opt,name=dict_entry_define,json=dictEntryDefine,proto3,oneof"`
}

type Datum_DictEntryDelete struct {
	DictEntryDelete *DictEntryDelete `protobuf:"bytes,5,opt,name=dict_entry_delete,json=dictEntryDelete,proto3,oneof"`
}

type Datum_Logs struct {
	Logs *Log `protobuf:"bytes,6,opt,name=logs,proto3,oneof"`
}

func (*Datum_PatternDefine) isDatum_Data() {}

func (*Datum_PatternUpdate) isDatum_Data() {}

func (*Datum_PatternDelete) isDatum_Data() {}

func (*Datum_DictEntryDefine) isDatum_Data() {}

func (*Datum_DictEntryDelete) isDatum_Data() {}

func (*Datum_Logs) isDatum_Data() {}

// data is sequence of pattern/dictionary changes + logs
// the ordering is significant, must be processed in order
type StatefulBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       uint32                 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Data          []*Datum               `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatefulBatch) Reset() {
	*x = StatefulBatch{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatefulBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulBatch) ProtoMessage() {}

func (x *StatefulBatch) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulBatch.ProtoReflect.Descriptor instead.
func (*StatefulBatch) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{9}
}

func (x *StatefulBatch) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *StatefulBatch) GetData() []*Datum {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       int32                  `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Status        BatchStatus_Status     `protobuf:"varint,2,opt,name=status,proto3,enum=intake.BatchStatus_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchStatus) Reset() {
	*x = BatchStatus{}
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStatus) ProtoMessage() {}

func (x *BatchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_stateful_stateful_encoding_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStatus.ProtoReflect.Descriptor instead.
func (*BatchStatus) Descriptor() ([]byte, []int) {
	return file_datadog_stateful_stateful_encoding_proto_rawDescGZIP(), []int{10}
}

func (x *BatchStatus) GetBatchId() int32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *BatchStatus) GetStatus() BatchStatus_Status {
	if x != nil {
		return x.Status
	}
	return BatchStatus_UNKNOWN
}

var File_datadog_stateful_stateful_encoding_proto protoreflect.FileDescriptor

const file_datadog_stateful_stateful_encoding_proto_rawDesc = "" +
	"\n" +
	"(datadog/stateful/stateful_encoding.proto\x12\x06intake\"7\n" +
	"\x0fDictEntryDefine\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"!\n" +
	"\x0fDictEntryDelete\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\"\x86\x01\n" +
	"\rPatternDefine\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x01 \x01(\x04R\tpatternId\x12\x1a\n" +
	"\btemplate\x18\x02 \x01(\tR\btemplate\x12\x1f\n" +
	"\vparam_count\x18\x03 \x01(\rR\n" +
	"paramCount\x12\x19\n" +
	"\bpos_list\x18\x04 \x03(\rR\aposList\"\x8d\x01\n" +
	"\rPatternUpdate\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x01 \x01(\x04R\tpatternId\x12!\n" +
	"\fnew_template\x18\x02 \x01(\tR\vnewTemplate\x12\x1f\n" +
	"\vparam_count\x18\x03 \x01(\rR\n" +
	"paramCount\x12\x19\n" +
	"\bpos_list\x18\x04 \x03(\rR\aposList\".\n" +
	"\rPatternDelete\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x01 \x01(\x04R\tpatternId\"{\n" +
	"\x03Log\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x127\n" +
	"\n" +
	"structured\x18\x02 \x01(\v2\x15.intake.StructuredLogH\x00R\n" +
	"structured\x12\x12\n" +
	"\x03raw\x18\x03 \x01(\tH\x00R\x03rawB\t\n" +
	"\acontent\"k\n" +
	"\rStructuredLog\x12\x1d\n" +
	"\n" +
	"pattern_id\x18\x01 \x01(\x04R\tpatternId\x12;\n" +
	"\x0edynamic_values\x18\x02 \x03(\v2\x14.intake.DynamicValueR\rdynamicValues\"\x9f\x01\n" +
	"\fDynamicValue\x12\x1d\n" +
	"\tint_value\x18\x01 \x01(\x03H\x00R\bintValue\x12!\n" +
	"\vfloat_value\x18\x02 \x01(\x01H\x00R\n" +
	"floatValue\x12#\n" +
	"\fstring_value\x18\x03 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"dict_index\x18\x04 \x01(\x04H\x00R\tdictIndexB\a\n" +
	"\x05value\"\x80\x03\n" +
	"\x05Datum\x12>\n" +
	"\x0epattern_define\x18\x01 \x01(\v2\x15.intake.PatternDefineH\x00R\rpatternDefine\x12>\n" +
	"\x0epattern_update\x18\x02 \x01(\v2\x15.intake.PatternUpdateH\x00R\rpatternUpdate\x12>\n" +
	"\x0epattern_delete\x18\x03 \x01(\v2\x15.intake.PatternDeleteH\x00R\rpatternDelete\x12E\n" +
	"\x11dict_entry_define\x18\x04 \x01(\v2\x17.intake.DictEntryDefineH\x00R\x0fdictEntryDefine\x12E\n" +
	"\x11dict_entry_delete\x18\x05 \x01(\v2\x17.intake.DictEntryDeleteH\x00R\x0fdictEntryDelete\x12!\n" +
	"\x04logs\x18\x06 \x01(\v2\v.intake.LogH\x00R\x04logsB\x06\n" +
	"\x04data\"M\n" +
	"\rStatefulBatch\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\rR\abatchId\x12!\n" +
	"\x04data\x18\x02 \x03(\v2\r.intake.DatumR\x04data\"{\n" +
	"\vBatchStatus\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\x05R\abatchId\x122\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1a.intake.BatchStatus.StatusR\x06status\"\x1d\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x06\n" +
	"\x02OK\x10\x012S\n" +
	"\x13StatefulLogsService\x12<\n" +
	"\n" +
	"LogsStream\x12\x15.intake.StatefulBatch\x1a\x13.intake.BatchStatus(\x010\x01B\x1bZ\x19pkg/proto/pbgo/statefulpbb\x06proto3"

var (
	file_datadog_stateful_stateful_encoding_proto_rawDescOnce sync.Once
	file_datadog_stateful_stateful_encoding_proto_rawDescData []byte
)

func file_datadog_stateful_stateful_encoding_proto_rawDescGZIP() []byte {
	file_datadog_stateful_stateful_encoding_proto_rawDescOnce.Do(func() {
		file_datadog_stateful_stateful_encoding_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_stateful_stateful_encoding_proto_rawDesc), len(file_datadog_stateful_stateful_encoding_proto_rawDesc)))
	})
	return file_datadog_stateful_stateful_encoding_proto_rawDescData
}

var file_datadog_stateful_stateful_encoding_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_datadog_stateful_stateful_encoding_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_datadog_stateful_stateful_encoding_proto_goTypes = []any{
	(BatchStatus_Status)(0), // 0: intake.BatchStatus.Status
	(*DictEntryDefine)(nil), // 1: intake.DictEntryDefine
	(*DictEntryDelete)(nil), // 2: intake.DictEntryDelete
	(*PatternDefine)(nil),   // 3: intake.PatternDefine
	(*PatternUpdate)(nil),   // 4: intake.PatternUpdate
	(*PatternDelete)(nil),   // 5: intake.PatternDelete
	(*Log)(nil),             // 6: intake.Log
	(*StructuredLog)(nil),   // 7: intake.StructuredLog
	(*DynamicValue)(nil),    // 8: intake.DynamicValue
	(*Datum)(nil),           // 9: intake.Datum
	(*StatefulBatch)(nil),   // 10: intake.StatefulBatch
	(*BatchStatus)(nil),     // 11: intake.BatchStatus
}
var file_datadog_stateful_stateful_encoding_proto_depIdxs = []int32{
	7,  // 0: intake.Log.structured:type_name -> intake.StructuredLog
	8,  // 1: intake.StructuredLog.dynamic_values:type_name -> intake.DynamicValue
	3,  // 2: intake.Datum.pattern_define:type_name -> intake.PatternDefine
	4,  // 3: intake.Datum.pattern_update:type_name -> intake.PatternUpdate
	5,  // 4: intake.Datum.pattern_delete:type_name -> intake.PatternDelete
	1,  // 5: intake.Datum.dict_entry_define:type_name -> intake.DictEntryDefine
	2,  // 6: intake.Datum.dict_entry_delete:type_name -> intake.DictEntryDelete
	6,  // 7: intake.Datum.logs:type_name -> intake.Log
	9,  // 8: intake.StatefulBatch.data:type_name -> intake.Datum
	0,  // 9: intake.BatchStatus.status:type_name -> intake.BatchStatus.Status
	10, // 10: intake.StatefulLogsService.LogsStream:input_type -> intake.StatefulBatch
	11, // 11: intake.StatefulLogsService.LogsStream:output_type -> intake.BatchStatus
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_datadog_stateful_stateful_encoding_proto_init() }
func file_datadog_stateful_stateful_encoding_proto_init() {
	if File_datadog_stateful_stateful_encoding_proto != nil {
		return
	}
	file_datadog_stateful_stateful_encoding_proto_msgTypes[5].OneofWrappers = []any{
		(*Log_Structured)(nil),
		(*Log_Raw)(nil),
	}
	file_datadog_stateful_stateful_encoding_proto_msgTypes[7].OneofWrappers = []any{
		(*DynamicValue_IntValue)(nil),
		(*DynamicValue_FloatValue)(nil),
		(*DynamicValue_StringValue)(nil),
		(*DynamicValue_DictIndex)(nil),
	}
	file_datadog_stateful_stateful_encoding_proto_msgTypes[8].OneofWrappers = []any{
		(*Datum_PatternDefine)(nil),
		(*Datum_PatternUpdate)(nil),
		(*Datum_PatternDelete)(nil),
		(*Datum_DictEntryDefine)(nil),
		(*Datum_DictEntryDelete)(nil),
		(*Datum_Logs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_stateful_stateful_encoding_proto_rawDesc), len(file_datadog_stateful_stateful_encoding_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datadog_stateful_stateful_encoding_proto_goTypes,
		DependencyIndexes: file_datadog_stateful_stateful_encoding_proto_depIdxs,
		EnumInfos:         file_datadog_stateful_stateful_encoding_proto_enumTypes,
		MessageInfos:      file_datadog_stateful_stateful_encoding_proto_msgTypes,
	}.Build()
	File_datadog_stateful_stateful_encoding_proto = out.File
	file_datadog_stateful_stateful_encoding_proto_goTypes = nil
	file_datadog_stateful_stateful_encoding_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatefulLogsServiceClient is the client API for StatefulLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatefulLogsServiceClient interface {
	LogsStream(ctx context.Context, opts ...grpc.CallOption) (StatefulLogsService_LogsStreamClient, error)
}

type statefulLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatefulLogsServiceClient(cc grpc.ClientConnInterface) StatefulLogsServiceClient {
	return &statefulLogsServiceClient{cc}
}

func (c *statefulLogsServiceClient) LogsStream(ctx context.Context, opts ...grpc.CallOption) (StatefulLogsService_LogsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StatefulLogsService_serviceDesc.Streams[0], "/intake.StatefulLogsService/LogsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &statefulLogsServiceLogsStreamClient{stream}
	return x, nil
}

type StatefulLogsService_LogsStreamClient interface {
	Send(*StatefulBatch) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type statefulLogsServiceLogsStreamClient struct {
	grpc.ClientStream
}

func (x *statefulLogsServiceLogsStreamClient) Send(m *StatefulBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statefulLogsServiceLogsStreamClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatefulLogsServiceServer is the server API for StatefulLogsService service.
type StatefulLogsServiceServer interface {
	LogsStream(StatefulLogsService_LogsStreamServer) error
}

// UnimplementedStatefulLogsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatefulLogsServiceServer struct {
}

func (*UnimplementedStatefulLogsServiceServer) LogsStream(StatefulLogsService_LogsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogsStream not implemented")
}

func RegisterStatefulLogsServiceServer(s *grpc.Server, srv StatefulLogsServiceServer) {
	s.RegisterService(&_StatefulLogsService_serviceDesc, srv)
}

func _StatefulLogsService_LogsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatefulLogsServiceServer).LogsStream(&statefulLogsServiceLogsStreamServer{stream})
}

type StatefulLogsService_LogsStreamServer interface {
	Send(*BatchStatus) error
	Recv() (*StatefulBatch, error)
	grpc.ServerStream
}

type statefulLogsServiceLogsStreamServer struct {
	grpc.ServerStream
}

func (x *statefulLogsServiceLogsStreamServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statefulLogsServiceLogsStreamServer) Recv() (*StatefulBatch, error) {
	m := new(StatefulBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StatefulLogsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intake.StatefulLogsService",
	HandlerType: (*StatefulLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogsStream",
			Handler:       _StatefulLogsService_LogsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datadog/stateful/stateful_encoding.proto",
}
