// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: datadog/api/v1/api.proto

package core

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_datadog_api_v1_api_proto protoreflect.FileDescriptor

const file_datadog_api_v1_api_proto_rawDesc = "" +
	"\n" +
	"\x18datadog/api/v1/api.proto\x12\x0edatadog.api.v1\x1a\x1cdatadog/model/v1/model.proto\x1a%datadog/remoteagent/remoteagent.proto\x1a'datadog/remoteconfig/remoteconfig.proto\x1a'datadog/workloadmeta/workloadmeta.proto\x1a)datadog/autodiscovery/autodiscovery.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto2q\n" +
	"\x05Agent\x12h\n" +
	"\vGetHostname\x12!.datadog.model.v1.HostnameRequest\x1a\x1f.datadog.model.v1.HostnameReply\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/v1/grpc/host2\xd5\x0f\n" +
	"\vAgentSecure\x12\x8f\x01\n" +
	"\x14TaggerStreamEntities\x12#.datadog.model.v1.StreamTagsRequest\x1a$.datadog.model.v1.StreamTagsResponse\"*\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/v1/grpc/tagger/stream_entities0\x01\x12\xe5\x01\n" +
	"'TaggerGenerateContainerIDFromOriginInfo\x12:.datadog.model.v1.GenerateContainerIDFromOriginInfoRequest\x1a;.datadog.model.v1.GenerateContainerIDFromOriginInfoResponse\"A\x82\xd3\xe4\x93\x02;:\x01*\"6/v1/grpc/tagger/generate_container_id_from_origin_info\x12\x89\x01\n" +
	"\x11TaggerFetchEntity\x12$.datadog.model.v1.FetchEntityRequest\x1a%.datadog.model.v1.FetchEntityResponse\"'\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/v1/grpc/tagger/fetch_entity\x12\x9b\x01\n" +
	"\x17DogstatsdCaptureTrigger\x12'.datadog.model.v1.CaptureTriggerRequest\x1a(.datadog.model.v1.CaptureTriggerResponse\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/v1/grpc/dogstatsd/capture/trigger\x12\x8c\x01\n" +
	"\x17DogstatsdSetTaggerState\x12\x1d.datadog.model.v1.TaggerState\x1a%.datadog.model.v1.TaggerStateResponse\"+\x82\xd3\xe4\x93\x02%:\x01*\" /v1/grpc/dogstatsd/capture/state\x12\x8f\x01\n" +
	"\x10ClientGetConfigs\x12'.datadog.config.ClientGetConfigsRequest\x1a(.datadog.config.ClientGetConfigsResponse\"(\x82\xd3\xe4\x93\x02\":\x01*\"\x1d/v1/grpc/remoteconfig/configs\x12x\n" +
	"\x0eGetConfigState\x12\x16.google.protobuf.Empty\x1a&.datadog.config.GetStateConfigResponse\"&\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/v1/grpc/remoteconfig/state\x12\x94\x01\n" +
	"\x12ClientGetConfigsHA\x12'.datadog.config.ClientGetConfigsRequest\x1a(.datadog.config.ClientGetConfigsResponse\"+\x82\xd3\xe4\x93\x02%:\x01*\" /v1/grpc/remoteconfig/configs_ha\x12}\n" +
	"\x10GetConfigStateHA\x12\x16.google.protobuf.Empty\x1a&.datadog.config.GetStateConfigResponse\")\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/v1/grpc/remoteconfig/state_ha\x12\xb3\x01\n" +
	"\x1aWorkloadmetaStreamEntities\x12/.datadog.workloadmeta.WorkloadmetaStreamRequest\x1a0.datadog.workloadmeta.WorkloadmetaStreamResponse\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/v1/grpc/workloadmeta/stream_entities0\x01\x12\xaf\x01\n" +
	"\x13RegisterRemoteAgent\x12/.datadog.remoteagent.RegisterRemoteAgentRequest\x1a0.datadog.remoteagent.RegisterRemoteAgentResponse\"5\x82\xd3\xe4\x93\x02/:\x01*\"*/v1/grpc/remoteagent/register_remote_agent\x12\x9b\x01\n" +
	"\x19AutodiscoveryStreamConfig\x12\x16.google.protobuf.Empty\x1a2.datadog.autodiscovery.AutodiscoveryStreamResponse\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/v1/grpc/autodiscovery/stream_configs0\x01\x12k\n" +
	"\vGetHostTags\x12 .datadog.model.v1.HostTagRequest\x1a\x1e.datadog.model.v1.HostTagReply\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/v1/grpc/host_tags2\xcb\x02\n" +
	"\vRemoteAgent\x12o\n" +
	"\x10GetStatusDetails\x12,.datadog.remoteagent.GetStatusDetailsRequest\x1a-.datadog.remoteagent.GetStatusDetailsResponse\x12f\n" +
	"\rGetFlareFiles\x12).datadog.remoteagent.GetFlareFilesRequest\x1a*.datadog.remoteagent.GetFlareFilesResponse\x12c\n" +
	"\fGetTelemetry\x12(.datadog.remoteagent.GetTelemetryRequest\x1a).datadog.remoteagent.GetTelemetryResponseB\x15Z\x13pkg/proto/pbgo/coreb\x06proto3"

var file_datadog_api_v1_api_proto_goTypes = []any{
	(*HostnameRequest)(nil),                           // 0: datadog.model.v1.HostnameRequest
	(*StreamTagsRequest)(nil),                         // 1: datadog.model.v1.StreamTagsRequest
	(*GenerateContainerIDFromOriginInfoRequest)(nil),  // 2: datadog.model.v1.GenerateContainerIDFromOriginInfoRequest
	(*FetchEntityRequest)(nil),                        // 3: datadog.model.v1.FetchEntityRequest
	(*CaptureTriggerRequest)(nil),                     // 4: datadog.model.v1.CaptureTriggerRequest
	(*TaggerState)(nil),                               // 5: datadog.model.v1.TaggerState
	(*ClientGetConfigsRequest)(nil),                   // 6: datadog.config.ClientGetConfigsRequest
	(*empty.Empty)(nil),                               // 7: google.protobuf.Empty
	(*WorkloadmetaStreamRequest)(nil),                 // 8: datadog.workloadmeta.WorkloadmetaStreamRequest
	(*RegisterRemoteAgentRequest)(nil),                // 9: datadog.remoteagent.RegisterRemoteAgentRequest
	(*HostTagRequest)(nil),                            // 10: datadog.model.v1.HostTagRequest
	(*GetStatusDetailsRequest)(nil),                   // 11: datadog.remoteagent.GetStatusDetailsRequest
	(*GetFlareFilesRequest)(nil),                      // 12: datadog.remoteagent.GetFlareFilesRequest
	(*GetTelemetryRequest)(nil),                       // 13: datadog.remoteagent.GetTelemetryRequest
	(*HostnameReply)(nil),                             // 14: datadog.model.v1.HostnameReply
	(*StreamTagsResponse)(nil),                        // 15: datadog.model.v1.StreamTagsResponse
	(*GenerateContainerIDFromOriginInfoResponse)(nil), // 16: datadog.model.v1.GenerateContainerIDFromOriginInfoResponse
	(*FetchEntityResponse)(nil),                       // 17: datadog.model.v1.FetchEntityResponse
	(*CaptureTriggerResponse)(nil),                    // 18: datadog.model.v1.CaptureTriggerResponse
	(*TaggerStateResponse)(nil),                       // 19: datadog.model.v1.TaggerStateResponse
	(*ClientGetConfigsResponse)(nil),                  // 20: datadog.config.ClientGetConfigsResponse
	(*GetStateConfigResponse)(nil),                    // 21: datadog.config.GetStateConfigResponse
	(*WorkloadmetaStreamResponse)(nil),                // 22: datadog.workloadmeta.WorkloadmetaStreamResponse
	(*RegisterRemoteAgentResponse)(nil),               // 23: datadog.remoteagent.RegisterRemoteAgentResponse
	(*AutodiscoveryStreamResponse)(nil),               // 24: datadog.autodiscovery.AutodiscoveryStreamResponse
	(*HostTagReply)(nil),                              // 25: datadog.model.v1.HostTagReply
	(*GetStatusDetailsResponse)(nil),                  // 26: datadog.remoteagent.GetStatusDetailsResponse
	(*GetFlareFilesResponse)(nil),                     // 27: datadog.remoteagent.GetFlareFilesResponse
	(*GetTelemetryResponse)(nil),                      // 28: datadog.remoteagent.GetTelemetryResponse
}
var file_datadog_api_v1_api_proto_depIdxs = []int32{
	0,  // 0: datadog.api.v1.Agent.GetHostname:input_type -> datadog.model.v1.HostnameRequest
	1,  // 1: datadog.api.v1.AgentSecure.TaggerStreamEntities:input_type -> datadog.model.v1.StreamTagsRequest
	2,  // 2: datadog.api.v1.AgentSecure.TaggerGenerateContainerIDFromOriginInfo:input_type -> datadog.model.v1.GenerateContainerIDFromOriginInfoRequest
	3,  // 3: datadog.api.v1.AgentSecure.TaggerFetchEntity:input_type -> datadog.model.v1.FetchEntityRequest
	4,  // 4: datadog.api.v1.AgentSecure.DogstatsdCaptureTrigger:input_type -> datadog.model.v1.CaptureTriggerRequest
	5,  // 5: datadog.api.v1.AgentSecure.DogstatsdSetTaggerState:input_type -> datadog.model.v1.TaggerState
	6,  // 6: datadog.api.v1.AgentSecure.ClientGetConfigs:input_type -> datadog.config.ClientGetConfigsRequest
	7,  // 7: datadog.api.v1.AgentSecure.GetConfigState:input_type -> google.protobuf.Empty
	6,  // 8: datadog.api.v1.AgentSecure.ClientGetConfigsHA:input_type -> datadog.config.ClientGetConfigsRequest
	7,  // 9: datadog.api.v1.AgentSecure.GetConfigStateHA:input_type -> google.protobuf.Empty
	8,  // 10: datadog.api.v1.AgentSecure.WorkloadmetaStreamEntities:input_type -> datadog.workloadmeta.WorkloadmetaStreamRequest
	9,  // 11: datadog.api.v1.AgentSecure.RegisterRemoteAgent:input_type -> datadog.remoteagent.RegisterRemoteAgentRequest
	7,  // 12: datadog.api.v1.AgentSecure.AutodiscoveryStreamConfig:input_type -> google.protobuf.Empty
	10, // 13: datadog.api.v1.AgentSecure.GetHostTags:input_type -> datadog.model.v1.HostTagRequest
	11, // 14: datadog.api.v1.RemoteAgent.GetStatusDetails:input_type -> datadog.remoteagent.GetStatusDetailsRequest
	12, // 15: datadog.api.v1.RemoteAgent.GetFlareFiles:input_type -> datadog.remoteagent.GetFlareFilesRequest
	13, // 16: datadog.api.v1.RemoteAgent.GetTelemetry:input_type -> datadog.remoteagent.GetTelemetryRequest
	14, // 17: datadog.api.v1.Agent.GetHostname:output_type -> datadog.model.v1.HostnameReply
	15, // 18: datadog.api.v1.AgentSecure.TaggerStreamEntities:output_type -> datadog.model.v1.StreamTagsResponse
	16, // 19: datadog.api.v1.AgentSecure.TaggerGenerateContainerIDFromOriginInfo:output_type -> datadog.model.v1.GenerateContainerIDFromOriginInfoResponse
	17, // 20: datadog.api.v1.AgentSecure.TaggerFetchEntity:output_type -> datadog.model.v1.FetchEntityResponse
	18, // 21: datadog.api.v1.AgentSecure.DogstatsdCaptureTrigger:output_type -> datadog.model.v1.CaptureTriggerResponse
	19, // 22: datadog.api.v1.AgentSecure.DogstatsdSetTaggerState:output_type -> datadog.model.v1.TaggerStateResponse
	20, // 23: datadog.api.v1.AgentSecure.ClientGetConfigs:output_type -> datadog.config.ClientGetConfigsResponse
	21, // 24: datadog.api.v1.AgentSecure.GetConfigState:output_type -> datadog.config.GetStateConfigResponse
	20, // 25: datadog.api.v1.AgentSecure.ClientGetConfigsHA:output_type -> datadog.config.ClientGetConfigsResponse
	21, // 26: datadog.api.v1.AgentSecure.GetConfigStateHA:output_type -> datadog.config.GetStateConfigResponse
	22, // 27: datadog.api.v1.AgentSecure.WorkloadmetaStreamEntities:output_type -> datadog.workloadmeta.WorkloadmetaStreamResponse
	23, // 28: datadog.api.v1.AgentSecure.RegisterRemoteAgent:output_type -> datadog.remoteagent.RegisterRemoteAgentResponse
	24, // 29: datadog.api.v1.AgentSecure.AutodiscoveryStreamConfig:output_type -> datadog.autodiscovery.AutodiscoveryStreamResponse
	25, // 30: datadog.api.v1.AgentSecure.GetHostTags:output_type -> datadog.model.v1.HostTagReply
	26, // 31: datadog.api.v1.RemoteAgent.GetStatusDetails:output_type -> datadog.remoteagent.GetStatusDetailsResponse
	27, // 32: datadog.api.v1.RemoteAgent.GetFlareFiles:output_type -> datadog.remoteagent.GetFlareFilesResponse
	28, // 33: datadog.api.v1.RemoteAgent.GetTelemetry:output_type -> datadog.remoteagent.GetTelemetryResponse
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_datadog_api_v1_api_proto_init() }
func file_datadog_api_v1_api_proto_init() {
	if File_datadog_api_v1_api_proto != nil {
		return
	}
	file_datadog_model_v1_model_proto_init()
	file_datadog_remoteagent_remoteagent_proto_init()
	file_datadog_remoteconfig_remoteconfig_proto_init()
	file_datadog_workloadmeta_workloadmeta_proto_init()
	file_datadog_autodiscovery_autodiscovery_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_api_v1_api_proto_rawDesc), len(file_datadog_api_v1_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_datadog_api_v1_api_proto_goTypes,
		DependencyIndexes: file_datadog_api_v1_api_proto_depIdxs,
	}.Build()
	File_datadog_api_v1_api_proto = out.File
	file_datadog_api_v1_api_proto_goTypes = nil
	file_datadog_api_v1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	// get the hostname
	GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error) {
	out := new(HostnameReply)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.Agent/GetHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	// get the hostname
	GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error)
}

// UnimplementedAgentServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (*UnimplementedAgentServer) GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.Agent/GetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetHostname(ctx, req.(*HostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostname",
			Handler:    _Agent_GetHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/api/v1/api.proto",
}

// AgentSecureClient is the client API for AgentSecure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentSecureClient interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (AgentSecure_TaggerStreamEntitiesClient, error)
	// Generates a container ID from Origin Info.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	$ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"externalData": {"init": false,"containerName": "dd-trace-py","podUID": "c4b45c6a-b296-4bd5-88df-7c2d6bcaabef"}}' \
	//	   https://localhost:5001/v1/grpc/tagger/generate_container_id_from_origin_info
	//	{
	//	  "containerID":"c9fd60251b5237467462dad48999815eb0025f367c6e1abe91e0bd787d5915fc"
	//	}
	TaggerGenerateContainerIDFromOriginInfo(ctx context.Context, in *GenerateContainerIDFromOriginInfoRequest, opts ...grpc.CallOption) (*GenerateContainerIDFromOriginInfoResponse, error)
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error)
	ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error)
	GetConfigState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error)
	ClientGetConfigsHA(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error)
	GetConfigStateHA(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error)
	// Subscribes to added, removed, or changed entities in the Workloadmeta and
	// streams them to clients as events.
	// Can be called through the HTTP gateway, and events will be streamed as JSON.
	// Example call that receives all the events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only unset events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"eventType":2}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only from the cluster orchestrator:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"source":3}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	WorkloadmetaStreamEntities(ctx context.Context, in *WorkloadmetaStreamRequest, opts ...grpc.CallOption) (AgentSecure_WorkloadmetaStreamEntitiesClient, error)
	// Registers a remote agent.
	RegisterRemoteAgent(ctx context.Context, in *RegisterRemoteAgentRequest, opts ...grpc.CallOption) (*RegisterRemoteAgentResponse, error)
	// Subscribes to autodiscovery config updates
	AutodiscoveryStreamConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (AgentSecure_AutodiscoveryStreamConfigClient, error)
	// Get the host tags
	GetHostTags(ctx context.Context, in *HostTagRequest, opts ...grpc.CallOption) (*HostTagReply, error)
}

type agentSecureClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentSecureClient(cc grpc.ClientConnInterface) AgentSecureClient {
	return &agentSecureClient{cc}
}

func (c *agentSecureClient) TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (AgentSecure_TaggerStreamEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentSecure_serviceDesc.Streams[0], "/datadog.api.v1.AgentSecure/TaggerStreamEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSecureTaggerStreamEntitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentSecure_TaggerStreamEntitiesClient interface {
	Recv() (*StreamTagsResponse, error)
	grpc.ClientStream
}

type agentSecureTaggerStreamEntitiesClient struct {
	grpc.ClientStream
}

func (x *agentSecureTaggerStreamEntitiesClient) Recv() (*StreamTagsResponse, error) {
	m := new(StreamTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentSecureClient) TaggerGenerateContainerIDFromOriginInfo(ctx context.Context, in *GenerateContainerIDFromOriginInfoRequest, opts ...grpc.CallOption) (*GenerateContainerIDFromOriginInfoResponse, error) {
	out := new(GenerateContainerIDFromOriginInfoResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/TaggerGenerateContainerIDFromOriginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error) {
	out := new(FetchEntityResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/TaggerFetchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error) {
	out := new(CaptureTriggerResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/DogstatsdCaptureTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error) {
	out := new(TaggerStateResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/DogstatsdSetTaggerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error) {
	out := new(ClientGetConfigsResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/ClientGetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) GetConfigState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error) {
	out := new(GetStateConfigResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/GetConfigState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) ClientGetConfigsHA(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error) {
	out := new(ClientGetConfigsResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/ClientGetConfigsHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) GetConfigStateHA(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error) {
	out := new(GetStateConfigResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/GetConfigStateHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) WorkloadmetaStreamEntities(ctx context.Context, in *WorkloadmetaStreamRequest, opts ...grpc.CallOption) (AgentSecure_WorkloadmetaStreamEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentSecure_serviceDesc.Streams[1], "/datadog.api.v1.AgentSecure/WorkloadmetaStreamEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSecureWorkloadmetaStreamEntitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentSecure_WorkloadmetaStreamEntitiesClient interface {
	Recv() (*WorkloadmetaStreamResponse, error)
	grpc.ClientStream
}

type agentSecureWorkloadmetaStreamEntitiesClient struct {
	grpc.ClientStream
}

func (x *agentSecureWorkloadmetaStreamEntitiesClient) Recv() (*WorkloadmetaStreamResponse, error) {
	m := new(WorkloadmetaStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentSecureClient) RegisterRemoteAgent(ctx context.Context, in *RegisterRemoteAgentRequest, opts ...grpc.CallOption) (*RegisterRemoteAgentResponse, error) {
	out := new(RegisterRemoteAgentResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/RegisterRemoteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) AutodiscoveryStreamConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (AgentSecure_AutodiscoveryStreamConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentSecure_serviceDesc.Streams[2], "/datadog.api.v1.AgentSecure/AutodiscoveryStreamConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSecureAutodiscoveryStreamConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentSecure_AutodiscoveryStreamConfigClient interface {
	Recv() (*AutodiscoveryStreamResponse, error)
	grpc.ClientStream
}

type agentSecureAutodiscoveryStreamConfigClient struct {
	grpc.ClientStream
}

func (x *agentSecureAutodiscoveryStreamConfigClient) Recv() (*AutodiscoveryStreamResponse, error) {
	m := new(AutodiscoveryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentSecureClient) GetHostTags(ctx context.Context, in *HostTagRequest, opts ...grpc.CallOption) (*HostTagReply, error) {
	out := new(HostTagReply)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.AgentSecure/GetHostTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentSecureServer is the server API for AgentSecure service.
type AgentSecureServer interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(*StreamTagsRequest, AgentSecure_TaggerStreamEntitiesServer) error
	// Generates a container ID from Origin Info.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	$ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"externalData": {"init": false,"containerName": "dd-trace-py","podUID": "c4b45c6a-b296-4bd5-88df-7c2d6bcaabef"}}' \
	//	   https://localhost:5001/v1/grpc/tagger/generate_container_id_from_origin_info
	//	{
	//	  "containerID":"c9fd60251b5237467462dad48999815eb0025f367c6e1abe91e0bd787d5915fc"
	//	}
	TaggerGenerateContainerIDFromOriginInfo(context.Context, *GenerateContainerIDFromOriginInfoRequest) (*GenerateContainerIDFromOriginInfoResponse, error)
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error)
	ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error)
	GetConfigState(context.Context, *empty.Empty) (*GetStateConfigResponse, error)
	ClientGetConfigsHA(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error)
	GetConfigStateHA(context.Context, *empty.Empty) (*GetStateConfigResponse, error)
	// Subscribes to added, removed, or changed entities in the Workloadmeta and
	// streams them to clients as events.
	// Can be called through the HTTP gateway, and events will be streamed as JSON.
	// Example call that receives all the events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only unset events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"eventType":2}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only from the cluster orchestrator:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"source":3}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	WorkloadmetaStreamEntities(*WorkloadmetaStreamRequest, AgentSecure_WorkloadmetaStreamEntitiesServer) error
	// Registers a remote agent.
	RegisterRemoteAgent(context.Context, *RegisterRemoteAgentRequest) (*RegisterRemoteAgentResponse, error)
	// Subscribes to autodiscovery config updates
	AutodiscoveryStreamConfig(*empty.Empty, AgentSecure_AutodiscoveryStreamConfigServer) error
	// Get the host tags
	GetHostTags(context.Context, *HostTagRequest) (*HostTagReply, error)
}

// UnimplementedAgentSecureServer can be embedded to have forward compatible implementations.
type UnimplementedAgentSecureServer struct {
}

func (*UnimplementedAgentSecureServer) TaggerStreamEntities(*StreamTagsRequest, AgentSecure_TaggerStreamEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method TaggerStreamEntities not implemented")
}
func (*UnimplementedAgentSecureServer) TaggerGenerateContainerIDFromOriginInfo(context.Context, *GenerateContainerIDFromOriginInfoRequest) (*GenerateContainerIDFromOriginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggerGenerateContainerIDFromOriginInfo not implemented")
}
func (*UnimplementedAgentSecureServer) TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggerFetchEntity not implemented")
}
func (*UnimplementedAgentSecureServer) DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdCaptureTrigger not implemented")
}
func (*UnimplementedAgentSecureServer) DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdSetTaggerState not implemented")
}
func (*UnimplementedAgentSecureServer) ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetConfigs not implemented")
}
func (*UnimplementedAgentSecureServer) GetConfigState(context.Context, *empty.Empty) (*GetStateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigState not implemented")
}
func (*UnimplementedAgentSecureServer) ClientGetConfigsHA(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetConfigsHA not implemented")
}
func (*UnimplementedAgentSecureServer) GetConfigStateHA(context.Context, *empty.Empty) (*GetStateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigStateHA not implemented")
}
func (*UnimplementedAgentSecureServer) WorkloadmetaStreamEntities(*WorkloadmetaStreamRequest, AgentSecure_WorkloadmetaStreamEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method WorkloadmetaStreamEntities not implemented")
}
func (*UnimplementedAgentSecureServer) RegisterRemoteAgent(context.Context, *RegisterRemoteAgentRequest) (*RegisterRemoteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRemoteAgent not implemented")
}
func (*UnimplementedAgentSecureServer) AutodiscoveryStreamConfig(*empty.Empty, AgentSecure_AutodiscoveryStreamConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method AutodiscoveryStreamConfig not implemented")
}
func (*UnimplementedAgentSecureServer) GetHostTags(context.Context, *HostTagRequest) (*HostTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostTags not implemented")
}

func RegisterAgentSecureServer(s *grpc.Server, srv AgentSecureServer) {
	s.RegisterService(&_AgentSecure_serviceDesc, srv)
}

func _AgentSecure_TaggerStreamEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).TaggerStreamEntities(m, &agentSecureTaggerStreamEntitiesServer{stream})
}

type AgentSecure_TaggerStreamEntitiesServer interface {
	Send(*StreamTagsResponse) error
	grpc.ServerStream
}

type agentSecureTaggerStreamEntitiesServer struct {
	grpc.ServerStream
}

func (x *agentSecureTaggerStreamEntitiesServer) Send(m *StreamTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentSecure_TaggerGenerateContainerIDFromOriginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContainerIDFromOriginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).TaggerGenerateContainerIDFromOriginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/TaggerGenerateContainerIDFromOriginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).TaggerGenerateContainerIDFromOriginInfo(ctx, req.(*GenerateContainerIDFromOriginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_TaggerFetchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/TaggerFetchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, req.(*FetchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdCaptureTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/DogstatsdCaptureTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, req.(*CaptureTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdSetTaggerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/DogstatsdSetTaggerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, req.(*TaggerState))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_ClientGetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/ClientGetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, req.(*ClientGetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_GetConfigState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetConfigState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/GetConfigState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetConfigState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_ClientGetConfigsHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).ClientGetConfigsHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/ClientGetConfigsHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).ClientGetConfigsHA(ctx, req.(*ClientGetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_GetConfigStateHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetConfigStateHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/GetConfigStateHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetConfigStateHA(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_WorkloadmetaStreamEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkloadmetaStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).WorkloadmetaStreamEntities(m, &agentSecureWorkloadmetaStreamEntitiesServer{stream})
}

type AgentSecure_WorkloadmetaStreamEntitiesServer interface {
	Send(*WorkloadmetaStreamResponse) error
	grpc.ServerStream
}

type agentSecureWorkloadmetaStreamEntitiesServer struct {
	grpc.ServerStream
}

func (x *agentSecureWorkloadmetaStreamEntitiesServer) Send(m *WorkloadmetaStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentSecure_RegisterRemoteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRemoteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).RegisterRemoteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/RegisterRemoteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).RegisterRemoteAgent(ctx, req.(*RegisterRemoteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_AutodiscoveryStreamConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).AutodiscoveryStreamConfig(m, &agentSecureAutodiscoveryStreamConfigServer{stream})
}

type AgentSecure_AutodiscoveryStreamConfigServer interface {
	Send(*AutodiscoveryStreamResponse) error
	grpc.ServerStream
}

type agentSecureAutodiscoveryStreamConfigServer struct {
	grpc.ServerStream
}

func (x *agentSecureAutodiscoveryStreamConfigServer) Send(m *AutodiscoveryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentSecure_GetHostTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetHostTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.AgentSecure/GetHostTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetHostTags(ctx, req.(*HostTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentSecure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.AgentSecure",
	HandlerType: (*AgentSecureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaggerGenerateContainerIDFromOriginInfo",
			Handler:    _AgentSecure_TaggerGenerateContainerIDFromOriginInfo_Handler,
		},
		{
			MethodName: "TaggerFetchEntity",
			Handler:    _AgentSecure_TaggerFetchEntity_Handler,
		},
		{
			MethodName: "DogstatsdCaptureTrigger",
			Handler:    _AgentSecure_DogstatsdCaptureTrigger_Handler,
		},
		{
			MethodName: "DogstatsdSetTaggerState",
			Handler:    _AgentSecure_DogstatsdSetTaggerState_Handler,
		},
		{
			MethodName: "ClientGetConfigs",
			Handler:    _AgentSecure_ClientGetConfigs_Handler,
		},
		{
			MethodName: "GetConfigState",
			Handler:    _AgentSecure_GetConfigState_Handler,
		},
		{
			MethodName: "ClientGetConfigsHA",
			Handler:    _AgentSecure_ClientGetConfigsHA_Handler,
		},
		{
			MethodName: "GetConfigStateHA",
			Handler:    _AgentSecure_GetConfigStateHA_Handler,
		},
		{
			MethodName: "RegisterRemoteAgent",
			Handler:    _AgentSecure_RegisterRemoteAgent_Handler,
		},
		{
			MethodName: "GetHostTags",
			Handler:    _AgentSecure_GetHostTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaggerStreamEntities",
			Handler:       _AgentSecure_TaggerStreamEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WorkloadmetaStreamEntities",
			Handler:       _AgentSecure_WorkloadmetaStreamEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutodiscoveryStreamConfig",
			Handler:       _AgentSecure_AutodiscoveryStreamConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datadog/api/v1/api.proto",
}

// RemoteAgentClient is the client API for RemoteAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteAgentClient interface {
	// Gets the status details of a remote agent.
	GetStatusDetails(ctx context.Context, in *GetStatusDetailsRequest, opts ...grpc.CallOption) (*GetStatusDetailsResponse, error)
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error)
	// Gets the telemetry data of a remote agent.
	GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error)
}

type remoteAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteAgentClient(cc grpc.ClientConnInterface) RemoteAgentClient {
	return &remoteAgentClient{cc}
}

func (c *remoteAgentClient) GetStatusDetails(ctx context.Context, in *GetStatusDetailsRequest, opts ...grpc.CallOption) (*GetStatusDetailsResponse, error) {
	out := new(GetStatusDetailsResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.RemoteAgent/GetStatusDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteAgentClient) GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error) {
	out := new(GetFlareFilesResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.RemoteAgent/GetFlareFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteAgentClient) GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error) {
	out := new(GetTelemetryResponse)
	err := c.cc.Invoke(ctx, "/datadog.api.v1.RemoteAgent/GetTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteAgentServer is the server API for RemoteAgent service.
type RemoteAgentServer interface {
	// Gets the status details of a remote agent.
	GetStatusDetails(context.Context, *GetStatusDetailsRequest) (*GetStatusDetailsResponse, error)
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error)
	// Gets the telemetry data of a remote agent.
	GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error)
}

// UnimplementedRemoteAgentServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteAgentServer struct {
}

func (*UnimplementedRemoteAgentServer) GetStatusDetails(context.Context, *GetStatusDetailsRequest) (*GetStatusDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusDetails not implemented")
}
func (*UnimplementedRemoteAgentServer) GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlareFiles not implemented")
}
func (*UnimplementedRemoteAgentServer) GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetry not implemented")
}

func RegisterRemoteAgentServer(s *grpc.Server, srv RemoteAgentServer) {
	s.RegisterService(&_RemoteAgent_serviceDesc, srv)
}

func _RemoteAgent_GetStatusDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAgentServer).GetStatusDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.RemoteAgent/GetStatusDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAgentServer).GetStatusDetails(ctx, req.(*GetStatusDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteAgent_GetFlareFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlareFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAgentServer).GetFlareFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.RemoteAgent/GetFlareFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAgentServer).GetFlareFiles(ctx, req.(*GetFlareFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteAgent_GetTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAgentServer).GetTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.api.v1.RemoteAgent/GetTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAgentServer).GetTelemetry(ctx, req.(*GetTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.RemoteAgent",
	HandlerType: (*RemoteAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatusDetails",
			Handler:    _RemoteAgent_GetStatusDetails_Handler,
		},
		{
			MethodName: "GetFlareFiles",
			Handler:    _RemoteAgent_GetFlareFiles_Handler,
		},
		{
			MethodName: "GetTelemetry",
			Handler:    _RemoteAgent_GetTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/api/v1/api.proto",
}
