// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: datadog/remoteagent/flare.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFlareFilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlareFilesRequest) Reset() {
	*x = GetFlareFilesRequest{}
	mi := &file_datadog_remoteagent_flare_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlareFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlareFilesRequest) ProtoMessage() {}

func (x *GetFlareFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_remoteagent_flare_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlareFilesRequest.ProtoReflect.Descriptor instead.
func (*GetFlareFilesRequest) Descriptor() ([]byte, []int) {
	return file_datadog_remoteagent_flare_proto_rawDescGZIP(), []int{0}
}

type GetFlareFilesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set of files to add to the flare.
	//
	// The key is the name of the file, and the value is the contents of the file.
	//
	// The key SHOULD be an ASCII string with no path separators (`/`), and will be sanitized as necessary to ensure it can be
	// used as a valid filename. The key SHOULD have a file extension that is applicable to the file contents, such as
	// `.yaml` for YAML data.
	Files         map[string][]byte `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlareFilesResponse) Reset() {
	*x = GetFlareFilesResponse{}
	mi := &file_datadog_remoteagent_flare_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlareFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlareFilesResponse) ProtoMessage() {}

func (x *GetFlareFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_remoteagent_flare_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlareFilesResponse.ProtoReflect.Descriptor instead.
func (*GetFlareFilesResponse) Descriptor() ([]byte, []int) {
	return file_datadog_remoteagent_flare_proto_rawDescGZIP(), []int{1}
}

func (x *GetFlareFilesResponse) GetFiles() map[string][]byte {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_datadog_remoteagent_flare_proto protoreflect.FileDescriptor

const file_datadog_remoteagent_flare_proto_rawDesc = "" +
	"\n" +
	"\x1fdatadog/remoteagent/flare.proto\x12\x1cdatadog.remoteagent.flare.v1\"\x16\n" +
	"\x14GetFlareFilesRequest\"\xa7\x01\n" +
	"\x15GetFlareFilesResponse\x12T\n" +
	"\x05files\x18\x01 \x03(\v2>.datadog.remoteagent.flare.v1.GetFlareFilesResponse.FilesEntryR\x05files\x1a8\n" +
	"\n" +
	"FilesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x012\x89\x01\n" +
	"\rFlareProvider\x12x\n" +
	"\rGetFlareFiles\x122.datadog.remoteagent.flare.v1.GetFlareFilesRequest\x1a3.datadog.remoteagent.flare.v1.GetFlareFilesResponseB\x15Z\x13pkg/proto/pbgo/coreb\x06proto3"

var (
	file_datadog_remoteagent_flare_proto_rawDescOnce sync.Once
	file_datadog_remoteagent_flare_proto_rawDescData []byte
)

func file_datadog_remoteagent_flare_proto_rawDescGZIP() []byte {
	file_datadog_remoteagent_flare_proto_rawDescOnce.Do(func() {
		file_datadog_remoteagent_flare_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_remoteagent_flare_proto_rawDesc), len(file_datadog_remoteagent_flare_proto_rawDesc)))
	})
	return file_datadog_remoteagent_flare_proto_rawDescData
}

var file_datadog_remoteagent_flare_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_datadog_remoteagent_flare_proto_goTypes = []any{
	(*GetFlareFilesRequest)(nil),  // 0: datadog.remoteagent.flare.v1.GetFlareFilesRequest
	(*GetFlareFilesResponse)(nil), // 1: datadog.remoteagent.flare.v1.GetFlareFilesResponse
	nil,                           // 2: datadog.remoteagent.flare.v1.GetFlareFilesResponse.FilesEntry
}
var file_datadog_remoteagent_flare_proto_depIdxs = []int32{
	2, // 0: datadog.remoteagent.flare.v1.GetFlareFilesResponse.files:type_name -> datadog.remoteagent.flare.v1.GetFlareFilesResponse.FilesEntry
	0, // 1: datadog.remoteagent.flare.v1.FlareProvider.GetFlareFiles:input_type -> datadog.remoteagent.flare.v1.GetFlareFilesRequest
	1, // 2: datadog.remoteagent.flare.v1.FlareProvider.GetFlareFiles:output_type -> datadog.remoteagent.flare.v1.GetFlareFilesResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_datadog_remoteagent_flare_proto_init() }
func file_datadog_remoteagent_flare_proto_init() {
	if File_datadog_remoteagent_flare_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_remoteagent_flare_proto_rawDesc), len(file_datadog_remoteagent_flare_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datadog_remoteagent_flare_proto_goTypes,
		DependencyIndexes: file_datadog_remoteagent_flare_proto_depIdxs,
		MessageInfos:      file_datadog_remoteagent_flare_proto_msgTypes,
	}.Build()
	File_datadog_remoteagent_flare_proto = out.File
	file_datadog_remoteagent_flare_proto_goTypes = nil
	file_datadog_remoteagent_flare_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlareProviderClient is the client API for FlareProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlareProviderClient interface {
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error)
}

type flareProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewFlareProviderClient(cc grpc.ClientConnInterface) FlareProviderClient {
	return &flareProviderClient{cc}
}

func (c *flareProviderClient) GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error) {
	out := new(GetFlareFilesResponse)
	err := c.cc.Invoke(ctx, "/datadog.remoteagent.flare.v1.FlareProvider/GetFlareFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlareProviderServer is the server API for FlareProvider service.
type FlareProviderServer interface {
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error)
}

// UnimplementedFlareProviderServer can be embedded to have forward compatible implementations.
type UnimplementedFlareProviderServer struct {
}

func (*UnimplementedFlareProviderServer) GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlareFiles not implemented")
}

func RegisterFlareProviderServer(s *grpc.Server, srv FlareProviderServer) {
	s.RegisterService(&_FlareProvider_serviceDesc, srv)
}

func _FlareProvider_GetFlareFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlareFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlareProviderServer).GetFlareFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.remoteagent.flare.v1.FlareProvider/GetFlareFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlareProviderServer).GetFlareFiles(ctx, req.(*GetFlareFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlareProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.remoteagent.flare.v1.FlareProvider",
	HandlerType: (*FlareProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlareFiles",
			Handler:    _FlareProvider_GetFlareFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/remoteagent/flare.proto",
}
