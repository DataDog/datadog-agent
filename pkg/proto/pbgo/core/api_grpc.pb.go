// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: datadog/api/v1/api.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_GetHostname_FullMethodName = "/datadog.api.v1.Agent/GetHostname"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type AgentClient interface {
	// get the hostname
	GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*HostnameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostnameReply)
	err := c.cc.Invoke(ctx, Agent_GetHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
//
// The greeting service definition.
type AgentServer interface {
	// get the hostname
	GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) GetHostname(context.Context, *HostnameRequest) (*HostnameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetHostname(ctx, req.(*HostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostname",
			Handler:    _Agent_GetHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/api/v1/api.proto",
}

const (
	AgentSecure_TaggerStreamEntities_FullMethodName                    = "/datadog.api.v1.AgentSecure/TaggerStreamEntities"
	AgentSecure_TaggerGenerateContainerIDFromOriginInfo_FullMethodName = "/datadog.api.v1.AgentSecure/TaggerGenerateContainerIDFromOriginInfo"
	AgentSecure_TaggerFetchEntity_FullMethodName                       = "/datadog.api.v1.AgentSecure/TaggerFetchEntity"
	AgentSecure_DogstatsdCaptureTrigger_FullMethodName                 = "/datadog.api.v1.AgentSecure/DogstatsdCaptureTrigger"
	AgentSecure_DogstatsdSetTaggerState_FullMethodName                 = "/datadog.api.v1.AgentSecure/DogstatsdSetTaggerState"
	AgentSecure_ClientGetConfigs_FullMethodName                        = "/datadog.api.v1.AgentSecure/ClientGetConfigs"
	AgentSecure_GetConfigState_FullMethodName                          = "/datadog.api.v1.AgentSecure/GetConfigState"
	AgentSecure_ClientGetConfigsHA_FullMethodName                      = "/datadog.api.v1.AgentSecure/ClientGetConfigsHA"
	AgentSecure_GetConfigStateHA_FullMethodName                        = "/datadog.api.v1.AgentSecure/GetConfigStateHA"
	AgentSecure_WorkloadmetaStreamEntities_FullMethodName              = "/datadog.api.v1.AgentSecure/WorkloadmetaStreamEntities"
	AgentSecure_RegisterRemoteAgent_FullMethodName                     = "/datadog.api.v1.AgentSecure/RegisterRemoteAgent"
	AgentSecure_AutodiscoveryStreamConfig_FullMethodName               = "/datadog.api.v1.AgentSecure/AutodiscoveryStreamConfig"
	AgentSecure_GetHostTags_FullMethodName                             = "/datadog.api.v1.AgentSecure/GetHostTags"
)

// AgentSecureClient is the client API for AgentSecure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentSecureClient interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTagsResponse], error)
	// Generates a container ID from Origin Info.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	$ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"externalData": {"init": false,"containerName": "dd-trace-py","podUID": "c4b45c6a-b296-4bd5-88df-7c2d6bcaabef"}}' \
	//	   https://localhost:5001/v1/grpc/tagger/generate_container_id_from_origin_info
	//	{
	//	  "containerID":"c9fd60251b5237467462dad48999815eb0025f367c6e1abe91e0bd787d5915fc"
	//	}
	TaggerGenerateContainerIDFromOriginInfo(ctx context.Context, in *GenerateContainerIDFromOriginInfoRequest, opts ...grpc.CallOption) (*GenerateContainerIDFromOriginInfoResponse, error)
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error)
	ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error)
	GetConfigState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error)
	ClientGetConfigsHA(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error)
	GetConfigStateHA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error)
	// Subscribes to added, removed, or changed entities in the Workloadmeta and
	// streams them to clients as events.
	// Can be called through the HTTP gateway, and events will be streamed as JSON.
	// Example call that receives all the events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only unset events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"eventType":2}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only from the cluster orchestrator:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"source":3}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	WorkloadmetaStreamEntities(ctx context.Context, in *WorkloadmetaStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkloadmetaStreamResponse], error)
	// Registers a remote agent.
	RegisterRemoteAgent(ctx context.Context, in *RegisterRemoteAgentRequest, opts ...grpc.CallOption) (*RegisterRemoteAgentResponse, error)
	// Subscribes to autodiscovery config updates
	AutodiscoveryStreamConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AutodiscoveryStreamResponse], error)
	// Get the host tags
	GetHostTags(ctx context.Context, in *HostTagRequest, opts ...grpc.CallOption) (*HostTagReply, error)
}

type agentSecureClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentSecureClient(cc grpc.ClientConnInterface) AgentSecureClient {
	return &agentSecureClient{cc}
}

func (c *agentSecureClient) TaggerStreamEntities(ctx context.Context, in *StreamTagsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTagsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentSecure_ServiceDesc.Streams[0], AgentSecure_TaggerStreamEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTagsRequest, StreamTagsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_TaggerStreamEntitiesClient = grpc.ServerStreamingClient[StreamTagsResponse]

func (c *agentSecureClient) TaggerGenerateContainerIDFromOriginInfo(ctx context.Context, in *GenerateContainerIDFromOriginInfoRequest, opts ...grpc.CallOption) (*GenerateContainerIDFromOriginInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateContainerIDFromOriginInfoResponse)
	err := c.cc.Invoke(ctx, AgentSecure_TaggerGenerateContainerIDFromOriginInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) TaggerFetchEntity(ctx context.Context, in *FetchEntityRequest, opts ...grpc.CallOption) (*FetchEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchEntityResponse)
	err := c.cc.Invoke(ctx, AgentSecure_TaggerFetchEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdCaptureTrigger(ctx context.Context, in *CaptureTriggerRequest, opts ...grpc.CallOption) (*CaptureTriggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaptureTriggerResponse)
	err := c.cc.Invoke(ctx, AgentSecure_DogstatsdCaptureTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) DogstatsdSetTaggerState(ctx context.Context, in *TaggerState, opts ...grpc.CallOption) (*TaggerStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaggerStateResponse)
	err := c.cc.Invoke(ctx, AgentSecure_DogstatsdSetTaggerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) ClientGetConfigs(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientGetConfigsResponse)
	err := c.cc.Invoke(ctx, AgentSecure_ClientGetConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) GetConfigState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateConfigResponse)
	err := c.cc.Invoke(ctx, AgentSecure_GetConfigState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) ClientGetConfigsHA(ctx context.Context, in *ClientGetConfigsRequest, opts ...grpc.CallOption) (*ClientGetConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientGetConfigsResponse)
	err := c.cc.Invoke(ctx, AgentSecure_ClientGetConfigsHA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) GetConfigStateHA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateConfigResponse)
	err := c.cc.Invoke(ctx, AgentSecure_GetConfigStateHA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) WorkloadmetaStreamEntities(ctx context.Context, in *WorkloadmetaStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkloadmetaStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentSecure_ServiceDesc.Streams[1], AgentSecure_WorkloadmetaStreamEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkloadmetaStreamRequest, WorkloadmetaStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_WorkloadmetaStreamEntitiesClient = grpc.ServerStreamingClient[WorkloadmetaStreamResponse]

func (c *agentSecureClient) RegisterRemoteAgent(ctx context.Context, in *RegisterRemoteAgentRequest, opts ...grpc.CallOption) (*RegisterRemoteAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterRemoteAgentResponse)
	err := c.cc.Invoke(ctx, AgentSecure_RegisterRemoteAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentSecureClient) AutodiscoveryStreamConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AutodiscoveryStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentSecure_ServiceDesc.Streams[2], AgentSecure_AutodiscoveryStreamConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, AutodiscoveryStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_AutodiscoveryStreamConfigClient = grpc.ServerStreamingClient[AutodiscoveryStreamResponse]

func (c *agentSecureClient) GetHostTags(ctx context.Context, in *HostTagRequest, opts ...grpc.CallOption) (*HostTagReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostTagReply)
	err := c.cc.Invoke(ctx, AgentSecure_GetHostTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentSecureServer is the server API for AgentSecure service.
// All implementations must embed UnimplementedAgentSecureServer
// for forward compatibility.
type AgentSecureServer interface {
	// subscribes to added, removed, or changed entities in the Tagger
	// and streams them to clients as events.
	// can be called through the HTTP gateway, and events will be streamed as JSON:
	//
	//	  $  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k https://localhost:5001/v1/grpc/tagger/stream_entities
	//	  {
	//	   "result": {
	//	       "entity": {
	//	           "id": {
	//	               "prefix": "kubernetes_pod_uid",
	//	               "uid": "4025461f832caf3fceb7fc2a32f879c6"
	//	           },
	//	           "hash": "cad4fc8fc409fcc1",
	//	           "lowCardinalityTags": [
	//	               "kube_namespace:kube-system",
	//	               "pod_phase:running"
	//	           ]
	//	       }
	//	   }
	//	}
	TaggerStreamEntities(*StreamTagsRequest, grpc.ServerStreamingServer[StreamTagsResponse]) error
	// Generates a container ID from Origin Info.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	$ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"externalData": {"init": false,"containerName": "dd-trace-py","podUID": "c4b45c6a-b296-4bd5-88df-7c2d6bcaabef"}}' \
	//	   https://localhost:5001/v1/grpc/tagger/generate_container_id_from_origin_info
	//	{
	//	  "containerID":"c9fd60251b5237467462dad48999815eb0025f367c6e1abe91e0bd787d5915fc"
	//	}
	TaggerGenerateContainerIDFromOriginInfo(context.Context, *GenerateContainerIDFromOriginInfoRequest) (*GenerateContainerIDFromOriginInfoResponse, error)
	// fetches an entity from the Tagger with the desired cardinality tags.
	// can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	  $ curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	     -XPOST -k -H "Content-Type: application/json" \
	//	     --data '{"id":{"prefix":"kubernetes_pod_uid","uid":"d575fb58-82dc-418e-bfb1-aececc9bc507"}}' \
	//	     https://localhost:5001/v1/grpc/tagger/fetch_entity
	//	  {
	//	   "id": {
	//	       "prefix": "kubernetes_pod_uid",
	//	       "uid": "d575fb58-82dc-418e-bfb1-aececc9bc507"
	//	   },
	//	   "tags": [
	//	       "kube_namespace:kube-system",
	//	       "pod_phase:running",
	//	       "kube_deployment:coredns",
	//	       "kube_service:kube-dns"
	//	   ]
	//	}
	TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error)
	// Trigger a dogstatsd capture. Only one capture can be triggered at a time.
	// Can be called through the HTTP gateway, and entity will be returned as JSON:
	//
	//	TODO: add the curl code here
	DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error)
	ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error)
	GetConfigState(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error)
	ClientGetConfigsHA(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error)
	GetConfigStateHA(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error)
	// Subscribes to added, removed, or changed entities in the Workloadmeta and
	// streams them to clients as events.
	// Can be called through the HTTP gateway, and events will be streamed as JSON.
	// Example call that receives all the events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only unset events:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"eventType":2}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	//
	// Example call that receives only from the cluster orchestrator:
	//
	//	$  curl -H "authorization: Bearer $(cat /etc/datadog-agent/auth_token)" \
	//	   -XPOST -k -H "Content-Type: application/json" \
	//	   --data '{"filter":{"source":3}}' \
	//	   https://localhost:5001/v1/grpc/workloadmeta/stream_entities
	WorkloadmetaStreamEntities(*WorkloadmetaStreamRequest, grpc.ServerStreamingServer[WorkloadmetaStreamResponse]) error
	// Registers a remote agent.
	RegisterRemoteAgent(context.Context, *RegisterRemoteAgentRequest) (*RegisterRemoteAgentResponse, error)
	// Subscribes to autodiscovery config updates
	AutodiscoveryStreamConfig(*emptypb.Empty, grpc.ServerStreamingServer[AutodiscoveryStreamResponse]) error
	// Get the host tags
	GetHostTags(context.Context, *HostTagRequest) (*HostTagReply, error)
	mustEmbedUnimplementedAgentSecureServer()
}

// UnimplementedAgentSecureServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentSecureServer struct{}

func (UnimplementedAgentSecureServer) TaggerStreamEntities(*StreamTagsRequest, grpc.ServerStreamingServer[StreamTagsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TaggerStreamEntities not implemented")
}
func (UnimplementedAgentSecureServer) TaggerGenerateContainerIDFromOriginInfo(context.Context, *GenerateContainerIDFromOriginInfoRequest) (*GenerateContainerIDFromOriginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggerGenerateContainerIDFromOriginInfo not implemented")
}
func (UnimplementedAgentSecureServer) TaggerFetchEntity(context.Context, *FetchEntityRequest) (*FetchEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaggerFetchEntity not implemented")
}
func (UnimplementedAgentSecureServer) DogstatsdCaptureTrigger(context.Context, *CaptureTriggerRequest) (*CaptureTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdCaptureTrigger not implemented")
}
func (UnimplementedAgentSecureServer) DogstatsdSetTaggerState(context.Context, *TaggerState) (*TaggerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DogstatsdSetTaggerState not implemented")
}
func (UnimplementedAgentSecureServer) ClientGetConfigs(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetConfigs not implemented")
}
func (UnimplementedAgentSecureServer) GetConfigState(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigState not implemented")
}
func (UnimplementedAgentSecureServer) ClientGetConfigsHA(context.Context, *ClientGetConfigsRequest) (*ClientGetConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientGetConfigsHA not implemented")
}
func (UnimplementedAgentSecureServer) GetConfigStateHA(context.Context, *emptypb.Empty) (*GetStateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigStateHA not implemented")
}
func (UnimplementedAgentSecureServer) WorkloadmetaStreamEntities(*WorkloadmetaStreamRequest, grpc.ServerStreamingServer[WorkloadmetaStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WorkloadmetaStreamEntities not implemented")
}
func (UnimplementedAgentSecureServer) RegisterRemoteAgent(context.Context, *RegisterRemoteAgentRequest) (*RegisterRemoteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRemoteAgent not implemented")
}
func (UnimplementedAgentSecureServer) AutodiscoveryStreamConfig(*emptypb.Empty, grpc.ServerStreamingServer[AutodiscoveryStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AutodiscoveryStreamConfig not implemented")
}
func (UnimplementedAgentSecureServer) GetHostTags(context.Context, *HostTagRequest) (*HostTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostTags not implemented")
}
func (UnimplementedAgentSecureServer) mustEmbedUnimplementedAgentSecureServer() {}
func (UnimplementedAgentSecureServer) testEmbeddedByValue()                     {}

// UnsafeAgentSecureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentSecureServer will
// result in compilation errors.
type UnsafeAgentSecureServer interface {
	mustEmbedUnimplementedAgentSecureServer()
}

func RegisterAgentSecureServer(s grpc.ServiceRegistrar, srv AgentSecureServer) {
	// If the following call pancis, it indicates UnimplementedAgentSecureServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentSecure_ServiceDesc, srv)
}

func _AgentSecure_TaggerStreamEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).TaggerStreamEntities(m, &grpc.GenericServerStream[StreamTagsRequest, StreamTagsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_TaggerStreamEntitiesServer = grpc.ServerStreamingServer[StreamTagsResponse]

func _AgentSecure_TaggerGenerateContainerIDFromOriginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContainerIDFromOriginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).TaggerGenerateContainerIDFromOriginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_TaggerGenerateContainerIDFromOriginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).TaggerGenerateContainerIDFromOriginInfo(ctx, req.(*GenerateContainerIDFromOriginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_TaggerFetchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_TaggerFetchEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).TaggerFetchEntity(ctx, req.(*FetchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdCaptureTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_DogstatsdCaptureTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdCaptureTrigger(ctx, req.(*CaptureTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_DogstatsdSetTaggerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_DogstatsdSetTaggerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).DogstatsdSetTaggerState(ctx, req.(*TaggerState))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_ClientGetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_ClientGetConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).ClientGetConfigs(ctx, req.(*ClientGetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_GetConfigState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetConfigState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_GetConfigState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetConfigState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_ClientGetConfigsHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientGetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).ClientGetConfigsHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_ClientGetConfigsHA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).ClientGetConfigsHA(ctx, req.(*ClientGetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_GetConfigStateHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetConfigStateHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_GetConfigStateHA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetConfigStateHA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_WorkloadmetaStreamEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkloadmetaStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).WorkloadmetaStreamEntities(m, &grpc.GenericServerStream[WorkloadmetaStreamRequest, WorkloadmetaStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_WorkloadmetaStreamEntitiesServer = grpc.ServerStreamingServer[WorkloadmetaStreamResponse]

func _AgentSecure_RegisterRemoteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRemoteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).RegisterRemoteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_RegisterRemoteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).RegisterRemoteAgent(ctx, req.(*RegisterRemoteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentSecure_AutodiscoveryStreamConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentSecureServer).AutodiscoveryStreamConfig(m, &grpc.GenericServerStream[emptypb.Empty, AutodiscoveryStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentSecure_AutodiscoveryStreamConfigServer = grpc.ServerStreamingServer[AutodiscoveryStreamResponse]

func _AgentSecure_GetHostTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentSecureServer).GetHostTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentSecure_GetHostTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentSecureServer).GetHostTags(ctx, req.(*HostTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentSecure_ServiceDesc is the grpc.ServiceDesc for AgentSecure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentSecure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.AgentSecure",
	HandlerType: (*AgentSecureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaggerGenerateContainerIDFromOriginInfo",
			Handler:    _AgentSecure_TaggerGenerateContainerIDFromOriginInfo_Handler,
		},
		{
			MethodName: "TaggerFetchEntity",
			Handler:    _AgentSecure_TaggerFetchEntity_Handler,
		},
		{
			MethodName: "DogstatsdCaptureTrigger",
			Handler:    _AgentSecure_DogstatsdCaptureTrigger_Handler,
		},
		{
			MethodName: "DogstatsdSetTaggerState",
			Handler:    _AgentSecure_DogstatsdSetTaggerState_Handler,
		},
		{
			MethodName: "ClientGetConfigs",
			Handler:    _AgentSecure_ClientGetConfigs_Handler,
		},
		{
			MethodName: "GetConfigState",
			Handler:    _AgentSecure_GetConfigState_Handler,
		},
		{
			MethodName: "ClientGetConfigsHA",
			Handler:    _AgentSecure_ClientGetConfigsHA_Handler,
		},
		{
			MethodName: "GetConfigStateHA",
			Handler:    _AgentSecure_GetConfigStateHA_Handler,
		},
		{
			MethodName: "RegisterRemoteAgent",
			Handler:    _AgentSecure_RegisterRemoteAgent_Handler,
		},
		{
			MethodName: "GetHostTags",
			Handler:    _AgentSecure_GetHostTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaggerStreamEntities",
			Handler:       _AgentSecure_TaggerStreamEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WorkloadmetaStreamEntities",
			Handler:       _AgentSecure_WorkloadmetaStreamEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutodiscoveryStreamConfig",
			Handler:       _AgentSecure_AutodiscoveryStreamConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datadog/api/v1/api.proto",
}

const (
	RemoteAgent_GetStatusDetails_FullMethodName = "/datadog.api.v1.RemoteAgent/GetStatusDetails"
	RemoteAgent_GetFlareFiles_FullMethodName    = "/datadog.api.v1.RemoteAgent/GetFlareFiles"
)

// RemoteAgentClient is the client API for RemoteAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service exposed by remote agents to allow querying by the Core Agent.
type RemoteAgentClient interface {
	// Gets the status details of a remote agent.
	GetStatusDetails(ctx context.Context, in *GetStatusDetailsRequest, opts ...grpc.CallOption) (*GetStatusDetailsResponse, error)
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error)
}

type remoteAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteAgentClient(cc grpc.ClientConnInterface) RemoteAgentClient {
	return &remoteAgentClient{cc}
}

func (c *remoteAgentClient) GetStatusDetails(ctx context.Context, in *GetStatusDetailsRequest, opts ...grpc.CallOption) (*GetStatusDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusDetailsResponse)
	err := c.cc.Invoke(ctx, RemoteAgent_GetStatusDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteAgentClient) GetFlareFiles(ctx context.Context, in *GetFlareFilesRequest, opts ...grpc.CallOption) (*GetFlareFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlareFilesResponse)
	err := c.cc.Invoke(ctx, RemoteAgent_GetFlareFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteAgentServer is the server API for RemoteAgent service.
// All implementations must embed UnimplementedRemoteAgentServer
// for forward compatibility.
//
// Service exposed by remote agents to allow querying by the Core Agent.
type RemoteAgentServer interface {
	// Gets the status details of a remote agent.
	GetStatusDetails(context.Context, *GetStatusDetailsRequest) (*GetStatusDetailsResponse, error)
	// Gets all relevant flare files of a remote agent.
	GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error)
	mustEmbedUnimplementedRemoteAgentServer()
}

// UnimplementedRemoteAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteAgentServer struct{}

func (UnimplementedRemoteAgentServer) GetStatusDetails(context.Context, *GetStatusDetailsRequest) (*GetStatusDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusDetails not implemented")
}
func (UnimplementedRemoteAgentServer) GetFlareFiles(context.Context, *GetFlareFilesRequest) (*GetFlareFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlareFiles not implemented")
}
func (UnimplementedRemoteAgentServer) mustEmbedUnimplementedRemoteAgentServer() {}
func (UnimplementedRemoteAgentServer) testEmbeddedByValue()                     {}

// UnsafeRemoteAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteAgentServer will
// result in compilation errors.
type UnsafeRemoteAgentServer interface {
	mustEmbedUnimplementedRemoteAgentServer()
}

func RegisterRemoteAgentServer(s grpc.ServiceRegistrar, srv RemoteAgentServer) {
	// If the following call pancis, it indicates UnimplementedRemoteAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteAgent_ServiceDesc, srv)
}

func _RemoteAgent_GetStatusDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAgentServer).GetStatusDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteAgent_GetStatusDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAgentServer).GetStatusDetails(ctx, req.(*GetStatusDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteAgent_GetFlareFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlareFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAgentServer).GetFlareFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteAgent_GetFlareFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAgentServer).GetFlareFiles(ctx, req.(*GetFlareFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteAgent_ServiceDesc is the grpc.ServiceDesc for RemoteAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.api.v1.RemoteAgent",
	HandlerType: (*RemoteAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatusDetails",
			Handler:    _RemoteAgent_GetStatusDetails_Handler,
		},
		{
			MethodName: "GetFlareFiles",
			Handler:    _RemoteAgent_GetFlareFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/api/v1/api.proto",
}
