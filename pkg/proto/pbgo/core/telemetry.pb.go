// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: datadog/remoteagent/telemetry.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTelemetryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTelemetryRequest) Reset() {
	*x = GetTelemetryRequest{}
	mi := &file_datadog_remoteagent_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelemetryRequest) ProtoMessage() {}

func (x *GetTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_remoteagent_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelemetryRequest.ProtoReflect.Descriptor instead.
func (*GetTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_datadog_remoteagent_telemetry_proto_rawDescGZIP(), []int{0}
}

type GetTelemetryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Telemetry payload.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*GetTelemetryResponse_PromText
	Payload       isGetTelemetryResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTelemetryResponse) Reset() {
	*x = GetTelemetryResponse{}
	mi := &file_datadog_remoteagent_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelemetryResponse) ProtoMessage() {}

func (x *GetTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_remoteagent_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelemetryResponse.ProtoReflect.Descriptor instead.
func (*GetTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_datadog_remoteagent_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *GetTelemetryResponse) GetPayload() isGetTelemetryResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GetTelemetryResponse) GetPromText() string {
	if x != nil {
		if x, ok := x.Payload.(*GetTelemetryResponse_PromText); ok {
			return x.PromText
		}
	}
	return ""
}

type isGetTelemetryResponse_Payload interface {
	isGetTelemetryResponse_Payload()
}

type GetTelemetryResponse_PromText struct {
	// Prometheus "text" exposition format.
	//
	// https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format
	PromText string `protobuf:"bytes,1,opt,name=prom_text,json=promText,proto3,oneof"`
}

func (*GetTelemetryResponse_PromText) isGetTelemetryResponse_Payload() {}

var File_datadog_remoteagent_telemetry_proto protoreflect.FileDescriptor

const file_datadog_remoteagent_telemetry_proto_rawDesc = "" +
	"\n" +
	"#datadog/remoteagent/telemetry.proto\x12 datadog.remoteagent.telemetry.v1\"\x15\n" +
	"\x13GetTelemetryRequest\"@\n" +
	"\x14GetTelemetryResponse\x12\x1d\n" +
	"\tprom_text\x18\x01 \x01(\tH\x00R\bpromTextB\t\n" +
	"\apayload2\x92\x01\n" +
	"\x11TelemetryProvider\x12}\n" +
	"\fGetTelemetry\x125.datadog.remoteagent.telemetry.v1.GetTelemetryRequest\x1a6.datadog.remoteagent.telemetry.v1.GetTelemetryResponseB\x15Z\x13pkg/proto/pbgo/coreb\x06proto3"

var (
	file_datadog_remoteagent_telemetry_proto_rawDescOnce sync.Once
	file_datadog_remoteagent_telemetry_proto_rawDescData []byte
)

func file_datadog_remoteagent_telemetry_proto_rawDescGZIP() []byte {
	file_datadog_remoteagent_telemetry_proto_rawDescOnce.Do(func() {
		file_datadog_remoteagent_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_remoteagent_telemetry_proto_rawDesc), len(file_datadog_remoteagent_telemetry_proto_rawDesc)))
	})
	return file_datadog_remoteagent_telemetry_proto_rawDescData
}

var file_datadog_remoteagent_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_datadog_remoteagent_telemetry_proto_goTypes = []any{
	(*GetTelemetryRequest)(nil),  // 0: datadog.remoteagent.telemetry.v1.GetTelemetryRequest
	(*GetTelemetryResponse)(nil), // 1: datadog.remoteagent.telemetry.v1.GetTelemetryResponse
}
var file_datadog_remoteagent_telemetry_proto_depIdxs = []int32{
	0, // 0: datadog.remoteagent.telemetry.v1.TelemetryProvider.GetTelemetry:input_type -> datadog.remoteagent.telemetry.v1.GetTelemetryRequest
	1, // 1: datadog.remoteagent.telemetry.v1.TelemetryProvider.GetTelemetry:output_type -> datadog.remoteagent.telemetry.v1.GetTelemetryResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_datadog_remoteagent_telemetry_proto_init() }
func file_datadog_remoteagent_telemetry_proto_init() {
	if File_datadog_remoteagent_telemetry_proto != nil {
		return
	}
	file_datadog_remoteagent_telemetry_proto_msgTypes[1].OneofWrappers = []any{
		(*GetTelemetryResponse_PromText)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_remoteagent_telemetry_proto_rawDesc), len(file_datadog_remoteagent_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datadog_remoteagent_telemetry_proto_goTypes,
		DependencyIndexes: file_datadog_remoteagent_telemetry_proto_depIdxs,
		MessageInfos:      file_datadog_remoteagent_telemetry_proto_msgTypes,
	}.Build()
	File_datadog_remoteagent_telemetry_proto = out.File
	file_datadog_remoteagent_telemetry_proto_goTypes = nil
	file_datadog_remoteagent_telemetry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TelemetryProviderClient is the client API for TelemetryProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryProviderClient interface {
	// Gets the telemetry data of a remote agent.
	GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error)
}

type telemetryProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryProviderClient(cc grpc.ClientConnInterface) TelemetryProviderClient {
	return &telemetryProviderClient{cc}
}

func (c *telemetryProviderClient) GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error) {
	out := new(GetTelemetryResponse)
	err := c.cc.Invoke(ctx, "/datadog.remoteagent.telemetry.v1.TelemetryProvider/GetTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryProviderServer is the server API for TelemetryProvider service.
type TelemetryProviderServer interface {
	// Gets the telemetry data of a remote agent.
	GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error)
}

// UnimplementedTelemetryProviderServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryProviderServer struct {
}

func (*UnimplementedTelemetryProviderServer) GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetry not implemented")
}

func RegisterTelemetryProviderServer(s *grpc.Server, srv TelemetryProviderServer) {
	s.RegisterService(&_TelemetryProvider_serviceDesc, srv)
}

func _TelemetryProvider_GetTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryProviderServer).GetTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datadog.remoteagent.telemetry.v1.TelemetryProvider/GetTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryProviderServer).GetTelemetry(ctx, req.(*GetTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelemetryProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datadog.remoteagent.telemetry.v1.TelemetryProvider",
	HandlerType: (*TelemetryProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTelemetry",
			Handler:    _TelemetryProvider_GetTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datadog/remoteagent/telemetry.proto",
}
