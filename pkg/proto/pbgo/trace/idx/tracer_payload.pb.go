// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: datadog/trace/idx/tracer_payload.proto

package idx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TraceChunk represents a list of spans with the same trace ID. In other words, a chunk of a trace.
type TraceChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// priority specifies sampling priority of the trace.
	// @gotags: json:"priority" msg:"priority"
	Priority int32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority" msg:"priority"`
	// origin specifies origin product ("lambda", "rum", etc.) of the trace.
	// @gotags: json:"origin" msg:"origin"
	Origin uint32 `protobuf:"varint,2,opt,name=origin,proto3" json:"origin" msg:"origin"`
	// tags specifies tags common in all `spans`.
	// @gotags: json:"attributes" msg:"attributes"
	Attributes []*KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes" msg:"attributes"`
	// spans specifies list of containing spans.
	// @gotags: json:"spans" msg:"spans"
	Spans []*Span `protobuf:"bytes,4,rep,name=spans,proto3" json:"spans" msg:"spans"`
	// droppedTrace specifies whether the trace was dropped by samplers or not.
	// @gotags: json:"dropped_trace" msg:"dropped_trace"
	DroppedTrace bool `protobuf:"varint,5,opt,name=droppedTrace,proto3" json:"dropped_trace" msg:"dropped_trace"`
	// the ID of the trace to which all spans in this chunk belong
	// @gotags: json:"traceID" msg:"traceID"
	TraceID []byte `protobuf:"bytes,6,opt,name=traceID,proto3" json:"traceID" msg:"traceID"`
	// the optional string decision maker (previously span tag _dd.p.dm)
	// @gotags: json:"decisionMaker" msg:"decisionMaker"
	DecisionMaker uint32 `protobuf:"varint,7,opt,name=decisionMaker,proto3" json:"decisionMaker" msg:"decisionMaker"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceChunk) Reset() {
	*x = TraceChunk{}
	mi := &file_datadog_trace_idx_tracer_payload_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceChunk) ProtoMessage() {}

func (x *TraceChunk) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_tracer_payload_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceChunk.ProtoReflect.Descriptor instead.
func (*TraceChunk) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_tracer_payload_proto_rawDescGZIP(), []int{0}
}

func (x *TraceChunk) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TraceChunk) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

func (x *TraceChunk) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TraceChunk) GetSpans() []*Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *TraceChunk) GetDroppedTrace() bool {
	if x != nil {
		return x.DroppedTrace
	}
	return false
}

func (x *TraceChunk) GetTraceID() []byte {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *TraceChunk) GetDecisionMaker() uint32 {
	if x != nil {
		return x.DecisionMaker
	}
	return 0
}

// TracerPayload represents a payload the trace agent receives from tracers.
type TracerPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// array of strings referenced in this tracer payload, its chunks and spans
	// @gotags: json:"strings" msg:"strings"
	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings" msg:"strings"`
	// containerID specifies the ID of the container where the tracer is running on.
	// @gotags: json:"container_id" msg:"container_id"
	ContainerID uint32 `protobuf:"varint,2,opt,name=containerID,proto3" json:"container_id" msg:"container_id"`
	// languageName specifies language of the tracer.
	// @gotags: json:"language_name" msg:"language_name"
	LanguageName uint32 `protobuf:"varint,3,opt,name=languageName,proto3" json:"language_name" msg:"language_name"`
	// languageVersion specifies language version of the tracer.
	// @gotags: json:"language_version" msg:"language_version"
	LanguageVersion uint32 `protobuf:"varint,4,opt,name=languageVersion,proto3" json:"language_version" msg:"language_version"`
	// tracerVersion specifies version of the tracer.
	// @gotags: json:"tracer_version" msg:"tracer_version"
	TracerVersion uint32 `protobuf:"varint,5,opt,name=tracerVersion,proto3" json:"tracer_version" msg:"tracer_version"`
	// runtimeID specifies V4 UUID representation of a tracer session.
	// @gotags: json:"runtime_id" msg:"runtime_id"
	RuntimeID uint32 `protobuf:"varint,6,opt,name=runtimeID,proto3" json:"runtime_id" msg:"runtime_id"`
	// env specifies `env` tag that set with the tracer.
	// @gotags: json:"env" msg:"env"
	Env uint32 `protobuf:"varint,8,opt,name=env,proto3" json:"env" msg:"env"`
	// hostname specifies hostname of where the tracer is running.
	// @gotags: json:"hostname" msg:"hostname"
	Hostname uint32 `protobuf:"varint,9,opt,name=hostname,proto3" json:"hostname" msg:"hostname"`
	// version specifies `version` tag that set with the tracer.
	// @gotags: json:"app_version" msg:"app_version"
	AppVersion uint32 `protobuf:"varint,10,opt,name=appVersion,proto3" json:"app_version" msg:"app_version"`
	// a collection of key to value pairs common in all `chunks`
	// @gotags: json:"attributes" msg:"attributes"
	Attributes []*KeyValue `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes" msg:"attributes"`
	// chunks specifies list of containing trace chunks.
	// @gotags: json:"chunks" msg:"chunks"
	Chunks        []*TraceChunk `protobuf:"bytes,12,rep,name=chunks,proto3" json:"chunks" msg:"chunks"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerPayload) Reset() {
	*x = TracerPayload{}
	mi := &file_datadog_trace_idx_tracer_payload_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracerPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerPayload) ProtoMessage() {}

func (x *TracerPayload) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_tracer_payload_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerPayload.ProtoReflect.Descriptor instead.
func (*TracerPayload) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_tracer_payload_proto_rawDescGZIP(), []int{1}
}

func (x *TracerPayload) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *TracerPayload) GetContainerID() uint32 {
	if x != nil {
		return x.ContainerID
	}
	return 0
}

func (x *TracerPayload) GetLanguageName() uint32 {
	if x != nil {
		return x.LanguageName
	}
	return 0
}

func (x *TracerPayload) GetLanguageVersion() uint32 {
	if x != nil {
		return x.LanguageVersion
	}
	return 0
}

func (x *TracerPayload) GetTracerVersion() uint32 {
	if x != nil {
		return x.TracerVersion
	}
	return 0
}

func (x *TracerPayload) GetRuntimeID() uint32 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *TracerPayload) GetEnv() uint32 {
	if x != nil {
		return x.Env
	}
	return 0
}

func (x *TracerPayload) GetHostname() uint32 {
	if x != nil {
		return x.Hostname
	}
	return 0
}

func (x *TracerPayload) GetAppVersion() uint32 {
	if x != nil {
		return x.AppVersion
	}
	return 0
}

func (x *TracerPayload) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TracerPayload) GetChunks() []*TraceChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

var File_datadog_trace_idx_tracer_payload_proto protoreflect.FileDescriptor

var file_datadog_trace_idx_tracer_payload_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x64, 0x78, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x1a, 0x1c, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x78, 0x2f, 0x73,
	0x70, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x64, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x9f, 0x03, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x42, 0x1a,
	0x5a, 0x18, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_datadog_trace_idx_tracer_payload_proto_rawDescOnce sync.Once
	file_datadog_trace_idx_tracer_payload_proto_rawDescData []byte
)

func file_datadog_trace_idx_tracer_payload_proto_rawDescGZIP() []byte {
	file_datadog_trace_idx_tracer_payload_proto_rawDescOnce.Do(func() {
		file_datadog_trace_idx_tracer_payload_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_tracer_payload_proto_rawDesc), len(file_datadog_trace_idx_tracer_payload_proto_rawDesc)))
	})
	return file_datadog_trace_idx_tracer_payload_proto_rawDescData
}

var file_datadog_trace_idx_tracer_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_datadog_trace_idx_tracer_payload_proto_goTypes = []any{
	(*TraceChunk)(nil),    // 0: datadog.trace.idx.TraceChunk
	(*TracerPayload)(nil), // 1: datadog.trace.idx.TracerPayload
	(*KeyValue)(nil),      // 2: datadog.trace.idx.KeyValue
	(*Span)(nil),          // 3: datadog.trace.idx.Span
}
var file_datadog_trace_idx_tracer_payload_proto_depIdxs = []int32{
	2, // 0: datadog.trace.idx.TraceChunk.attributes:type_name -> datadog.trace.idx.KeyValue
	3, // 1: datadog.trace.idx.TraceChunk.spans:type_name -> datadog.trace.idx.Span
	2, // 2: datadog.trace.idx.TracerPayload.attributes:type_name -> datadog.trace.idx.KeyValue
	0, // 3: datadog.trace.idx.TracerPayload.chunks:type_name -> datadog.trace.idx.TraceChunk
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_datadog_trace_idx_tracer_payload_proto_init() }
func file_datadog_trace_idx_tracer_payload_proto_init() {
	if File_datadog_trace_idx_tracer_payload_proto != nil {
		return
	}
	file_datadog_trace_idx_span_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_tracer_payload_proto_rawDesc), len(file_datadog_trace_idx_tracer_payload_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datadog_trace_idx_tracer_payload_proto_goTypes,
		DependencyIndexes: file_datadog_trace_idx_tracer_payload_proto_depIdxs,
		MessageInfos:      file_datadog_trace_idx_tracer_payload_proto_msgTypes,
	}.Build()
	File_datadog_trace_idx_tracer_payload_proto = out.File
	file_datadog_trace_idx_tracer_payload_proto_goTypes = nil
	file_datadog_trace_idx_tracer_payload_proto_depIdxs = nil
}
