// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: datadog/trace/idx/span.proto

package idx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO: use the import from otel here
// SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	// Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
	SpanKind_SPAN_KIND_UNSPECIFIED SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operations happening at the boundaries. Default value.
	SpanKind_SPAN_KIND_INTERNAL SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	SpanKind_SPAN_KIND_SERVER SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	SpanKind_SPAN_KIND_CLIENT SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
	// between producer and consumer spans. A PRODUCER span ends when the message was accepted
	// by the broker while the logical processing of the message might span a much longer time.
	SpanKind_SPAN_KIND_PRODUCER SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	// Like the PRODUCER kind, there is often no direct critical path latency relationship
	// between producer and consumer spans.
	SpanKind_SPAN_KIND_CONSUMER SpanKind = 5
)

// Enum value maps for SpanKind.
var (
	SpanKind_name = map[int32]string{
		0: "SPAN_KIND_UNSPECIFIED",
		1: "SPAN_KIND_INTERNAL",
		2: "SPAN_KIND_SERVER",
		3: "SPAN_KIND_CLIENT",
		4: "SPAN_KIND_PRODUCER",
		5: "SPAN_KIND_CONSUMER",
	}
	SpanKind_value = map[string]int32{
		"SPAN_KIND_UNSPECIFIED": 0,
		"SPAN_KIND_INTERNAL":    1,
		"SPAN_KIND_SERVER":      2,
		"SPAN_KIND_CLIENT":      3,
		"SPAN_KIND_PRODUCER":    4,
		"SPAN_KIND_CONSUMER":    5,
	}
)

func (x SpanKind) Enum() *SpanKind {
	p := new(SpanKind)
	*p = x
	return p
}

func (x SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_datadog_trace_idx_span_proto_enumTypes[0].Descriptor()
}

func (SpanKind) Type() protoreflect.EnumType {
	return &file_datadog_trace_idx_span_proto_enumTypes[0]
}

func (x SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanKind.Descriptor instead.
func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{0}
}

type AnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_IntValue
	//	*AnyValue_BytesValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KeyValueList
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{0}
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() uint32 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return 0
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKeyValueList() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KeyValueList); ok {
			return x.KeyValueList
		}
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	// @gotags: json:"string_value" msg:"string_value"
	StringValue uint32 `protobuf:"varint,1,opt,name=stringValue,proto3,oneof" json:"string_value" msg:"string_value"`
}

type AnyValue_BoolValue struct {
	// @gotags: json:"bool_value" msg:"bool_value"
	BoolValue bool `protobuf:"varint,2,opt,name=boolValue,proto3,oneof" json:"bool_value" msg:"bool_value"`
}

type AnyValue_DoubleValue struct {
	// @gotags: json:"double_value" msg:"double_value"
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=doubleValue,proto3,oneof" json:"double_value" msg:"double_value"`
}

type AnyValue_IntValue struct {
	// @gotags: json:"int_value" msg:"int_value"
	IntValue int64 `protobuf:"varint,4,opt,name=intValue,proto3,oneof" json:"int_value" msg:"int_value"`
}

type AnyValue_BytesValue struct {
	// @gotags: json:"bytes_value" msg:"bytes_value"
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytesValue,proto3,oneof" json:"bytes_value" msg:"bytes_value"`
}

type AnyValue_ArrayValue struct {
	// @gotags: json:"array_value" msg:"array_value"
	ArrayValue *ArrayValue `protobuf:"bytes,6,opt,name=arrayValue,proto3,oneof" json:"array_value" msg:"array_value"`
}

type AnyValue_KeyValueList struct {
	// @gotags: json:"key_value_list" msg:"key_value_list"
	KeyValueList *KeyValueList `protobuf:"bytes,7,opt,name=keyValueList,proto3,oneof" json:"key_value_list" msg:"key_value_list"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KeyValueList) isAnyValue_Value() {}

type KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"key" msg:"key"
	Key uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key" msg:"key"`
	// @gotags: json:"value" msg:"value"
	Value         *AnyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value" msg:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// a repeated list of AnyValue that is needed since `oneof` in AnyValue
// cannot be `repeated`
type ArrayValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"values" msg:"values"
	Values        []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values" msg:"values"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{2}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// a repeated list of KeyValue messages that is needed since `oneof`
// in AnyValue cannot be `repeated` or `map`
type KeyValueList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"key_values" msg:"key_values"
	KeyValues     []*KeyValue `protobuf:"bytes,1,rep,name=keyValues,proto3" json:"key_values" msg:"key_values"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValueList) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type SpanLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"trace_id" msg:"trace_id"
	TraceID []byte `protobuf:"bytes,1,opt,name=traceID,proto3" json:"trace_id" msg:"trace_id"` // Required.
	// @gotags: json:"span_id" msg:"span_id"
	SpanID uint64 `protobuf:"fixed64,2,opt,name=spanID,proto3" json:"span_id" msg:"span_id"` // Required.
	// @gotags: json:"attributes" msg:"attributes"
	Attributes []*KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes" msg:"attributes"`
	// @gotags: json:"tracestate" msg:"tracestate"
	Tracestate uint32 `protobuf:"varint,4,opt,name=tracestate,proto3" json:"tracestate" msg:"tracestate"` // Optional. W3C tracestate.
	// @gotags: json:"flags" msg:"flags"
	Flags         uint32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags" msg:"flags"` // Optional. W3C trace flags. If set, the high bit (bit 31) must be set.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanLink) Reset() {
	*x = SpanLink{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanLink) ProtoMessage() {}

func (x *SpanLink) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanLink.ProtoReflect.Descriptor instead.
func (*SpanLink) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{4}
}

func (x *SpanLink) GetTraceID() []byte {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *SpanLink) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *SpanLink) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SpanLink) GetTracestate() uint32 {
	if x != nil {
		return x.Tracestate
	}
	return 0
}

func (x *SpanLink) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type SpanEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"time" msg:"time"
	Time uint64 `protobuf:"fixed64,1,opt,name=time,proto3" json:"time" msg:"time"` // time is the number of nanoseconds between the Unix epoch and this event.
	// @gotags: json:"name" msg:"name"
	Name uint32 `protobuf:"varint,2,opt,name=name,proto3" json:"name" msg:"name"` // name is this event's name.
	// attributes is a mapping from attribute key string to any value.
	// The order of attributes should be preserved in the key/value map.
	// The supported values match the OpenTelemetry attributes specification:
	// https://github.com/open-telemetry/opentelemetry-proto/blob/a8f08fc49d60538f97ffabcc7feac92f832976dd/opentelemetry/proto/common/v1/common.proto
	// @gotags: json:"attributes" msg:"attributes"
	Attributes    []*KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes" msg:"attributes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{5}
}

func (x *SpanEvent) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SpanEvent) GetName() uint32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *SpanEvent) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Span struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// service is the name of the service with which this span is associated.
	// @gotags: json:"service" msg:"service"
	Service uint32 `protobuf:"varint,1,opt,name=service,proto3" json:"service" msg:"service"`
	// name is the operation name of this span.
	// @gotags: json:"name" msg:"name"
	Name uint32 `protobuf:"varint,2,opt,name=name,proto3" json:"name" msg:"name"`
	// resource is the resource name of this span, also sometimes called the endpoint (for web spans).
	// @gotags: json:"resource" msg:"resource"
	Resource uint32 `protobuf:"varint,3,opt,name=resource,proto3" json:"resource" msg:"resource"`
	// spanID is the ID of this span.
	// @gotags: json:"span_id" msg:"span_id"
	SpanID uint64 `protobuf:"fixed64,4,opt,name=spanID,proto3" json:"span_id" msg:"span_id"`
	// parentID is the ID of this span's parent, or zero if this span has no parent.
	// @gotags: json:"parent_id" msg:"parent_id"
	ParentID uint64 `protobuf:"varint,5,opt,name=parentID,proto3" json:"parent_id" msg:"parent_id"`
	// start is the number of nanoseconds between the Unix epoch and the beginning of this span.
	// @gotags: json:"start" msg:"start"
	Start uint64 `protobuf:"fixed64,6,opt,name=start,proto3" json:"start" msg:"start"`
	// duration is the time length of this span in nanoseconds.
	// @gotags: json:"duration" msg:"duration"
	Duration uint64 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration" msg:"duration"`
	// if there is an error associated with this span
	// @gotags: json:"error" msg:"error"
	Error bool `protobuf:"varint,8,opt,name=error,proto3" json:"error" msg:"error"`
	// meta is a mapping from tag name to tag value for string-valued tags.
	// @gotags: json:"attributes,omitempty" msg:"attributes,omitempty"
	Attributes []*KeyValue `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" msg:"attributes,omitempty"`
	// type is the type of the service with which this span is associated.  Example values: web, db, lambda.
	// @gotags: json:"type" msg:"type"
	Type uint32 `protobuf:"varint,10,opt,name=type,proto3" json:"type" msg:"type"`
	// span_links represents a collection of links, where each link defines a causal relationship between two spans.
	// @gotags: json:"span_links,omitempty" msg:"span_links,omitempty"
	SpanLinks []*SpanLink `protobuf:"bytes,11,rep,name=spanLinks,proto3" json:"span_links,omitempty" msg:"span_links,omitempty"`
	// spanEvents represent an event at an instant in time related to this span, but not necessarily during the span.
	// @gotags: json:"span_events,omitempty" msg:"span_events,omitempty"
	SpanEvents []*SpanEvent `protobuf:"bytes,12,rep,name=spanEvents,proto3" json:"span_events,omitempty" msg:"span_events,omitempty"`
	// the optional string environment of this span
	// @gotags: json:"env" msg:"env"
	Env uint32 `protobuf:"varint,13,opt,name=env,proto3" json:"env" msg:"env"`
	// the optional string version of this span
	// @gotags: json:"version" msg:"version"
	Version uint32 `protobuf:"varint,14,opt,name=version,proto3" json:"version" msg:"version"`
	// the string component name of this span
	// @gotags: json:"component" msg:"component"
	Component uint32 `protobuf:"varint,15,opt,name=component,proto3" json:"component" msg:"component"`
	// the SpanKind of this span as defined in the OTEL Specification
	// @gotags: json:"kind" msg:"kind"
	Kind          SpanKind `protobuf:"varint,16,opt,name=kind,proto3,enum=datadog.trace.idx.SpanKind" json:"kind" msg:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Span) Reset() {
	*x = Span{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{6}
}

func (x *Span) GetService() uint32 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *Span) GetName() uint32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *Span) GetResource() uint32 {
	if x != nil {
		return x.Resource
	}
	return 0
}

func (x *Span) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *Span) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Span) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Span) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Span) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *Span) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Span) GetSpanLinks() []*SpanLink {
	if x != nil {
		return x.SpanLinks
	}
	return nil
}

func (x *Span) GetSpanEvents() []*SpanEvent {
	if x != nil {
		return x.SpanEvents
	}
	return nil
}

func (x *Span) GetEnv() uint32 {
	if x != nil {
		return x.Env
	}
	return 0
}

func (x *Span) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Span) GetComponent() uint32 {
	if x != nil {
		return x.Component
	}
	return 0
}

func (x *Span) GetKind() SpanKind {
	if x != nil {
		return x.Kind
	}
	return SpanKind_SPAN_KIND_UNSPECIFIED
}

var File_datadog_trace_idx_span_proto protoreflect.FileDescriptor

var file_datadog_trace_idx_span_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f,
	0x69, 0x64, 0x78, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x78, 0x22, 0xc3, 0x02, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0c, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x73,
	0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x70, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x91, 0x04, 0x0a, 0x04, 0x53,
	0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x73,
	0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x78, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64,
	0x78, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x78, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x99,
	0x01, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50,
	0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x05, 0x42, 0x1a, 0x5a, 0x18, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2f, 0x69, 0x64, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_datadog_trace_idx_span_proto_rawDescOnce sync.Once
	file_datadog_trace_idx_span_proto_rawDescData []byte
)

func file_datadog_trace_idx_span_proto_rawDescGZIP() []byte {
	file_datadog_trace_idx_span_proto_rawDescOnce.Do(func() {
		file_datadog_trace_idx_span_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_span_proto_rawDesc), len(file_datadog_trace_idx_span_proto_rawDesc)))
	})
	return file_datadog_trace_idx_span_proto_rawDescData
}

var file_datadog_trace_idx_span_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_datadog_trace_idx_span_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_datadog_trace_idx_span_proto_goTypes = []any{
	(SpanKind)(0),        // 0: datadog.trace.idx.SpanKind
	(*AnyValue)(nil),     // 1: datadog.trace.idx.AnyValue
	(*KeyValue)(nil),     // 2: datadog.trace.idx.KeyValue
	(*ArrayValue)(nil),   // 3: datadog.trace.idx.ArrayValue
	(*KeyValueList)(nil), // 4: datadog.trace.idx.KeyValueList
	(*SpanLink)(nil),     // 5: datadog.trace.idx.SpanLink
	(*SpanEvent)(nil),    // 6: datadog.trace.idx.SpanEvent
	(*Span)(nil),         // 7: datadog.trace.idx.Span
}
var file_datadog_trace_idx_span_proto_depIdxs = []int32{
	3,  // 0: datadog.trace.idx.AnyValue.arrayValue:type_name -> datadog.trace.idx.ArrayValue
	4,  // 1: datadog.trace.idx.AnyValue.keyValueList:type_name -> datadog.trace.idx.KeyValueList
	1,  // 2: datadog.trace.idx.KeyValue.value:type_name -> datadog.trace.idx.AnyValue
	1,  // 3: datadog.trace.idx.ArrayValue.values:type_name -> datadog.trace.idx.AnyValue
	2,  // 4: datadog.trace.idx.KeyValueList.keyValues:type_name -> datadog.trace.idx.KeyValue
	2,  // 5: datadog.trace.idx.SpanLink.attributes:type_name -> datadog.trace.idx.KeyValue
	2,  // 6: datadog.trace.idx.SpanEvent.attributes:type_name -> datadog.trace.idx.KeyValue
	2,  // 7: datadog.trace.idx.Span.attributes:type_name -> datadog.trace.idx.KeyValue
	5,  // 8: datadog.trace.idx.Span.spanLinks:type_name -> datadog.trace.idx.SpanLink
	6,  // 9: datadog.trace.idx.Span.spanEvents:type_name -> datadog.trace.idx.SpanEvent
	0,  // 10: datadog.trace.idx.Span.kind:type_name -> datadog.trace.idx.SpanKind
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_datadog_trace_idx_span_proto_init() }
func file_datadog_trace_idx_span_proto_init() {
	if File_datadog_trace_idx_span_proto != nil {
		return
	}
	file_datadog_trace_idx_span_proto_msgTypes[0].OneofWrappers = []any{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_BytesValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KeyValueList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_span_proto_rawDesc), len(file_datadog_trace_idx_span_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datadog_trace_idx_span_proto_goTypes,
		DependencyIndexes: file_datadog_trace_idx_span_proto_depIdxs,
		EnumInfos:         file_datadog_trace_idx_span_proto_enumTypes,
		MessageInfos:      file_datadog_trace_idx_span_proto_msgTypes,
	}.Build()
	File_datadog_trace_idx_span_proto = out.File
	file_datadog_trace_idx_span_proto_goTypes = nil
	file_datadog_trace_idx_span_proto_depIdxs = nil
}
