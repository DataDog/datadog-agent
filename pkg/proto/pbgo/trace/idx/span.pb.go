// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.3
// source: datadog/trace/idx/span.proto

package idx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	// Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
	SpanKind_SPAN_KIND_UNSPECIFIED SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operations happening at the boundaries. Default value.
	SpanKind_SPAN_KIND_INTERNAL SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	SpanKind_SPAN_KIND_SERVER SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	SpanKind_SPAN_KIND_CLIENT SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
	// between producer and consumer spans. A PRODUCER span ends when the message was accepted
	// by the broker while the logical processing of the message might span a much longer time.
	SpanKind_SPAN_KIND_PRODUCER SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	// Like the PRODUCER kind, there is often no direct critical path latency relationship
	// between producer and consumer spans.
	SpanKind_SPAN_KIND_CONSUMER SpanKind = 5
)

// Enum value maps for SpanKind.
var (
	SpanKind_name = map[int32]string{
		0: "SPAN_KIND_UNSPECIFIED",
		1: "SPAN_KIND_INTERNAL",
		2: "SPAN_KIND_SERVER",
		3: "SPAN_KIND_CLIENT",
		4: "SPAN_KIND_PRODUCER",
		5: "SPAN_KIND_CONSUMER",
	}
	SpanKind_value = map[string]int32{
		"SPAN_KIND_UNSPECIFIED": 0,
		"SPAN_KIND_INTERNAL":    1,
		"SPAN_KIND_SERVER":      2,
		"SPAN_KIND_CLIENT":      3,
		"SPAN_KIND_PRODUCER":    4,
		"SPAN_KIND_CONSUMER":    5,
	}
)

func (x SpanKind) Enum() *SpanKind {
	p := new(SpanKind)
	*p = x
	return p
}

func (x SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_datadog_trace_idx_span_proto_enumTypes[0].Descriptor()
}

func (SpanKind) Type() protoreflect.EnumType {
	return &file_datadog_trace_idx_span_proto_enumTypes[0]
}

func (x SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanKind.Descriptor instead.
func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{0}
}

// AnyValue is a union of possible value types.
type AnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValueRef
	//	*AnyValue_BoolValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_IntValue
	//	*AnyValue_BytesValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KeyValueList
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{0}
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValueRef() uint32 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValueRef); ok {
			return x.StringValueRef
		}
	}
	return 0
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKeyValueList() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KeyValueList); ok {
			return x.KeyValueList
		}
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValueRef struct {
	// stringValueRef specifies the string table ref of a string value.
	StringValueRef uint32 `protobuf:"varint,1,opt,name=stringValueRef,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	// boolValue specifies a bool value.
	BoolValue bool `protobuf:"varint,2,opt,name=boolValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	// doubleValue specifies a double value.
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=doubleValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	// intValue specifies an int value.
	IntValue int64 `protobuf:"varint,4,opt,name=intValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	// bytesValue specifies a bytes value.
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytesValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	// arrayValue specifies an array value.
	ArrayValue *ArrayValue `protobuf:"bytes,6,opt,name=arrayValue,proto3,oneof"`
}

type AnyValue_KeyValueList struct {
	// keyValueList specifies a list of key-value pairs.
	KeyValueList *KeyValueList `protobuf:"bytes,7,opt,name=keyValueList,proto3,oneof"`
}

func (*AnyValue_StringValueRef) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KeyValueList) isAnyValue_Value() {}

// KeyValue is a key-value pair where key is a string table ref and value is an AnyValue.
type KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key specifies the string table ref of a key.
	Key uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	// value specifies a value.
	Value         *AnyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// ArrayValue is a repeated list of AnyValue that is needed since `oneof` in AnyValue
// cannot be `repeated`
type ArrayValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// values specifies a repeated list of AnyValue.
	Values        []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{2}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValueList is a repeated list of KeyValue messages that is needed since `oneof`
// in AnyValue cannot be `repeated` or `map`
type KeyValueList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// keyValues specifies a repeated list of KeyValue.
	KeyValues     []*KeyValue `protobuf:"bytes,1,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValueList) GetKeyValues() []*KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type SpanLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// traceID specifies the ID of the trace to which this span link belongs.
	TraceID []byte `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	// spanID specifies the ID of this span.
	SpanID uint64 `protobuf:"fixed64,2,opt,name=spanID,proto3" json:"spanID,omitempty"`
	// attributes specifies a map of attribute key string ref to any value.
	Attributes map[uint32]*AnyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// tracestateRef specifies the string table ref of the W3C tracestate.
	TracestateRef uint32 `protobuf:"varint,4,opt,name=tracestateRef,proto3" json:"tracestateRef,omitempty"`
	// flags specifies the W3C trace flags. Optional. If set, the high bit (bit 31) must be set.
	Flags         uint32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanLink) Reset() {
	*x = SpanLink{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanLink) ProtoMessage() {}

func (x *SpanLink) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanLink.ProtoReflect.Descriptor instead.
func (*SpanLink) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{4}
}

func (x *SpanLink) GetTraceID() []byte {
	if x != nil {
		return x.TraceID
	}
	return nil
}

func (x *SpanLink) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *SpanLink) GetAttributes() map[uint32]*AnyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SpanLink) GetTracestateRef() uint32 {
	if x != nil {
		return x.TracestateRef
	}
	return 0
}

func (x *SpanLink) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type SpanEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// time is the number of nanoseconds between the Unix epoch and this event.
	Time uint64 `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	// nameRef specifies the string table ref of this event's name.
	NameRef uint32 `protobuf:"varint,2,opt,name=nameRef,proto3" json:"nameRef,omitempty"`
	// attributes is a mapping from attribute key string ref to any value.
	Attributes    map[uint32]*AnyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{5}
}

func (x *SpanEvent) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SpanEvent) GetNameRef() uint32 {
	if x != nil {
		return x.NameRef
	}
	return 0
}

func (x *SpanEvent) GetAttributes() map[uint32]*AnyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Span struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// serviceRef specifies the string table ref of this span's service name.
	ServiceRef uint32 `protobuf:"varint,1,opt,name=serviceRef,proto3" json:"serviceRef,omitempty"`
	// nameRef specifies the string table ref of this span's operation name.
	NameRef uint32 `protobuf:"varint,2,opt,name=nameRef,proto3" json:"nameRef,omitempty"`
	// resourceRef specifies the string table ref of this span's resource name.
	ResourceRef uint32 `protobuf:"varint,3,opt,name=resourceRef,proto3" json:"resourceRef,omitempty"`
	// spanID is the ID of this span.
	SpanID uint64 `protobuf:"fixed64,4,opt,name=spanID,proto3" json:"spanID,omitempty"`
	// parentID is the ID of this span's parent, or zero if this span has no parent.
	ParentID uint64 `protobuf:"varint,5,opt,name=parentID,proto3" json:"parentID,omitempty"`
	// start is the number of nanoseconds between the Unix epoch and the beginning of this span.
	Start uint64 `protobuf:"fixed64,6,opt,name=start,proto3" json:"start,omitempty"`
	// duration is the time length of this span in nanoseconds.
	Duration uint64 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// error specifies if there is an error associated with this span.
	Error bool `protobuf:"varint,8,opt,name=error,proto3" json:"error,omitempty"`
	// attributes is a mapping from attribute key string ref to any value.
	Attributes map[uint32]*AnyValue `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// typeRef is the string table ref of the type of the service with which this span is associated.  Example values: web, db, lambda.
	TypeRef uint32 `protobuf:"varint,10,opt,name=typeRef,proto3" json:"typeRef,omitempty"`
	// span_links represents a collection of links, where each link defines a causal relationship between two spans.
	Links []*SpanLink `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	// spanEvents represent an event at an instant in time related to this span, but not necessarily during the span.
	Events []*SpanEvent `protobuf:"bytes,12,rep,name=events,proto3" json:"events,omitempty"`
	// envRef is the string table ref of the optional string environment of this span.
	EnvRef uint32 `protobuf:"varint,13,opt,name=envRef,proto3" json:"envRef,omitempty"`
	// versionRef is the string table ref of the optional string version of this span.
	VersionRef uint32 `protobuf:"varint,14,opt,name=versionRef,proto3" json:"versionRef,omitempty"`
	// componentRef is the string table ref of the string component name of this span.
	ComponentRef uint32 `protobuf:"varint,15,opt,name=componentRef,proto3" json:"componentRef,omitempty"`
	// kind is the SpanKind of this span as defined in the OTEL Specification.
	Kind          SpanKind `protobuf:"varint,16,opt,name=kind,proto3,enum=datadog.trace.idx.SpanKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Span) Reset() {
	*x = Span{}
	mi := &file_datadog_trace_idx_span_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_idx_span_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_datadog_trace_idx_span_proto_rawDescGZIP(), []int{6}
}

func (x *Span) GetServiceRef() uint32 {
	if x != nil {
		return x.ServiceRef
	}
	return 0
}

func (x *Span) GetNameRef() uint32 {
	if x != nil {
		return x.NameRef
	}
	return 0
}

func (x *Span) GetResourceRef() uint32 {
	if x != nil {
		return x.ResourceRef
	}
	return 0
}

func (x *Span) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *Span) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Span) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Span) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Span) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *Span) GetAttributes() map[uint32]*AnyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetTypeRef() uint32 {
	if x != nil {
		return x.TypeRef
	}
	return 0
}

func (x *Span) GetLinks() []*SpanLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Span) GetEvents() []*SpanEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Span) GetEnvRef() uint32 {
	if x != nil {
		return x.EnvRef
	}
	return 0
}

func (x *Span) GetVersionRef() uint32 {
	if x != nil {
		return x.VersionRef
	}
	return 0
}

func (x *Span) GetComponentRef() uint32 {
	if x != nil {
		return x.ComponentRef
	}
	return 0
}

func (x *Span) GetKind() SpanKind {
	if x != nil {
		return x.Kind
	}
	return SpanKind_SPAN_KIND_UNSPECIFIED
}

var File_datadog_trace_idx_span_proto protoreflect.FileDescriptor

const file_datadog_trace_idx_span_proto_rawDesc = "" +
	"\n" +
	"\x1cdatadog/trace/idx/span.proto\x12\x11datadog.trace.idx\"\xc9\x02\n" +
	"\bAnyValue\x12(\n" +
	"\x0estringValueRef\x18\x01 \x01(\rH\x00R\x0estringValueRef\x12\x1e\n" +
	"\tboolValue\x18\x02 \x01(\bH\x00R\tboolValue\x12\"\n" +
	"\vdoubleValue\x18\x03 \x01(\x01H\x00R\vdoubleValue\x12\x1c\n" +
	"\bintValue\x18\x04 \x01(\x03H\x00R\bintValue\x12 \n" +
	"\n" +
	"bytesValue\x18\x05 \x01(\fH\x00R\n" +
	"bytesValue\x12?\n" +
	"\n" +
	"arrayValue\x18\x06 \x01(\v2\x1d.datadog.trace.idx.ArrayValueH\x00R\n" +
	"arrayValue\x12E\n" +
	"\fkeyValueList\x18\a \x01(\v2\x1f.datadog.trace.idx.KeyValueListH\x00R\fkeyValueListB\a\n" +
	"\x05value\"O\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.datadog.trace.idx.AnyValueR\x05value\"A\n" +
	"\n" +
	"ArrayValue\x123\n" +
	"\x06values\x18\x01 \x03(\v2\x1b.datadog.trace.idx.AnyValueR\x06values\"I\n" +
	"\fKeyValueList\x129\n" +
	"\tkeyValues\x18\x01 \x03(\v2\x1b.datadog.trace.idx.KeyValueR\tkeyValues\"\xa1\x02\n" +
	"\bSpanLink\x12\x18\n" +
	"\atraceID\x18\x01 \x01(\fR\atraceID\x12\x16\n" +
	"\x06spanID\x18\x02 \x01(\x06R\x06spanID\x12K\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2+.datadog.trace.idx.SpanLink.AttributesEntryR\n" +
	"attributes\x12$\n" +
	"\rtracestateRef\x18\x04 \x01(\rR\rtracestateRef\x12\x14\n" +
	"\x05flags\x18\x05 \x01(\rR\x05flags\x1aZ\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.datadog.trace.idx.AnyValueR\x05value:\x028\x01\"\xe3\x01\n" +
	"\tSpanEvent\x12\x12\n" +
	"\x04time\x18\x01 \x01(\x06R\x04time\x12\x18\n" +
	"\anameRef\x18\x02 \x01(\rR\anameRef\x12L\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2,.datadog.trace.idx.SpanEvent.AttributesEntryR\n" +
	"attributes\x1aZ\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.datadog.trace.idx.AnyValueR\x05value:\x028\x01\"\x93\x05\n" +
	"\x04Span\x12\x1e\n" +
	"\n" +
	"serviceRef\x18\x01 \x01(\rR\n" +
	"serviceRef\x12\x18\n" +
	"\anameRef\x18\x02 \x01(\rR\anameRef\x12 \n" +
	"\vresourceRef\x18\x03 \x01(\rR\vresourceRef\x12\x16\n" +
	"\x06spanID\x18\x04 \x01(\x06R\x06spanID\x12\x1a\n" +
	"\bparentID\x18\x05 \x01(\x04R\bparentID\x12\x14\n" +
	"\x05start\x18\x06 \x01(\x06R\x05start\x12\x1a\n" +
	"\bduration\x18\a \x01(\x04R\bduration\x12\x14\n" +
	"\x05error\x18\b \x01(\bR\x05error\x12G\n" +
	"\n" +
	"attributes\x18\t \x03(\v2'.datadog.trace.idx.Span.AttributesEntryR\n" +
	"attributes\x12\x18\n" +
	"\atypeRef\x18\n" +
	" \x01(\rR\atypeRef\x121\n" +
	"\x05links\x18\v \x03(\v2\x1b.datadog.trace.idx.SpanLinkR\x05links\x124\n" +
	"\x06events\x18\f \x03(\v2\x1c.datadog.trace.idx.SpanEventR\x06events\x12\x16\n" +
	"\x06envRef\x18\r \x01(\rR\x06envRef\x12\x1e\n" +
	"\n" +
	"versionRef\x18\x0e \x01(\rR\n" +
	"versionRef\x12\"\n" +
	"\fcomponentRef\x18\x0f \x01(\rR\fcomponentRef\x12/\n" +
	"\x04kind\x18\x10 \x01(\x0e2\x1b.datadog.trace.idx.SpanKindR\x04kind\x1aZ\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.datadog.trace.idx.AnyValueR\x05value:\x028\x01*\x99\x01\n" +
	"\bSpanKind\x12\x19\n" +
	"\x15SPAN_KIND_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SPAN_KIND_INTERNAL\x10\x01\x12\x14\n" +
	"\x10SPAN_KIND_SERVER\x10\x02\x12\x14\n" +
	"\x10SPAN_KIND_CLIENT\x10\x03\x12\x16\n" +
	"\x12SPAN_KIND_PRODUCER\x10\x04\x12\x16\n" +
	"\x12SPAN_KIND_CONSUMER\x10\x05B;Z9github.com/DataDog/datadog-agent/pkg/proto/pbgo/trace/idxb\x06proto3"

var (
	file_datadog_trace_idx_span_proto_rawDescOnce sync.Once
	file_datadog_trace_idx_span_proto_rawDescData []byte
)

func file_datadog_trace_idx_span_proto_rawDescGZIP() []byte {
	file_datadog_trace_idx_span_proto_rawDescOnce.Do(func() {
		file_datadog_trace_idx_span_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_span_proto_rawDesc), len(file_datadog_trace_idx_span_proto_rawDesc)))
	})
	return file_datadog_trace_idx_span_proto_rawDescData
}

var file_datadog_trace_idx_span_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_datadog_trace_idx_span_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_datadog_trace_idx_span_proto_goTypes = []any{
	(SpanKind)(0),        // 0: datadog.trace.idx.SpanKind
	(*AnyValue)(nil),     // 1: datadog.trace.idx.AnyValue
	(*KeyValue)(nil),     // 2: datadog.trace.idx.KeyValue
	(*ArrayValue)(nil),   // 3: datadog.trace.idx.ArrayValue
	(*KeyValueList)(nil), // 4: datadog.trace.idx.KeyValueList
	(*SpanLink)(nil),     // 5: datadog.trace.idx.SpanLink
	(*SpanEvent)(nil),    // 6: datadog.trace.idx.SpanEvent
	(*Span)(nil),         // 7: datadog.trace.idx.Span
	nil,                  // 8: datadog.trace.idx.SpanLink.AttributesEntry
	nil,                  // 9: datadog.trace.idx.SpanEvent.AttributesEntry
	nil,                  // 10: datadog.trace.idx.Span.AttributesEntry
}
var file_datadog_trace_idx_span_proto_depIdxs = []int32{
	3,  // 0: datadog.trace.idx.AnyValue.arrayValue:type_name -> datadog.trace.idx.ArrayValue
	4,  // 1: datadog.trace.idx.AnyValue.keyValueList:type_name -> datadog.trace.idx.KeyValueList
	1,  // 2: datadog.trace.idx.KeyValue.value:type_name -> datadog.trace.idx.AnyValue
	1,  // 3: datadog.trace.idx.ArrayValue.values:type_name -> datadog.trace.idx.AnyValue
	2,  // 4: datadog.trace.idx.KeyValueList.keyValues:type_name -> datadog.trace.idx.KeyValue
	8,  // 5: datadog.trace.idx.SpanLink.attributes:type_name -> datadog.trace.idx.SpanLink.AttributesEntry
	9,  // 6: datadog.trace.idx.SpanEvent.attributes:type_name -> datadog.trace.idx.SpanEvent.AttributesEntry
	10, // 7: datadog.trace.idx.Span.attributes:type_name -> datadog.trace.idx.Span.AttributesEntry
	5,  // 8: datadog.trace.idx.Span.links:type_name -> datadog.trace.idx.SpanLink
	6,  // 9: datadog.trace.idx.Span.events:type_name -> datadog.trace.idx.SpanEvent
	0,  // 10: datadog.trace.idx.Span.kind:type_name -> datadog.trace.idx.SpanKind
	1,  // 11: datadog.trace.idx.SpanLink.AttributesEntry.value:type_name -> datadog.trace.idx.AnyValue
	1,  // 12: datadog.trace.idx.SpanEvent.AttributesEntry.value:type_name -> datadog.trace.idx.AnyValue
	1,  // 13: datadog.trace.idx.Span.AttributesEntry.value:type_name -> datadog.trace.idx.AnyValue
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_datadog_trace_idx_span_proto_init() }
func file_datadog_trace_idx_span_proto_init() {
	if File_datadog_trace_idx_span_proto != nil {
		return
	}
	file_datadog_trace_idx_span_proto_msgTypes[0].OneofWrappers = []any{
		(*AnyValue_StringValueRef)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_BytesValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KeyValueList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_trace_idx_span_proto_rawDesc), len(file_datadog_trace_idx_span_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datadog_trace_idx_span_proto_goTypes,
		DependencyIndexes: file_datadog_trace_idx_span_proto_depIdxs,
		EnumInfos:         file_datadog_trace_idx_span_proto_enumTypes,
		MessageInfos:      file_datadog_trace_idx_span_proto_msgTypes,
	}.Build()
	File_datadog_trace_idx_span_proto = out.File
	file_datadog_trace_idx_span_proto_goTypes = nil
	file_datadog_trace_idx_span_proto_depIdxs = nil
}
