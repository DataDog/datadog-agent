// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: datadog/trace/span.proto

package trace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttributeAnyValue_AttributeAnyValueType int32

const (
	AttributeAnyValue_STRING_VALUE AttributeAnyValue_AttributeAnyValueType = 0
	AttributeAnyValue_BOOL_VALUE   AttributeAnyValue_AttributeAnyValueType = 1
	AttributeAnyValue_INT_VALUE    AttributeAnyValue_AttributeAnyValueType = 2
	AttributeAnyValue_DOUBLE_VALUE AttributeAnyValue_AttributeAnyValueType = 3
	AttributeAnyValue_ARRAY_VALUE  AttributeAnyValue_AttributeAnyValueType = 4
)

// Enum value maps for AttributeAnyValue_AttributeAnyValueType.
var (
	AttributeAnyValue_AttributeAnyValueType_name = map[int32]string{
		0: "STRING_VALUE",
		1: "BOOL_VALUE",
		2: "INT_VALUE",
		3: "DOUBLE_VALUE",
		4: "ARRAY_VALUE",
	}
	AttributeAnyValue_AttributeAnyValueType_value = map[string]int32{
		"STRING_VALUE": 0,
		"BOOL_VALUE":   1,
		"INT_VALUE":    2,
		"DOUBLE_VALUE": 3,
		"ARRAY_VALUE":  4,
	}
)

func (x AttributeAnyValue_AttributeAnyValueType) Enum() *AttributeAnyValue_AttributeAnyValueType {
	p := new(AttributeAnyValue_AttributeAnyValueType)
	*p = x
	return p
}

func (x AttributeAnyValue_AttributeAnyValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeAnyValue_AttributeAnyValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_datadog_trace_span_proto_enumTypes[0].Descriptor()
}

func (AttributeAnyValue_AttributeAnyValueType) Type() protoreflect.EnumType {
	return &file_datadog_trace_span_proto_enumTypes[0]
}

func (x AttributeAnyValue_AttributeAnyValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeAnyValue_AttributeAnyValueType.Descriptor instead.
func (AttributeAnyValue_AttributeAnyValueType) EnumDescriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{2, 0}
}

type AttributeArrayValue_AttributeArrayValueType int32

const (
	AttributeArrayValue_STRING_VALUE AttributeArrayValue_AttributeArrayValueType = 0
	AttributeArrayValue_BOOL_VALUE   AttributeArrayValue_AttributeArrayValueType = 1
	AttributeArrayValue_INT_VALUE    AttributeArrayValue_AttributeArrayValueType = 2
	AttributeArrayValue_DOUBLE_VALUE AttributeArrayValue_AttributeArrayValueType = 3
)

// Enum value maps for AttributeArrayValue_AttributeArrayValueType.
var (
	AttributeArrayValue_AttributeArrayValueType_name = map[int32]string{
		0: "STRING_VALUE",
		1: "BOOL_VALUE",
		2: "INT_VALUE",
		3: "DOUBLE_VALUE",
	}
	AttributeArrayValue_AttributeArrayValueType_value = map[string]int32{
		"STRING_VALUE": 0,
		"BOOL_VALUE":   1,
		"INT_VALUE":    2,
		"DOUBLE_VALUE": 3,
	}
)

func (x AttributeArrayValue_AttributeArrayValueType) Enum() *AttributeArrayValue_AttributeArrayValueType {
	p := new(AttributeArrayValue_AttributeArrayValueType)
	*p = x
	return p
}

func (x AttributeArrayValue_AttributeArrayValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeArrayValue_AttributeArrayValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_datadog_trace_span_proto_enumTypes[1].Descriptor()
}

func (AttributeArrayValue_AttributeArrayValueType) Type() protoreflect.EnumType {
	return &file_datadog_trace_span_proto_enumTypes[1]
}

func (x AttributeArrayValue_AttributeArrayValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeArrayValue_AttributeArrayValueType.Descriptor instead.
func (AttributeArrayValue_AttributeArrayValueType) EnumDescriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{4, 0}
}

type SpanLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"trace_id" msg:"trace_id"
	TraceID uint64 `protobuf:"varint,1,opt,name=traceID,proto3" json:"trace_id" msg:"trace_id"` // Required.
	// @gotags: json:"trace_id_high" msg:"trace_id_high,omitempty"
	TraceIDHigh uint64 `protobuf:"varint,2,opt,name=traceID_high,json=traceIDHigh,proto3" json:"trace_id_high" msg:"trace_id_high,omitempty"` // Optional. The high 64 bits of a referenced trace id.
	// @gotags: json:"span_id" msg:"span_id"
	SpanID uint64 `protobuf:"varint,3,opt,name=spanID,proto3" json:"span_id" msg:"span_id"` // Required.
	// @gotags: msg:"attributes,omitempty"
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" msg:"attributes,omitempty"` // Optional. Simple mapping of keys to string values.
	// @gotags: msg:"tracestate,omitempty"
	Tracestate string `protobuf:"bytes,5,opt,name=tracestate,proto3" json:"tracestate,omitempty" msg:"tracestate,omitempty"` // Optional. W3C tracestate.
	// @gotags: msg:"flags,omitempty"
	Flags         uint32 `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty" msg:"flags,omitempty"` // Optional. W3C trace flags. If set, the high bit (bit 31) must be set.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanLink) Reset() {
	*x = SpanLink{}
	mi := &file_datadog_trace_span_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanLink) ProtoMessage() {}

func (x *SpanLink) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanLink.ProtoReflect.Descriptor instead.
func (*SpanLink) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{0}
}

func (x *SpanLink) GetTraceID() uint64 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (x *SpanLink) GetTraceIDHigh() uint64 {
	if x != nil {
		return x.TraceIDHigh
	}
	return 0
}

func (x *SpanLink) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *SpanLink) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SpanLink) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

func (x *SpanLink) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type SpanEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: json:"time_unix_nano" msg:"time_unix_nano"
	TimeUnixNano uint64 `protobuf:"fixed64,1,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano" msg:"time_unix_nano"` // time is the number of nanoseconds between the Unix epoch and this event.
	// @gotags: json:"name" msg:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" msg:"name"` // name is this event's name.
	// attributes is a mapping from attribute key string to any value.
	// The order of attributes should be preserved in the key/value map.
	// The supported values match the OpenTelemetry attributes specification:
	// https://github.com/open-telemetry/opentelemetry-proto/blob/a8f08fc49d60538f97ffabcc7feac92f832976dd/opentelemetry/proto/common/v1/common.proto
	// @gotags: json:"attributes" msg:"attributes"
	Attributes    map[string]*AttributeAnyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" msg:"attributes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	mi := &file_datadog_trace_span_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{1}
}

func (x *SpanEvent) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *SpanEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpanEvent) GetAttributes() map[string]*AttributeAnyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// AttributeAnyValue is used to represent any type of attribute value. AttributeAnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AttributeAnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We implement a union manually here because Go's MessagePack generator does not support
	// Protobuf `oneof` unions: https://github.com/tinylib/msgp/issues/184
	// Despite this, the format represented here is binary compatible with `oneof`, if we choose
	// to migrate to that in the future.
	// @gotags: json:"type" msg:"type"
	Type AttributeAnyValue_AttributeAnyValueType `protobuf:"varint,1,opt,name=type,proto3,enum=datadog.trace.AttributeAnyValue_AttributeAnyValueType" json:"type" msg:"type"`
	// @gotags: json:"string_value" msg:"string_value"
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value" msg:"string_value"`
	// @gotags: json:"bool_value" msg:"bool_value"
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3" json:"bool_value" msg:"bool_value"`
	// @gotags: json:"int_value" msg:"int_value"
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3" json:"int_value" msg:"int_value"`
	// @gotags: json:"double_value" msg:"double_value"
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3" json:"double_value" msg:"double_value"`
	// @gotags: json:"array_value" msg:"array_value"
	ArrayValue    *AttributeArray `protobuf:"bytes,6,opt,name=array_value,json=arrayValue,proto3" json:"array_value" msg:"array_value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeAnyValue) Reset() {
	*x = AttributeAnyValue{}
	mi := &file_datadog_trace_span_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeAnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeAnyValue) ProtoMessage() {}

func (x *AttributeAnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeAnyValue.ProtoReflect.Descriptor instead.
func (*AttributeAnyValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{2}
}

func (x *AttributeAnyValue) GetType() AttributeAnyValue_AttributeAnyValueType {
	if x != nil {
		return x.Type
	}
	return AttributeAnyValue_STRING_VALUE
}

func (x *AttributeAnyValue) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AttributeAnyValue) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *AttributeAnyValue) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *AttributeAnyValue) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *AttributeAnyValue) GetArrayValue() *AttributeArray {
	if x != nil {
		return x.ArrayValue
	}
	return nil
}

// AttributeArray is a list of AttributeArrayValue messages. We need this as a message since `oneof` in AttributeAnyValue does not allow repeated fields.
type AttributeArray struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of values. The array may be empty (contain 0 elements).
	// @gotags: json:"values" msg:"values"
	Values        []*AttributeArrayValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values" msg:"values"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeArray) Reset() {
	*x = AttributeArray{}
	mi := &file_datadog_trace_span_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeArray) ProtoMessage() {}

func (x *AttributeArray) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeArray.ProtoReflect.Descriptor instead.
func (*AttributeArray) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{3}
}

func (x *AttributeArray) GetValues() []*AttributeArrayValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// An element in the homogeneous AttributeArray.
// Compared to AttributeAnyValue, it only supports scalar values.
type AttributeArrayValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We implement a union manually here because Go's MessagePack generator does not support
	// Protobuf `oneof` unions: https://github.com/tinylib/msgp/issues/184
	// Despite this, the format represented here is binary compatible with `oneof`, if we choose
	// to migrate to that in the future.
	// @gotags: json:"type" msg:"type"
	Type AttributeArrayValue_AttributeArrayValueType `protobuf:"varint,1,opt,name=type,proto3,enum=datadog.trace.AttributeArrayValue_AttributeArrayValueType" json:"type" msg:"type"`
	// @gotags: json:"string_value" msg:"string_value"
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value" msg:"string_value"`
	// @gotags: json:"bool_value" msg:"bool_value"
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3" json:"bool_value" msg:"bool_value"`
	// @gotags: json:"int_value" msg:"int_value"
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3" json:"int_value" msg:"int_value"`
	// @gotags: json:"double_value" msg:"double_value"
	DoubleValue   float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3" json:"double_value" msg:"double_value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeArrayValue) Reset() {
	*x = AttributeArrayValue{}
	mi := &file_datadog_trace_span_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeArrayValue) ProtoMessage() {}

func (x *AttributeArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeArrayValue.ProtoReflect.Descriptor instead.
func (*AttributeArrayValue) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{4}
}

func (x *AttributeArrayValue) GetType() AttributeArrayValue_AttributeArrayValueType {
	if x != nil {
		return x.Type
	}
	return AttributeArrayValue_STRING_VALUE
}

func (x *AttributeArrayValue) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AttributeArrayValue) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *AttributeArrayValue) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *AttributeArrayValue) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

type Span struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// service is the name of the service with which this span is associated.
	// @gotags: json:"service" msg:"service"
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service" msg:"service"`
	// name is the operation name of this span.
	// @gotags: json:"name" msg:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" msg:"name"`
	// resource is the resource name of this span, also sometimes called the endpoint (for web spans).
	// @gotags: json:"resource" msg:"resource"
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource" msg:"resource"`
	// traceID is the ID of the trace to which this span belongs.
	// @gotags: json:"trace_id" msg:"trace_id"
	TraceID uint64 `protobuf:"varint,4,opt,name=traceID,proto3" json:"trace_id" msg:"trace_id"`
	// spanID is the ID of this span.
	// @gotags: json:"span_id" msg:"span_id"
	SpanID uint64 `protobuf:"varint,5,opt,name=spanID,proto3" json:"span_id" msg:"span_id"`
	// parentID is the ID of this span's parent, or zero if this span has no parent.
	// @gotags: json:"parent_id" msg:"parent_id"
	ParentID uint64 `protobuf:"varint,6,opt,name=parentID,proto3" json:"parent_id" msg:"parent_id"`
	// start is the number of nanoseconds between the Unix epoch and the beginning of this span.
	// @gotags: json:"start" msg:"start"
	Start int64 `protobuf:"varint,7,opt,name=start,proto3" json:"start" msg:"start"`
	// duration is the time length of this span in nanoseconds.
	// @gotags: json:"duration" msg:"duration"
	Duration int64 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" msg:"duration"`
	// error is 1 if there is an error associated with this span, or 0 if there is not.
	// @gotags: json:"error" msg:"error"
	Error int32 `protobuf:"varint,9,opt,name=error,proto3" json:"error" msg:"error"`
	// meta is a mapping from tag name to tag value for string-valued tags.
	// @gotags: json:"meta,omitempty" msg:"meta,omitempty"
	Meta map[string]string `protobuf:"bytes,10,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" msg:"meta,omitempty"`
	// metrics is a mapping from tag name to tag value for numeric-valued tags.
	// @gotags: json:"metrics,omitempty" msg:"metrics,omitempty"
	Metrics map[string]float64 `protobuf:"bytes,11,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value" msg:"metrics,omitempty"`
	// type is the type of the service with which this span is associated.  Example values: web, db, lambda.
	// @gotags: json:"type" msg:"type"
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type" msg:"type"`
	// meta_struct is a registry of structured "other" data used by, e.g., AppSec.
	// @gotags: json:"meta_struct,omitempty" msg:"meta_struct,omitempty"
	MetaStruct map[string][]byte `protobuf:"bytes,13,rep,name=meta_struct,json=metaStruct,proto3" json:"meta_struct,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" msg:"meta_struct,omitempty"`
	// span_links represents a collection of links, where each link defines a causal relationship between two spans.
	// @gotags: json:"span_links,omitempty" msg:"span_links,omitempty"
	SpanLinks []*SpanLink `protobuf:"bytes,14,rep,name=spanLinks,proto3" json:"span_links,omitempty" msg:"span_links,omitempty"`
	// spanEvents represent an event at an instant in time related to this span, but not necessarily during the span.
	// @gotags: json:"span_events,omitempty" msg:"span_events,omitempty"
	SpanEvents    []*SpanEvent `protobuf:"bytes,15,rep,name=spanEvents,proto3" json:"span_events,omitempty" msg:"span_events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Span) Reset() {
	*x = Span{}
	mi := &file_datadog_trace_span_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_datadog_trace_span_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_datadog_trace_span_proto_rawDescGZIP(), []int{5}
}

func (x *Span) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Span) GetTraceID() uint64 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (x *Span) GetSpanID() uint64 {
	if x != nil {
		return x.SpanID
	}
	return 0
}

func (x *Span) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Span) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Span) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Span) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Span) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Span) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Span) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Span) GetMetaStruct() map[string][]byte {
	if x != nil {
		return x.MetaStruct
	}
	return nil
}

func (x *Span) GetSpanLinks() []*SpanLink {
	if x != nil {
		return x.SpanLinks
	}
	return nil
}

func (x *Span) GetSpanEvents() []*SpanEvent {
	if x != nil {
		return x.SpanEvents
	}
	return nil
}

var File_datadog_trace_span_proto protoreflect.FileDescriptor

const file_datadog_trace_span_proto_rawDesc = "" +
	"\n" +
	"\x18datadog/trace/span.proto\x12\rdatadog.trace\"\x9d\x02\n" +
	"\bSpanLink\x12\x18\n" +
	"\atraceID\x18\x01 \x01(\x04R\atraceID\x12!\n" +
	"\ftraceID_high\x18\x02 \x01(\x04R\vtraceIDHigh\x12\x16\n" +
	"\x06spanID\x18\x03 \x01(\x04R\x06spanID\x12G\n" +
	"\n" +
	"attributes\x18\x04 \x03(\v2'.datadog.trace.SpanLink.AttributesEntryR\n" +
	"attributes\x12\x1e\n" +
	"\n" +
	"tracestate\x18\x05 \x01(\tR\n" +
	"tracestate\x12\x14\n" +
	"\x05flags\x18\x06 \x01(\rR\x05flags\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\x01\n" +
	"\tSpanEvent\x12$\n" +
	"\x0etime_unix_nano\x18\x01 \x01(\x06R\ftimeUnixNano\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12H\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2(.datadog.trace.SpanEvent.AttributesEntryR\n" +
	"attributes\x1a_\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .datadog.trace.AttributeAnyValueR\x05value:\x028\x01\"\x8e\x03\n" +
	"\x11AttributeAnyValue\x12J\n" +
	"\x04type\x18\x01 \x01(\x0e26.datadog.trace.AttributeAnyValue.AttributeAnyValueTypeR\x04type\x12!\n" +
	"\fstring_value\x18\x02 \x01(\tR\vstringValue\x12\x1d\n" +
	"\n" +
	"bool_value\x18\x03 \x01(\bR\tboolValue\x12\x1b\n" +
	"\tint_value\x18\x04 \x01(\x03R\bintValue\x12!\n" +
	"\fdouble_value\x18\x05 \x01(\x01R\vdoubleValue\x12>\n" +
	"\varray_value\x18\x06 \x01(\v2\x1d.datadog.trace.AttributeArrayR\n" +
	"arrayValue\"k\n" +
	"\x15AttributeAnyValueType\x12\x10\n" +
	"\fSTRING_VALUE\x10\x00\x12\x0e\n" +
	"\n" +
	"BOOL_VALUE\x10\x01\x12\r\n" +
	"\tINT_VALUE\x10\x02\x12\x10\n" +
	"\fDOUBLE_VALUE\x10\x03\x12\x0f\n" +
	"\vARRAY_VALUE\x10\x04\"L\n" +
	"\x0eAttributeArray\x12:\n" +
	"\x06values\x18\x01 \x03(\v2\".datadog.trace.AttributeArrayValueR\x06values\"\xc5\x02\n" +
	"\x13AttributeArrayValue\x12N\n" +
	"\x04type\x18\x01 \x01(\x0e2:.datadog.trace.AttributeArrayValue.AttributeArrayValueTypeR\x04type\x12!\n" +
	"\fstring_value\x18\x02 \x01(\tR\vstringValue\x12\x1d\n" +
	"\n" +
	"bool_value\x18\x03 \x01(\bR\tboolValue\x12\x1b\n" +
	"\tint_value\x18\x04 \x01(\x03R\bintValue\x12!\n" +
	"\fdouble_value\x18\x05 \x01(\x01R\vdoubleValue\"\\\n" +
	"\x17AttributeArrayValueType\x12\x10\n" +
	"\fSTRING_VALUE\x10\x00\x12\x0e\n" +
	"\n" +
	"BOOL_VALUE\x10\x01\x12\r\n" +
	"\tINT_VALUE\x10\x02\x12\x10\n" +
	"\fDOUBLE_VALUE\x10\x03\"\xd4\x05\n" +
	"\x04Span\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bresource\x18\x03 \x01(\tR\bresource\x12\x18\n" +
	"\atraceID\x18\x04 \x01(\x04R\atraceID\x12\x16\n" +
	"\x06spanID\x18\x05 \x01(\x04R\x06spanID\x12\x1a\n" +
	"\bparentID\x18\x06 \x01(\x04R\bparentID\x12\x14\n" +
	"\x05start\x18\a \x01(\x03R\x05start\x12\x1a\n" +
	"\bduration\x18\b \x01(\x03R\bduration\x12\x14\n" +
	"\x05error\x18\t \x01(\x05R\x05error\x121\n" +
	"\x04meta\x18\n" +
	" \x03(\v2\x1d.datadog.trace.Span.MetaEntryR\x04meta\x12:\n" +
	"\ametrics\x18\v \x03(\v2 .datadog.trace.Span.MetricsEntryR\ametrics\x12\x12\n" +
	"\x04type\x18\f \x01(\tR\x04type\x12D\n" +
	"\vmeta_struct\x18\r \x03(\v2#.datadog.trace.Span.MetaStructEntryR\n" +
	"metaStruct\x125\n" +
	"\tspanLinks\x18\x0e \x03(\v2\x17.datadog.trace.SpanLinkR\tspanLinks\x128\n" +
	"\n" +
	"spanEvents\x18\x0f \x03(\v2\x18.datadog.trace.SpanEventR\n" +
	"spanEvents\x1a7\n" +
	"\tMetaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a=\n" +
	"\x0fMetaStructEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B\x16Z\x14pkg/proto/pbgo/traceb\x06proto3"

var (
	file_datadog_trace_span_proto_rawDescOnce sync.Once
	file_datadog_trace_span_proto_rawDescData []byte
)

func file_datadog_trace_span_proto_rawDescGZIP() []byte {
	file_datadog_trace_span_proto_rawDescOnce.Do(func() {
		file_datadog_trace_span_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_datadog_trace_span_proto_rawDesc), len(file_datadog_trace_span_proto_rawDesc)))
	})
	return file_datadog_trace_span_proto_rawDescData
}

var file_datadog_trace_span_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_datadog_trace_span_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_datadog_trace_span_proto_goTypes = []any{
	(AttributeAnyValue_AttributeAnyValueType)(0),     // 0: datadog.trace.AttributeAnyValue.AttributeAnyValueType
	(AttributeArrayValue_AttributeArrayValueType)(0), // 1: datadog.trace.AttributeArrayValue.AttributeArrayValueType
	(*SpanLink)(nil),            // 2: datadog.trace.SpanLink
	(*SpanEvent)(nil),           // 3: datadog.trace.SpanEvent
	(*AttributeAnyValue)(nil),   // 4: datadog.trace.AttributeAnyValue
	(*AttributeArray)(nil),      // 5: datadog.trace.AttributeArray
	(*AttributeArrayValue)(nil), // 6: datadog.trace.AttributeArrayValue
	(*Span)(nil),                // 7: datadog.trace.Span
	nil,                         // 8: datadog.trace.SpanLink.AttributesEntry
	nil,                         // 9: datadog.trace.SpanEvent.AttributesEntry
	nil,                         // 10: datadog.trace.Span.MetaEntry
	nil,                         // 11: datadog.trace.Span.MetricsEntry
	nil,                         // 12: datadog.trace.Span.MetaStructEntry
}
var file_datadog_trace_span_proto_depIdxs = []int32{
	8,  // 0: datadog.trace.SpanLink.attributes:type_name -> datadog.trace.SpanLink.AttributesEntry
	9,  // 1: datadog.trace.SpanEvent.attributes:type_name -> datadog.trace.SpanEvent.AttributesEntry
	0,  // 2: datadog.trace.AttributeAnyValue.type:type_name -> datadog.trace.AttributeAnyValue.AttributeAnyValueType
	5,  // 3: datadog.trace.AttributeAnyValue.array_value:type_name -> datadog.trace.AttributeArray
	6,  // 4: datadog.trace.AttributeArray.values:type_name -> datadog.trace.AttributeArrayValue
	1,  // 5: datadog.trace.AttributeArrayValue.type:type_name -> datadog.trace.AttributeArrayValue.AttributeArrayValueType
	10, // 6: datadog.trace.Span.meta:type_name -> datadog.trace.Span.MetaEntry
	11, // 7: datadog.trace.Span.metrics:type_name -> datadog.trace.Span.MetricsEntry
	12, // 8: datadog.trace.Span.meta_struct:type_name -> datadog.trace.Span.MetaStructEntry
	2,  // 9: datadog.trace.Span.spanLinks:type_name -> datadog.trace.SpanLink
	3,  // 10: datadog.trace.Span.spanEvents:type_name -> datadog.trace.SpanEvent
	4,  // 11: datadog.trace.SpanEvent.AttributesEntry.value:type_name -> datadog.trace.AttributeAnyValue
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_datadog_trace_span_proto_init() }
func file_datadog_trace_span_proto_init() {
	if File_datadog_trace_span_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_datadog_trace_span_proto_rawDesc), len(file_datadog_trace_span_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datadog_trace_span_proto_goTypes,
		DependencyIndexes: file_datadog_trace_span_proto_depIdxs,
		EnumInfos:         file_datadog_trace_span_proto_enumTypes,
		MessageInfos:      file_datadog_trace_span_proto_msgTypes,
	}.Build()
	File_datadog_trace_span_proto = out.File
	file_datadog_trace_span_proto_goTypes = nil
	file_datadog_trace_span_proto_depIdxs = nil
}
