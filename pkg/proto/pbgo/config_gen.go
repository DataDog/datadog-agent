package pbgo

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ClientLatestConfigsRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hostname":
			z.Hostname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Hostname")
				return
			}
		case "AgentVersion":
			z.AgentVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AgentVersion")
				return
			}
		case "CurrentConfigSnapshotVersion":
			z.CurrentConfigSnapshotVersion, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
				return
			}
		case "CurrentConfigRootVersion":
			z.CurrentConfigRootVersion, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigRootVersion")
				return
			}
		case "CurrentDirectorRootVersion":
			z.CurrentDirectorRootVersion, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentDirectorRootVersion")
				return
			}
		case "Products":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Products")
				return
			}
			if cap(z.Products) >= int(zb0002) {
				z.Products = (z.Products)[:zb0002]
			} else {
				z.Products = make([]Product, zb0002)
			}
			for za0001 := range z.Products {
				{
					var zb0003 int32
					zb0003, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "Products", za0001)
						return
					}
					z.Products[za0001] = Product(zb0003)
				}
			}
		case "NewProducts":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NewProducts")
				return
			}
			if cap(z.NewProducts) >= int(zb0004) {
				z.NewProducts = (z.NewProducts)[:zb0004]
			} else {
				z.NewProducts = make([]Product, zb0004)
			}
			for za0002 := range z.NewProducts {
				{
					var zb0005 int32
					zb0005, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "NewProducts", za0002)
						return
					}
					z.NewProducts[za0002] = Product(zb0005)
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ClientLatestConfigsRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Hostname"
	err = en.Append(0x87, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Hostname)
	if err != nil {
		err = msgp.WrapError(err, "Hostname")
		return
	}
	// write "AgentVersion"
	err = en.Append(0xac, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.AgentVersion)
	if err != nil {
		err = msgp.WrapError(err, "AgentVersion")
		return
	}
	// write "CurrentConfigSnapshotVersion"
	err = en.Append(0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CurrentConfigSnapshotVersion)
	if err != nil {
		err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
		return
	}
	// write "CurrentConfigRootVersion"
	err = en.Append(0xb8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CurrentConfigRootVersion)
	if err != nil {
		err = msgp.WrapError(err, "CurrentConfigRootVersion")
		return
	}
	// write "CurrentDirectorRootVersion"
	err = en.Append(0xba, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CurrentDirectorRootVersion)
	if err != nil {
		err = msgp.WrapError(err, "CurrentDirectorRootVersion")
		return
	}
	// write "Products"
	err = en.Append(0xa8, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Products)))
	if err != nil {
		err = msgp.WrapError(err, "Products")
		return
	}
	for za0001 := range z.Products {
		err = en.WriteInt32(int32(z.Products[za0001]))
		if err != nil {
			err = msgp.WrapError(err, "Products", za0001)
			return
		}
	}
	// write "NewProducts"
	err = en.Append(0xab, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NewProducts)))
	if err != nil {
		err = msgp.WrapError(err, "NewProducts")
		return
	}
	for za0002 := range z.NewProducts {
		err = en.WriteInt32(int32(z.NewProducts[za0002]))
		if err != nil {
			err = msgp.WrapError(err, "NewProducts", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ClientLatestConfigsRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Hostname"
	o = append(o, 0x87, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Hostname)
	// string "AgentVersion"
	o = append(o, 0xac, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.AgentVersion)
	// string "CurrentConfigSnapshotVersion"
	o = append(o, 0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.CurrentConfigSnapshotVersion)
	// string "CurrentConfigRootVersion"
	o = append(o, 0xb8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.CurrentConfigRootVersion)
	// string "CurrentDirectorRootVersion"
	o = append(o, 0xba, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.CurrentDirectorRootVersion)
	// string "Products"
	o = append(o, 0xa8, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Products)))
	for za0001 := range z.Products {
		o = msgp.AppendInt32(o, int32(z.Products[za0001]))
	}
	// string "NewProducts"
	o = append(o, 0xab, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NewProducts)))
	for za0002 := range z.NewProducts {
		o = msgp.AppendInt32(o, int32(z.NewProducts[za0002]))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClientLatestConfigsRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hostname":
			z.Hostname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hostname")
				return
			}
		case "AgentVersion":
			z.AgentVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AgentVersion")
				return
			}
		case "CurrentConfigSnapshotVersion":
			z.CurrentConfigSnapshotVersion, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
				return
			}
		case "CurrentConfigRootVersion":
			z.CurrentConfigRootVersion, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigRootVersion")
				return
			}
		case "CurrentDirectorRootVersion":
			z.CurrentDirectorRootVersion, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentDirectorRootVersion")
				return
			}
		case "Products":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Products")
				return
			}
			if cap(z.Products) >= int(zb0002) {
				z.Products = (z.Products)[:zb0002]
			} else {
				z.Products = make([]Product, zb0002)
			}
			for za0001 := range z.Products {
				{
					var zb0003 int32
					zb0003, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Products", za0001)
						return
					}
					z.Products[za0001] = Product(zb0003)
				}
			}
		case "NewProducts":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NewProducts")
				return
			}
			if cap(z.NewProducts) >= int(zb0004) {
				z.NewProducts = (z.NewProducts)[:zb0004]
			} else {
				z.NewProducts = make([]Product, zb0004)
			}
			for za0002 := range z.NewProducts {
				{
					var zb0005 int32
					zb0005, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "NewProducts", za0002)
						return
					}
					z.NewProducts[za0002] = Product(zb0005)
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ClientLatestConfigsRequest) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Hostname) + 13 + msgp.StringPrefixSize + len(z.AgentVersion) + 29 + msgp.Uint64Size + 25 + msgp.Uint64Size + 27 + msgp.Uint64Size + 9 + msgp.ArrayHeaderSize + (len(z.Products) * (msgp.Int32Size)) + 12 + msgp.ArrayHeaderSize + (len(z.NewProducts) * (msgp.Int32Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConfigMetas) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Roots":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Roots")
				return
			}
			if cap(z.Roots) >= int(zb0002) {
				z.Roots = (z.Roots)[:zb0002]
			} else {
				z.Roots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.Roots {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					z.Roots[za0001] = nil
				} else {
					if z.Roots[za0001] == nil {
						z.Roots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Roots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.Roots[za0001].Version, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Version")
								return
							}
						case "Raw":
							z.Roots[za0001].Raw, err = dc.ReadBytes(z.Roots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001)
								return
							}
						}
					}
				}
			}
		case "Timestamp":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Timestamp.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Version")
							return
						}
					case "Raw":
						z.Timestamp.Raw, err = dc.ReadBytes(z.Timestamp.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "Snapshot":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				z.Snapshot = nil
			} else {
				if z.Snapshot == nil {
					z.Snapshot = new(TopMeta)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Snapshot")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Snapshot.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Version")
							return
						}
					case "Raw":
						z.Snapshot.Raw, err = dc.ReadBytes(z.Snapshot.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Snapshot")
							return
						}
					}
				}
			}
		case "TopTargets":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TopTargets")
					return
				}
				z.TopTargets = nil
			} else {
				if z.TopTargets == nil {
					z.TopTargets = new(TopMeta)
				}
				var zb0006 uint32
				zb0006, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TopTargets")
					return
				}
				for zb0006 > 0 {
					zb0006--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TopTargets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.TopTargets.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "TopTargets", "Version")
							return
						}
					case "Raw":
						z.TopTargets.Raw, err = dc.ReadBytes(z.TopTargets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "TopTargets", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TopTargets")
							return
						}
					}
				}
			}
		case "DelegatedTargets":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DelegatedTargets")
				return
			}
			if cap(z.DelegatedTargets) >= int(zb0007) {
				z.DelegatedTargets = (z.DelegatedTargets)[:zb0007]
			} else {
				z.DelegatedTargets = make([]*DelegatedMeta, zb0007)
			}
			for za0002 := range z.DelegatedTargets {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "DelegatedTargets", za0002)
						return
					}
					z.DelegatedTargets[za0002] = nil
				} else {
					if z.DelegatedTargets[za0002] == nil {
						z.DelegatedTargets[za0002] = new(DelegatedMeta)
					}
					var zb0008 uint32
					zb0008, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "DelegatedTargets", za0002)
						return
					}
					for zb0008 > 0 {
						zb0008--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "DelegatedTargets", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.DelegatedTargets[za0002].Version, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Version")
								return
							}
						case "Role":
							z.DelegatedTargets[za0002].Role, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Role")
								return
							}
						case "Raw":
							z.DelegatedTargets[za0002].Raw, err = dc.ReadBytes(z.DelegatedTargets[za0002].Raw)
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConfigMetas) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Roots"
	err = en.Append(0x85, 0xa5, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Roots)))
	if err != nil {
		err = msgp.WrapError(err, "Roots")
		return
	}
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Version"
			err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteUint64(z.Roots[za0001].Version)
			if err != nil {
				err = msgp.WrapError(err, "Roots", za0001, "Version")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Roots[za0001].Raw)
			if err != nil {
				err = msgp.WrapError(err, "Roots", za0001, "Raw")
				return
			}
		}
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	if z.Timestamp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Timestamp.Version)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Timestamp.Raw)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Raw")
			return
		}
	}
	// write "Snapshot"
	err = en.Append(0xa8, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74)
	if err != nil {
		return
	}
	if z.Snapshot == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Snapshot.Version)
		if err != nil {
			err = msgp.WrapError(err, "Snapshot", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Snapshot.Raw)
		if err != nil {
			err = msgp.WrapError(err, "Snapshot", "Raw")
			return
		}
	}
	// write "TopTargets"
	err = en.Append(0xaa, 0x54, 0x6f, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	if z.TopTargets == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.TopTargets.Version)
		if err != nil {
			err = msgp.WrapError(err, "TopTargets", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.TopTargets.Raw)
		if err != nil {
			err = msgp.WrapError(err, "TopTargets", "Raw")
			return
		}
	}
	// write "DelegatedTargets"
	err = en.Append(0xb0, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DelegatedTargets)))
	if err != nil {
		err = msgp.WrapError(err, "DelegatedTargets")
		return
	}
	for za0002 := range z.DelegatedTargets {
		if z.DelegatedTargets[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 3
			// write "Version"
			err = en.Append(0x83, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteUint64(z.DelegatedTargets[za0002].Version)
			if err != nil {
				err = msgp.WrapError(err, "DelegatedTargets", za0002, "Version")
				return
			}
			// write "Role"
			err = en.Append(0xa4, 0x52, 0x6f, 0x6c, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.DelegatedTargets[za0002].Role)
			if err != nil {
				err = msgp.WrapError(err, "DelegatedTargets", za0002, "Role")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.DelegatedTargets[za0002].Raw)
			if err != nil {
				err = msgp.WrapError(err, "DelegatedTargets", za0002, "Raw")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConfigMetas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Roots"
	o = append(o, 0x85, 0xa5, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Roots)))
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Version"
			o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, z.Roots[za0001].Version)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.Roots[za0001].Raw)
		}
	}
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if z.Timestamp == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.Timestamp.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.Timestamp.Raw)
	}
	// string "Snapshot"
	o = append(o, 0xa8, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74)
	if z.Snapshot == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.Snapshot.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.Snapshot.Raw)
	}
	// string "TopTargets"
	o = append(o, 0xaa, 0x54, 0x6f, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if z.TopTargets == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.TopTargets.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.TopTargets.Raw)
	}
	// string "DelegatedTargets"
	o = append(o, 0xb0, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DelegatedTargets)))
	for za0002 := range z.DelegatedTargets {
		if z.DelegatedTargets[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "Version"
			o = append(o, 0x83, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, z.DelegatedTargets[za0002].Version)
			// string "Role"
			o = append(o, 0xa4, 0x52, 0x6f, 0x6c, 0x65)
			o = msgp.AppendString(o, z.DelegatedTargets[za0002].Role)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.DelegatedTargets[za0002].Raw)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConfigMetas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Roots":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roots")
				return
			}
			if cap(z.Roots) >= int(zb0002) {
				z.Roots = (z.Roots)[:zb0002]
			} else {
				z.Roots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.Roots {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Roots[za0001] = nil
				} else {
					if z.Roots[za0001] == nil {
						z.Roots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Roots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.Roots[za0001].Version, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Version")
								return
							}
						case "Raw":
							z.Roots[za0001].Raw, bts, err = msgp.ReadBytesBytes(bts, z.Roots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001)
								return
							}
						}
					}
				}
			}
		case "Timestamp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Timestamp.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Version")
							return
						}
					case "Raw":
						z.Timestamp.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Timestamp.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "Snapshot":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Snapshot = nil
			} else {
				if z.Snapshot == nil {
					z.Snapshot = new(TopMeta)
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Snapshot")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Snapshot.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Version")
							return
						}
					case "Raw":
						z.Snapshot.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Snapshot.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot")
							return
						}
					}
				}
			}
		case "TopTargets":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TopTargets = nil
			} else {
				if z.TopTargets == nil {
					z.TopTargets = new(TopMeta)
				}
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TopTargets")
					return
				}
				for zb0006 > 0 {
					zb0006--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TopTargets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.TopTargets.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TopTargets", "Version")
							return
						}
					case "Raw":
						z.TopTargets.Raw, bts, err = msgp.ReadBytesBytes(bts, z.TopTargets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "TopTargets", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TopTargets")
							return
						}
					}
				}
			}
		case "DelegatedTargets":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DelegatedTargets")
				return
			}
			if cap(z.DelegatedTargets) >= int(zb0007) {
				z.DelegatedTargets = (z.DelegatedTargets)[:zb0007]
			} else {
				z.DelegatedTargets = make([]*DelegatedMeta, zb0007)
			}
			for za0002 := range z.DelegatedTargets {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.DelegatedTargets[za0002] = nil
				} else {
					if z.DelegatedTargets[za0002] == nil {
						z.DelegatedTargets[za0002] = new(DelegatedMeta)
					}
					var zb0008 uint32
					zb0008, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "DelegatedTargets", za0002)
						return
					}
					for zb0008 > 0 {
						zb0008--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "DelegatedTargets", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.DelegatedTargets[za0002].Version, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Version")
								return
							}
						case "Role":
							z.DelegatedTargets[za0002].Role, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Role")
								return
							}
						case "Raw":
							z.DelegatedTargets[za0002].Raw, bts, err = msgp.ReadBytesBytes(bts, z.DelegatedTargets[za0002].Raw)
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "DelegatedTargets", za0002)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConfigMetas) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Roots[za0001].Raw)
		}
	}
	s += 10
	if z.Timestamp == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Timestamp.Raw)
	}
	s += 9
	if z.Snapshot == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Snapshot.Raw)
	}
	s += 11
	if z.TopTargets == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.TopTargets.Raw)
	}
	s += 17 + msgp.ArrayHeaderSize
	for za0002 := range z.DelegatedTargets {
		if z.DelegatedTargets[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 8 + msgp.Uint64Size + 5 + msgp.StringPrefixSize + len(z.DelegatedTargets[za0002].Role) + 4 + msgp.BytesPrefixSize + len(z.DelegatedTargets[za0002].Raw)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConfigResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigSnapshotVersion":
			z.ConfigSnapshotVersion, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ConfigSnapshotVersion")
				return
			}
		case "DirectoryRoots":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DirectoryRoots")
				return
			}
			if cap(z.DirectoryRoots) >= int(zb0002) {
				z.DirectoryRoots = (z.DirectoryRoots)[:zb0002]
			} else {
				z.DirectoryRoots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.DirectoryRoots {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "DirectoryRoots", za0001)
						return
					}
					z.DirectoryRoots[za0001] = nil
				} else {
					if z.DirectoryRoots[za0001] == nil {
						z.DirectoryRoots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "DirectoryRoots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "DirectoryRoots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.DirectoryRoots[za0001].Version, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001, "Version")
								return
							}
						case "Raw":
							z.DirectoryRoots[za0001].Raw, err = dc.ReadBytes(z.DirectoryRoots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001)
								return
							}
						}
					}
				}
			}
		case "DirectoryTargets":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DirectoryTargets")
					return
				}
				z.DirectoryTargets = nil
			} else {
				if z.DirectoryTargets == nil {
					z.DirectoryTargets = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "DirectoryTargets")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "DirectoryTargets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.DirectoryTargets.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets", "Version")
							return
						}
					case "Raw":
						z.DirectoryTargets.Raw, err = dc.ReadBytes(z.DirectoryTargets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets")
							return
						}
					}
				}
			}
		case "TargetFiles":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles")
				return
			}
			if cap(z.TargetFiles) >= int(zb0005) {
				z.TargetFiles = (z.TargetFiles)[:zb0005]
			} else {
				z.TargetFiles = make([]*File, zb0005)
			}
			for za0002 := range z.TargetFiles {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0002)
						return
					}
					z.TargetFiles[za0002] = nil
				} else {
					if z.TargetFiles[za0002] == nil {
						z.TargetFiles[za0002] = new(File)
					}
					var zb0006 uint32
					zb0006, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0002)
						return
					}
					for zb0006 > 0 {
						zb0006--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "TargetFiles", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Path":
							z.TargetFiles[za0002].Path, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002, "Path")
								return
							}
						case "Raw":
							z.TargetFiles[za0002].Raw, err = dc.ReadBytes(z.TargetFiles[za0002].Raw)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConfigResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ConfigSnapshotVersion"
	err = en.Append(0x84, 0xb5, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ConfigSnapshotVersion)
	if err != nil {
		err = msgp.WrapError(err, "ConfigSnapshotVersion")
		return
	}
	// write "DirectoryRoots"
	err = en.Append(0xae, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DirectoryRoots)))
	if err != nil {
		err = msgp.WrapError(err, "DirectoryRoots")
		return
	}
	for za0001 := range z.DirectoryRoots {
		if z.DirectoryRoots[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Version"
			err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteUint64(z.DirectoryRoots[za0001].Version)
			if err != nil {
				err = msgp.WrapError(err, "DirectoryRoots", za0001, "Version")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.DirectoryRoots[za0001].Raw)
			if err != nil {
				err = msgp.WrapError(err, "DirectoryRoots", za0001, "Raw")
				return
			}
		}
	}
	// write "DirectoryTargets"
	err = en.Append(0xb0, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	if z.DirectoryTargets == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.DirectoryTargets.Version)
		if err != nil {
			err = msgp.WrapError(err, "DirectoryTargets", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.DirectoryTargets.Raw)
		if err != nil {
			err = msgp.WrapError(err, "DirectoryTargets", "Raw")
			return
		}
	}
	// write "TargetFiles"
	err = en.Append(0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TargetFiles)))
	if err != nil {
		err = msgp.WrapError(err, "TargetFiles")
		return
	}
	for za0002 := range z.TargetFiles {
		if z.TargetFiles[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Path"
			err = en.Append(0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
			if err != nil {
				return
			}
			err = en.WriteString(z.TargetFiles[za0002].Path)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles", za0002, "Path")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.TargetFiles[za0002].Raw)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles", za0002, "Raw")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConfigResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ConfigSnapshotVersion"
	o = append(o, 0x84, 0xb5, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.ConfigSnapshotVersion)
	// string "DirectoryRoots"
	o = append(o, 0xae, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DirectoryRoots)))
	for za0001 := range z.DirectoryRoots {
		if z.DirectoryRoots[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Version"
			o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, z.DirectoryRoots[za0001].Version)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.DirectoryRoots[za0001].Raw)
		}
	}
	// string "DirectoryTargets"
	o = append(o, 0xb0, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if z.DirectoryTargets == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.DirectoryTargets.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.DirectoryTargets.Raw)
	}
	// string "TargetFiles"
	o = append(o, 0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TargetFiles)))
	for za0002 := range z.TargetFiles {
		if z.TargetFiles[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Path"
			o = append(o, 0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
			o = msgp.AppendString(o, z.TargetFiles[za0002].Path)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.TargetFiles[za0002].Raw)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConfigResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigSnapshotVersion":
			z.ConfigSnapshotVersion, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfigSnapshotVersion")
				return
			}
		case "DirectoryRoots":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DirectoryRoots")
				return
			}
			if cap(z.DirectoryRoots) >= int(zb0002) {
				z.DirectoryRoots = (z.DirectoryRoots)[:zb0002]
			} else {
				z.DirectoryRoots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.DirectoryRoots {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.DirectoryRoots[za0001] = nil
				} else {
					if z.DirectoryRoots[za0001] == nil {
						z.DirectoryRoots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "DirectoryRoots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "DirectoryRoots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.DirectoryRoots[za0001].Version, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001, "Version")
								return
							}
						case "Raw":
							z.DirectoryRoots[za0001].Raw, bts, err = msgp.ReadBytesBytes(bts, z.DirectoryRoots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "DirectoryRoots", za0001)
								return
							}
						}
					}
				}
			}
		case "DirectoryTargets":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DirectoryTargets = nil
			} else {
				if z.DirectoryTargets == nil {
					z.DirectoryTargets = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DirectoryTargets")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "DirectoryTargets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.DirectoryTargets.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets", "Version")
							return
						}
					case "Raw":
						z.DirectoryTargets.Raw, bts, err = msgp.ReadBytesBytes(bts, z.DirectoryTargets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "DirectoryTargets")
							return
						}
					}
				}
			}
		case "TargetFiles":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles")
				return
			}
			if cap(z.TargetFiles) >= int(zb0005) {
				z.TargetFiles = (z.TargetFiles)[:zb0005]
			} else {
				z.TargetFiles = make([]*File, zb0005)
			}
			for za0002 := range z.TargetFiles {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TargetFiles[za0002] = nil
				} else {
					if z.TargetFiles[za0002] == nil {
						z.TargetFiles[za0002] = new(File)
					}
					var zb0006 uint32
					zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0002)
						return
					}
					for zb0006 > 0 {
						zb0006--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetFiles", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Path":
							z.TargetFiles[za0002].Path, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002, "Path")
								return
							}
						case "Raw":
							z.TargetFiles[za0002].Raw, bts, err = msgp.ReadBytesBytes(bts, z.TargetFiles[za0002].Raw)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0002)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConfigResponse) Msgsize() (s int) {
	s = 1 + 22 + msgp.Uint64Size + 15 + msgp.ArrayHeaderSize
	for za0001 := range z.DirectoryRoots {
		if z.DirectoryRoots[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.DirectoryRoots[za0001].Raw)
		}
	}
	s += 17
	if z.DirectoryTargets == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.DirectoryTargets.Raw)
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.TargetFiles {
		if z.TargetFiles[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.StringPrefixSize + len(z.TargetFiles[za0002].Path) + 4 + msgp.BytesPrefixSize + len(z.TargetFiles[za0002].Raw)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DelegatedMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Role":
			z.Role, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Role")
				return
			}
		case "Raw":
			z.Raw, err = dc.ReadBytes(z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DelegatedMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Version"
	err = en.Append(0x83, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Role"
	err = en.Append(0xa4, 0x52, 0x6f, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Role)
	if err != nil {
		err = msgp.WrapError(err, "Role")
		return
	}
	// write "Raw"
	err = en.Append(0xa3, 0x52, 0x61, 0x77)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Raw)
	if err != nil {
		err = msgp.WrapError(err, "Raw")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DelegatedMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Version"
	o = append(o, 0x83, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.Version)
	// string "Role"
	o = append(o, 0xa4, 0x52, 0x6f, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Role)
	// string "Raw"
	o = append(o, 0xa3, 0x52, 0x61, 0x77)
	o = msgp.AppendBytes(o, z.Raw)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DelegatedMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Role":
			z.Role, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Role")
				return
			}
		case "Raw":
			z.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DelegatedMeta) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint64Size + 5 + msgp.StringPrefixSize + len(z.Role) + 4 + msgp.BytesPrefixSize + len(z.Raw)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DirectorMetas) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Roots":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Roots")
				return
			}
			if cap(z.Roots) >= int(zb0002) {
				z.Roots = (z.Roots)[:zb0002]
			} else {
				z.Roots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.Roots {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					z.Roots[za0001] = nil
				} else {
					if z.Roots[za0001] == nil {
						z.Roots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Roots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.Roots[za0001].Version, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Version")
								return
							}
						case "Raw":
							z.Roots[za0001].Raw, err = dc.ReadBytes(z.Roots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001)
								return
							}
						}
					}
				}
			}
		case "Timestamp":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Timestamp.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Version")
							return
						}
					case "Raw":
						z.Timestamp.Raw, err = dc.ReadBytes(z.Timestamp.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "Snapshot":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				z.Snapshot = nil
			} else {
				if z.Snapshot == nil {
					z.Snapshot = new(TopMeta)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Snapshot")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Snapshot.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Version")
							return
						}
					case "Raw":
						z.Snapshot.Raw, err = dc.ReadBytes(z.Snapshot.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Snapshot")
							return
						}
					}
				}
			}
		case "Targets":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Targets")
					return
				}
				z.Targets = nil
			} else {
				if z.Targets == nil {
					z.Targets = new(TopMeta)
				}
				var zb0006 uint32
				zb0006, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Targets")
					return
				}
				for zb0006 > 0 {
					zb0006--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Targets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Targets.Version, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Targets", "Version")
							return
						}
					case "Raw":
						z.Targets.Raw, err = dc.ReadBytes(z.Targets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Targets", "Raw")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Targets")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DirectorMetas) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Roots"
	err = en.Append(0x84, 0xa5, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Roots)))
	if err != nil {
		err = msgp.WrapError(err, "Roots")
		return
	}
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Version"
			err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteUint64(z.Roots[za0001].Version)
			if err != nil {
				err = msgp.WrapError(err, "Roots", za0001, "Version")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Roots[za0001].Raw)
			if err != nil {
				err = msgp.WrapError(err, "Roots", za0001, "Raw")
				return
			}
		}
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	if z.Timestamp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Timestamp.Version)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Timestamp.Raw)
		if err != nil {
			err = msgp.WrapError(err, "Timestamp", "Raw")
			return
		}
	}
	// write "Snapshot"
	err = en.Append(0xa8, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74)
	if err != nil {
		return
	}
	if z.Snapshot == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Snapshot.Version)
		if err != nil {
			err = msgp.WrapError(err, "Snapshot", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Snapshot.Raw)
		if err != nil {
			err = msgp.WrapError(err, "Snapshot", "Raw")
			return
		}
	}
	// write "Targets"
	err = en.Append(0xa7, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	if z.Targets == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Version"
		err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Targets.Version)
		if err != nil {
			err = msgp.WrapError(err, "Targets", "Version")
			return
		}
		// write "Raw"
		err = en.Append(0xa3, 0x52, 0x61, 0x77)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Targets.Raw)
		if err != nil {
			err = msgp.WrapError(err, "Targets", "Raw")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DirectorMetas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Roots"
	o = append(o, 0x84, 0xa5, 0x52, 0x6f, 0x6f, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Roots)))
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Version"
			o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
			o = msgp.AppendUint64(o, z.Roots[za0001].Version)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.Roots[za0001].Raw)
		}
	}
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if z.Timestamp == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.Timestamp.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.Timestamp.Raw)
	}
	// string "Snapshot"
	o = append(o, 0xa8, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74)
	if z.Snapshot == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.Snapshot.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.Snapshot.Raw)
	}
	// string "Targets"
	o = append(o, 0xa7, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73)
	if z.Targets == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Version"
		o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
		o = msgp.AppendUint64(o, z.Targets.Version)
		// string "Raw"
		o = append(o, 0xa3, 0x52, 0x61, 0x77)
		o = msgp.AppendBytes(o, z.Targets.Raw)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DirectorMetas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Roots":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roots")
				return
			}
			if cap(z.Roots) >= int(zb0002) {
				z.Roots = (z.Roots)[:zb0002]
			} else {
				z.Roots = make([]*TopMeta, zb0002)
			}
			for za0001 := range z.Roots {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Roots[za0001] = nil
				} else {
					if z.Roots[za0001] == nil {
						z.Roots[za0001] = new(TopMeta)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Roots", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Roots", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Version":
							z.Roots[za0001].Version, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Version")
								return
							}
						case "Raw":
							z.Roots[za0001].Raw, bts, err = msgp.ReadBytesBytes(bts, z.Roots[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Roots", za0001)
								return
							}
						}
					}
				}
			}
		case "Timestamp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Timestamp = nil
			} else {
				if z.Timestamp == nil {
					z.Timestamp = new(TopMeta)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timestamp")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Timestamp")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Timestamp.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Version")
							return
						}
					case "Raw":
						z.Timestamp.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Timestamp.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Timestamp")
							return
						}
					}
				}
			}
		case "Snapshot":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Snapshot = nil
			} else {
				if z.Snapshot == nil {
					z.Snapshot = new(TopMeta)
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Snapshot")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Snapshot")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Snapshot.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Version")
							return
						}
					case "Raw":
						z.Snapshot.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Snapshot.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Snapshot")
							return
						}
					}
				}
			}
		case "Targets":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Targets = nil
			} else {
				if z.Targets == nil {
					z.Targets = new(TopMeta)
				}
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Targets")
					return
				}
				for zb0006 > 0 {
					zb0006--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Targets")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Version":
						z.Targets.Version, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Targets", "Version")
							return
						}
					case "Raw":
						z.Targets.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Targets.Raw)
						if err != nil {
							err = msgp.WrapError(err, "Targets", "Raw")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Targets")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DirectorMetas) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Roots {
		if z.Roots[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Roots[za0001].Raw)
		}
	}
	s += 10
	if z.Timestamp == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Timestamp.Raw)
	}
	s += 9
	if z.Snapshot == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Snapshot.Raw)
	}
	s += 8
	if z.Targets == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Targets.Raw)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *File) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "Raw":
			z.Raw, err = dc.ReadBytes(z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *File) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Path"
	err = en.Append(0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "Raw"
	err = en.Append(0xa3, 0x52, 0x61, 0x77)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Raw)
	if err != nil {
		err = msgp.WrapError(err, "Raw")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *File) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Path"
	o = append(o, 0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "Raw"
	o = append(o, 0xa3, 0x52, 0x61, 0x77)
	o = msgp.AppendBytes(o, z.Raw)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *File) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "Raw":
			z.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *File) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Path) + 4 + msgp.BytesPrefixSize + len(z.Raw)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetConfigsRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Product":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Product")
					return
				}
				z.Product = Product(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GetConfigsRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Product"
	err = en.Append(0x81, 0xa7, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Product))
	if err != nil {
		err = msgp.WrapError(err, "Product")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GetConfigsRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Product"
	o = append(o, 0x81, 0xa7, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	o = msgp.AppendInt32(o, int32(z.Product))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetConfigsRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Product":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Product")
					return
				}
				z.Product = Product(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GetConfigsRequest) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetConfigsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigResponses":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ConfigResponses")
				return
			}
			if cap(z.ConfigResponses) >= int(zb0002) {
				z.ConfigResponses = (z.ConfigResponses)[:zb0002]
			} else {
				z.ConfigResponses = make([]*ConfigResponse, zb0002)
			}
			for za0001 := range z.ConfigResponses {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ConfigResponses", za0001)
						return
					}
					z.ConfigResponses[za0001] = nil
				} else {
					if z.ConfigResponses[za0001] == nil {
						z.ConfigResponses[za0001] = new(ConfigResponse)
					}
					err = z.ConfigResponses[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "ConfigResponses", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GetConfigsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ConfigResponses"
	err = en.Append(0x81, 0xaf, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ConfigResponses)))
	if err != nil {
		err = msgp.WrapError(err, "ConfigResponses")
		return
	}
	for za0001 := range z.ConfigResponses {
		if z.ConfigResponses[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ConfigResponses[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ConfigResponses", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GetConfigsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ConfigResponses"
	o = append(o, 0x81, 0xaf, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ConfigResponses)))
	for za0001 := range z.ConfigResponses {
		if z.ConfigResponses[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ConfigResponses[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ConfigResponses", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetConfigsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigResponses":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfigResponses")
				return
			}
			if cap(z.ConfigResponses) >= int(zb0002) {
				z.ConfigResponses = (z.ConfigResponses)[:zb0002]
			} else {
				z.ConfigResponses = make([]*ConfigResponse, zb0002)
			}
			for za0001 := range z.ConfigResponses {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ConfigResponses[za0001] = nil
				} else {
					if z.ConfigResponses[za0001] == nil {
						z.ConfigResponses[za0001] = new(ConfigResponse)
					}
					bts, err = z.ConfigResponses[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ConfigResponses", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GetConfigsResponse) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.ConfigResponses {
		if z.ConfigResponses[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.ConfigResponses[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LatestConfigsResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigMetas":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ConfigMetas")
					return
				}
				z.ConfigMetas = nil
			} else {
				if z.ConfigMetas == nil {
					z.ConfigMetas = new(ConfigMetas)
				}
				err = z.ConfigMetas.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ConfigMetas")
					return
				}
			}
		case "DirectorMetas":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DirectorMetas")
					return
				}
				z.DirectorMetas = nil
			} else {
				if z.DirectorMetas == nil {
					z.DirectorMetas = new(DirectorMetas)
				}
				err = z.DirectorMetas.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "DirectorMetas")
					return
				}
			}
		case "TargetFiles":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles")
				return
			}
			if cap(z.TargetFiles) >= int(zb0002) {
				z.TargetFiles = (z.TargetFiles)[:zb0002]
			} else {
				z.TargetFiles = make([]*File, zb0002)
			}
			for za0001 := range z.TargetFiles {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0001)
						return
					}
					z.TargetFiles[za0001] = nil
				} else {
					if z.TargetFiles[za0001] == nil {
						z.TargetFiles[za0001] = new(File)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "TargetFiles", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Path":
							z.TargetFiles[za0001].Path, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001, "Path")
								return
							}
						case "Raw":
							z.TargetFiles[za0001].Raw, err = dc.ReadBytes(z.TargetFiles[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001, "Raw")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LatestConfigsResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ConfigMetas"
	err = en.Append(0x83, 0xab, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x73)
	if err != nil {
		return
	}
	if z.ConfigMetas == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ConfigMetas.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ConfigMetas")
			return
		}
	}
	// write "DirectorMetas"
	err = en.Append(0xad, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x73)
	if err != nil {
		return
	}
	if z.DirectorMetas == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.DirectorMetas.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "DirectorMetas")
			return
		}
	}
	// write "TargetFiles"
	err = en.Append(0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TargetFiles)))
	if err != nil {
		err = msgp.WrapError(err, "TargetFiles")
		return
	}
	for za0001 := range z.TargetFiles {
		if z.TargetFiles[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Path"
			err = en.Append(0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
			if err != nil {
				return
			}
			err = en.WriteString(z.TargetFiles[za0001].Path)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles", za0001, "Path")
				return
			}
			// write "Raw"
			err = en.Append(0xa3, 0x52, 0x61, 0x77)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.TargetFiles[za0001].Raw)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles", za0001, "Raw")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LatestConfigsResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ConfigMetas"
	o = append(o, 0x83, 0xab, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x73)
	if z.ConfigMetas == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ConfigMetas.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ConfigMetas")
			return
		}
	}
	// string "DirectorMetas"
	o = append(o, 0xad, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x73)
	if z.DirectorMetas == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.DirectorMetas.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "DirectorMetas")
			return
		}
	}
	// string "TargetFiles"
	o = append(o, 0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TargetFiles)))
	for za0001 := range z.TargetFiles {
		if z.TargetFiles[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Path"
			o = append(o, 0x82, 0xa4, 0x50, 0x61, 0x74, 0x68)
			o = msgp.AppendString(o, z.TargetFiles[za0001].Path)
			// string "Raw"
			o = append(o, 0xa3, 0x52, 0x61, 0x77)
			o = msgp.AppendBytes(o, z.TargetFiles[za0001].Raw)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LatestConfigsResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConfigMetas":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ConfigMetas = nil
			} else {
				if z.ConfigMetas == nil {
					z.ConfigMetas = new(ConfigMetas)
				}
				bts, err = z.ConfigMetas.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConfigMetas")
					return
				}
			}
		case "DirectorMetas":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DirectorMetas = nil
			} else {
				if z.DirectorMetas == nil {
					z.DirectorMetas = new(DirectorMetas)
				}
				bts, err = z.DirectorMetas.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "DirectorMetas")
					return
				}
			}
		case "TargetFiles":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetFiles")
				return
			}
			if cap(z.TargetFiles) >= int(zb0002) {
				z.TargetFiles = (z.TargetFiles)[:zb0002]
			} else {
				z.TargetFiles = make([]*File, zb0002)
			}
			for za0001 := range z.TargetFiles {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TargetFiles[za0001] = nil
				} else {
					if z.TargetFiles[za0001] == nil {
						z.TargetFiles[za0001] = new(File)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TargetFiles", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetFiles", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Path":
							z.TargetFiles[za0001].Path, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001, "Path")
								return
							}
						case "Raw":
							z.TargetFiles[za0001].Raw, bts, err = msgp.ReadBytesBytes(bts, z.TargetFiles[za0001].Raw)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001, "Raw")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "TargetFiles", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LatestConfigsResponse) Msgsize() (s int) {
	s = 1 + 12
	if z.ConfigMetas == nil {
		s += msgp.NilSize
	} else {
		s += z.ConfigMetas.Msgsize()
	}
	s += 14
	if z.DirectorMetas == nil {
		s += msgp.NilSize
	} else {
		s += z.DirectorMetas.Msgsize()
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0001 := range z.TargetFiles {
		if z.TargetFiles[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.StringPrefixSize + len(z.TargetFiles[za0001].Path) + 4 + msgp.BytesPrefixSize + len(z.TargetFiles[za0001].Raw)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Product) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Product(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Product) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Product) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Product) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Product(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Product) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SubscribeConfigRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CurrentConfigSnapshotVersion":
			z.CurrentConfigSnapshotVersion, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
				return
			}
		case "Product":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Product")
					return
				}
				z.Product = Product(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SubscribeConfigRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CurrentConfigSnapshotVersion"
	err = en.Append(0x82, 0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CurrentConfigSnapshotVersion)
	if err != nil {
		err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
		return
	}
	// write "Product"
	err = en.Append(0xa7, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Product))
	if err != nil {
		err = msgp.WrapError(err, "Product")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SubscribeConfigRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CurrentConfigSnapshotVersion"
	o = append(o, 0x82, 0xbc, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.CurrentConfigSnapshotVersion)
	// string "Product"
	o = append(o, 0xa7, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74)
	o = msgp.AppendInt32(o, int32(z.Product))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SubscribeConfigRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CurrentConfigSnapshotVersion":
			z.CurrentConfigSnapshotVersion, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentConfigSnapshotVersion")
				return
			}
		case "Product":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Product")
					return
				}
				z.Product = Product(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SubscribeConfigRequest) Msgsize() (s int) {
	s = 1 + 29 + msgp.Uint64Size + 8 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TopMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Raw":
			z.Raw, err = dc.ReadBytes(z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TopMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Version"
	err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Raw"
	err = en.Append(0xa3, 0x52, 0x61, 0x77)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Raw)
	if err != nil {
		err = msgp.WrapError(err, "Raw")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TopMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Version"
	o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.Version)
	// string "Raw"
	o = append(o, 0xa3, 0x52, 0x61, 0x77)
	o = msgp.AppendBytes(o, z.Raw)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TopMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Raw":
			z.Raw, bts, err = msgp.ReadBytesBytes(bts, z.Raw)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TopMeta) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint64Size + 4 + msgp.BytesPrefixSize + len(z.Raw)
	return
}
