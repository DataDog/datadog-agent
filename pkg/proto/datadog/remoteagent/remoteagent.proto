syntax = "proto3";

package datadog.remoteagent;

option go_package = "pkg/proto/pbgo/core"; // golang

message StatusSection {
  map<string, string> fields = 1;
}

message RegisterRemoteAgentRequest {
  // Unique ID of the remote agent.
  //
  // SHOULD be semi-human-readable, with a unique component, such as the process name followed by a UUID:
  // otel-agent-0192de13-3d66-7cbc-9b4f-1b74f7b8a467.
  string id = 1;

  // Human-friendly display name of the remote agent.
  //
  // SHOULD be the common name for the remote agent, such as OpenTelemetry Collector Agent.
  string display_name = 2;

  // gRPC endpoint address to reach the remote agent at.
  //
  // MUST be a valid gRPC endpoint address, such as "localhost:4317"
  // MUST be exposing the `RemoteAgent` service.
  // MUST be secured with TLS, and SHOULD present a valid certificate where possible.
  string api_endpoint = 3;

  // Authentication token to be used when connecting to the remote agent's gRPC endpoint.
  //
  // The remote agent's gRPC endpoint MUST check that this authentication token was provided as a bearer token in all
  // requests made to the endpoint. If the token is not provided, the remote agent SHOULD reject the request.
  //
  // SHOULD be a unique string value that is generated randomly before a remote agent registers itself for the first time.
  string auth_token = 4;
}

message RegisterRemoteAgentResponse {
  // Recommended refresh interval for the remote agent.
  //
  // This is the interval at which the remote agent should call the RegisterRemoteAgent RPC in order to assert that the
  // remote agent is live and healthy.
  //
  // The remote agent SHOULD refresh its status every `recommended_refresh_interval_secs` seconds.
  uint32 recommended_refresh_interval_secs = 1;
}

message GetStatusDetailsRequest {}

message GetStatusDetailsResponse {
  // Main status detail section.
  //
  // Generally reserved for high-level details such as version, uptime, configuration flags, etc.
  StatusSection main_section = 1;

  // Named status detail sections.
  //
  // Generally reserved for specific (sub)component details, such as the status of a specific feature or integration, etc.
  map<string, StatusSection> named_sections = 2;
}

message GetFlareFilesRequest {}

message GetFlareFilesResponse {
  // Set of files to add to the flare.
  //
  // The key is the name of the file, and the value is the contents of the file.
  //
  // The key SHOULD be an ASCII string with no path separators (`/`), and will be sanitized as necessary to ensure it can be
  // used as a valid filename. The key SHOULD have a file extension that is applicable to the file contents, such as
  // `.yaml` for YAML data.
  map<string, bytes> files = 1;
}
