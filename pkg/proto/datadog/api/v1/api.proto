syntax = "proto3";

package datadog.api.v1;

import "datadog/model/v1/model.proto";
import "datadog/remoteagent/remoteagent.proto";
import "datadog/remoteconfig/remoteconfig.proto";
import "datadog/workloadmeta/workloadmeta.proto";
import "datadog/autodiscovery/autodiscovery.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "pkg/proto/pbgo/core"; // golang


// The greeting service definition.
service Agent {
    // get the hostname
    rpc GetHostname (datadog.model.v1.HostnameRequest) returns (datadog.model.v1.HostnameReply);
}

service AgentSecure {
    // subscribes to added, removed, or changed entities in the Tagger
    // and streams them to clients as events.
    rpc TaggerStreamEntities(datadog.model.v1.StreamTagsRequest) returns (stream datadog.model.v1.StreamTagsResponse);;

    // Generates a container ID from Origin Info.
    rpc TaggerGenerateContainerIDFromOriginInfo(datadog.model.v1.GenerateContainerIDFromOriginInfoRequest) returns (datadog.model.v1.GenerateContainerIDFromOriginInfoResponse);;

    // fetches an entity from the Tagger with the desired cardinality tags.
    rpc TaggerFetchEntity(datadog.model.v1.FetchEntityRequest) returns (datadog.model.v1.FetchEntityResponse);;

    // Trigger a dogstatsd capture. Only one capture can be triggered at a time.
    rpc DogstatsdCaptureTrigger(datadog.model.v1.CaptureTriggerRequest) returns (datadog.model.v1.CaptureTriggerResponse);;

    // Set the tagger state for dogstatsd.
    rpc DogstatsdSetTaggerState(datadog.model.v1.TaggerState) returns (datadog.model.v1.TaggerStateResponse);

    rpc ClientGetConfigs(datadog.config.ClientGetConfigsRequest) returns (datadog.config.ClientGetConfigsResponse);

    rpc GetConfigState(google.protobuf.Empty) returns (datadog.config.GetStateConfigResponse);

    rpc ClientGetConfigsHA(datadog.config.ClientGetConfigsRequest) returns (datadog.config.ClientGetConfigsResponse);

    rpc GetConfigStateHA(google.protobuf.Empty) returns (datadog.config.GetStateConfigResponse);

    // Subscribes to added, removed, or changed entities in the Workloadmeta and
    // streams them to clients as events.
    rpc WorkloadmetaStreamEntities(datadog.workloadmeta.WorkloadmetaStreamRequest) returns (stream datadog.workloadmeta.WorkloadmetaStreamResponse);

    // Registers a remote agent.
    rpc RegisterRemoteAgent(datadog.remoteagent.RegisterRemoteAgentRequest) returns (datadog.remoteagent.RegisterRemoteAgentResponse);

    // Subscribes to autodiscovery config updates
    rpc AutodiscoveryStreamConfig(google.protobuf.Empty) returns (stream datadog.autodiscovery.AutodiscoveryStreamResponse);

    // Get the host tags
    rpc GetHostTags(datadog.model.v1.HostTagRequest) returns (datadog.model.v1.HostTagReply);

}

// Service exposed by remote agents to allow querying by the Core Agent.
service RemoteAgent {
  // Gets the status details of a remote agent.
  rpc GetStatusDetails(datadog.remoteagent.GetStatusDetailsRequest) returns (datadog.remoteagent.GetStatusDetailsResponse);

  // Gets all relevant flare files of a remote agent.
  rpc GetFlareFiles(datadog.remoteagent.GetFlareFilesRequest) returns (datadog.remoteagent.GetFlareFilesResponse);

  // Gets the telemetry data of a remote agent.
  rpc GetTelemetry(datadog.remoteagent.GetTelemetryRequest) returns (datadog.remoteagent.GetTelemetryResponse);
}
