--- pkg/proto/pbgo/trace/span_gen.go.clean	2025-09-09 16:31:31
+++ pkg/proto/pbgo/trace/span_gen.go	2025-09-09 16:33:41
@@ -581,60 +581,110 @@
 		}
 		switch msgp.UnsafeString(field) {
 		case "service":
-			z.Service, bts, err = msgp.ReadStringBytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Service = ""
+				break
+			}
+			z.Service, bts, err = parseStringBytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Service")
 				return
 			}
 		case "name":
-			z.Name, bts, err = msgp.ReadStringBytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Name = ""
+				break
+			}
+			z.Name, bts, err = parseStringBytes(bts)
 			if err != nil {
-				err = msgp.WrapError(err, "Name")
+				err = msgp.WrapError(err, "Service")
 				return
 			}
 		case "resource":
-			z.Resource, bts, err = msgp.ReadStringBytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Resource = ""
+				break
+			}
+			z.Resource, bts, err = parseStringBytes(bts)
 			if err != nil {
-				err = msgp.WrapError(err, "Resource")
+				err = msgp.WrapError(err, "Service")
 				return
 			}
 		case "trace_id":
-			z.TraceID, bts, err = msgp.ReadUint64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.TraceID = 0
+				break
+			}
+			z.TraceID, bts, err = parseUint64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "TraceID")
 				return
 			}
 		case "span_id":
-			z.SpanID, bts, err = msgp.ReadUint64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.SpanID = 0
+				break
+			}
+			z.SpanID, bts, err = parseUint64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "SpanID")
 				return
 			}
 		case "parent_id":
-			z.ParentID, bts, err = msgp.ReadUint64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.ParentID = 0
+				break
+			}
+			z.ParentID, bts, err = parseUint64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "ParentID")
 				return
 			}
 		case "start":
-			z.Start, bts, err = msgp.ReadInt64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Start = 0
+				break
+			}
+			z.Start, bts, err = parseInt64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Start")
 				return
 			}
 		case "duration":
-			z.Duration, bts, err = msgp.ReadInt64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Duration = 0
+				break
+			}
+			z.Duration, bts, err = parseInt64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Duration")
 				return
 			}
 		case "error":
-			z.Error, bts, err = msgp.ReadInt32Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Error = 0
+				break
+			}
+			z.Error, bts, err = parseInt32Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Error")
 				return
 			}
 		case "meta":
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Meta = nil
+				break
+			}
 			var zb0002 uint32
 			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
 			if err != nil {
@@ -650,12 +700,12 @@
 				var za0002 string
 				zb0002--
 				var za0001 string
-				za0001, bts, err = msgp.ReadStringBytes(bts)
+				za0001, bts, err = parseStringBytes(bts)
 				if err != nil {
 					err = msgp.WrapError(err, "Meta")
 					return
 				}
-				za0002, bts, err = msgp.ReadStringBytes(bts)
+				za0002, bts, err = parseStringBytes(bts)
 				if err != nil {
 					err = msgp.WrapError(err, "Meta", za0001)
 					return
@@ -663,6 +713,11 @@
 				z.Meta[za0001] = za0002
 			}
 		case "metrics":
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Metrics = nil
+				break
+			}
 			var zb0003 uint32
 			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
 			if err != nil {
@@ -678,12 +733,12 @@
 				var za0004 float64
 				zb0003--
 				var za0003 string
-				za0003, bts, err = msgp.ReadStringBytes(bts)
+				za0003, bts, err = parseStringBytes(bts)
 				if err != nil {
 					err = msgp.WrapError(err, "Metrics")
 					return
 				}
-				za0004, bts, err = msgp.ReadFloat64Bytes(bts)
+				za0004, bts, err = parseFloat64Bytes(bts)
 				if err != nil {
 					err = msgp.WrapError(err, "Metrics", za0003)
 					return
@@ -691,7 +746,12 @@
 				z.Metrics[za0003] = za0004
 			}
 		case "type":
-			z.Type, bts, err = msgp.ReadStringBytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Type = ""
+				break
+			}
+			z.Type, bts, err = parseStringBytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Type")
 				return
@@ -712,7 +772,7 @@
 				var za0006 []byte
 				zb0004--
 				var za0005 string
-				za0005, bts, err = msgp.ReadStringBytes(bts)
+				za0005, bts, err = parseStringBytes(bts)
 				if err != nil {
 					err = msgp.WrapError(err, "MetaStruct")
 					return
@@ -891,7 +951,12 @@
 				return
 			}
 		case "name":
-			z.Name, bts, err = msgp.ReadStringBytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.Name = ""
+				break
+			}
+			z.Name, bts, err = parseStringBytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "Name")
 				return
@@ -1045,7 +1110,12 @@
 		}
 		switch msgp.UnsafeString(field) {
 		case "trace_id":
-			z.TraceID, bts, err = msgp.ReadUint64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.TraceID = 0
+				break
+			}
+			z.TraceID, bts, err = parseUint64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "TraceID")
 				return
@@ -1057,7 +1127,12 @@
 				return
 			}
 		case "span_id":
-			z.SpanID, bts, err = msgp.ReadUint64Bytes(bts)
+			if msgp.IsNil(bts) {
+				bts, err = msgp.ReadNilBytes(bts)
+				z.SpanID = 0
+				break
+			}
+			z.SpanID, bts, err = parseUint64Bytes(bts)
 			if err != nil {
 				err = msgp.WrapError(err, "SpanID")
 				return
