// Code generated by MockGen. DO NOT EDIT.
// Source: network_linux.go

// Package module is a generated GoMock package.
package module

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocknetworkCollector is a mock of networkCollector interface.
type MocknetworkCollector struct {
	ctrl     *gomock.Controller
	recorder *MocknetworkCollectorMockRecorder
}

// MocknetworkCollectorMockRecorder is the mock recorder for MocknetworkCollector.
type MocknetworkCollectorMockRecorder struct {
	mock *MocknetworkCollector
}

// NewMocknetworkCollector creates a new mock instance.
func NewMocknetworkCollector(ctrl *gomock.Controller) *MocknetworkCollector {
	mock := &MocknetworkCollector{ctrl: ctrl}
	mock.recorder = &MocknetworkCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknetworkCollector) EXPECT() *MocknetworkCollectorMockRecorder {
	return m.recorder
}

// addPid mocks base method.
func (m *MocknetworkCollector) addPid(pid uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addPid", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// addPid indicates an expected call of addPid.
func (mr *MocknetworkCollectorMockRecorder) addPid(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPid", reflect.TypeOf((*MocknetworkCollector)(nil).addPid), pid)
}

// close mocks base method.
func (m *MocknetworkCollector) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MocknetworkCollectorMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MocknetworkCollector)(nil).close))
}

// getStats mocks base method.
func (m *MocknetworkCollector) getStats(pid uint32) (NetworkStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStats", pid)
	ret0, _ := ret[0].(NetworkStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getStats indicates an expected call of getStats.
func (mr *MocknetworkCollectorMockRecorder) getStats(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStats", reflect.TypeOf((*MocknetworkCollector)(nil).getStats), pid)
}

// removePid mocks base method.
func (m *MocknetworkCollector) removePid(pid uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "removePid", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// removePid indicates an expected call of removePid.
func (mr *MocknetworkCollectorMockRecorder) removePid(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removePid", reflect.TypeOf((*MocknetworkCollector)(nil).removePid), pid)
}
