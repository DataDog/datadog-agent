// Code generated by MockGen. DO NOT EDIT.
// Source: impl_linux.go

// Package module is a generated GoMock package.
package module

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MocktimeProvider is a mock of timeProvider interface.
type MocktimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MocktimeProviderMockRecorder
}

// MocktimeProviderMockRecorder is the mock recorder for MocktimeProvider.
type MocktimeProviderMockRecorder struct {
	mock *MocktimeProvider
}

// NewMocktimeProvider creates a new mock instance.
func NewMocktimeProvider(ctrl *gomock.Controller) *MocktimeProvider {
	mock := &MocktimeProvider{ctrl: ctrl}
	mock.recorder = &MocktimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeProvider) EXPECT() *MocktimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MocktimeProvider) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MocktimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MocktimeProvider)(nil).Now))
}
