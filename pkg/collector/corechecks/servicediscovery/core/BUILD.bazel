load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "core",
    srcs = [
        "config.go",
        "core.go",
        "impl_mock_linux.go",
        "kern_types_linux.go",
        "network_linux.go",
        "network_mock_linux.go",
        "params.go",
        "stat.go",
    ],
    cgo = True,
    importpath = "github.com/DataDog/datadog-agent/pkg/collector/corechecks/servicediscovery/core",
    visibility = ["//visibility:public"],
    deps = select({
        "@rules_go//go/platform:android": [
            "//comp/core/tagger/def",
            "//comp/core/tagger/types",
            "//comp/core/workloadmeta/def",
            "//pkg/collector/corechecks/servicediscovery/model",
            "//pkg/collector/corechecks/servicediscovery/servicetype",
            "//pkg/config/setup",
            "//pkg/system-probe/config",
            "//pkg/util/containers/metrics",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/kernel",
            "//pkg/util/log",
            "//pkg/util/option",
            "@com_github_golang_mock//gomock",
        ],
        "@rules_go//go/platform:linux": [
            "//comp/core/tagger/def",
            "//comp/core/tagger/types",
            "//comp/core/workloadmeta/def",
            "//pkg/collector/corechecks/servicediscovery/model",
            "//pkg/collector/corechecks/servicediscovery/servicetype",
            "//pkg/config/setup",
            "//pkg/system-probe/config",
            "//pkg/util/containers/metrics",
            "//pkg/util/containers/metrics/provider",
            "//pkg/util/kernel",
            "//pkg/util/log",
            "//pkg/util/option",
            "@com_github_golang_mock//gomock",
        ],
        "//conditions:default": [],
    }),
)

go_test(
    name = "core_test",
    srcs = [
        "core_test.go",
        "kern_types_linux_test.go",
    ],
    embed = [":core"],
    deps = select({
        "@rules_go//go/platform:android": [
            "//comp/core",
            "//comp/core/workloadmeta/def",
            "//comp/core/workloadmeta/fx-mock",
            "//comp/core/workloadmeta/mock",
            "//pkg/collector/corechecks/servicediscovery/model",
            "//pkg/collector/corechecks/servicediscovery/servicetype",
            "//pkg/ebpf/ebpftest",
            "//pkg/util/fxutil",
            "@com_github_stretchr_testify//assert",
            "@com_github_stretchr_testify//require",
            "@org_uber_go_fx//:fx",
        ],
        "@rules_go//go/platform:linux": [
            "//comp/core",
            "//comp/core/workloadmeta/def",
            "//comp/core/workloadmeta/fx-mock",
            "//comp/core/workloadmeta/mock",
            "//pkg/collector/corechecks/servicediscovery/model",
            "//pkg/collector/corechecks/servicediscovery/servicetype",
            "//pkg/ebpf/ebpftest",
            "//pkg/util/fxutil",
            "@com_github_stretchr_testify//assert",
            "@com_github_stretchr_testify//require",
            "@org_uber_go_fx//:fx",
        ],
        "//conditions:default": [],
    }),
)
