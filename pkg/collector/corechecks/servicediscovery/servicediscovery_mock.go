// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Code generated by MockGen. DO NOT EDIT.
// Source: servicediscovery.go
//
// Generated by this command:
//
//	mockgen -source=servicediscovery.go -package=servicediscovery -destination=servicediscovery_mock.go
//

// Package servicediscovery is a generated GoMock package.
package servicediscovery

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockosImpl is a mock of osImpl interface.
type MockosImpl struct {
	ctrl     *gomock.Controller
	recorder *MockosImplMockRecorder
}

// MockosImplMockRecorder is the mock recorder for MockosImpl.
type MockosImplMockRecorder struct {
	mock *MockosImpl
}

// NewMockosImpl creates a new mock instance.
func NewMockosImpl(ctrl *gomock.Controller) *MockosImpl {
	mock := &MockosImpl{ctrl: ctrl}
	mock.recorder = &MockosImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockosImpl) EXPECT() *MockosImplMockRecorder {
	return m.recorder
}

// DiscoverServices mocks base method.
func (m *MockosImpl) DiscoverServices() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverServices")
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscoverServices indicates an expected call of DiscoverServices.
func (mr *MockosImplMockRecorder) DiscoverServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverServices", reflect.TypeOf((*MockosImpl)(nil).DiscoverServices))
}

// Mocktimer is a mock of timer interface.
type Mocktimer struct {
	ctrl     *gomock.Controller
	recorder *MocktimerMockRecorder
}

// MocktimerMockRecorder is the mock recorder for Mocktimer.
type MocktimerMockRecorder struct {
	mock *Mocktimer
}

// NewMocktimer creates a new mock instance.
func NewMocktimer(ctrl *gomock.Controller) *Mocktimer {
	mock := &Mocktimer{ctrl: ctrl}
	mock.recorder = &MocktimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktimer) EXPECT() *MocktimerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *Mocktimer) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MocktimerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*Mocktimer)(nil).Now))
}
