// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

//go:build linux

// Code generated by MockGen. DO NOT EDIT.
// Source: impl_linux.go
//
// Generated by this command:
//
//	mockgen -source=impl_linux.go -package=servicediscovery -destination=impl_linux_mock.go
//

// Package servicediscovery is a generated GoMock package.
package servicediscovery

import (
	reflect "reflect"

	portlist "github.com/DataDog/datadog-agent/pkg/collector/corechecks/servicediscovery/portlist"
	procfs "github.com/prometheus/procfs"
	gomock "github.com/golang/mock/gomock"
)

// Mockproc is a mock of proc interface.
type Mockproc struct {
	ctrl     *gomock.Controller
	recorder *MockprocMockRecorder
}

// MockprocMockRecorder is the mock recorder for Mockproc.
type MockprocMockRecorder struct {
	mock *Mockproc
}

// NewMockproc creates a new mock instance.
func NewMockproc(ctrl *gomock.Controller) *Mockproc {
	mock := &Mockproc{ctrl: ctrl}
	mock.recorder = &MockprocMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockproc) EXPECT() *MockprocMockRecorder {
	return m.recorder
}

// CmdLine mocks base method.
func (m *Mockproc) CmdLine() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdLine")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CmdLine indicates an expected call of CmdLine.
func (mr *MockprocMockRecorder) CmdLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdLine", reflect.TypeOf((*Mockproc)(nil).CmdLine))
}

// Cwd mocks base method.
func (m *Mockproc) Cwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cwd indicates an expected call of Cwd.
func (mr *MockprocMockRecorder) Cwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cwd", reflect.TypeOf((*Mockproc)(nil).Cwd))
}

// Environ mocks base method.
func (m *Mockproc) Environ() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environ indicates an expected call of Environ.
func (mr *MockprocMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*Mockproc)(nil).Environ))
}

// PID mocks base method.
func (m *Mockproc) PID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PID")
	ret0, _ := ret[0].(int)
	return ret0
}

// PID indicates an expected call of PID.
func (mr *MockprocMockRecorder) PID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PID", reflect.TypeOf((*Mockproc)(nil).PID))
}

// Stat mocks base method.
func (m *Mockproc) Stat() (procfs.ProcStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(procfs.ProcStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockprocMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*Mockproc)(nil).Stat))
}

// MockprocFS is a mock of procFS interface.
type MockprocFS struct {
	ctrl     *gomock.Controller
	recorder *MockprocFSMockRecorder
}

// MockprocFSMockRecorder is the mock recorder for MockprocFS.
type MockprocFSMockRecorder struct {
	mock *MockprocFS
}

// NewMockprocFS creates a new mock instance.
func NewMockprocFS(ctrl *gomock.Controller) *MockprocFS {
	mock := &MockprocFS{ctrl: ctrl}
	mock.recorder = &MockprocFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprocFS) EXPECT() *MockprocFSMockRecorder {
	return m.recorder
}

// AllProcs mocks base method.
func (m *MockprocFS) AllProcs() ([]proc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProcs")
	ret0, _ := ret[0].([]proc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProcs indicates an expected call of AllProcs.
func (mr *MockprocFSMockRecorder) AllProcs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProcs", reflect.TypeOf((*MockprocFS)(nil).AllProcs))
}

// MockportPoller is a mock of portPoller interface.
type MockportPoller struct {
	ctrl     *gomock.Controller
	recorder *MockportPollerMockRecorder
}

// MockportPollerMockRecorder is the mock recorder for MockportPoller.
type MockportPollerMockRecorder struct {
	mock *MockportPoller
}

// NewMockportPoller creates a new mock instance.
func NewMockportPoller(ctrl *gomock.Controller) *MockportPoller {
	mock := &MockportPoller{ctrl: ctrl}
	mock.recorder = &MockportPollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockportPoller) EXPECT() *MockportPollerMockRecorder {
	return m.recorder
}

// OpenPorts mocks base method.
func (m *MockportPoller) OpenPorts() (portlist.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPorts")
	ret0, _ := ret[0].(portlist.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenPorts indicates an expected call of OpenPorts.
func (mr *MockportPollerMockRecorder) OpenPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPorts", reflect.TypeOf((*MockportPoller)(nil).OpenPorts))
}
