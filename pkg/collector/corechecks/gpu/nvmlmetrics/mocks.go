// Code generated by mockery v2.40.1. DO NOT EDIT.

//go:build linux && test

package nvmlmetrics

import (
	nvml "github.com/NVIDIA/go-nvml/pkg/nvml"
	mock "github.com/stretchr/testify/mock"
)

// mockSubsystemCollector is an autogenerated mock type for the subsystemCollector type
type mockSubsystemCollector struct {
	mock.Mock
}

type mockSubsystemCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSubsystemCollector) EXPECT() *mockSubsystemCollector_Expecter {
	return &mockSubsystemCollector_Expecter{mock: &_m.Mock}
}

// close provides a mock function with given fields:
func (_m *mockSubsystemCollector) close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSubsystemCollector_close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'close'
type mockSubsystemCollector_close_Call struct {
	*mock.Call
}

// close is a helper method to define mock.On call
func (_e *mockSubsystemCollector_Expecter) close() *mockSubsystemCollector_close_Call {
	return &mockSubsystemCollector_close_Call{Call: _e.mock.On("close")}
}

func (_c *mockSubsystemCollector_close_Call) Run(run func()) *mockSubsystemCollector_close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSubsystemCollector_close_Call) Return(_a0 error) *mockSubsystemCollector_close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSubsystemCollector_close_Call) RunAndReturn(run func() error) *mockSubsystemCollector_close_Call {
	_c.Call.Return(run)
	return _c
}

// collectMetrics provides a mock function with given fields: dev
func (_m *mockSubsystemCollector) collectMetrics(dev nvml.Device) ([]Metric, error) {
	ret := _m.Called(dev)

	if len(ret) == 0 {
		panic("no return value specified for collectMetrics")
	}

	var r0 []Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(nvml.Device) ([]Metric, error)); ok {
		return rf(dev)
	}
	if rf, ok := ret.Get(0).(func(nvml.Device) []Metric); ok {
		r0 = rf(dev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(nvml.Device) error); ok {
		r1 = rf(dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSubsystemCollector_collectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'collectMetrics'
type mockSubsystemCollector_collectMetrics_Call struct {
	*mock.Call
}

// collectMetrics is a helper method to define mock.On call
//   - dev nvml.Device
func (_e *mockSubsystemCollector_Expecter) collectMetrics(dev interface{}) *mockSubsystemCollector_collectMetrics_Call {
	return &mockSubsystemCollector_collectMetrics_Call{Call: _e.mock.On("collectMetrics", dev)}
}

func (_c *mockSubsystemCollector_collectMetrics_Call) Run(run func(dev nvml.Device)) *mockSubsystemCollector_collectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(nvml.Device))
	})
	return _c
}

func (_c *mockSubsystemCollector_collectMetrics_Call) Return(_a0 []Metric, _a1 error) *mockSubsystemCollector_collectMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSubsystemCollector_collectMetrics_Call) RunAndReturn(run func(nvml.Device) ([]Metric, error)) *mockSubsystemCollector_collectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// name provides a mock function with given fields:
func (_m *mockSubsystemCollector) name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockSubsystemCollector_name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'name'
type mockSubsystemCollector_name_Call struct {
	*mock.Call
}

// name is a helper method to define mock.On call
func (_e *mockSubsystemCollector_Expecter) name() *mockSubsystemCollector_name_Call {
	return &mockSubsystemCollector_name_Call{Call: _e.mock.On("name")}
}

func (_c *mockSubsystemCollector_name_Call) Run(run func()) *mockSubsystemCollector_name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSubsystemCollector_name_Call) Return(_a0 string) *mockSubsystemCollector_name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSubsystemCollector_name_Call) RunAndReturn(run func() string) *mockSubsystemCollector_name_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSubsystemCollector creates a new instance of mockSubsystemCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSubsystemCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSubsystemCollector {
	mock := &mockSubsystemCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
