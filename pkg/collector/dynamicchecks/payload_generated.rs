// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod integrations {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum MetricOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Metric<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Metric<'a> {
  type Inner = Metric<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Metric<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_VALUE: flatbuffers::VOffsetT = 8;
  pub const VT_TAGS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Metric { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MetricArgs<'args>
  ) -> flatbuffers::WIPOffset<Metric<'bldr>> {
    let mut builder = MetricBuilder::new(_fbb);
    builder.add_value(args.value);
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Metric::VT_TYPE_, None)}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Metric::VT_NAME, None)}
  }
  #[inline]
  pub fn value(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Metric::VT_VALUE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Metric::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for Metric<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<f64>("value", Self::VT_VALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct MetricArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: f64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for MetricArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetricArgs {
      type_: None,
      name: None,
      value: 0.0,
      tags: None,
    }
  }
}

pub struct MetricBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MetricBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Metric::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Metric::VT_NAME, name);
  }
  #[inline]
  pub fn add_value(&mut self, value: f64) {
    self.fbb_.push_slot::<f64>(Metric::VT_VALUE, value, 0.0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Metric::VT_TAGS, tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MetricBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MetricBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Metric<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Metric<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Metric");
      ds.field("type_", &self.type_());
      ds.field("name", &self.name());
      ds.field("value", &self.value());
      ds.field("tags", &self.tags());
      ds.finish()
  }
}
pub enum PayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Payload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Payload<'a> {
  type Inner = Payload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Payload<'a> {
  pub const VT_METRICS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Payload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<Payload<'bldr>> {
    let mut builder = PayloadBuilder::new(_fbb);
    if let Some(x) = args.metrics { builder.add_metrics(x); }
    builder.finish()
  }


  #[inline]
  pub fn metrics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Metric<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Metric>>>>(Payload::VT_METRICS, None)}
  }
}

impl flatbuffers::Verifiable for Payload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Metric>>>>("metrics", Self::VT_METRICS, false)?
     .finish();
    Ok(())
  }
}
pub struct PayloadArgs<'a> {
    pub metrics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Metric<'a>>>>>,
}
impl<'a> Default for PayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    PayloadArgs {
      metrics: None,
    }
  }
}

pub struct PayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PayloadBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_metrics(&mut self, metrics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Metric<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Payload::VT_METRICS, metrics);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PayloadBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Payload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Payload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Payload");
      ds.field("metrics", &self.metrics());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Payload`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_payload_unchecked`.
pub fn root_as_payload(buf: &[u8]) -> Result<Payload, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Payload>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Payload` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_payload_unchecked`.
pub fn size_prefixed_root_as_payload(buf: &[u8]) -> Result<Payload, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Payload>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Payload` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_payload_unchecked`.
pub fn root_as_payload_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Payload<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Payload<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Payload` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_payload_unchecked`.
pub fn size_prefixed_root_as_payload_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Payload<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Payload<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Payload and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Payload`.
pub unsafe fn root_as_payload_unchecked(buf: &[u8]) -> Payload {
  flatbuffers::root_unchecked::<Payload>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Payload and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Payload`.
pub unsafe fn size_prefixed_root_as_payload_unchecked(buf: &[u8]) -> Payload {
  flatbuffers::size_prefixed_root_unchecked::<Payload>(buf)
}
#[inline]
pub fn finish_payload_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Payload<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_payload_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Payload<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Integrations

