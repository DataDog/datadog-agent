// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stats.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		stats.proto

	It has these top-level messages:
		ClientStatsPayload
		ClientStatsBucket
		ClientGroupedStats
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ClientStatsPayload bla bla
type ClientStatsPayload struct {
	Hostname string               `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Env      string               `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Stats    []*ClientStatsBucket `protobuf:"bytes,3,rep,name=stats" json:"stats,omitempty"`
}

func (m *ClientStatsPayload) Reset()                    { *m = ClientStatsPayload{} }
func (m *ClientStatsPayload) String() string            { return proto.CompactTextString(m) }
func (*ClientStatsPayload) ProtoMessage()               {}
func (*ClientStatsPayload) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{0} }

func (m *ClientStatsPayload) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ClientStatsPayload) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ClientStatsPayload) GetStats() []*ClientStatsBucket {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ClientStatsBucket struct {
	Start    int64                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Duration int64                 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Stats    []*ClientGroupedStats `protobuf:"bytes,3,rep,name=stats" json:"stats,omitempty"`
}

func (m *ClientStatsBucket) Reset()                    { *m = ClientStatsBucket{} }
func (m *ClientStatsBucket) String() string            { return proto.CompactTextString(m) }
func (*ClientStatsBucket) ProtoMessage()               {}
func (*ClientStatsBucket) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{1} }

func (m *ClientStatsBucket) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ClientStatsBucket) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ClientStatsBucket) GetStats() []*ClientGroupedStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ClientGroupedStats struct {
	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Env       string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Service   string   `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Resource  string   `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	Version   string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	OtherTags []string `protobuf:"bytes,6,rep,name=other_tags,json=otherTags" json:"other_tags,omitempty"`
	Hits      float64  `protobuf:"fixed64,7,opt,name=hits,proto3" json:"hits,omitempty"`
	Errors    float64  `protobuf:"fixed64,8,opt,name=errors,proto3" json:"errors,omitempty"`
	Duration  float64  `protobuf:"fixed64,9,opt,name=duration,proto3" json:"duration,omitempty"`
	TopLevel  float64  `protobuf:"fixed64,10,opt,name=top_level,json=topLevel,proto3" json:"top_level,omitempty"`
}

func (m *ClientGroupedStats) Reset()                    { *m = ClientGroupedStats{} }
func (m *ClientGroupedStats) String() string            { return proto.CompactTextString(m) }
func (*ClientGroupedStats) ProtoMessage()               {}
func (*ClientGroupedStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{2} }

func (m *ClientGroupedStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientGroupedStats) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ClientGroupedStats) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ClientGroupedStats) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ClientGroupedStats) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClientGroupedStats) GetOtherTags() []string {
	if m != nil {
		return m.OtherTags
	}
	return nil
}

func (m *ClientGroupedStats) GetHits() float64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *ClientGroupedStats) GetErrors() float64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *ClientGroupedStats) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ClientGroupedStats) GetTopLevel() float64 {
	if m != nil {
		return m.TopLevel
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientStatsPayload)(nil), "pb.ClientStatsPayload")
	proto.RegisterType((*ClientStatsBucket)(nil), "pb.ClientStatsBucket")
	proto.RegisterType((*ClientGroupedStats)(nil), "pb.ClientGroupedStats")
}
func (m *ClientStatsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStatsPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStats(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientStatsBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStatsBucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Start))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Duration))
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStats(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientGroupedStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGroupedStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Resource) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Resource)))
		i += copy(dAtA[i:], m.Resource)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.OtherTags) > 0 {
		for _, s := range m.OtherTags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Hits != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Hits))))
		i += 8
	}
	if m.Errors != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Errors))))
		i += 8
	}
	if m.Duration != 0 {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Duration))))
		i += 8
	}
	if m.TopLevel != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopLevel))))
		i += 8
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClientStatsPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *ClientStatsBucket) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovStats(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovStats(uint64(m.Duration))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *ClientGroupedStats) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if len(m.OtherTags) > 0 {
		for _, s := range m.OtherTags {
			l = len(s)
			n += 1 + l + sovStats(uint64(l))
		}
	}
	if m.Hits != 0 {
		n += 9
	}
	if m.Errors != 0 {
		n += 9
	}
	if m.Duration != 0 {
		n += 9
	}
	if m.TopLevel != 0 {
		n += 9
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientStatsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStatsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStatsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &ClientStatsBucket{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStatsBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStatsBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStatsBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &ClientGroupedStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGroupedStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGroupedStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGroupedStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherTags = append(m.OtherTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Hits = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Errors = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Duration = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevel", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopLevel = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stats.proto", fileDescriptorStats) }

var fileDescriptorStats = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x4e, 0xfb, 0x30,
	0x10, 0xc5, 0xff, 0xae, 0xfb, 0x15, 0x77, 0xd3, 0xbf, 0x05, 0x95, 0x05, 0x22, 0x8a, 0xba, 0x8a,
	0x04, 0xea, 0x02, 0x6e, 0x50, 0x16, 0x6c, 0x58, 0xa0, 0xc0, 0xbe, 0x72, 0xdb, 0x51, 0x1b, 0x11,
	0xe2, 0xc8, 0x9e, 0x44, 0xe2, 0x12, 0xac, 0x39, 0x12, 0x4b, 0x8e, 0x80, 0xca, 0x45, 0x90, 0x27,
	0x4d, 0x3f, 0x84, 0xd8, 0xf9, 0x37, 0x2f, 0x33, 0xef, 0xcd, 0x28, 0x62, 0xe0, 0x50, 0xa3, 0x9b,
	0x14, 0xd6, 0xa0, 0x91, 0xad, 0x62, 0x3e, 0x36, 0x42, 0xde, 0x66, 0x29, 0xe4, 0xf8, 0xe8, 0x85,
	0x07, 0xfd, 0x9a, 0x19, 0xbd, 0x94, 0x67, 0xa2, 0xbf, 0x36, 0x0e, 0x73, 0xfd, 0x02, 0x8a, 0x45,
	0x2c, 0x0e, 0x92, 0x1d, 0xcb, 0xa1, 0xe0, 0x90, 0x57, 0xaa, 0x45, 0x65, 0xff, 0x94, 0x97, 0xa2,
	0x43, 0x63, 0x15, 0x8f, 0x78, 0x3c, 0xb8, 0x3e, 0x9d, 0x14, 0xf3, 0xc9, 0xc1, 0xd0, 0x69, 0xb9,
	0x78, 0x06, 0x4c, 0xea, 0x6f, 0xc6, 0x4e, 0xfc, 0xff, 0xa5, 0xc9, 0x13, 0x9a, 0x60, 0x91, 0xcc,
	0x78, 0x52, 0x83, 0x4f, 0xb1, 0x2c, 0xad, 0xc6, 0xd4, 0xe4, 0x64, 0xc7, 0x93, 0x1d, 0xcb, 0xab,
	0x63, 0xcf, 0xd1, 0xde, 0xf3, 0xce, 0x9a, 0xb2, 0x80, 0x25, 0x8d, 0x6f, 0x4c, 0xdf, 0x5a, 0xcd,
	0x9a, 0x87, 0xaa, 0x94, 0xa2, 0x7d, 0xb0, 0x62, 0xfb, 0x8f, 0xf5, 0x94, 0xe8, 0x39, 0xb0, 0x55,
	0xba, 0x00, 0xc5, 0xa9, 0xda, 0xa0, 0x0f, 0x68, 0xc1, 0x99, 0xd2, 0x2e, 0x40, 0xb5, 0xeb, 0x33,
	0x35, 0xec, 0xbb, 0x2a, 0xb0, 0xce, 0x67, 0xef, 0xd4, 0x5d, 0x5b, 0x94, 0x17, 0x42, 0x18, 0x5c,
	0x83, 0x9d, 0xa1, 0x5e, 0x39, 0xd5, 0x8d, 0x78, 0x1c, 0x24, 0x01, 0x55, 0x9e, 0xf4, 0x8a, 0x42,
	0xad, 0x53, 0x74, 0xaa, 0x17, 0xb1, 0x98, 0x25, 0xf4, 0x96, 0x23, 0xd1, 0x05, 0x6b, 0x8d, 0x75,
	0xaa, 0x4f, 0xd5, 0x2d, 0x1d, 0x5d, 0x28, 0x20, 0x65, 0x7f, 0xa1, 0x73, 0x11, 0xa0, 0x29, 0x66,
	0x19, 0x54, 0x90, 0x29, 0x51, 0x8b, 0x68, 0x8a, 0x7b, 0xcf, 0xd3, 0xe1, 0xc7, 0x26, 0x64, 0x9f,
	0x9b, 0x90, 0x7d, 0x6d, 0x42, 0xf6, 0xfe, 0x1d, 0xfe, 0x9b, 0x77, 0xe9, 0x9f, 0xb8, 0xf9, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xef, 0xad, 0xc1, 0x37, 0x22, 0x02, 0x00, 0x00,
}
