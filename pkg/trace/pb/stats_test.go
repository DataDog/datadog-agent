package pb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tinylib/msgp/msgp"
)

func marshalNoTags(z ClientGroupedStats, b []byte) []byte {
	var o []byte
	o = msgp.Require(b, len(b))
	o = msgp.AppendMapHeader(o, uint32(11))
	o = append(o, 0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Service)
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	o = append(o, 0xa8, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	o = msgp.AppendString(o, z.Resource)
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	o = append(o, 0xa6, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.DBType)
	o = append(o, 0xa4, 0x48, 0x69, 0x74, 0x73)
	o = msgp.AppendUint64(o, z.Hits)
	o = append(o, 0xa6, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73)
	o = msgp.AppendUint64(o, z.Errors)
	o = append(o, 0xa8, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint64(o, z.Duration)
	o = append(o, 0xa9, 0x4f, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79)
	o = msgp.AppendBytes(o, z.OkSummary)
	o = append(o, 0xac, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79)
	o = msgp.AppendBytes(o, z.ErrorSummary)
	return o
}

func TestMarshalUnmarshalTags(t *testing.T) {
	bts := marshalNoTags(ClientGroupedStats{}, nil)
	// string "Tags"
	bts = append(bts, 0xa4, 0x54, 0x61, 0x67, 0x73)
	bts = msgp.AppendMapHeader(bts, uint32(8))
	bts = msgp.AppendString(bts, "bool")
	bts = msgp.AppendBool(bts, true)
	bts = msgp.AppendString(bts, "int")
	bts = msgp.AppendInt(bts, 100)
	bts = msgp.AppendString(bts, "uint")
	bts = msgp.AppendUint(bts, 550)
	bts = msgp.AppendString(bts, "string")
	bts = msgp.AppendString(bts, "bim")
	bts = msgp.AppendString(bts, "bytes")
	bts = msgp.AppendBytes(bts, []byte("byteString"))
	bts = msgp.AppendString(bts, "bytes")
	bts = msgp.AppendBytes(bts, []byte("bytes"))
	bts = msgp.AppendString(bts, "float64")
	bts = msgp.AppendFloat64(bts, 5.0)
	bts = msgp.AppendString(bts, "float32")
	bts = msgp.AppendFloat64(bts, 71.37)
	v := ClientGroupedStats{}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
	assert.Equal(t, v.Tags, []Tag{{"bool", "true"}, {"int", "100"}, {"uint", "550"}, {"string", "bim"}, {"bytes", "byteString"}, {"bytes", "bytes"}, {"float64", "5.00000"}, {"float32", "71.37000"}})
}

func TestMarshalUnmarshalClientGroupedStats(t *testing.T) {
	v := ClientGroupedStats{}
	bts, err := v.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func TestMarshalUnmarshalClientStatsBucket(t *testing.T) {
	v := ClientStatsBucket{}
	bts, err := v.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func TestMarshalUnmarshalClientStatsPayload(t *testing.T) {
	v := ClientStatsPayload{}
	bts, err := v.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}
