// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

package pb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *AppSecRuleMatch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "operator"
	o = append(o, 0x83, 0xa8, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Operator)
	// string "operator_value"
	o = append(o, 0xae, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.OperatorValue)
	// string "parameters"
	o = append(o, 0xaa, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Parameters)))
	for za0001 := range z.Parameters {
		if z.Parameters[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Parameters[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Parameters", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppSecRuleMatch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "operator":
			z.Operator, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Operator")
				return
			}
		case "operator_value":
			z.OperatorValue, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OperatorValue")
				return
			}
		case "parameters":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Parameters")
				return
			}
			if cap(z.Parameters) >= int(zb0002) {
				z.Parameters = (z.Parameters)[:zb0002]
			} else {
				z.Parameters = make([]*AppSecRuleParameter, zb0002)
			}
			for za0001 := range z.Parameters {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Parameters[za0001] = nil
				} else {
					if z.Parameters[za0001] == nil {
						z.Parameters[za0001] = new(AppSecRuleParameter)
					}
					bts, err = z.Parameters[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Parameters", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppSecRuleMatch) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Operator) + 15 + msgp.StringPrefixSize + len(z.OperatorValue) + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Parameters {
		if z.Parameters[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Parameters[za0001].Msgsize()
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppSecRuleParameter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "address"
	o = append(o, 0x83, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	// string "highlight"
	o = append(o, 0xa9, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Highlight)))
	for za0001 := range z.Highlight {
		o = msgp.AppendString(o, z.Highlight[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppSecRuleParameter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "address":
			z.Address, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "value":
			z.Value, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "highlight":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Highlight")
				return
			}
			if cap(z.Highlight) >= int(zb0002) {
				z.Highlight = (z.Highlight)[:zb0002]
			} else {
				z.Highlight = make([]string, zb0002)
			}
			for za0001 := range z.Highlight {
				z.Highlight[za0001], bts, err = parseStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Highlight", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppSecRuleParameter) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Address) + 6 + msgp.StringPrefixSize + len(z.Value) + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Highlight {
		s += msgp.StringPrefixSize + len(z.Highlight[za0001])
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppSecRuleTrigger) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "id"
	o = append(o, 0x83, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "tags"
	o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
	for za0001, za0002 := range z.Tags {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppSecRuleTrigger) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "name":
			z.Name, bts, err = parseStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "tags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = parseStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, bts, err = parseStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppSecRuleTrigger) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0001, za0002 := range z.Tags {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppSecStruct) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "triggers"
	o = append(o, 0x81, 0xa8, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Triggers)))
	for za0001 := range z.Triggers {
		if z.Triggers[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Triggers[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Triggers", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppSecStruct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "triggers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Triggers")
				return
			}
			if cap(z.Triggers) >= int(zb0002) {
				z.Triggers = (z.Triggers)[:zb0002]
			} else {
				z.Triggers = make([]*AppSecTrigger, zb0002)
			}
			for za0001 := range z.Triggers {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Triggers[za0001] = nil
				} else {
					if z.Triggers[za0001] == nil {
						z.Triggers[za0001] = new(AppSecTrigger)
					}
					bts, err = z.Triggers[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Triggers", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppSecStruct) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Triggers {
		if z.Triggers[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Triggers[za0001].Msgsize()
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppSecTrigger) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "rule"
	o = append(o, 0x82, 0xa4, 0x72, 0x75, 0x6c, 0x65)
	if z.Rule == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Rule.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Rule")
			return
		}
	}
	// string "rule_matches"
	o = append(o, 0xac, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RuleMatches)))
	for za0001 := range z.RuleMatches {
		if z.RuleMatches[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.RuleMatches[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "RuleMatches", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppSecTrigger) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "rule":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Rule = nil
			} else {
				if z.Rule == nil {
					z.Rule = new(AppSecRuleTrigger)
				}
				bts, err = z.Rule.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rule")
					return
				}
			}
		case "rule_matches":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RuleMatches")
				return
			}
			if cap(z.RuleMatches) >= int(zb0002) {
				z.RuleMatches = (z.RuleMatches)[:zb0002]
			} else {
				z.RuleMatches = make([]*AppSecRuleMatch, zb0002)
			}
			for za0001 := range z.RuleMatches {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.RuleMatches[za0001] = nil
				} else {
					if z.RuleMatches[za0001] == nil {
						z.RuleMatches[za0001] = new(AppSecRuleMatch)
					}
					bts, err = z.RuleMatches[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "RuleMatches", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppSecTrigger) Msgsize() (s int) {
	s = 1 + 5
	if z.Rule == nil {
		s += msgp.NilSize
	} else {
		s += z.Rule.Msgsize()
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0001 := range z.RuleMatches {
		if z.RuleMatches[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.RuleMatches[za0001].Msgsize()
		}
	}
	return
}
