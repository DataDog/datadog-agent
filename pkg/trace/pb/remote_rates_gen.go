package pb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *APMSampling) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TargetTps":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TargetTps")
				return
			}
			if cap(z.TargetTps) >= int(zb0002) {
				z.TargetTps = (z.TargetTps)[:zb0002]
			} else {
				z.TargetTps = make([]TargetTPS, zb0002)
			}
			for za0001 := range z.TargetTps {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TargetTps", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TargetTps", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Service":
						z.TargetTps[za0001].Service, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Service")
							return
						}
					case "Env":
						z.TargetTps[za0001].Env, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Env")
							return
						}
					case "Value":
						z.TargetTps[za0001].Value, err = dc.ReadFloat64()
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *APMSampling) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "TargetTps"
	err = en.Append(0x81, 0xa9, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TargetTps)))
	if err != nil {
		err = msgp.WrapError(err, "TargetTps")
		return
	}
	for za0001 := range z.TargetTps {
		// map header, size 3
		// write "Service"
		err = en.Append(0x83, 0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.TargetTps[za0001].Service)
		if err != nil {
			err = msgp.WrapError(err, "TargetTps", za0001, "Service")
			return
		}
		// write "Env"
		err = en.Append(0xa3, 0x45, 0x6e, 0x76)
		if err != nil {
			return
		}
		err = en.WriteString(z.TargetTps[za0001].Env)
		if err != nil {
			err = msgp.WrapError(err, "TargetTps", za0001, "Env")
			return
		}
		// write "Value"
		err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteFloat64(z.TargetTps[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "TargetTps", za0001, "Value")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *APMSampling) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "TargetTps"
	o = append(o, 0x81, 0xa9, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TargetTps)))
	for za0001 := range z.TargetTps {
		// map header, size 3
		// string "Service"
		o = append(o, 0x83, 0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
		o = msgp.AppendString(o, z.TargetTps[za0001].Service)
		// string "Env"
		o = append(o, 0xa3, 0x45, 0x6e, 0x76)
		o = msgp.AppendString(o, z.TargetTps[za0001].Env)
		// string "Value"
		o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendFloat64(o, z.TargetTps[za0001].Value)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *APMSampling) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TargetTps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetTps")
				return
			}
			if cap(z.TargetTps) >= int(zb0002) {
				z.TargetTps = (z.TargetTps)[:zb0002]
			} else {
				z.TargetTps = make([]TargetTPS, zb0002)
			}
			for za0001 := range z.TargetTps {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TargetTps", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TargetTps", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Service":
						z.TargetTps[za0001].Service, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Service")
							return
						}
					case "Env":
						z.TargetTps[za0001].Env, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Env")
							return
						}
					case "Value":
						z.TargetTps[za0001].Value, bts, err = msgp.ReadFloat64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TargetTps", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *APMSampling) Msgsize() (s int) {
	s = 1 + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.TargetTps {
		s += 1 + 8 + msgp.StringPrefixSize + len(z.TargetTps[za0001].Service) + 4 + msgp.StringPrefixSize + len(z.TargetTps[za0001].Env) + 6 + msgp.Float64Size
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TargetTPS) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Service":
			z.Service, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Service")
				return
			}
		case "Env":
			z.Env, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
		case "Value":
			z.Value, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TargetTPS) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Service"
	err = en.Append(0x83, 0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Service)
	if err != nil {
		err = msgp.WrapError(err, "Service")
		return
	}
	// write "Env"
	err = en.Append(0xa3, 0x45, 0x6e, 0x76)
	if err != nil {
		return
	}
	err = en.WriteString(z.Env)
	if err != nil {
		err = msgp.WrapError(err, "Env")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TargetTPS) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Service"
	o = append(o, 0x83, 0xa7, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Service)
	// string "Env"
	o = append(o, 0xa3, 0x45, 0x6e, 0x76)
	o = msgp.AppendString(o, z.Env)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendFloat64(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TargetTPS) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Service":
			z.Service, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Service")
				return
			}
		case "Env":
			z.Env, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TargetTPS) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Service) + 4 + msgp.StringPrefixSize + len(z.Env) + 6 + msgp.Float64Size
	return
}
