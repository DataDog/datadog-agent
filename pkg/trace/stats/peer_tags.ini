# if a peer entity tag is expected to be set at the tracer, and we want to keep it, then it must be included
# in the list. I.e., since we have at least one tracer which actually sets `peer.hostname` directly, we need
# to set `peer.hostname = "peer.hostname" else it will get stripped out
# the order of the precursors matters, as it is "first one wins". so if we expect some spans to have more than one
# precursor, and the precursors may not always have the exact same meaning, then put the higher priority one at the front
[dd.apm.peer.tags]
peer.aws.dynamodb.table = "tablename"
peer.aws.kinesis.stream = "streamname"
peer.aws.s3.bucket = "bucketname,aws.s3.bucket"
peer.aws.sqs.queue = "queuename"
peer.cassandra.contact.points = "db.cassandra.contact.points"
peer.couchbase.seed.nodes = "db.couchbase.seed.nodes"
peer.db.name = "db.name,mongodb.db,db.instance,cassandra.keyspace,db.namespace"
peer.db.system = "db.system"
peer.hostname = "peer.hostname,hostname,net.peer.name,db.hostname,network.destination.name,grpc.host,http.host,server.address,http.server_name"
peer.kafka.bootstrap.servers = "messaging.kafka.bootstrap.servers"
peer.messaging.destination = "topicname,messaging.destination,messaging.destination.name,messaging.rabbitmq.exchange,amqp.destination,amqp.queue,amqp.exchange,msmq.queue.path,aws.queue.name"
peer.messaging.system = "messaging.system"
peer.rpc.service = "rpc.service"
peer.rpc.system = "rpc.system"
peer.service = "peer.service"
