package apmsampling

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *EnvAndConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Env, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
		case "1":
			err = z.Config.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EnvAndConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "0"
	err = en.Append(0x82, 0xa1, 0x30)
	if err != nil {
		return
	}
	err = en.WriteString(z.Env)
	if err != nil {
		err = msgp.WrapError(err, "Env")
		return
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	err = z.Config.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EnvAndConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendString(o, z.Env)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o, err = z.Config.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EnvAndConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Env, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
		case "1":
			bts, err = z.Config.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EnvAndConfig) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Env) + 2 + z.Config.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SamplerConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "00":
			err = z.AllEnvs.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "AllEnvs")
				return
			}
		case "01":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ByEnv")
				return
			}
			if cap(z.ByEnv) >= int(zb0002) {
				z.ByEnv = (z.ByEnv)[:zb0002]
			} else {
				z.ByEnv = make([]EnvAndConfig, zb0002)
			}
			for za0001 := range z.ByEnv {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ByEnv", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ByEnv", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "0":
						z.ByEnv[za0001].Env, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001, "Env")
							return
						}
					case "1":
						err = z.ByEnv[za0001].Config.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001, "Config")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SamplerConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "00"
	err = en.Append(0x82, 0xa2, 0x30, 0x30)
	if err != nil {
		return
	}
	err = z.AllEnvs.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "AllEnvs")
		return
	}
	// write "01"
	err = en.Append(0xa2, 0x30, 0x31)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ByEnv)))
	if err != nil {
		err = msgp.WrapError(err, "ByEnv")
		return
	}
	for za0001 := range z.ByEnv {
		// map header, size 2
		// write "0"
		err = en.Append(0x82, 0xa1, 0x30)
		if err != nil {
			return
		}
		err = en.WriteString(z.ByEnv[za0001].Env)
		if err != nil {
			err = msgp.WrapError(err, "ByEnv", za0001, "Env")
			return
		}
		// write "1"
		err = en.Append(0xa1, 0x31)
		if err != nil {
			return
		}
		err = z.ByEnv[za0001].Config.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ByEnv", za0001, "Config")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SamplerConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "00"
	o = append(o, 0x82, 0xa2, 0x30, 0x30)
	o, err = z.AllEnvs.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "AllEnvs")
		return
	}
	// string "01"
	o = append(o, 0xa2, 0x30, 0x31)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ByEnv)))
	for za0001 := range z.ByEnv {
		// map header, size 2
		// string "0"
		o = append(o, 0x82, 0xa1, 0x30)
		o = msgp.AppendString(o, z.ByEnv[za0001].Env)
		// string "1"
		o = append(o, 0xa1, 0x31)
		o, err = z.ByEnv[za0001].Config.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ByEnv", za0001, "Config")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SamplerConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "00":
			bts, err = z.AllEnvs.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "AllEnvs")
				return
			}
		case "01":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ByEnv")
				return
			}
			if cap(z.ByEnv) >= int(zb0002) {
				z.ByEnv = (z.ByEnv)[:zb0002]
			} else {
				z.ByEnv = make([]EnvAndConfig, zb0002)
			}
			for za0001 := range z.ByEnv {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ByEnv", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ByEnv", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "0":
						z.ByEnv[za0001].Env, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001, "Env")
							return
						}
					case "1":
						bts, err = z.ByEnv[za0001].Config.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001, "Config")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ByEnv", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SamplerConfig) Msgsize() (s int) {
	s = 1 + 3 + z.AllEnvs.Msgsize() + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.ByEnv {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.ByEnv[za0001].Env) + 2 + z.ByEnv[za0001].Config.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SamplerEnvConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "PrioritySamplerTargetTPS")
					return
				}
				z.PrioritySamplerTargetTPS = nil
			} else {
				if z.PrioritySamplerTargetTPS == nil {
					z.PrioritySamplerTargetTPS = new(float64)
				}
				*z.PrioritySamplerTargetTPS, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "PrioritySamplerTargetTPS")
					return
				}
			}
		case "1":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ErrorsSamplerTargetTPS")
					return
				}
				z.ErrorsSamplerTargetTPS = nil
			} else {
				if z.ErrorsSamplerTargetTPS == nil {
					z.ErrorsSamplerTargetTPS = new(float64)
				}
				*z.ErrorsSamplerTargetTPS, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "ErrorsSamplerTargetTPS")
					return
				}
			}
		case "2":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RareSamplerEnabled")
					return
				}
				z.RareSamplerEnabled = nil
			} else {
				if z.RareSamplerEnabled == nil {
					z.RareSamplerEnabled = new(bool)
				}
				*z.RareSamplerEnabled, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "RareSamplerEnabled")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SamplerEnvConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "0"
	err = en.Append(0x83, 0xa1, 0x30)
	if err != nil {
		return
	}
	if z.PrioritySamplerTargetTPS == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteFloat64(*z.PrioritySamplerTargetTPS)
		if err != nil {
			err = msgp.WrapError(err, "PrioritySamplerTargetTPS")
			return
		}
	}
	// write "1"
	err = en.Append(0xa1, 0x31)
	if err != nil {
		return
	}
	if z.ErrorsSamplerTargetTPS == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteFloat64(*z.ErrorsSamplerTargetTPS)
		if err != nil {
			err = msgp.WrapError(err, "ErrorsSamplerTargetTPS")
			return
		}
	}
	// write "2"
	err = en.Append(0xa1, 0x32)
	if err != nil {
		return
	}
	if z.RareSamplerEnabled == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.RareSamplerEnabled)
		if err != nil {
			err = msgp.WrapError(err, "RareSamplerEnabled")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SamplerEnvConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	if z.PrioritySamplerTargetTPS == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendFloat64(o, *z.PrioritySamplerTargetTPS)
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	if z.ErrorsSamplerTargetTPS == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendFloat64(o, *z.ErrorsSamplerTargetTPS)
	}
	// string "2"
	o = append(o, 0xa1, 0x32)
	if z.RareSamplerEnabled == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.RareSamplerEnabled)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SamplerEnvConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.PrioritySamplerTargetTPS = nil
			} else {
				if z.PrioritySamplerTargetTPS == nil {
					z.PrioritySamplerTargetTPS = new(float64)
				}
				*z.PrioritySamplerTargetTPS, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrioritySamplerTargetTPS")
					return
				}
			}
		case "1":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ErrorsSamplerTargetTPS = nil
			} else {
				if z.ErrorsSamplerTargetTPS == nil {
					z.ErrorsSamplerTargetTPS = new(float64)
				}
				*z.ErrorsSamplerTargetTPS, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ErrorsSamplerTargetTPS")
					return
				}
			}
		case "2":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RareSamplerEnabled = nil
			} else {
				if z.RareSamplerEnabled == nil {
					z.RareSamplerEnabled = new(bool)
				}
				*z.RareSamplerEnabled, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RareSamplerEnabled")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SamplerEnvConfig) Msgsize() (s int) {
	s = 1 + 2
	if z.PrioritySamplerTargetTPS == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Float64Size
	}
	s += 2
	if z.ErrorsSamplerTargetTPS == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Float64Size
	}
	s += 2
	if z.RareSamplerEnabled == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	return
}
