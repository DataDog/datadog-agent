// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package obfuscate

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ef41860DecodeGithubComDataDogDatadogAgentPkgObfuscate(in *jlexer.Lexer, out *SQLConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TableNames":
			out.TableNames = bool(in.Bool())
		case "replace_digits":
			out.ReplaceDigits = bool(in.Bool())
		case "KeepSQLAlias":
			out.KeepSQLAlias = bool(in.Bool())
		case "DollarQuotedFunc":
			out.DollarQuotedFunc = bool(in.Bool())
		case "Cache":
			out.Cache = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef41860EncodeGithubComDataDogDatadogAgentPkgObfuscate(out *jwriter.Writer, in SQLConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TableNames\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.TableNames))
	}
	{
		const prefix string = ",\"replace_digits\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReplaceDigits))
	}
	{
		const prefix string = ",\"KeepSQLAlias\":"
		out.RawString(prefix)
		out.Bool(bool(in.KeepSQLAlias))
	}
	{
		const prefix string = ",\"DollarQuotedFunc\":"
		out.RawString(prefix)
		out.Bool(bool(in.DollarQuotedFunc))
	}
	{
		const prefix string = ",\"Cache\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cache))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SQLConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef41860EncodeGithubComDataDogDatadogAgentPkgObfuscate(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SQLConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef41860DecodeGithubComDataDogDatadogAgentPkgObfuscate(l, v)
}
