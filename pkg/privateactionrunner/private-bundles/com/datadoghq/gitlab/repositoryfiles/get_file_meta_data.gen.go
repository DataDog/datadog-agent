// Package com_datadoghq_gitlab_repository_files
// DO NOT EDIT THIS FILE MANUALLY!
//
// This file was autogenerated by the golang gitlab generator.
// You can regenerate it by running `bzl run //domains/workflow/actionplatform/apps/tools/golang_action_generator:generate -- -g gitlab`.
package com_datadoghq_gitlab_repository_files

import (
	"context"

	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/private-bundles/com/datadoghq/gitlab/lib"
	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/types"
	runtimepb "github.com/DataDog/dd-source/domains/actionplatform/proto/runtime"

	"gitlab.com/gitlab-org/api/client-go"
)

type GetFileMetaDataHandler struct{}

func NewGetFileMetaDataHandler() *GetFileMetaDataHandler {
	return &GetFileMetaDataHandler{}
}

type GetFileMetaDataInputs struct {
	ProjectId lib.GitlabID `json:"project_id,omitempty"`
	FilePath  string       `json:"file_path,omitempty"`
	*gitlab.GetFileMetaDataOptions
}

type GetFileMetaDataOutputs struct {
	File *gitlab.File `json:"file"`
}

func (h *GetFileMetaDataHandler) Run(
	ctx context.Context,
	task *types.Task,
	credential *runtimepb.Credential,
) (any, error) {
	inputs, err := types.ExtractInputs[GetFileMetaDataInputs](task)
	if err != nil {
		return nil, err
	}
	git, err := lib.NewGitlabClient(credential)
	if err != nil {
		return nil, err
	}

	file, _, err := git.RepositoryFiles.GetFileMetaData(inputs.ProjectId.String(), inputs.FilePath, inputs.GetFileMetaDataOptions)
	if err != nil {
		return nil, err
	}
	return &GetFileMetaDataOutputs{File: file}, nil
}
