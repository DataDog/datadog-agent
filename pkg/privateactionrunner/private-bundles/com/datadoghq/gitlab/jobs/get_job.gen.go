// Package com_datadoghq_gitlab_jobs
// DO NOT EDIT THIS FILE MANUALLY!
//
// This file was autogenerated by the golang gitlab generator.
// You can regenerate it by running `bzl run //domains/workflow/actionplatform/apps/tools/golang_action_generator:generate -- -g gitlab`.
package com_datadoghq_gitlab_jobs

import (
	"context"

	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/private-bundles/com/datadoghq/gitlab/lib"
	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/types"
	runtimepb "github.com/DataDog/dd-source/domains/actionplatform/proto/runtime"

	"gitlab.com/gitlab-org/api/client-go"
)

type GetJobHandler struct{}

func NewGetJobHandler() *GetJobHandler {
	return &GetJobHandler{}
}

type GetJobInputs struct {
	ProjectId lib.GitlabID `json:"project_id,omitempty"`
	JobId     int          `json:"job_id,omitempty"`
}

type GetJobOutputs struct {
	Job *gitlab.Job `json:"job"`
}

func (h *GetJobHandler) Run(
	ctx context.Context,
	task *types.Task,
	credential *runtimepb.Credential,
) (any, error) {
	inputs, err := types.ExtractInputs[GetJobInputs](task)
	if err != nil {
		return nil, err
	}
	git, err := lib.NewGitlabClient(credential)
	if err != nil {
		return nil, err
	}

	job, _, err := git.Jobs.GetJob(inputs.ProjectId.String(), inputs.JobId)
	if err != nil {
		return nil, err
	}
	return &GetJobOutputs{Job: job}, nil
}
