// Package com_datadoghq_gitlab_custom_attributes
// DO NOT EDIT THIS FILE MANUALLY!
//
// This file was autogenerated by the golang gitlab generator.
// You can regenerate it by running `bzl run //domains/workflow/actionplatform/apps/tools/golang_action_generator:generate -- -g gitlab`.
package com_datadoghq_gitlab_custom_attributes

import (
	"context"

	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/private-bundles/com/datadoghq/gitlab/lib"
	"github.com/DataDog/dd-source/domains/actionplatform/apps/private-runner/src/types"
	runtimepb "github.com/DataDog/dd-source/domains/actionplatform/proto/runtime"

	"gitlab.com/gitlab-org/api/client-go"
)

type ListCustomUserAttributesHandler struct{}

func NewListCustomUserAttributesHandler() *ListCustomUserAttributesHandler {
	return &ListCustomUserAttributesHandler{}
}

type ListCustomUserAttributesInputs struct {
	UserId  int `json:"user_id,omitempty"`
	Page    int `json:"page,omitempty"`
	PerPage int `json:"per_page,omitempty"`
}

type ListCustomUserAttributesOutputs struct {
	CustomAttributes []*gitlab.CustomAttribute `json:"custom_attributes"`
}

func (h *ListCustomUserAttributesHandler) Run(
	ctx context.Context,
	task *types.Task,
	credential *runtimepb.Credential,
) (any, error) {
	inputs, err := types.ExtractInputs[ListCustomUserAttributesInputs](task)
	if err != nil {
		return nil, err
	}
	git, err := lib.NewGitlabClient(credential)
	if err != nil {
		return nil, err
	}

	customAttributes, _, err := git.CustomAttribute.ListCustomUserAttributes(inputs.UserId, lib.WithPagination(inputs.Page, inputs.PerPage))
	if err != nil {
		return nil, err
	}
	return &ListCustomUserAttributesOutputs{CustomAttributes: customAttributes}, nil
}
