/*
 * Unless explicitly stated otherwise all files in this repository are licensed
 * under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-2019 Datadog, Inc.
 */

package kubernetes

import (
	"github.com/DataDog/datadog-agent/pkg/logs/decoder"
)

const (
	flagFull = "F"
)

// PartialLineHandler is a Handler to manage the kubernetes prefixed logs.
// A typical kubernetes log looks like:
// [timestamp stream flag message]
// T1 S1 P M1 // max 16KB
// T2 S2 F M2 // max 16KB
// The line generated by this handler should be:
// T2 S2 F M1M2
// Normally, a line should be at max 16KB which is less than the default
// LineGenerator decode length (defaultMaxDecodeLength = 1MB).
type PartialLineHandler struct {
	nextHandler decoder.Handler
	lineBuf     *decoder.MultiLineBuffer
}

// NewPartialLineHandler creates a new instance of PartialLineHandler.
func NewPartialLineHandler(nextHandler decoder.Handler) *PartialLineHandler {
	return &PartialLineHandler{
		nextHandler: nextHandler,
		lineBuf:     decoder.NewMultiLineBuffer(),
	}
}

// Handle writes the line into buffer and send buffered content if given message
// is the last line of a full log.
func (p *PartialLineHandler) Handle(line *decoder.RichLine) {
	p.lineBuf.Write(line)
	// directly send the buffered content when the incoming line is
	// a Full message (meaning it's the last part of a log) or the
	// current buffer is full.
	if line.Flag == flagFull || p.lineBuf.IsFull() {
		p.send()
	}
}

// Cleanup send the result and clean up the next handlers.
func (p *PartialLineHandler) Cleanup() {
	p.send()
	p.nextHandler.Cleanup()
}

func (p *PartialLineHandler) send() {
	defer p.lineBuf.Reset()
	line := p.lineBuf.ToLine()
	if line != nil {
		p.nextHandler.Handle(line)
	}
}

// SendResult makes sure the result gets sent immediately to the next handler
// next handler also immediately send it's cached result to downstream.
func (p *PartialLineHandler) SendResult() {
	p.send()
	p.nextHandler.SendResult()
}
