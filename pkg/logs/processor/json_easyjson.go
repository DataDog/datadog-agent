// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package processor

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor(in *jlexer.Lexer, out *jsonPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "hostname":
			out.Hostname = string(in.String())
		case "service":
			out.Service = string(in.String())
		case "ddsource":
			out.Source = string(in.String())
		case "ddtags":
			out.Tags = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor(out *jwriter.Writer, in jsonPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		out.String(string(in.Service))
	}
	{
		const prefix string = ",\"ddsource\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"ddtags\":"
		out.RawString(prefix)
		out.String(string(in.Tags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor(l, v)
}
func easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor1(in *jlexer.Lexer, out *jsonEncoder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor1(out *jwriter.Writer, in jsonEncoder) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonEncoder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonEncoder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComDataDogDatadogAgentPkgLogsProcessor1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonEncoder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonEncoder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComDataDogDatadogAgentPkgLogsProcessor1(l, v)
}
