// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	eval "github.com/DataDog/datadog-agent/pkg/compliance/eval"
	mock "github.com/stretchr/testify/mock"
)

// Evaluatable is an autogenerated mock type for the Evaluatable type
type Evaluatable struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: instance
func (_m *Evaluatable) Evaluate(instance eval.Instance) (interface{}, error) {
	ret := _m.Called(instance)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(eval.Instance) (interface{}, error)); ok {
		return rf(instance)
	}
	if rf, ok := ret.Get(0).(func(eval.Instance) interface{}); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(eval.Instance) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEvaluatable interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvaluatable creates a new instance of Evaluatable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvaluatable(t mockConstructorTestingTNewEvaluatable) *Evaluatable {
	mock := &Evaluatable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
