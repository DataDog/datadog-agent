// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	check "github.com/DataDog/datadog-agent/pkg/collector/check"
	mock "github.com/stretchr/testify/mock"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: id
func (_m *Scheduler) Cancel(id check.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(check.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enter provides a mock function with given fields: _a0
func (_m *Scheduler) Enter(_a0 check.Check) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(check.Check) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCheckScheduled provides a mock function with given fields: id
func (_m *Scheduler) IsCheckScheduled(id check.ID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(check.ID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *Scheduler) Run() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *Scheduler) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScheduler(t mockConstructorTestingTNewScheduler) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
