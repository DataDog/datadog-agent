// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	compliance "github.com/DataDog/datadog-agent/pkg/compliance"
	env "github.com/DataDog/datadog-agent/pkg/compliance/checks/env"

	event "github.com/DataDog/datadog-agent/pkg/compliance/event"

	mock "github.com/stretchr/testify/mock"
)

// Env is an autogenerated mock type for the Env type
type Env struct {
	mock.Mock
}

// AuditClient provides a mock function with given fields:
func (_m *Env) AuditClient() env.AuditClient {
	ret := _m.Called()

	var r0 env.AuditClient
	if rf, ok := ret.Get(0).(func() env.AuditClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(env.AuditClient)
		}
	}

	return r0
}

// DockerClient provides a mock function with given fields:
func (_m *Env) DockerClient() env.DockerClient {
	ret := _m.Called()

	var r0 env.DockerClient
	if rf, ok := ret.Get(0).(func() env.DockerClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(env.DockerClient)
		}
	}

	return r0
}

// EtcGroupPath provides a mock function with given fields:
func (_m *Env) EtcGroupPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Hostname provides a mock function with given fields:
func (_m *Env) Hostname() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeClient provides a mock function with given fields:
func (_m *Env) KubeClient() env.KubeClient {
	ret := _m.Called()

	var r0 env.KubeClient
	if rf, ok := ret.Get(0).(func() env.KubeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(env.KubeClient)
		}
	}

	return r0
}

// NormalizePath provides a mock function with given fields: path
func (_m *Env) NormalizePath(path string) string {
	ret := _m.Called(path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Reporter provides a mock function with given fields:
func (_m *Env) Reporter() event.Reporter {
	ret := _m.Called()

	var r0 event.Reporter
	if rf, ok := ret.Get(0).(func() event.Reporter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Reporter)
		}
	}

	return r0
}

// ResolveValueFrom provides a mock function with given fields: valueFrom
func (_m *Env) ResolveValueFrom(valueFrom compliance.ValueFrom) (string, error) {
	ret := _m.Called(valueFrom)

	var r0 string
	if rf, ok := ret.Get(0).(func(compliance.ValueFrom) string); ok {
		r0 = rf(valueFrom)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(compliance.ValueFrom) error); ok {
		r1 = rf(valueFrom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
