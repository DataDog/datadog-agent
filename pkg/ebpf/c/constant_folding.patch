--- lib/Analysis/ConstantFolding.cpp	2020-12-18 19:57:38.000000000 +0000
+++ lib/Analysis/ConstantFolding.cpp	2022-02-09 22:09:26.145370000 +0000
@@ -60,6 +60,68 @@
 #include <cstddef>
 #include <cstdint>

+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#if defined(__GLIBC__)
+
+#ifdef __x86_64__
+#define GLIBC_VERS "GLIBC_2.2.5"
+#elif defined(__aarch64__)
+#define GLIBC_VERS "GLIBC_2.17"
+#else
+#error Unknown architecture
+#endif
+
+#define symver_wrap_d1(func)                                    \
+double __ ## func ## _prior_glibc(double x);                    \
+                                                                \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);  \
+                                                                \
+double __wrap_ ## func (double x) {                             \
+  return __ ## func ## _prior_glibc(x);                         \
+}
+
+#define symver_wrap_f1(func)                                    \
+float __ ## func ## _prior_glibc(float x);                      \
+                                                                \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);  \
+                                                                \
+float __wrap_ ## func (float x) {                               \
+  return __ ## func ## _prior_glibc(x);                         \
+}
+
+#else
+
+// Use functions directly for non-GLIBC environments.
+
+#define symver_wrap_d1(func)                                    \
+double func(double x);                                          \
+                                                                \
+double __wrap_ ## func (double x) {                             \
+  return func(x);                                               \
+}
+
+#define symver_wrap_f1(func)                                    \
+float func(float x);                                            \
+                                                                \
+float __wrap_ ## func (float x) {                               \
+  return func(x);                                               \
+}
+
+#endif
+
+
+symver_wrap_d1(exp)
+symver_wrap_d1(log)
+symver_wrap_d1(log2)
+symver_wrap_f1(log2f)
+
+#ifdef __cplusplus
+}
+#endif
+
 using namespace llvm;

 namespace {
