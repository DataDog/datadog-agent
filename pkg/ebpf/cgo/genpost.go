// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Package main is the program to fixup cgo generated types
package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"regexp"
	"runtime"
	"strings"
)

func main() {
	var buf bytes.Buffer
	rdr := io.TeeReader(os.Stdin, &buf)
	if err := processFile(rdr, os.Stdout); err != nil {
		log.Fatal(err)
	}

	if len(os.Args) >= 3 && os.Args[1] != "" && os.Args[2] != "" {
		testsFile, packageName := os.Args[1], os.Args[2]
		// we must add the .go extension here, otherwise `go run` will try to run this path
		if err := writeTests(&buf, testsFile+".go", packageName); err != nil {
			log.Fatal(err)
		}
	}
}

func processFile(rdr io.Reader, out io.Writer) error {
	b, err := io.ReadAll(rdr)
	if err != nil {
		return err
	}

	b = removeAbsolutePath(b, runtime.GOOS)

	int8variableNames := []string{
		"Buf",
		"Cgroup",
		"Cgroup_name",
		"LocalAddr",
		"LocalAddress",
		"Probe_id",
		"RemoteAddr",
		"RemoteAddress",
		"Request_fragment",
		"Topic_name",
		"Trigger_comm",
		"Victim_comm",
	}

	// Convert []int8 to []byte in multiple generated fields from the kernel, to simplify
	// conversion to string; see golang.org/issue/20753
	convertInt8ArrayToByteArrayRegex := regexp.MustCompile(`(` + strings.Join(int8variableNames, "|") + `)(\s+)\[(\d+)\]u?int8`)
	b = convertInt8ArrayToByteArrayRegex.ReplaceAll(b, []byte("$1$2[$3]byte"))

	// Convert generated pointers to CGo structs to uint64
	convertPointerToUint64Regex := regexp.MustCompile(`\*_Ctype_struct_(\w+)`)
	b = convertPointerToUint64Regex.ReplaceAll(b, []byte("uint64"))

	// Convert *byte pointers to uint64 (original void * in C)
	convertBytePointerToUint64Regex := regexp.MustCompile(`(\s+)(\*byte)`)
	b = convertBytePointerToUint64Regex.ReplaceAll(b, []byte("${1}uint64"))

	b, err = format.Source(b)
	if err != nil {
		return err
	}

	_, err = out.Write(b)
	return err
}

// removeAbsolutePath removes the absolute file path that is automatically output by cgo -godefs
// and replaces it with only the filename
func removeAbsolutePath(b []byte, platform string) []byte {
	var removeAbsolutePathRegex *regexp.Regexp
	switch platform {
	case "linux":
		removeAbsolutePathRegex = regexp.MustCompile(`(// cgo -godefs .+) /.+/([^/]+)$`)
	case "windows":
		removeAbsolutePathRegex = regexp.MustCompile(`(// cgo.exe -godefs .+) .:\\.+\\([^\\]+)$`)
	default:
		log.Fatal("unsupported platform")
	}

	return removeAbsolutePathRegex.ReplaceAll(b, []byte("$1 $2"))
}

var testHeaderTemplate = `// Code generated by genpost.go; DO NOT EDIT.

package %s
`

var testImportTemplate = `
import (
	"testing"

	"github.com/DataDog/datadog-agent/pkg/ebpf/ebpftest"
)
`

var testTemplate = `
func TestCgoAlignment_%[1]s(t *testing.T) {
	ebpftest.TestCgoAlignment[%[1]s](t)
}
`

func writeTests(rdr io.Reader, dstFile string, packageName string) error {
	var typeNames []string
	structRegex := regexp.MustCompile("type ([^ ]+) struct")
	scanner := bufio.NewScanner(rdr)
	for scanner.Scan() {
		matches := structRegex.FindSubmatch(scanner.Bytes())
		if len(matches) >= 2 {
			typeName := matches[1]
			typeNames = append(typeNames, string(typeName))
		}
	}
	if err := scanner.Err(); err != nil {
		return err
	}
	if len(typeNames) == 0 {
		return nil
	}

	dst, err := os.Create(dstFile)
	if err != nil {
		return err
	}
	defer dst.Close()
	fmt.Fprintf(dst, testHeaderTemplate, packageName)

	fmt.Fprint(dst, testImportTemplate)
	for _, typeName := range typeNames {
		fmt.Fprintf(dst, testTemplate, typeName)
	}
	return nil
}
