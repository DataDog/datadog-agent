// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

//go:build ignore

package main

import (
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/cilium/ebpf"
)

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
//go:build linux_bpf
package main
import (
{{ .Imports -}}
)

type EBPFPrograms__{{ .ObjectFile }} struct {
{{ .Struct }}
}
`))

func listOfObjectFiles(directory string) []string {
	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		present, err := regexp.Match(".*\.o", []byte(d.Name()))
		if err != nil {
			return fmt.Errorf("file regexp match: %s", err)
		}


		if d.IsDIr() {
			return nil
		}

	})

}

func main() {
	args := os.Args[1:]
	if len(args) < 1 {
		panic("please use 'go run integrity.go <object_file_dir>'")
	}

	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("unable to get current working directory: %s", err)
	}

	outputFile := filepath.Join(cwd, "programs.go")
	f, err := os.Create(outputFile)
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}
	defer f.Close()

	bc, err := os.Open(filepath.Join(args[0], "usm.o"))
	if err != nil {
		log.Fatalf("couldn't open asset: %v", err)
	}
	defer bc.Close()

	collectionSpec, err := ebpf.LoadCollectionSpecFromReader(bc)
	if err != nil {
		log.Fatalf("failed to load collection spec: %v", err)
	}

	var functions strings.Builder
	for name, progSpec := range collectionSpec.Programs {
		if progSpec == nil {
			fmt.Printf("ProgramSpec for %s is nil\n", name)
			continue
		}
		functions.WriteString(
			fmt.Sprintf("Func_%s *ebpf.Program `ebpf:\"%s\"`\n", progSpec.Name, progSpec.Name),
		)
	}

	if err := fileTemplate.Execute(f, struct {
		Imports string
		Struct  string
	}{"\"github.com/cilium/ebpf\"", functions.String()}); err != nil {
		log.Fatalf("failed to execute template: %v", err)
	}
}
