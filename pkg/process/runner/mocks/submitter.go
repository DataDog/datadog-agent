// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/DataDog/datadog-agent/comp/process/types"
)

// Submitter is an autogenerated mock type for the Submitter type
type Submitter struct {
	mock.Mock
}

type Submitter_Expecter struct {
	mock *mock.Mock
}

func (_m *Submitter) EXPECT() *Submitter_Expecter {
	return &Submitter_Expecter{mock: &_m.Mock}
}

// Submit provides a mock function with given fields: start, name, messages
func (_m *Submitter) Submit(start time.Time, name string, messages *types.Payload) {
	_m.Called(start, name, messages)
}

// Submitter_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type Submitter_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - start time.Time
//   - name string
//   - messages *types.Payload
func (_e *Submitter_Expecter) Submit(start interface{}, name interface{}, messages interface{}) *Submitter_Submit_Call {
	return &Submitter_Submit_Call{Call: _e.mock.On("Submit", start, name, messages)}
}

func (_c *Submitter_Submit_Call) Run(run func(start time.Time, name string, messages *types.Payload)) *Submitter_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string), args[2].(*types.Payload))
	})
	return _c
}

func (_c *Submitter_Submit_Call) Return() *Submitter_Submit_Call {
	_c.Call.Return()
	return _c
}

func (_c *Submitter_Submit_Call) RunAndReturn(run func(time.Time, string, *types.Payload)) *Submitter_Submit_Call {
	_c.Run(run)
	return _c
}

// NewSubmitter creates a new instance of Submitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Submitter {
	mock := &Submitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
