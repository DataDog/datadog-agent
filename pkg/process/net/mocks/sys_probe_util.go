// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	languagemodels "github.com/DataDog/datadog-agent/pkg/languagedetection/languagemodels"
	mock "github.com/stretchr/testify/mock"

	model "github.com/DataDog/datadog-agent/pkg/collector/corechecks/servicediscovery/model"

	payload "github.com/DataDog/datadog-agent/pkg/networkpath/payload"

	process "github.com/DataDog/agent-payload/v5/process"

	time "time"

	types "github.com/DataDog/datadog-agent/cmd/system-probe/config/types"
)

// SysProbeUtil is an autogenerated mock type for the SysProbeUtil type
type SysProbeUtil struct {
	mock.Mock
}

// DetectLanguage provides a mock function with given fields: pids
func (_m *SysProbeUtil) DetectLanguage(pids []int32) ([]languagemodels.Language, error) {
	ret := _m.Called(pids)

	if len(ret) == 0 {
		panic("no return value specified for DetectLanguage")
	}

	var r0 []languagemodels.Language
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) ([]languagemodels.Language, error)); ok {
		return rf(pids)
	}
	if rf, ok := ret.Get(0).(func([]int32) []languagemodels.Language); ok {
		r0 = rf(pids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]languagemodels.Language)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(pids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheck provides a mock function with given fields: module
func (_m *SysProbeUtil) GetCheck(module types.ModuleName) (interface{}, error) {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for GetCheck")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(types.ModuleName) (interface{}, error)); ok {
		return rf(module)
	}
	if rf, ok := ret.Get(0).(func(types.ModuleName) interface{}); ok {
		r0 = rf(module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(types.ModuleName) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnections provides a mock function with given fields: clientID
func (_m *SysProbeUtil) GetConnections(clientID string) (*process.Connections, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 *process.Connections
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*process.Connections, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) *process.Connections); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*process.Connections)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscoveryServices provides a mock function with given fields:
func (_m *SysProbeUtil) GetDiscoveryServices() (*model.ServicesResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoveryServices")
	}

	var r0 *model.ServicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ServicesResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ServicesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkID provides a mock function with given fields:
func (_m *SysProbeUtil) GetNetworkID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPing provides a mock function with given fields: clientID, host, count, interval, timeout
func (_m *SysProbeUtil) GetPing(clientID string, host string, count int, interval time.Duration, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(clientID, host, count, interval, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetPing")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, time.Duration, time.Duration) ([]byte, error)); ok {
		return rf(clientID, host, count, interval, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, time.Duration, time.Duration) []byte); ok {
		r0 = rf(clientID, host, count, interval, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, time.Duration, time.Duration) error); ok {
		r1 = rf(clientID, host, count, interval, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPprof provides a mock function with given fields: path
func (_m *SysProbeUtil) GetPprof(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetPprof")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcStats provides a mock function with given fields: pids
func (_m *SysProbeUtil) GetProcStats(pids []int32) (*process.ProcStatsWithPermByPID, error) {
	ret := _m.Called(pids)

	if len(ret) == 0 {
		panic("no return value specified for GetProcStats")
	}

	var r0 *process.ProcStatsWithPermByPID
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) (*process.ProcStatsWithPermByPID, error)); ok {
		return rf(pids)
	}
	if rf, ok := ret.Get(0).(func([]int32) *process.ProcStatsWithPermByPID); ok {
		r0 = rf(pids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*process.ProcStatsWithPermByPID)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(pids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields:
func (_m *SysProbeUtil) GetStats() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTelemetry provides a mock function with given fields:
func (_m *SysProbeUtil) GetTelemetry() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetry")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTraceroute provides a mock function with given fields: clientID, host, port, protocol, maxTTL, timeout
func (_m *SysProbeUtil) GetTraceroute(clientID string, host string, port uint16, protocol payload.Protocol, maxTTL uint8, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(clientID, host, port, protocol, maxTTL, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetTraceroute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) ([]byte, error)); ok {
		return rf(clientID, host, port, protocol, maxTTL, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) []byte); ok {
		r0 = rf(clientID, host, port, protocol, maxTTL, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) error); ok {
		r1 = rf(clientID, host, port, protocol, maxTTL, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: clientID
func (_m *SysProbeUtil) Register(clientID string) error {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSysProbeUtil creates a new instance of SysProbeUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSysProbeUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *SysProbeUtil {
	mock := &SysProbeUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
