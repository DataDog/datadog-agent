// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	languagemodels "github.com/DataDog/datadog-agent/pkg/languagedetection/languagemodels"
	mock "github.com/stretchr/testify/mock"

	model "github.com/DataDog/datadog-agent/pkg/collector/corechecks/servicediscovery/model"

	payload "github.com/DataDog/datadog-agent/pkg/networkpath/payload"

	process "github.com/DataDog/agent-payload/v5/process"

	time "time"
)

// SysProbeUtil is an autogenerated mock type for the SysProbeUtil type
type SysProbeUtil struct {
	mock.Mock
}

type SysProbeUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *SysProbeUtil) EXPECT() *SysProbeUtil_Expecter {
	return &SysProbeUtil_Expecter{mock: &_m.Mock}
}

// DetectLanguage provides a mock function with given fields: pids
func (_m *SysProbeUtil) DetectLanguage(pids []int32) ([]languagemodels.Language, error) {
	ret := _m.Called(pids)

	if len(ret) == 0 {
		panic("no return value specified for DetectLanguage")
	}

	var r0 []languagemodels.Language
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) ([]languagemodels.Language, error)); ok {
		return rf(pids)
	}
	if rf, ok := ret.Get(0).(func([]int32) []languagemodels.Language); ok {
		r0 = rf(pids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]languagemodels.Language)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(pids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_DetectLanguage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectLanguage'
type SysProbeUtil_DetectLanguage_Call struct {
	*mock.Call
}

// DetectLanguage is a helper method to define mock.On call
//   - pids []int32
func (_e *SysProbeUtil_Expecter) DetectLanguage(pids interface{}) *SysProbeUtil_DetectLanguage_Call {
	return &SysProbeUtil_DetectLanguage_Call{Call: _e.mock.On("DetectLanguage", pids)}
}

func (_c *SysProbeUtil_DetectLanguage_Call) Run(run func(pids []int32)) *SysProbeUtil_DetectLanguage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32))
	})
	return _c
}

func (_c *SysProbeUtil_DetectLanguage_Call) Return(_a0 []languagemodels.Language, _a1 error) *SysProbeUtil_DetectLanguage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_DetectLanguage_Call) RunAndReturn(run func([]int32) ([]languagemodels.Language, error)) *SysProbeUtil_DetectLanguage_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTFLoaderInfo provides a mock function with given fields:
func (_m *SysProbeUtil) GetBTFLoaderInfo() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBTFLoaderInfo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetBTFLoaderInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTFLoaderInfo'
type SysProbeUtil_GetBTFLoaderInfo_Call struct {
	*mock.Call
}

// GetBTFLoaderInfo is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetBTFLoaderInfo() *SysProbeUtil_GetBTFLoaderInfo_Call {
	return &SysProbeUtil_GetBTFLoaderInfo_Call{Call: _e.mock.On("GetBTFLoaderInfo")}
}

func (_c *SysProbeUtil_GetBTFLoaderInfo_Call) Run(run func()) *SysProbeUtil_GetBTFLoaderInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetBTFLoaderInfo_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetBTFLoaderInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetBTFLoaderInfo_Call) RunAndReturn(run func() ([]byte, error)) *SysProbeUtil_GetBTFLoaderInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnTrackCached provides a mock function with given fields:
func (_m *SysProbeUtil) GetConnTrackCached() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnTrackCached")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetConnTrackCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnTrackCached'
type SysProbeUtil_GetConnTrackCached_Call struct {
	*mock.Call
}

// GetConnTrackCached is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetConnTrackCached() *SysProbeUtil_GetConnTrackCached_Call {
	return &SysProbeUtil_GetConnTrackCached_Call{Call: _e.mock.On("GetConnTrackCached")}
}

func (_c *SysProbeUtil_GetConnTrackCached_Call) Run(run func()) *SysProbeUtil_GetConnTrackCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetConnTrackCached_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetConnTrackCached_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetConnTrackCached_Call) RunAndReturn(run func() ([]byte, error)) *SysProbeUtil_GetConnTrackCached_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnTrackHost provides a mock function with given fields:
func (_m *SysProbeUtil) GetConnTrackHost() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnTrackHost")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetConnTrackHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnTrackHost'
type SysProbeUtil_GetConnTrackHost_Call struct {
	*mock.Call
}

// GetConnTrackHost is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetConnTrackHost() *SysProbeUtil_GetConnTrackHost_Call {
	return &SysProbeUtil_GetConnTrackHost_Call{Call: _e.mock.On("GetConnTrackHost")}
}

func (_c *SysProbeUtil_GetConnTrackHost_Call) Run(run func()) *SysProbeUtil_GetConnTrackHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetConnTrackHost_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetConnTrackHost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetConnTrackHost_Call) RunAndReturn(run func() ([]byte, error)) *SysProbeUtil_GetConnTrackHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnections provides a mock function with given fields: clientID
func (_m *SysProbeUtil) GetConnections(clientID string) (*process.Connections, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 *process.Connections
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*process.Connections, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) *process.Connections); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*process.Connections)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnections'
type SysProbeUtil_GetConnections_Call struct {
	*mock.Call
}

// GetConnections is a helper method to define mock.On call
//   - clientID string
func (_e *SysProbeUtil_Expecter) GetConnections(clientID interface{}) *SysProbeUtil_GetConnections_Call {
	return &SysProbeUtil_GetConnections_Call{Call: _e.mock.On("GetConnections", clientID)}
}

func (_c *SysProbeUtil_GetConnections_Call) Run(run func(clientID string)) *SysProbeUtil_GetConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SysProbeUtil_GetConnections_Call) Return(_a0 *process.Connections, _a1 error) *SysProbeUtil_GetConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetConnections_Call) RunAndReturn(run func(string) (*process.Connections, error)) *SysProbeUtil_GetConnections_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiscoveryServices provides a mock function with given fields:
func (_m *SysProbeUtil) GetDiscoveryServices() (*model.ServicesResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoveryServices")
	}

	var r0 *model.ServicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ServicesResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ServicesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetDiscoveryServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiscoveryServices'
type SysProbeUtil_GetDiscoveryServices_Call struct {
	*mock.Call
}

// GetDiscoveryServices is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetDiscoveryServices() *SysProbeUtil_GetDiscoveryServices_Call {
	return &SysProbeUtil_GetDiscoveryServices_Call{Call: _e.mock.On("GetDiscoveryServices")}
}

func (_c *SysProbeUtil_GetDiscoveryServices_Call) Run(run func()) *SysProbeUtil_GetDiscoveryServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetDiscoveryServices_Call) Return(_a0 *model.ServicesResponse, _a1 error) *SysProbeUtil_GetDiscoveryServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetDiscoveryServices_Call) RunAndReturn(run func() (*model.ServicesResponse, error)) *SysProbeUtil_GetDiscoveryServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkID provides a mock function with given fields:
func (_m *SysProbeUtil) GetNetworkID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetNetworkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkID'
type SysProbeUtil_GetNetworkID_Call struct {
	*mock.Call
}

// GetNetworkID is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetNetworkID() *SysProbeUtil_GetNetworkID_Call {
	return &SysProbeUtil_GetNetworkID_Call{Call: _e.mock.On("GetNetworkID")}
}

func (_c *SysProbeUtil_GetNetworkID_Call) Run(run func()) *SysProbeUtil_GetNetworkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetNetworkID_Call) Return(_a0 string, _a1 error) *SysProbeUtil_GetNetworkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetNetworkID_Call) RunAndReturn(run func() (string, error)) *SysProbeUtil_GetNetworkID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPing provides a mock function with given fields: clientID, host, count, interval, timeout
func (_m *SysProbeUtil) GetPing(clientID string, host string, count int, interval time.Duration, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(clientID, host, count, interval, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetPing")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, time.Duration, time.Duration) ([]byte, error)); ok {
		return rf(clientID, host, count, interval, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, time.Duration, time.Duration) []byte); ok {
		r0 = rf(clientID, host, count, interval, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, time.Duration, time.Duration) error); ok {
		r1 = rf(clientID, host, count, interval, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPing'
type SysProbeUtil_GetPing_Call struct {
	*mock.Call
}

// GetPing is a helper method to define mock.On call
//   - clientID string
//   - host string
//   - count int
//   - interval time.Duration
//   - timeout time.Duration
func (_e *SysProbeUtil_Expecter) GetPing(clientID interface{}, host interface{}, count interface{}, interval interface{}, timeout interface{}) *SysProbeUtil_GetPing_Call {
	return &SysProbeUtil_GetPing_Call{Call: _e.mock.On("GetPing", clientID, host, count, interval, timeout)}
}

func (_c *SysProbeUtil_GetPing_Call) Run(run func(clientID string, host string, count int, interval time.Duration, timeout time.Duration)) *SysProbeUtil_GetPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(time.Duration), args[4].(time.Duration))
	})
	return _c
}

func (_c *SysProbeUtil_GetPing_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetPing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetPing_Call) RunAndReturn(run func(string, string, int, time.Duration, time.Duration) ([]byte, error)) *SysProbeUtil_GetPing_Call {
	_c.Call.Return(run)
	return _c
}

// GetPprof provides a mock function with given fields: path
func (_m *SysProbeUtil) GetPprof(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetPprof")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetPprof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPprof'
type SysProbeUtil_GetPprof_Call struct {
	*mock.Call
}

// GetPprof is a helper method to define mock.On call
//   - path string
func (_e *SysProbeUtil_Expecter) GetPprof(path interface{}) *SysProbeUtil_GetPprof_Call {
	return &SysProbeUtil_GetPprof_Call{Call: _e.mock.On("GetPprof", path)}
}

func (_c *SysProbeUtil_GetPprof_Call) Run(run func(path string)) *SysProbeUtil_GetPprof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SysProbeUtil_GetPprof_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetPprof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetPprof_Call) RunAndReturn(run func(string) ([]byte, error)) *SysProbeUtil_GetPprof_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcStats provides a mock function with given fields: pids
func (_m *SysProbeUtil) GetProcStats(pids []int32) (*process.ProcStatsWithPermByPID, error) {
	ret := _m.Called(pids)

	if len(ret) == 0 {
		panic("no return value specified for GetProcStats")
	}

	var r0 *process.ProcStatsWithPermByPID
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) (*process.ProcStatsWithPermByPID, error)); ok {
		return rf(pids)
	}
	if rf, ok := ret.Get(0).(func([]int32) *process.ProcStatsWithPermByPID); ok {
		r0 = rf(pids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*process.ProcStatsWithPermByPID)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(pids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetProcStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcStats'
type SysProbeUtil_GetProcStats_Call struct {
	*mock.Call
}

// GetProcStats is a helper method to define mock.On call
//   - pids []int32
func (_e *SysProbeUtil_Expecter) GetProcStats(pids interface{}) *SysProbeUtil_GetProcStats_Call {
	return &SysProbeUtil_GetProcStats_Call{Call: _e.mock.On("GetProcStats", pids)}
}

func (_c *SysProbeUtil_GetProcStats_Call) Run(run func(pids []int32)) *SysProbeUtil_GetProcStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32))
	})
	return _c
}

func (_c *SysProbeUtil_GetProcStats_Call) Return(_a0 *process.ProcStatsWithPermByPID, _a1 error) *SysProbeUtil_GetProcStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetProcStats_Call) RunAndReturn(run func([]int32) (*process.ProcStatsWithPermByPID, error)) *SysProbeUtil_GetProcStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function with given fields:
func (_m *SysProbeUtil) GetStats() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type SysProbeUtil_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetStats() *SysProbeUtil_GetStats_Call {
	return &SysProbeUtil_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *SysProbeUtil_GetStats_Call) Run(run func()) *SysProbeUtil_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetStats_Call) Return(_a0 map[string]interface{}, _a1 error) *SysProbeUtil_GetStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetStats_Call) RunAndReturn(run func() (map[string]interface{}, error)) *SysProbeUtil_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetTelemetry provides a mock function with given fields:
func (_m *SysProbeUtil) GetTelemetry() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetry")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetTelemetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelemetry'
type SysProbeUtil_GetTelemetry_Call struct {
	*mock.Call
}

// GetTelemetry is a helper method to define mock.On call
func (_e *SysProbeUtil_Expecter) GetTelemetry() *SysProbeUtil_GetTelemetry_Call {
	return &SysProbeUtil_GetTelemetry_Call{Call: _e.mock.On("GetTelemetry")}
}

func (_c *SysProbeUtil_GetTelemetry_Call) Run(run func()) *SysProbeUtil_GetTelemetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SysProbeUtil_GetTelemetry_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetTelemetry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetTelemetry_Call) RunAndReturn(run func() ([]byte, error)) *SysProbeUtil_GetTelemetry_Call {
	_c.Call.Return(run)
	return _c
}

// GetTraceroute provides a mock function with given fields: clientID, host, port, protocol, maxTTL, timeout
func (_m *SysProbeUtil) GetTraceroute(clientID string, host string, port uint16, protocol payload.Protocol, maxTTL uint8, timeout time.Duration) ([]byte, error) {
	ret := _m.Called(clientID, host, port, protocol, maxTTL, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetTraceroute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) ([]byte, error)); ok {
		return rf(clientID, host, port, protocol, maxTTL, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) []byte); ok {
		r0 = rf(clientID, host, port, protocol, maxTTL, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint16, payload.Protocol, uint8, time.Duration) error); ok {
		r1 = rf(clientID, host, port, protocol, maxTTL, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysProbeUtil_GetTraceroute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTraceroute'
type SysProbeUtil_GetTraceroute_Call struct {
	*mock.Call
}

// GetTraceroute is a helper method to define mock.On call
//   - clientID string
//   - host string
//   - port uint16
//   - protocol payload.Protocol
//   - maxTTL uint8
//   - timeout time.Duration
func (_e *SysProbeUtil_Expecter) GetTraceroute(clientID interface{}, host interface{}, port interface{}, protocol interface{}, maxTTL interface{}, timeout interface{}) *SysProbeUtil_GetTraceroute_Call {
	return &SysProbeUtil_GetTraceroute_Call{Call: _e.mock.On("GetTraceroute", clientID, host, port, protocol, maxTTL, timeout)}
}

func (_c *SysProbeUtil_GetTraceroute_Call) Run(run func(clientID string, host string, port uint16, protocol payload.Protocol, maxTTL uint8, timeout time.Duration)) *SysProbeUtil_GetTraceroute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint16), args[3].(payload.Protocol), args[4].(uint8), args[5].(time.Duration))
	})
	return _c
}

func (_c *SysProbeUtil_GetTraceroute_Call) Return(_a0 []byte, _a1 error) *SysProbeUtil_GetTraceroute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SysProbeUtil_GetTraceroute_Call) RunAndReturn(run func(string, string, uint16, payload.Protocol, uint8, time.Duration) ([]byte, error)) *SysProbeUtil_GetTraceroute_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: clientID
func (_m *SysProbeUtil) Register(clientID string) error {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysProbeUtil_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type SysProbeUtil_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - clientID string
func (_e *SysProbeUtil_Expecter) Register(clientID interface{}) *SysProbeUtil_Register_Call {
	return &SysProbeUtil_Register_Call{Call: _e.mock.On("Register", clientID)}
}

func (_c *SysProbeUtil_Register_Call) Run(run func(clientID string)) *SysProbeUtil_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SysProbeUtil_Register_Call) Return(_a0 error) *SysProbeUtil_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SysProbeUtil_Register_Call) RunAndReturn(run func(string) error) *SysProbeUtil_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewSysProbeUtil creates a new instance of SysProbeUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSysProbeUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *SysProbeUtil {
	mock := &SysProbeUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
