syntax = "proto3";

option go_package = "github.com/DataDog/datadog-agent/pkg/process/model";

package datadog.process_agent;

import "github.com/DataDog/agent-payload/agent_payload.proto";

//
// Message Types
//

message ResCollector {
	// Header must exist at position 1 for compatibility
	// with older version of the Agent. We should be able
	// to drop this at some point.
	message Header {
		int32 type = 4;
	}
	Header header = 1;
	string message = 2;
	CollectorStatus status = 3;
}

message CollectorProc {
	string  hostName = 2;
	repeated Process processes = 3;
	Host host = 4;
	SystemInfo info = 5;
	int32 groupId = 6;
	int32 groupSize = 7;

	// Optional metadata fields
	datadog.agentpayload.KubeMetadataPayload kubernetes = 8; // DEPRECATED - left in place to support previous versions
	datadog.agentpayload.ECSMetadataPayload ecs = 9; // DEPRECATED - left in place to support previous versions

	repeated Container containers = 10;
}

message CollectorConnections {
	reserved 1, 4;

	string hostName = 2;
	int32 hostId = 9; // Post-resolution field.
	repeated Connection connections = 3;

	// Message batching metadata
	int32 groupId = 5;
	int32 groupSize = 6;

	// post-resolution field; all the hosts referenced in `connections` keyed by
	// hostId. This should also include an entry for the host on which these connections
	// were gathered.
	map<int32, Host> resolvedHosts = 7;

	// post-resolution field: all of the containers referenced in `connections` keyed by
	// containerId
	map<string, ContainerMetadata> resolvedContainers = 8;

	// mapping of processes running in each container
	map<int32, string> containerForPid = 10;
}

message CollectorRealTime {
	string hostName = 2;
	repeated ProcessStat stats = 3;
	// Post-resolved fields
	int32 hostId = 4;
	int32 orgId = 5;
	int32 groupId = 6;
	int32 groupSize = 7;
	int32 numCpus = 8;
	int64 totalMemory = 9;

	repeated ContainerStat containerStats = 10;
}

message CollectorContainer {
	string hostName = 1;
	SystemInfo info = 2;
	repeated Container containers = 3;
	int32 groupId = 4;
	int32 groupSize = 5;

	// Optional metadata fields
	datadog.agentpayload.KubeMetadataPayload kubernetes = 6; // DEPRECATED - left in place to support previous versions
	datadog.agentpayload.ECSMetadataPayload ecs = 7; // DEPRECATED - left in place to support previous versions

	// Post-resolved fields
	Host host = 8;
}

message CollectorContainerRealTime {
	string hostName = 1;
	repeated ContainerStat stats = 2;

	// Used for normalization at host-level.
	int32 numCpus = 3;
	int64 totalMemory = 4;

	// Post-resolved fields
	int32 hostId = 5;

	int32 groupId = 6;
	int32 groupSize = 7;
}

message CollectorReqStatus {
	string hostName = 2;
}

//
// Models
//

message CollectorStatus {
	int32 activeClients = 1;
	int32 interval = 2;
}

message Process {
	reserved 6;

	uint32 key = 1;
	int32 pid = 2;
	Host host = 3;
	Command command = 4;
	ProcessUser user = 5;
	MemoryStat memory = 7;
	CPUStat cpu = 8;
	int64 createTime = 9;
	Container container = 10; // DEPRECATED - left in place to support previous versions
	int32 openFdCount = 11;
	ProcessState state = 12;
	IOStat ioStat = 13;
	string containerId = 14;
	uint32 containerKey = 15;
	uint64 voluntaryCtxSwitches = 16;
	uint64 involuntaryCtxSwitches = 17;
	bytes byteKey = 18;
	bytes containerByteKey = 19;
}

message Command {
	repeated string args = 1;
	string cwd = 3;
	string root = 4;
	bool onDisk = 5;
	int32 ppid = 6;
	int32 pgroup = 7;
	string exe = 8;
}

message ProcessUser {
	string name = 1;
	int32 uid = 2;
	int32 gid = 3;
	int32 euid = 4;
	int32 egid = 5;
	int32 suid = 6;
	int32 sgid = 7;
}

// status section in https://docs.docker.com/engine/api/v1.29/#tag/Container
enum ContainerState {
	unknown = 0;
	created = 1;
	restarting = 2;
	running = 3;
	paused = 4;
	exited = 5;
	dead = 6;
}

// https://blog.couchbase.com/docker-health-check-keeping-containers-healthy/
// health can be: starting, healthy, unhealthy
enum ContainerHealth {
	unknownHealth = 0;
	starting = 1;
	healthy = 2;
	unhealthy = 3;
}

// ContainerAddr records the IPs, Ports and Protocols for each container
message ContainerAddr {
	string ip = 1;
	int32 port = 2;
	ConnectionType protocol = 3;
}

message Container {
	reserved 7;

	string type = 1;
	string id = 2;
	string name = 3; // DEPRECATED - left in place to support previous versions
	string image = 4; // DEPRECATED - left in place to support previous versions
	float  cpuLimit = 5;
	uint64 memoryLimit = 6;
	ContainerState state = 8;
	ContainerHealth health = 9;
	int64 created = 10;
	float rbps = 11;
	float wbps = 12;
	uint32 key = 13; // Unique key for a container resolved on backend.
	float netRcvdPs = 14;
	float netSentPs = 15;
	float netRcvdBps = 16;
	float netSentBps = 17;
	float userPct = 18;
	float systemPct = 19;
	float totalPct = 20;
	uint64 memRss = 21;
	uint64 memCache = 22;
	Host host = 23; // Used post-resolution
	int64 started = 24;
	bytes byteKey = 25;
	repeated string tags = 26;
	repeated ContainerAddr addresses = 27;
	uint64 threadCount = 28;
	uint64 threadLimit = 29;
}

// Process state codes in http://wiki.preshweb.co.uk/doku.php?id=linux:psflags
enum ProcessState {
	U = 0; // unknown state
	D = 1;
	R = 2;
	S = 3;
	T = 4;
	W = 5;
	X = 6;
	Z = 7;
}

// ProcessStat is used for real-time process messages. It should only contain
// data that can change for a running process (and relevant information to
// generate a key). We will send a lot of these in the real-time messages so
// it's critical to keep this small.
message ProcessStat {
	int32 pid = 1;
	// In milliseconds
	int64 createTime = 2;
	MemoryStat memory = 3;
	CPUStat cpu = 4;
	int32 nice = 5;
	int32 threads = 7;
	int32 openFdCount = 8;
	uint32 key = 9;
	// we need container id because we need to do the scoring by container
	string containerId = 10;
	ContainerState containerState = 11; // DEPRECATED
	ProcessState processState = 12;
	IOStat ioStat = 19;

	// DEPRECATED: All container-level stats (except ID) have moved into ContainerStat.
	// These will be removed in the future.
	// These stats are from the container level but are stored per-process
	// because we don't send a container primitive yet.
	ContainerHealth containerHealth = 15;
	float containerRbps = 16;
	float containerWbps = 17;
	uint32 containerKey = 18;
	float containerNetRcvdPs = 20;
	float containerNetSentPs = 21;
	float containerNetRcvdBps = 22;
	float containerNetSentBps = 23;

	uint64 voluntaryCtxSwitches = 24;
	uint64 involuntaryCtxSwitches = 25;
	bytes byteKey = 26;
	bytes containerByteKey = 27;
}

// ContainerStat is used for real-time container messages. It should only contain
// data that can change for a running container (and relevant information to
// generate a key). We will send a lot of these in the real-time messages so
// it's critical to keep this small (basically no strings except ID)
message ContainerStat {
	string id = 1;
	float userPct = 2;
	float systemPct = 3;
	float totalPct = 4;
	float cpuLimit = 5;
	uint64 memRss = 6;
	uint64 memCache = 7;
	uint64 memLimit = 8;
	float rbps = 9;
	float wbps = 10;
	float netRcvdPs = 11;
	float netSentPs = 12;
	float netRcvdBps = 13;
	float netSentBps = 14;
	ContainerState state = 15;
	ContainerHealth health = 16;
	// Post-resolved fields
	uint32 key = 17;
	int64 started = 18;
	bytes byteKey = 19;
	uint64 threadCount = 20;
	uint64 threadLimit = 21;
}

// ContainerMetadata only holds enough information to identify a container in connection data
message ContainerMetadata {
	string id = 1;
	uint32 key = 2;
	bytes byteKey = 3;
	repeated string tags = 4;
}

message SystemInfo {
	reserved 4;

	string uuid = 1;
	OSInfo os = 2;
	repeated CPUInfo cpus = 3;
	int64 totalMemory = 5;
}

message OSInfo {
	string name = 1;
	string platform = 2;
	string family = 3;
	string version = 4;
	string kernelVersion = 5;
}

message IOStat {
	float readRate = 1;
	float writeRate = 2;
	float readBytesRate = 3;
	float writeBytesRate = 4;
}

enum ConnectionType {
	tcp = 0;
	udp = 1;
}

enum ConnectionFamily {
	v4 = 0;
	v6 = 1;
}

enum ConnectionDirection {
	unspecified = 0;
	incoming = 1;
	outgoing = 2;
	local = 3;
}

message Connection {
	reserved 2, 3, 4, 7, 8, 9;

	int32 pid = 1;
	Addr laddr = 5; // Local address
	Addr raddr = 6; // Remote address
	ConnectionFamily family = 10;
	ConnectionType type = 11;
	int64 pidCreateTime = 12;

	// Monotonic counters
	uint64 totalBytesSent = 13;
	uint64 totalBytesReceived = 14;
	uint32 totalRetransmits = 15;

	// Relative counters since last check
	uint64 lastBytesSent = 16;
	uint64 lastBytesReceived = 17;
	uint32 lastRetransmits = 18;
	ConnectionDirection direction = 19;

	// Network namespace
	uint32 netNS = 20;

	// the conntrack entry associated with the connection. May be null on systems which don't support querying conntrack.
	IPTranslation ipTranslation = 21;
}

message Addr {
	reserved 1, 4;

	string ip = 2;
	int32  port = 3;
	string containerId = 5; // post-resolution field
	int32  hostId = 6;      // post-resolution field
}

message IPTranslation {
	string replSrcIP  = 1;
	string replDstIP  = 2;
	int32 replSrcPort = 3;
	int32 replDstPort = 4;
}

message MemoryStat {
	uint64 rss = 1;
	uint64 vms = 2;
	uint64 swap = 3;
	uint64 shared = 4;
	uint64 text = 5;
	uint64 lib = 6;
	uint64 data = 7;
	uint64 dirty = 8;
}

message CPUStat {
	string lastCpu = 1;
	float totalPct = 2;
	float userPct = 3;
	float systemPct = 4;
	int32 numThreads = 5;
	repeated SingleCPUStat cpus = 6;
	int32 nice = 7;
	int64 userTime = 8;
	int64 systemTime = 9;
}

message SingleCPUStat {
	string name = 1;
	float  totalPct = 2;
}

message CPUInfo {
	int32 number = 1;
	string vendor = 2;
	string family = 3;
	string model = 4;
	string physicalId = 5;
	string coreId = 6;
	int32 cores = 7;
	int64 mhz = 8;
	int32 cacheSize = 9;
}

// Host and HostTags are used in backend post-resolution

message Host {
	int32 id = 1;
	int32 orgId = 2;
	string name = 3;
	repeated HostTags tags = 4;
	repeated string allTags = 6;
	int32 numCpus = 7;
	int64 totalMemory = 8;
}

message HostTags {
	uint32 sourceType = 1;
	repeated string tags = 2;
}
