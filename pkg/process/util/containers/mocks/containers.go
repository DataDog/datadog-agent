// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DataDog/datadog-agent/pkg/process/util/containers (interfaces: ContainerProvider)

package mocks

import (
	reflect "reflect"
	time "time"

	process "github.com/DataDog/agent-payload/v5/process"
	containers "github.com/DataDog/datadog-agent/pkg/process/util/containers"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerProvider is a mock of ContainerProvider interface.
type MockContainerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockContainerProviderMockRecorder
}

// MockContainerProviderMockRecorder is the mock recorder for MockContainerProvider.
type MockContainerProviderMockRecorder struct {
	mock *MockContainerProvider
}

// NewMockContainerProvider creates a new mock instance.
func NewMockContainerProvider(ctrl *gomock.Controller) *MockContainerProvider {
	mock := &MockContainerProvider{ctrl: ctrl}
	mock.recorder = &MockContainerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerProvider) EXPECT() *MockContainerProviderMockRecorder {
	return m.recorder
}

// GetContainers mocks base method.
func (m *MockContainerProvider) GetContainers(arg0 time.Duration, arg1 map[string]*containers.ContainerRateMetrics) ([]*process.Container, map[string]*containers.ContainerRateMetrics, map[int]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers", arg0, arg1)
	ret0, _ := ret[0].([]*process.Container)
	ret1, _ := ret[1].(map[string]*containers.ContainerRateMetrics)
	ret2, _ := ret[2].(map[int]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockContainerProviderMockRecorder) GetContainers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockContainerProvider)(nil).GetContainers), arg0, arg1)
}
