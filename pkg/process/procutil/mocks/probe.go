// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	time "time"

	procutil "github.com/DataDog/datadog-agent/pkg/process/procutil"
	mock "github.com/stretchr/testify/mock"
)

// Probe is an autogenerated mock type for the Probe type
type Probe struct {
	mock.Mock
}

type Probe_Expecter struct {
	mock *mock.Mock
}

func (_m *Probe) EXPECT() *Probe_Expecter {
	return &Probe_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Probe) Close() {
	_m.Called()
}

// Probe_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Probe_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Probe_Expecter) Close() *Probe_Close_Call {
	return &Probe_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Probe_Close_Call) Run(run func()) *Probe_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Probe_Close_Call) Return() *Probe_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Probe_Close_Call) RunAndReturn(run func()) *Probe_Close_Call {
	_c.Run(run)
	return _c
}

// ProcessesByPID provides a mock function with given fields: now, collectStats
func (_m *Probe) ProcessesByPID(now time.Time, collectStats bool) (map[int32]*procutil.Process, error) {
	ret := _m.Called(now, collectStats)

	if len(ret) == 0 {
		panic("no return value specified for ProcessesByPID")
	}

	var r0 map[int32]*procutil.Process
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, bool) (map[int32]*procutil.Process, error)); ok {
		return rf(now, collectStats)
	}
	if rf, ok := ret.Get(0).(func(time.Time, bool) map[int32]*procutil.Process); ok {
		r0 = rf(now, collectStats)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]*procutil.Process)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, bool) error); ok {
		r1 = rf(now, collectStats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Probe_ProcessesByPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessesByPID'
type Probe_ProcessesByPID_Call struct {
	*mock.Call
}

// ProcessesByPID is a helper method to define mock.On call
//   - now time.Time
//   - collectStats bool
func (_e *Probe_Expecter) ProcessesByPID(now interface{}, collectStats interface{}) *Probe_ProcessesByPID_Call {
	return &Probe_ProcessesByPID_Call{Call: _e.mock.On("ProcessesByPID", now, collectStats)}
}

func (_c *Probe_ProcessesByPID_Call) Run(run func(now time.Time, collectStats bool)) *Probe_ProcessesByPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(bool))
	})
	return _c
}

func (_c *Probe_ProcessesByPID_Call) Return(_a0 map[int32]*procutil.Process, _a1 error) *Probe_ProcessesByPID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Probe_ProcessesByPID_Call) RunAndReturn(run func(time.Time, bool) (map[int32]*procutil.Process, error)) *Probe_ProcessesByPID_Call {
	_c.Call.Return(run)
	return _c
}

// StatsForPIDs provides a mock function with given fields: pids, now
func (_m *Probe) StatsForPIDs(pids []int32, now time.Time) (map[int32]*procutil.Stats, error) {
	ret := _m.Called(pids, now)

	if len(ret) == 0 {
		panic("no return value specified for StatsForPIDs")
	}

	var r0 map[int32]*procutil.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32, time.Time) (map[int32]*procutil.Stats, error)); ok {
		return rf(pids, now)
	}
	if rf, ok := ret.Get(0).(func([]int32, time.Time) map[int32]*procutil.Stats); ok {
		r0 = rf(pids, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]*procutil.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32, time.Time) error); ok {
		r1 = rf(pids, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Probe_StatsForPIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsForPIDs'
type Probe_StatsForPIDs_Call struct {
	*mock.Call
}

// StatsForPIDs is a helper method to define mock.On call
//   - pids []int32
//   - now time.Time
func (_e *Probe_Expecter) StatsForPIDs(pids interface{}, now interface{}) *Probe_StatsForPIDs_Call {
	return &Probe_StatsForPIDs_Call{Call: _e.mock.On("StatsForPIDs", pids, now)}
}

func (_c *Probe_StatsForPIDs_Call) Run(run func(pids []int32, now time.Time)) *Probe_StatsForPIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32), args[1].(time.Time))
	})
	return _c
}

func (_c *Probe_StatsForPIDs_Call) Return(_a0 map[int32]*procutil.Stats, _a1 error) *Probe_StatsForPIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Probe_StatsForPIDs_Call) RunAndReturn(run func([]int32, time.Time) (map[int32]*procutil.Stats, error)) *Probe_StatsForPIDs_Call {
	_c.Call.Return(run)
	return _c
}

// StatsWithPermByPID provides a mock function with given fields: pids
func (_m *Probe) StatsWithPermByPID(pids []int32) (map[int32]*procutil.StatsWithPerm, error) {
	ret := _m.Called(pids)

	if len(ret) == 0 {
		panic("no return value specified for StatsWithPermByPID")
	}

	var r0 map[int32]*procutil.StatsWithPerm
	var r1 error
	if rf, ok := ret.Get(0).(func([]int32) (map[int32]*procutil.StatsWithPerm, error)); ok {
		return rf(pids)
	}
	if rf, ok := ret.Get(0).(func([]int32) map[int32]*procutil.StatsWithPerm); ok {
		r0 = rf(pids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]*procutil.StatsWithPerm)
		}
	}

	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(pids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Probe_StatsWithPermByPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatsWithPermByPID'
type Probe_StatsWithPermByPID_Call struct {
	*mock.Call
}

// StatsWithPermByPID is a helper method to define mock.On call
//   - pids []int32
func (_e *Probe_Expecter) StatsWithPermByPID(pids interface{}) *Probe_StatsWithPermByPID_Call {
	return &Probe_StatsWithPermByPID_Call{Call: _e.mock.On("StatsWithPermByPID", pids)}
}

func (_c *Probe_StatsWithPermByPID_Call) Run(run func(pids []int32)) *Probe_StatsWithPermByPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int32))
	})
	return _c
}

func (_c *Probe_StatsWithPermByPID_Call) Return(_a0 map[int32]*procutil.StatsWithPerm, _a1 error) *Probe_StatsWithPermByPID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Probe_StatsWithPermByPID_Call) RunAndReturn(run func([]int32) (map[int32]*procutil.StatsWithPerm, error)) *Probe_StatsWithPermByPID_Call {
	_c.Call.Return(run)
	return _c
}

// NewProbe creates a new instance of Probe. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProbe(t interface {
	mock.TestingT
	Cleanup(func())
}) *Probe {
	mock := &Probe{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
