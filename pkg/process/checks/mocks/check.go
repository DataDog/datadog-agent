// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	config "github.com/DataDog/datadog-agent/pkg/process/config"
	mock "github.com/stretchr/testify/mock"

	process "github.com/DataDog/agent-payload/v5/process"
)

// Check is an autogenerated mock type for the Check type
type Check struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields:
func (_m *Check) Cleanup() {
	_m.Called()
}

// Init provides a mock function with given fields: cfg, info
func (_m *Check) Init(cfg *config.AgentConfig, info *process.SystemInfo) {
	_m.Called(cfg, info)
}

// Name provides a mock function with given fields:
func (_m *Check) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RealTime provides a mock function with given fields:
func (_m *Check) RealTime() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Run provides a mock function with given fields: cfg, groupID
func (_m *Check) Run(cfg *config.AgentConfig, groupID int32) ([]process.MessageBody, error) {
	ret := _m.Called(cfg, groupID)

	var r0 []process.MessageBody
	if rf, ok := ret.Get(0).(func(*config.AgentConfig, int32) []process.MessageBody); ok {
		r0 = rf(cfg, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]process.MessageBody)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.AgentConfig, int32) error); ok {
		r1 = rf(cfg, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldSaveLastRun provides a mock function with given fields:
func (_m *Check) ShouldSaveLastRun() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewCheck interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheck creates a new instance of Check. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheck(t mockConstructorTestingTNewCheck) *Check {
	mock := &Check{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
