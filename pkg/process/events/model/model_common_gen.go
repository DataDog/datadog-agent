package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *EventType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EventType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EventType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EventType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventType) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProcessEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "EventType":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "EventType")
					return
				}
				z.EventType = EventType(zb0002)
			}
		case "CollectionTime":
			z.CollectionTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CollectionTime")
				return
			}
		case "Pid":
			z.Pid, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Pid")
				return
			}
		case "ContainerID":
			z.ContainerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ContainerID")
				return
			}
		case "Ppid":
			z.Ppid, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Ppid")
				return
			}
		case "UID":
			z.UID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "GID":
			z.GID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "Username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Group":
			z.Group, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		case "Exe":
			z.Exe, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Exe")
				return
			}
		case "Cmdline":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cmdline")
				return
			}
			if cap(z.Cmdline) >= int(zb0003) {
				z.Cmdline = (z.Cmdline)[:zb0003]
			} else {
				z.Cmdline = make([]string, zb0003)
			}
			for za0001 := range z.Cmdline {
				z.Cmdline[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cmdline", za0001)
					return
				}
			}
		case "ForkTime":
			z.ForkTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ForkTime")
				return
			}
		case "ExecTime":
			z.ExecTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExecTime")
				return
			}
		case "ExitTime":
			z.ExitTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExitTime")
				return
			}
		case "ExitCode":
			z.ExitCode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ExitCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProcessEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 15
	// write "EventType"
	err = en.Append(0x8f, 0xa9, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.EventType))
	if err != nil {
		err = msgp.WrapError(err, "EventType")
		return
	}
	// write "CollectionTime"
	err = en.Append(0xae, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CollectionTime)
	if err != nil {
		err = msgp.WrapError(err, "CollectionTime")
		return
	}
	// write "Pid"
	err = en.Append(0xa3, 0x50, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Pid)
	if err != nil {
		err = msgp.WrapError(err, "Pid")
		return
	}
	// write "ContainerID"
	err = en.Append(0xab, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ContainerID)
	if err != nil {
		err = msgp.WrapError(err, "ContainerID")
		return
	}
	// write "Ppid"
	err = en.Append(0xa4, 0x50, 0x70, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Ppid)
	if err != nil {
		err = msgp.WrapError(err, "Ppid")
		return
	}
	// write "UID"
	err = en.Append(0xa3, 0x55, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.UID)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.GID)
	if err != nil {
		err = msgp.WrapError(err, "GID")
		return
	}
	// write "Username"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "Group"
	err = en.Append(0xa5, 0x47, 0x72, 0x6f, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Group)
	if err != nil {
		err = msgp.WrapError(err, "Group")
		return
	}
	// write "Exe"
	err = en.Append(0xa3, 0x45, 0x78, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Exe)
	if err != nil {
		err = msgp.WrapError(err, "Exe")
		return
	}
	// write "Cmdline"
	err = en.Append(0xa7, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Cmdline)))
	if err != nil {
		err = msgp.WrapError(err, "Cmdline")
		return
	}
	for za0001 := range z.Cmdline {
		err = en.WriteString(z.Cmdline[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Cmdline", za0001)
			return
		}
	}
	// write "ForkTime"
	err = en.Append(0xa8, 0x46, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ForkTime)
	if err != nil {
		err = msgp.WrapError(err, "ForkTime")
		return
	}
	// write "ExecTime"
	err = en.Append(0xa8, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExecTime)
	if err != nil {
		err = msgp.WrapError(err, "ExecTime")
		return
	}
	// write "ExitTime"
	err = en.Append(0xa8, 0x45, 0x78, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExitTime)
	if err != nil {
		err = msgp.WrapError(err, "ExitTime")
		return
	}
	// write "ExitCode"
	err = en.Append(0xa8, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ExitCode)
	if err != nil {
		err = msgp.WrapError(err, "ExitCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProcessEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 15
	// string "EventType"
	o = append(o, 0x8f, 0xa9, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.EventType))
	// string "CollectionTime"
	o = append(o, 0xae, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.CollectionTime)
	// string "Pid"
	o = append(o, 0xa3, 0x50, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.Pid)
	// string "ContainerID"
	o = append(o, 0xab, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.ContainerID)
	// string "Ppid"
	o = append(o, 0xa4, 0x50, 0x70, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.Ppid)
	// string "UID"
	o = append(o, 0xa3, 0x55, 0x49, 0x44)
	o = msgp.AppendUint32(o, z.UID)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendUint32(o, z.GID)
	// string "Username"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "Group"
	o = append(o, 0xa5, 0x47, 0x72, 0x6f, 0x75, 0x70)
	o = msgp.AppendString(o, z.Group)
	// string "Exe"
	o = append(o, 0xa3, 0x45, 0x78, 0x65)
	o = msgp.AppendString(o, z.Exe)
	// string "Cmdline"
	o = append(o, 0xa7, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Cmdline)))
	for za0001 := range z.Cmdline {
		o = msgp.AppendString(o, z.Cmdline[za0001])
	}
	// string "ForkTime"
	o = append(o, 0xa8, 0x46, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.ForkTime)
	// string "ExecTime"
	o = append(o, 0xa8, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.ExecTime)
	// string "ExitTime"
	o = append(o, 0xa8, 0x45, 0x78, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.ExitTime)
	// string "ExitCode"
	o = append(o, 0xa8, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.ExitCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProcessEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "EventType":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EventType")
					return
				}
				z.EventType = EventType(zb0002)
			}
		case "CollectionTime":
			z.CollectionTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CollectionTime")
				return
			}
		case "Pid":
			z.Pid, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pid")
				return
			}
		case "ContainerID":
			z.ContainerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContainerID")
				return
			}
		case "Ppid":
			z.Ppid, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ppid")
				return
			}
		case "UID":
			z.UID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "GID":
			z.GID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "Username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Group":
			z.Group, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
		case "Exe":
			z.Exe, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Exe")
				return
			}
		case "Cmdline":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cmdline")
				return
			}
			if cap(z.Cmdline) >= int(zb0003) {
				z.Cmdline = (z.Cmdline)[:zb0003]
			} else {
				z.Cmdline = make([]string, zb0003)
			}
			for za0001 := range z.Cmdline {
				z.Cmdline[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cmdline", za0001)
					return
				}
			}
		case "ForkTime":
			z.ForkTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ForkTime")
				return
			}
		case "ExecTime":
			z.ExecTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExecTime")
				return
			}
		case "ExitTime":
			z.ExitTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExitTime")
				return
			}
		case "ExitCode":
			z.ExitCode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExitCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProcessEvent) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int32Size + 15 + msgp.TimeSize + 4 + msgp.Uint32Size + 12 + msgp.StringPrefixSize + len(z.ContainerID) + 5 + msgp.Uint32Size + 4 + msgp.Uint32Size + 4 + msgp.Uint32Size + 9 + msgp.StringPrefixSize + len(z.Username) + 6 + msgp.StringPrefixSize + len(z.Group) + 4 + msgp.StringPrefixSize + len(z.Exe) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Cmdline {
		s += msgp.StringPrefixSize + len(z.Cmdline[za0001])
	}
	s += 9 + msgp.TimeSize + 9 + msgp.TimeSize + 9 + msgp.TimeSize + 9 + msgp.Uint32Size
	return
}
