// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Package subscriber implements the functionality needed to subscribe to events
// generated by the Tagger component.
package subscriber

import (
	"sync"

	"github.com/DataDog/datadog-agent/pkg/tagger/collectors"
	"github.com/DataDog/datadog-agent/pkg/tagger/types"
)

const bufferSize = 100

// Subscriber allows processes to subscribe to entity events generated from a
// tagger.
type Subscriber struct {
	sync.RWMutex
	subscribers map[chan []types.EntityEvent]collectors.TagCardinality
}

// NewSubscriber returns a new subscriber.
func NewSubscriber() *Subscriber {
	return &Subscriber{
		subscribers: make(map[chan []types.EntityEvent]collectors.TagCardinality),
	}
}

// Subscribe returns a channel that receives a slice of events whenever an
// entity is added, modified or deleted. It can send an initial burst of events
// only to the new subscriber, without notifying all of the others.
func (s *Subscriber) Subscribe(cardinality collectors.TagCardinality, events []types.EntityEvent) chan []types.EntityEvent {
	panic("not called")
}

// Unsubscribe ends a subscription to entity events and closes its channel.
func (s *Subscriber) Unsubscribe(ch chan []types.EntityEvent) {
	panic("not called")
}

// unsubscribe ends a subscription to entity events and closes its channel. It
// is not thread-safe, and callers should take care of synchronization.
func (s *Subscriber) unsubscribe(ch chan []types.EntityEvent) {
	panic("not called")
}

// Notify sends a slice of EntityEvents to all registered subscribers at their
// chosen cardinality.
func (s *Subscriber) Notify(events []types.EntityEvent) {
	panic("not called")
}

// notify sends a slice of EntityEvents to a channel at a chosen cardinality.
func notify(ch chan []types.EntityEvent, events []types.EntityEvent, cardinality collectors.TagCardinality) {
	panic("not called")
}
