// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

package cdn

import (
	"bytes"
	"crypto/sha256"
	"encoding/json"
	"fmt"

	"gopkg.in/yaml.v2"
)

const (
	layerKeys           = "__fleet_layers"
	doNotEditDisclaimer = `# This configuration was generated by Datadog's Fleet Automation. DO NOT EDIT.`
)

// layer is a config layer that can be merged with other layers into a config.
type layer struct {
	ID                  string                 `json:"name"`
	AgentConfig         map[string]interface{} `json:"config"`
	SecurityAgentConfig map[string]interface{} `json:"security_agent"`
	SystemProbeConfig   map[string]interface{} `json:"system_probe"`
}

// newConfig creates a new config from a list of layers.
func newConfig(layers ...*layer) (_ *Config, err error) {
	layerIDs := []string{}
	mergedLayer := &layer{
		AgentConfig:         map[string]interface{}{},
		SecurityAgentConfig: map[string]interface{}{},
		SystemProbeConfig:   map[string]interface{}{},
	}

	// Merge all layers in order
	for _, l := range layers {
		layerIDs = append(layerIDs, l.ID)
		if l.AgentConfig != nil {
			agentConfig, err := merge(mergedLayer.AgentConfig, l.AgentConfig)
			if err != nil {
				return nil, err
			}
			mergedLayer.AgentConfig = agentConfig.(map[string]interface{})
		}

		if l.SecurityAgentConfig != nil {
			securityAgentConfig, err := merge(mergedLayer.SecurityAgentConfig, l.SecurityAgentConfig)
			if err != nil {
				return nil, err
			}
			mergedLayer.SecurityAgentConfig = securityAgentConfig.(map[string]interface{})
		}

		if l.SystemProbeConfig != nil {
			systemProbeAgentConfig, err := merge(mergedLayer.SystemProbeConfig, l.SystemProbeConfig)
			if err != nil {
				return nil, err
			}
			mergedLayer.SystemProbeConfig = systemProbeAgentConfig.(map[string]interface{})
		}
	}
	mergedLayer.AgentConfig[layerKeys] = layerIDs // Add a field with the applied layers that will be reported through inventories

	serializedAgentConfig, err := marshalConfig(mergedLayer.AgentConfig)
	if err != nil {
		return nil, err
	}
	serializedSecurityAgentConfig, err := marshalConfig(mergedLayer.SecurityAgentConfig)
	if err != nil {
		return nil, err
	}
	serializedSystemProbeConfig, err := marshalConfig(mergedLayer.SystemProbeConfig)
	if err != nil {
		return nil, err
	}

	hash := sha256.New()
	serializedConfig, err := json.Marshal(mergedLayer)
	if err != nil {
		return nil, err
	}
	hash.Write(serializedConfig)

	return &Config{
		Version:       fmt.Sprintf("%x", hash.Sum(nil)),
		Datadog:       serializedAgentConfig,
		SecurityAgent: serializedSecurityAgentConfig,
		SystemProbe:   serializedSystemProbeConfig,
	}, nil
}

// marshalConfig marshals the config as YAML.
func marshalConfig(c map[string]interface{}) ([]byte, error) {
	if len(c) == 0 {
		return nil, nil
	}
	var b bytes.Buffer
	b.WriteString(doNotEditDisclaimer)
	b.WriteString("\n")
	rawConfig, err := yaml.Marshal(c)
	if err != nil {
		return nil, err
	}
	b.Write(rawConfig)
	return b.Bytes(), nil
}
