// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Package config defines the configurations to install.
package config

import (
	"fmt"
	"path/filepath"
	"time"
)

const (
	datadogConfFile        = "datadog.yaml"
	injectTracerConfigFile = "inject/tracer.yaml"
)

var (
	disclaimerGenerated = `# This file was generated by the Datadog Installer.
# Other configuration options are available, see https://docs.datadoghq.com/agent/guide/agent-configuration-files/ for more information.`
)

// WriteConfigs writes the configuration files to the given directory.
func WriteConfigs(config Config, configDir string) error {
	err := writeConfig(filepath.Join(configDir, datadogConfFile), config.DatadogYAML, 0640, true)
	if err != nil {
		return fmt.Errorf("could not write datadog.yaml: %w", err)
	}
	if config.SecurityAgentYAML != nil {
		err = writeConfig(filepath.Join(configDir, "security-agent.yaml"), config.SecurityAgentYAML, 0640, true)
		if err != nil {
			return fmt.Errorf("could not write security-agent.yaml: %w", err)
		}
	}
	if config.SystemProbeYAML != nil {
		err = writeConfig(filepath.Join(configDir, "system-probe.yaml"), config.SystemProbeYAML, 0640, true)
		if err != nil {
			return fmt.Errorf("could not write system-probe.yaml: %w", err)
		}
	}
	if config.ApplicationMonitoringYAML != nil {
		err = writeConfig(filepath.Join(configDir, "application_monitoring.yaml"), config.ApplicationMonitoringYAML, 0644, true)
		if err != nil {
			return fmt.Errorf("could not write application_monitoring.yaml: %w", err)
		}
	}
	for name, config := range config.IntegrationConfigs {
		err = writeConfig(filepath.Join(configDir, "conf.d", name), config, 0644, false)
		if err != nil {
			return fmt.Errorf("could not write %s.yaml: %w", name, err)
		}
	}
	return nil
}

// Config represents the configuration to write in /etc/datadog-agent
type Config struct {
	// DatadogYAML is the content of the datadog.yaml file
	DatadogYAML DatadogConfig
	// SecurityAgentYAML is the content of the security-agent.yaml file
	SecurityAgentYAML *SecurityAgentConfig
	// SystemProbeYAML is the content of the system-probe.yaml file
	SystemProbeYAML *SystemProbeConfig
	// IntegrationConfigs is the content of the integration configuration files under conf.d/
	IntegrationConfigs map[string]IntegrationConfig
	// ApplicationMonitoringYAML is the content of the application_monitoring.yaml configuration file
	ApplicationMonitoringYAML *ApplicationMonitoringConfig
}

// DatadogConfig represents the configuration to write in /etc/datadog-agent/datadog.yaml
type DatadogConfig struct {
	APIKey               string                     `yaml:"api_key"`
	Hostname             string                     `yaml:"hostname,omitempty"`
	Site                 string                     `yaml:"site,omitempty"`
	Proxy                DatadogConfigProxy         `yaml:"proxy,omitempty"`
	Env                  string                     `yaml:"env,omitempty"`
	Tags                 []string                   `yaml:"tags,omitempty"`
	ExtraTags            []string                   `yaml:"extra_tags,omitempty"`
	LogsEnabled          bool                       `yaml:"logs_enabled,omitempty"`
	DJM                  DatadogConfigDJM           `yaml:"djm_config,omitempty"`
	ProcessConfig        DatadogConfigProcessConfig `yaml:"process_config,omitempty"`
	ExpectedTagsDuration string                     `yaml:"expected_tags_duration,omitempty"`
	RemoteUpdates        bool                       `yaml:"remote_updates,omitempty"`
	Installer            DatadogConfigInstaller     `yaml:"installer,omitempty"`
	DDURL                string                     `yaml:"dd_url,omitempty"`
	LogsConfig           LogsConfig                 `yaml:"logs_config,omitempty"`
	GPUCheck             GPUCheckConfig             `yaml:"gpu,omitempty"`
	SBOM                 SBOMConfig                 `yaml:"sbom,omitempty"`
}

// GPUCheckConfig represents the configuration for the GPU check
type GPUCheckConfig struct {
	Enabled     bool   `yaml:"enabled,omitempty"`
	NvmlLibPath string `yaml:"nvml_lib_path,omitempty"`
}

// DatadogConfigProxy represents the configuration for the proxy
type DatadogConfigProxy struct {
	HTTP    string   `yaml:"http,omitempty"`
	HTTPS   string   `yaml:"https,omitempty"`
	NoProxy []string `yaml:"no_proxy,omitempty"`
}

// DatadogConfigDJM represents the configuration for the Data Jobs Monitoring
type DatadogConfigDJM struct {
	Enabled bool `yaml:"enabled,omitempty"`
}

// DatadogConfigProcessConfig represents the configuration for the process agent
type DatadogConfigProcessConfig struct {
	ExpvarPort int `yaml:"expvar_port,omitempty"`
}

// DatadogConfigInstaller represents the configuration for the installer
type DatadogConfigInstaller struct {
	Registry DatadogConfigInstallerRegistry `yaml:"registry,omitempty"`
}

// DatadogConfigInstallerRegistry represents the configuration for the installer registry
type DatadogConfigInstallerRegistry struct {
	URL  string `yaml:"url,omitempty"`
	Auth string `yaml:"auth,omitempty"`
}

// IntegrationConfig represents the configuration for an integration under conf.d/
type IntegrationConfig struct {
	InitConfig any                     `yaml:"init_config"`
	Instances  []any                   `yaml:"instances,omitempty"`
	Logs       []IntegrationConfigLogs `yaml:"logs,omitempty"`
}

// IntegrationConfigLogs represents the configuration for the logs of an integration
type IntegrationConfigLogs struct {
	Type                   string              `yaml:"type,omitempty"`
	Path                   string              `yaml:"path,omitempty"`
	Service                string              `yaml:"service,omitempty"`
	Source                 string              `yaml:"source,omitempty"`
	Tags                   string              `yaml:"tags,omitempty"`
	AutoMultiLineDetection bool                `yaml:"auto_multi_line_detection,omitempty"`
	LogProcessingRules     []LogProcessingRule `yaml:"log_processing_rules,omitempty"`
}

// IntegrationConfigInstanceSpark represents the configuration for the Spark integration
type IntegrationConfigInstanceSpark struct {
	SparkURL         string `yaml:"spark_url"`
	SparkClusterMode string `yaml:"spark_cluster_mode"`
	ClusterName      string `yaml:"cluster_name"`
	StreamingMetrics bool   `yaml:"streaming_metrics"`
}

// IntegrationConfigInstanceYarn represents the configuration for the Yarn integration
type IntegrationConfigInstanceYarn struct {
	ResourceManagerURI string `yaml:"resourcemanager_uri"`
	ClusterName        string `yaml:"cluster_name"`
}

// InjectTracerConfig represents the configuration to write in /etc/datadog-agent/inject/tracer.yaml
type InjectTracerConfig struct {
	Version                        int                        `yaml:"version,omitempty"`
	ConfigSources                  string                     `yaml:"config_sources,omitempty"`
	AdditionalEnvironmentVariables []InjectTracerConfigEnvVar `yaml:"additional_environment_variables,omitempty"`
}

// InjectTracerConfigEnvVar represents an environment variable to inject
type InjectTracerConfigEnvVar struct {
	Key   string `yaml:"key"`
	Value string `yaml:"value"`
}

// SystemProbeConfig represents the configuration to write in /etc/datadog-agent/system-probe.yaml
type SystemProbeConfig struct {
	RuntimeSecurityConfig RuntimeSecurityConfig `yaml:"runtime_security_config,omitempty"`
	GPUMonitoringConfig   GPUMonitoringConfig   `yaml:"gpu_monitoring,omitempty"`
}

// RuntimeSecurityConfig represents the configuration for the runtime security
type RuntimeSecurityConfig struct {
	Enabled bool       `yaml:"enabled,omitempty"`
	SBOM    SBOMConfig `yaml:"sbom,omitempty"`
}

// SBOMConfig represents the configuration for the SBOM
type SBOMConfig struct {
	Enabled        bool                     `yaml:"enabled,omitempty"`
	ContainerImage SBOMContainerImageConfig `yaml:"container_image,omitempty"`
	Host           SBOMHostConfig           `yaml:"host,omitempty"`
}

// SBOMContainerImageConfig represents the configuration for the SBOM container image
type SBOMContainerImageConfig struct {
	Enabled bool `yaml:"enabled,omitempty"`
}

// SBOMHostConfig represents the configuration for the SBOM host
type SBOMHostConfig struct {
	Enabled bool `yaml:"enabled,omitempty"`
}

// GPUMonitoringConfig represents the configuration for GPU monitoring
type GPUMonitoringConfig struct {
	Enabled bool `yaml:"enabled,omitempty"`
}

// SecurityAgentConfig represents the configuration to write in /etc/datadog-agent/security-agent.yaml
type SecurityAgentConfig struct {
	ComplianceConfig      SecurityAgentComplianceConfig `yaml:"compliance_config,omitempty"`
	RuntimeSecurityConfig RuntimeSecurityConfig         `yaml:"runtime_security_config,omitempty"`
}

// SecurityAgentComplianceConfig represents the configuration for the compliance
type SecurityAgentComplianceConfig struct {
	Enabled bool `yaml:"enabled,omitempty"`
}

// LogsConfig represents the configuration for global log processing rules
type LogsConfig struct {
	ProcessingRules []LogProcessingRule `yaml:"processing_rules"`
}

// LogProcessingRule represents the configuration for a log processing rule
type LogProcessingRule struct {
	Type    string `yaml:"type" json:"type"`
	Name    string `yaml:"name" json:"name"`
	Pattern string `yaml:"pattern" json:"pattern"`
}

// ApplicationMonitoringConfig represents the configuration for the application monitoring
type ApplicationMonitoringConfig struct {
	Default APMConfigurationDefault `yaml:"apm_configuration_default,omitempty"`
}

// APMConfigurationDefault represents a host-wide configuration for services
type APMConfigurationDefault struct {
	TraceDebug                    *bool   `yaml:"DD_TRACE_DEBUG,omitempty"`
	IntegrationsEnabled           *bool   `yaml:"DD_INTEGRATIONS_ENABLED,omitempty"`
	DataJobsCommandPattern        string  `yaml:"DD_DATA_JOBS_COMMAND_PATTERN,omitempty"`
	DataJobsSparkAppNameAsService *bool   `yaml:"DD_SPARK_APP_NAME_AS_SERVICE,omitempty"`
	RuntimeMetricsEnabled         *bool   `yaml:"DD_RUNTIME_METRICS_ENABLED,omitempty"`
	LogsInjection                 *bool   `yaml:"DD_LOGS_INJECTION,omitempty"`
	APMTracingEnabled             *bool   `yaml:"DD_APM_TRACING_ENABLED,omitempty"`
	ProfilingEnabled              *string `yaml:"DD_PROFILING_ENABLED,omitempty"`
	DataStreamsEnabled            *bool   `yaml:"DD_DATA_STREAMS_ENABLED,omitempty"`
	AppsecEnabled                 *bool   `yaml:"DD_APPSEC_ENABLED,omitempty"`
	IastEnabled                   *bool   `yaml:"DD_IAST_ENABLED,omitempty"`
	DataJobsEnabled               *bool   `yaml:"DD_DATA_JOBS_ENABLED,omitempty"`
	AppsecScaEnabled              *bool   `yaml:"DD_APPSEC_SCA_ENABLED,omitempty"`
}

// DelayedAgentRestartConfig represents the config to restart the agent with a delay at the end of the install
type DelayedAgentRestartConfig struct {
	Scheduled bool
	Delay     time.Duration
	LogFile   string
}

// BoolToPtr converts a bool to a pointer of a bool
func BoolToPtr(b bool) *bool {
	return &b
}
