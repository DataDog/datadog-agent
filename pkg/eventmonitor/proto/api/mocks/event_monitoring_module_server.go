// Code generated by mockery v2.49.2. DO NOT EDIT.

package mocks

import (
	api "github.com/DataDog/datadog-agent/pkg/eventmonitor/proto/api"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// EventMonitoringModuleServer is an autogenerated mock type for the EventMonitoringModuleServer type
type EventMonitoringModuleServer struct {
	mock.Mock
}

type EventMonitoringModuleServer_Expecter struct {
	mock *mock.Mock
}

func (_m *EventMonitoringModuleServer) EXPECT() *EventMonitoringModuleServer_Expecter {
	return &EventMonitoringModuleServer_Expecter{mock: &_m.Mock}
}

// GetProcessEvents provides a mock function with given fields: _a0, _a1
func (_m *EventMonitoringModuleServer) GetProcessEvents(_a0 *api.GetProcessEventParams, _a1 grpc.ServerStreamingServer[api.ProcessEventMessage]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.GetProcessEventParams, grpc.ServerStreamingServer[api.ProcessEventMessage]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventMonitoringModuleServer_GetProcessEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessEvents'
type EventMonitoringModuleServer_GetProcessEvents_Call struct {
	*mock.Call
}

// GetProcessEvents is a helper method to define mock.On call
//   - _a0 *api.GetProcessEventParams
//   - _a1 grpc.ServerStreamingServer[api.ProcessEventMessage]
func (_e *EventMonitoringModuleServer_Expecter) GetProcessEvents(_a0 interface{}, _a1 interface{}) *EventMonitoringModuleServer_GetProcessEvents_Call {
	return &EventMonitoringModuleServer_GetProcessEvents_Call{Call: _e.mock.On("GetProcessEvents", _a0, _a1)}
}

func (_c *EventMonitoringModuleServer_GetProcessEvents_Call) Run(run func(_a0 *api.GetProcessEventParams, _a1 grpc.ServerStreamingServer[api.ProcessEventMessage])) *EventMonitoringModuleServer_GetProcessEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.GetProcessEventParams), args[1].(grpc.ServerStreamingServer[api.ProcessEventMessage]))
	})
	return _c
}

func (_c *EventMonitoringModuleServer_GetProcessEvents_Call) Return(_a0 error) *EventMonitoringModuleServer_GetProcessEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventMonitoringModuleServer_GetProcessEvents_Call) RunAndReturn(run func(*api.GetProcessEventParams, grpc.ServerStreamingServer[api.ProcessEventMessage]) error) *EventMonitoringModuleServer_GetProcessEvents_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedEventMonitoringModuleServer provides a mock function with no fields
func (_m *EventMonitoringModuleServer) mustEmbedUnimplementedEventMonitoringModuleServer() {
	_m.Called()
}

// EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedEventMonitoringModuleServer'
type EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedEventMonitoringModuleServer is a helper method to define mock.On call
func (_e *EventMonitoringModuleServer_Expecter) mustEmbedUnimplementedEventMonitoringModuleServer() *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call {
	return &EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call{Call: _e.mock.On("mustEmbedUnimplementedEventMonitoringModuleServer")}
}

func (_c *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call) Run(run func()) *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call) Return() *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call) RunAndReturn(run func()) *EventMonitoringModuleServer_mustEmbedUnimplementedEventMonitoringModuleServer_Call {
	_c.Run(run)
	return _c
}

// NewEventMonitoringModuleServer creates a new instance of EventMonitoringModuleServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventMonitoringModuleServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventMonitoringModuleServer {
	mock := &EventMonitoringModuleServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
