// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/eventmonitor/proto/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventMonitoringModuleClient is the client API for EventMonitoringModule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventMonitoringModuleClient interface {
	GetProcessEvents(ctx context.Context, in *GetProcessEventParams, opts ...grpc.CallOption) (EventMonitoringModule_GetProcessEventsClient, error)
}

type eventMonitoringModuleClient struct {
	cc grpc.ClientConnInterface
}

func NewEventMonitoringModuleClient(cc grpc.ClientConnInterface) EventMonitoringModuleClient {
	return &eventMonitoringModuleClient{cc}
}

func (c *eventMonitoringModuleClient) GetProcessEvents(ctx context.Context, in *GetProcessEventParams, opts ...grpc.CallOption) (EventMonitoringModule_GetProcessEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventMonitoringModule_ServiceDesc.Streams[0], "/api.EventMonitoringModule/GetProcessEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventMonitoringModuleGetProcessEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventMonitoringModule_GetProcessEventsClient interface {
	Recv() (*ProcessEventMessage, error)
	grpc.ClientStream
}

type eventMonitoringModuleGetProcessEventsClient struct {
	grpc.ClientStream
}

func (x *eventMonitoringModuleGetProcessEventsClient) Recv() (*ProcessEventMessage, error) {
	m := new(ProcessEventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventMonitoringModuleServer is the server API for EventMonitoringModule service.
// All implementations must embed UnimplementedEventMonitoringModuleServer
// for forward compatibility
type EventMonitoringModuleServer interface {
	GetProcessEvents(*GetProcessEventParams, EventMonitoringModule_GetProcessEventsServer) error
	mustEmbedUnimplementedEventMonitoringModuleServer()
}

// UnimplementedEventMonitoringModuleServer must be embedded to have forward compatible implementations.
type UnimplementedEventMonitoringModuleServer struct {
}

func (UnimplementedEventMonitoringModuleServer) GetProcessEvents(*GetProcessEventParams, EventMonitoringModule_GetProcessEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProcessEvents not implemented")
}
func (UnimplementedEventMonitoringModuleServer) mustEmbedUnimplementedEventMonitoringModuleServer() {}

// UnsafeEventMonitoringModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventMonitoringModuleServer will
// result in compilation errors.
type UnsafeEventMonitoringModuleServer interface {
	mustEmbedUnimplementedEventMonitoringModuleServer()
}

func RegisterEventMonitoringModuleServer(s grpc.ServiceRegistrar, srv EventMonitoringModuleServer) {
	s.RegisterService(&EventMonitoringModule_ServiceDesc, srv)
}

func _EventMonitoringModule_GetProcessEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProcessEventParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventMonitoringModuleServer).GetProcessEvents(m, &eventMonitoringModuleGetProcessEventsServer{stream})
}

type EventMonitoringModule_GetProcessEventsServer interface {
	Send(*ProcessEventMessage) error
	grpc.ServerStream
}

type eventMonitoringModuleGetProcessEventsServer struct {
	grpc.ServerStream
}

func (x *eventMonitoringModuleGetProcessEventsServer) Send(m *ProcessEventMessage) error {
	return x.ServerStream.SendMsg(m)
}

// EventMonitoringModule_ServiceDesc is the grpc.ServiceDesc for EventMonitoringModule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventMonitoringModule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.EventMonitoringModule",
	HandlerType: (*EventMonitoringModuleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProcessEvents",
			Handler:       _EventMonitoringModule_GetProcessEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/eventmonitor/proto/api/api.proto",
}
