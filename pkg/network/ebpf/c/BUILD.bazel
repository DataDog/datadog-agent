load("//:bazel/rules/ebpf.bzl", "ebpf_prog")

cc_library(
    name = "ebpf_c_network",
    hdrs = [
        "conn_tuple.h",
        "conntrack/helpers.h",
        "conntrack/maps.h",
        "conntrack/types.h",
        "cookie.h",
        "defs.h",
        "ip.h",
        "ipv6.h",
        "netns.h",
        "pid_fd.h",
        "pid_tgid.h",
        "port_range.h",
        "//pkg/network/ebpf/c/prebuilt:conntrack.h",
        "//pkg/network/ebpf/c/prebuilt:offset-guess.h",
        "//pkg/network/ebpf/c/prebuilt:offsets.h",
        "protocols/amqp/defs.h",
        "protocols/amqp/helpers.h",
        "protocols/classification/classification-context.h",
        "protocols/classification/common.h",
        "protocols/classification/defs.h",
        "protocols/classification/dispatcher-helpers.h",
        "protocols/classification/dispatcher-maps.h",
        "protocols/classification/maps.h",
        "protocols/classification/protocol-classification.h",
        "protocols/classification/routing.h",
        "protocols/classification/routing-helpers.h",
        "protocols/classification/shared-tracer-maps.h",
        "protocols/classification/stack-helpers.h",
        "protocols/classification/structs.h",
        "protocols/events.h",
        "protocols/events-types.h",
        "protocols/flush.h",
        "protocols/grpc/defs.h",
        "protocols/grpc/helpers.h",
        "protocols/helpers/big_endian.h",
        "protocols/helpers/pktbuf.h",
        "protocols/http/buffer.h",
        "protocols/http/classification-defs.h",
        "protocols/http/classification-helpers.h",
        "protocols/http/http.h",
        "protocols/http/maps.h",
        "protocols/http/types.h",
        "protocols/http/usm-events.h",
        "protocols/http2/decoding.h",
        "protocols/http2/decoding-common.h",
        "protocols/http2/decoding-defs.h",
        "protocols/http2/decoding-tls.h",
        "protocols/http2/defs.h",
        "protocols/http2/helpers.h",
        "protocols/http2/maps-defs.h",
        "protocols/http2/skb-common.h",
        "protocols/http2/usm-events.h",
        "protocols/kafka/defs.h",
        "protocols/kafka/kafka-classification.h",
        "protocols/kafka/kafka-parsing.h",
        "protocols/kafka/maps.h",
        "protocols/kafka/parsing-maps.h",
        "protocols/kafka/types.h",
        "protocols/kafka/usm-events.h",
        "protocols/mongo/defs.h",
        "protocols/mongo/helpers.h",
        "protocols/mysql/defs.h",
        "protocols/mysql/helpers.h",
        "protocols/postgres/decoding.h",
        "protocols/postgres/decoding-maps.h",
        "protocols/postgres/defs.h",
        "protocols/postgres/helpers.h",
        "protocols/postgres/types.h",
        "protocols/postgres/usm-events.h",
        "protocols/read_into_buffer.h",
        "protocols/redis/decoding.h",
        "protocols/redis/decoding-maps.h",
        "protocols/redis/defs.h",
        "protocols/redis/helpers.h",
        "protocols/redis/types.h",
        "protocols/redis/usm-events.h",
        "protocols/sockfd.h",
        "protocols/sockfd-probes.h",
        "protocols/sql/defs.h",
        "protocols/sql/helpers.h",
        "protocols/tls/go-tls-conn.h",
        "protocols/tls/go-tls-goid.h",
        "protocols/tls/go-tls-location.h",
        "protocols/tls/go-tls-maps.h",
        "protocols/tls/go-tls-types.h",
        "protocols/tls/https.h",
        "protocols/tls/native-tls.h",
        "protocols/tls/native-tls-maps.h",
        "protocols/tls/tags-types.h",
        "protocols/tls/tls.h",
        "protocols/tls/tls-maps.h",
        "shared-libraries/maps.h",
        "shared-libraries/probes.h",
        "shared-libraries/types.h",
        "skb.h",
        "sock.h",
        "tcp_states.h",
        "tracer/bind.h",
        "tracer/events.h",
        "tracer/maps.h",
        "tracer/port.h",
        "tracer/stats.h",
        "tracer/tcp_recv.h",
        "tracer/telemetry.h",
        "tracer/tracer.h",
        "//pkg/network/ebpf/c/runtime:conntrack.h",
        "//pkg/network/ebpf/c/runtime:conntrack-types.h",
    ],
    visibility = ["//visibility:public"],
)

ebpf_prog(
    name = "tracer",
    srcs = ["tracer.c"],
    core = True,
    deps = [
        "//pkg/ebpf/c:ebpf_c_headers",
        ":ebpf_c_network",
    ],
)
