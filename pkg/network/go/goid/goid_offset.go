// Code generated by go generate; DO NOT EDIT.

//go:build linux
// +build linux

package goid

import (
	"fmt"
	"github.com/go-delve/delve/pkg/goversion"
)

var SupportedArchitectures = []string{"amd64", "arm64"}

var MinGoVersion = goversion.GoVersion{Major: 1, Minor: 13, Rev: 0}

// GetGoroutineIDOffset gets the offset of the "goid" field in the "runtime.g" struct
func GetGoroutineIDOffset(version goversion.GoVersion, goarch string) (uint64, error) {
	switch goarch {
	case "amd64":
		if version.AfterOrEqual(goversion.GoVersion{Major: 1, Minor: 13, Rev: 0}) {
			return 0x98, nil
		}
		return 0, fmt.Errorf("unsupported version go%d.%d.%d (min supported: go%d.%d.%d)", version.Major, version.Minor, version.Rev, 1, 13, 0)
	case "arm64":
		if version.AfterOrEqual(goversion.GoVersion{Major: 1, Minor: 13, Rev: 0}) {
			return 0x98, nil
		}
		return 0, fmt.Errorf("unsupported version go%d.%d.%d (min supported: go%d.%d.%d)", version.Major, version.Minor, version.Rev, 1, 13, 0)
	default:
		return 0, fmt.Errorf("unsupported architecture %q", goarch)
	}
}
