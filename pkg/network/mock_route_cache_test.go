// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

//go:build linux
// +build linux

// Code generated by MockGen. DO NOT EDIT.
// Source: route_cache.go

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	util "github.com/DataDog/datadog-agent/pkg/process/util"
)

// MockRouteCache is a mock of RouteCache interface.
type MockRouteCache struct {
	ctrl     *gomock.Controller
	recorder *MockRouteCacheMockRecorder
}

// MockRouteCacheMockRecorder is the mock recorder for MockRouteCache.
type MockRouteCacheMockRecorder struct {
	mock *MockRouteCache
}

// NewMockRouteCache creates a new mock instance.
func NewMockRouteCache(ctrl *gomock.Controller) *MockRouteCache {
	mock := &MockRouteCache{ctrl: ctrl}
	mock.recorder = &MockRouteCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteCache) EXPECT() *MockRouteCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRouteCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRouteCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRouteCache)(nil).Close))
}

// Get mocks base method.
func (m *MockRouteCache) Get(source, dest util.Address, netns uint32) (Route, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", source, dest, netns)
	ret0, _ := ret[0].(Route)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteCacheMockRecorder) Get(source, dest, netns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteCache)(nil).Get), source, dest, netns)
}

// GetStats mocks base method.
func (m *MockRouteCache) GetStats() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockRouteCacheMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRouteCache)(nil).GetStats))
}

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRouter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRouterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRouter)(nil).Close))
}

// GetStats mocks base method.
func (m *MockRouter) GetStats() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockRouterMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRouter)(nil).GetStats))
}

// Route mocks base method.
func (m *MockRouter) Route(source, dest util.Address, netns uint32) (Route, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", source, dest, netns)
	ret0, _ := ret[0].(Route)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Route indicates an expected call of Route.
func (mr *MockRouterMockRecorder) Route(source, dest, netns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouter)(nil).Route), source, dest, netns)
}
