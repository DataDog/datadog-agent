load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "marshal",
    srcs = [
        "dns.go",
        "format.go",
        "json.go",
        "marshaler.go",
        "modeler.go",
        "protobuf.go",
        "usm.go",
        "usm_encoders_unsupported.go",
        "usm_encoders_windows.go",
        "usm_http.go",
        "usm_lookup.go",
        "usm_lookup_windows.go",
        "usm_protocols.go",
    ],
    importpath = "github.com/DataDog/datadog-agent/pkg/network/encoding/marshal",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/config/setup",
        "//pkg/network",
        "//pkg/network/dns",
        "//pkg/network/protocols",
        "//pkg/network/protocols/telemetry",
        "//pkg/network/protocols/tls",
        "//pkg/network/types",
        "//pkg/process/util",
        "//pkg/util/log",
        "@com_github_datadog_agent_payload_v5//process",
        "@com_github_gogo_protobuf//jsonpb",
        "@com_github_twmb_murmur3//:murmur3",
    ] + select({
        "@rules_go//go/platform:windows": [
            "//pkg/network/protocols/http",
        ],
        "//conditions:default": [],
    }),
)

go_test(
    name = "marshal_test",
    srcs = [
        "dns_test.go",
        "format_test.go",
        "format_usm_linux_test.go",
        "format_usm_test.go",
        "modeler_test.go",
        "usm_http_test.go",
        "usm_latency_encoding_test.go",
        "usm_lookup_test.go",
        "usm_lookup_windows_test.go",
        "usm_test.go",
    ],
    embed = [":marshal"],
    deps = [
        "//pkg/config/mock",
        "//pkg/config/setup",
        "//pkg/network",
        "//pkg/network/dns",
        "//pkg/network/protocols",
        "//pkg/network/protocols/http",
        "//pkg/network/types",
        "//pkg/process/util",
        "@com_github_datadog_agent_payload_v5//process",
        "@com_github_datadog_sketches_go//ddsketch",
        "@com_github_datadog_sketches_go//ddsketch/pb/sketchpb",
        "@com_github_gogo_protobuf//proto",
        "@com_github_golang_protobuf//proto",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@org_go4_intern//:intern",
    ] + select({
        "@rules_go//go/platform:android": [
            "//pkg/network/protocols/tls",
        ],
        "@rules_go//go/platform:linux": [
            "//pkg/network/protocols/tls",
        ],
        "//conditions:default": [],
    }),
)
