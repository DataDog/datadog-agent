// Code generated by MockGen. DO NOT EDIT.
// Source: winconn_windows.go

// Package winconn is a generated GoMock package.
package winconn

import (
	net "net"
	reflect "reflect"
	time "time"

	common "github.com/DataDog/datadog-agent/pkg/networkpath/traceroute/common"
	gomock "github.com/golang/mock/gomock"
	ipv4 "golang.org/x/net/ipv4"
)

// MockRawConnWrapper is a mock of RawConnWrapper interface.
type MockRawConnWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockRawConnWrapperMockRecorder
}

// MockRawConnWrapperMockRecorder is the mock recorder for MockRawConnWrapper.
type MockRawConnWrapperMockRecorder struct {
	mock *MockRawConnWrapper
}

// NewMockRawConnWrapper creates a new mock instance.
func NewMockRawConnWrapper(ctrl *gomock.Controller) *MockRawConnWrapper {
	mock := &MockRawConnWrapper{ctrl: ctrl}
	mock.recorder = &MockRawConnWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawConnWrapper) EXPECT() *MockRawConnWrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRawConnWrapper) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRawConnWrapperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRawConnWrapper)(nil).Close))
}

// ListenPackets mocks base method.
func (m *MockRawConnWrapper) ListenPackets(timeout time.Duration, localIP net.IP, localPort uint16, remoteIP net.IP, remotePort uint16, innerIdentifier uint32, icmpPacketID uint16, matcherFuncs map[int]common.MatcherFunc) (net.IP, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenPackets", timeout, localIP, localPort, remoteIP, remotePort, innerIdentifier, icmpPacketID, matcherFuncs)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListenPackets indicates an expected call of ListenPackets.
func (mr *MockRawConnWrapperMockRecorder) ListenPackets(timeout, localIP, localPort, remoteIP, remotePort, innerIdentifier, icmpPacketID, matcherFuncs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPackets", reflect.TypeOf((*MockRawConnWrapper)(nil).ListenPackets), timeout, localIP, localPort, remoteIP, remotePort, innerIdentifier, icmpPacketID, matcherFuncs)
}

// ReadFrom mocks base method.
func (m *MockRawConnWrapper) ReadFrom(b []byte) (*ipv4.Header, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(*ipv4.Header)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockRawConnWrapperMockRecorder) ReadFrom(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockRawConnWrapper)(nil).ReadFrom), b)
}

// SendRawPacket mocks base method.
func (m *MockRawConnWrapper) SendRawPacket(destIP net.IP, destPort uint16, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPacket", destIP, destPort, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRawPacket indicates an expected call of SendRawPacket.
func (mr *MockRawConnWrapperMockRecorder) SendRawPacket(destIP, destPort, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPacket", reflect.TypeOf((*MockRawConnWrapper)(nil).SendRawPacket), destIP, destPort, payload)
}
