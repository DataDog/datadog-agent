// Code generated by MockGen. DO NOT EDIT.
// Source: packet_sink.go

// Package packets is a generated GoMock package.
package packets

import (
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSink is a mock of Sink interface.
type MockSink struct {
	ctrl     *gomock.Controller
	recorder *MockSinkMockRecorder
}

// MockSinkMockRecorder is the mock recorder for MockSink.
type MockSinkMockRecorder struct {
	mock *MockSink
}

// NewMockSink creates a new mock instance.
func NewMockSink(ctrl *gomock.Controller) *MockSink {
	mock := &MockSink{ctrl: ctrl}
	mock.recorder = &MockSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSink) EXPECT() *MockSinkMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSink) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSinkMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSink)(nil).Close))
}

// WriteTo mocks base method.
func (m *MockSink) WriteTo(buf []byte, addrPort netip.AddrPort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", buf, addrPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockSinkMockRecorder) WriteTo(buf, addrPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockSink)(nil).WriteTo), buf, addrPort)
}
