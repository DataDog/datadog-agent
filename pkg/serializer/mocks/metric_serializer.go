// Code generated by mockery v2.49.2. DO NOT EDIT.

//go:build test

package mocks

import (
	event "github.com/DataDog/datadog-agent/pkg/metrics/event"
	marshaler "github.com/DataDog/datadog-agent/pkg/serializer/marshaler"

	metrics "github.com/DataDog/datadog-agent/pkg/metrics"

	mock "github.com/stretchr/testify/mock"

	servicecheck "github.com/DataDog/datadog-agent/pkg/metrics/servicecheck"

	types "github.com/DataDog/datadog-agent/pkg/serializer/types"
)

// MetricSerializer is an autogenerated mock type for the MetricSerializer type
type MetricSerializer struct {
	mock.Mock
}

type MetricSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricSerializer) EXPECT() *MetricSerializer_Expecter {
	return &MetricSerializer_Expecter{mock: &_m.Mock}
}

// AreSeriesEnabled provides a mock function with no fields
func (_m *MetricSerializer) AreSeriesEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AreSeriesEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MetricSerializer_AreSeriesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreSeriesEnabled'
type MetricSerializer_AreSeriesEnabled_Call struct {
	*mock.Call
}

// AreSeriesEnabled is a helper method to define mock.On call
func (_e *MetricSerializer_Expecter) AreSeriesEnabled() *MetricSerializer_AreSeriesEnabled_Call {
	return &MetricSerializer_AreSeriesEnabled_Call{Call: _e.mock.On("AreSeriesEnabled")}
}

func (_c *MetricSerializer_AreSeriesEnabled_Call) Run(run func()) *MetricSerializer_AreSeriesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricSerializer_AreSeriesEnabled_Call) Return(_a0 bool) *MetricSerializer_AreSeriesEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_AreSeriesEnabled_Call) RunAndReturn(run func() bool) *MetricSerializer_AreSeriesEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// AreSketchesEnabled provides a mock function with no fields
func (_m *MetricSerializer) AreSketchesEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AreSketchesEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MetricSerializer_AreSketchesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AreSketchesEnabled'
type MetricSerializer_AreSketchesEnabled_Call struct {
	*mock.Call
}

// AreSketchesEnabled is a helper method to define mock.On call
func (_e *MetricSerializer_Expecter) AreSketchesEnabled() *MetricSerializer_AreSketchesEnabled_Call {
	return &MetricSerializer_AreSketchesEnabled_Call{Call: _e.mock.On("AreSketchesEnabled")}
}

func (_c *MetricSerializer_AreSketchesEnabled_Call) Run(run func()) *MetricSerializer_AreSketchesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricSerializer_AreSketchesEnabled_Call) Return(_a0 bool) *MetricSerializer_AreSketchesEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_AreSketchesEnabled_Call) RunAndReturn(run func() bool) *MetricSerializer_AreSketchesEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// SendAgentchecksMetadata provides a mock function with given fields: m
func (_m *MetricSerializer) SendAgentchecksMetadata(m marshaler.JSONMarshaler) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendAgentchecksMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(marshaler.JSONMarshaler) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendAgentchecksMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAgentchecksMetadata'
type MetricSerializer_SendAgentchecksMetadata_Call struct {
	*mock.Call
}

// SendAgentchecksMetadata is a helper method to define mock.On call
//   - m marshaler.JSONMarshaler
func (_e *MetricSerializer_Expecter) SendAgentchecksMetadata(m interface{}) *MetricSerializer_SendAgentchecksMetadata_Call {
	return &MetricSerializer_SendAgentchecksMetadata_Call{Call: _e.mock.On("SendAgentchecksMetadata", m)}
}

func (_c *MetricSerializer_SendAgentchecksMetadata_Call) Run(run func(m marshaler.JSONMarshaler)) *MetricSerializer_SendAgentchecksMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marshaler.JSONMarshaler))
	})
	return _c
}

func (_c *MetricSerializer_SendAgentchecksMetadata_Call) Return(_a0 error) *MetricSerializer_SendAgentchecksMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendAgentchecksMetadata_Call) RunAndReturn(run func(marshaler.JSONMarshaler) error) *MetricSerializer_SendAgentchecksMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvents provides a mock function with given fields: e
func (_m *MetricSerializer) SendEvents(e event.Events) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for SendEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(event.Events) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvents'
type MetricSerializer_SendEvents_Call struct {
	*mock.Call
}

// SendEvents is a helper method to define mock.On call
//   - e event.Events
func (_e *MetricSerializer_Expecter) SendEvents(e interface{}) *MetricSerializer_SendEvents_Call {
	return &MetricSerializer_SendEvents_Call{Call: _e.mock.On("SendEvents", e)}
}

func (_c *MetricSerializer_SendEvents_Call) Run(run func(e event.Events)) *MetricSerializer_SendEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.Events))
	})
	return _c
}

func (_c *MetricSerializer_SendEvents_Call) Return(_a0 error) *MetricSerializer_SendEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendEvents_Call) RunAndReturn(run func(event.Events) error) *MetricSerializer_SendEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SendHostMetadata provides a mock function with given fields: m
func (_m *MetricSerializer) SendHostMetadata(m marshaler.JSONMarshaler) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendHostMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(marshaler.JSONMarshaler) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendHostMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHostMetadata'
type MetricSerializer_SendHostMetadata_Call struct {
	*mock.Call
}

// SendHostMetadata is a helper method to define mock.On call
//   - m marshaler.JSONMarshaler
func (_e *MetricSerializer_Expecter) SendHostMetadata(m interface{}) *MetricSerializer_SendHostMetadata_Call {
	return &MetricSerializer_SendHostMetadata_Call{Call: _e.mock.On("SendHostMetadata", m)}
}

func (_c *MetricSerializer_SendHostMetadata_Call) Run(run func(m marshaler.JSONMarshaler)) *MetricSerializer_SendHostMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marshaler.JSONMarshaler))
	})
	return _c
}

func (_c *MetricSerializer_SendHostMetadata_Call) Return(_a0 error) *MetricSerializer_SendHostMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendHostMetadata_Call) RunAndReturn(run func(marshaler.JSONMarshaler) error) *MetricSerializer_SendHostMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SendIterableSeries provides a mock function with given fields: serieSource
func (_m *MetricSerializer) SendIterableSeries(serieSource metrics.SerieSource) error {
	ret := _m.Called(serieSource)

	if len(ret) == 0 {
		panic("no return value specified for SendIterableSeries")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metrics.SerieSource) error); ok {
		r0 = rf(serieSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendIterableSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendIterableSeries'
type MetricSerializer_SendIterableSeries_Call struct {
	*mock.Call
}

// SendIterableSeries is a helper method to define mock.On call
//   - serieSource metrics.SerieSource
func (_e *MetricSerializer_Expecter) SendIterableSeries(serieSource interface{}) *MetricSerializer_SendIterableSeries_Call {
	return &MetricSerializer_SendIterableSeries_Call{Call: _e.mock.On("SendIterableSeries", serieSource)}
}

func (_c *MetricSerializer_SendIterableSeries_Call) Run(run func(serieSource metrics.SerieSource)) *MetricSerializer_SendIterableSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.SerieSource))
	})
	return _c
}

func (_c *MetricSerializer_SendIterableSeries_Call) Return(_a0 error) *MetricSerializer_SendIterableSeries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendIterableSeries_Call) RunAndReturn(run func(metrics.SerieSource) error) *MetricSerializer_SendIterableSeries_Call {
	_c.Call.Return(run)
	return _c
}

// SendMetadata provides a mock function with given fields: m
func (_m *MetricSerializer) SendMetadata(m marshaler.JSONMarshaler) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(marshaler.JSONMarshaler) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMetadata'
type MetricSerializer_SendMetadata_Call struct {
	*mock.Call
}

// SendMetadata is a helper method to define mock.On call
//   - m marshaler.JSONMarshaler
func (_e *MetricSerializer_Expecter) SendMetadata(m interface{}) *MetricSerializer_SendMetadata_Call {
	return &MetricSerializer_SendMetadata_Call{Call: _e.mock.On("SendMetadata", m)}
}

func (_c *MetricSerializer_SendMetadata_Call) Run(run func(m marshaler.JSONMarshaler)) *MetricSerializer_SendMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(marshaler.JSONMarshaler))
	})
	return _c
}

func (_c *MetricSerializer_SendMetadata_Call) Return(_a0 error) *MetricSerializer_SendMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendMetadata_Call) RunAndReturn(run func(marshaler.JSONMarshaler) error) *MetricSerializer_SendMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SendOrchestratorManifests provides a mock function with given fields: msgs, hostName, clusterID
func (_m *MetricSerializer) SendOrchestratorManifests(msgs []types.ProcessMessageBody, hostName string, clusterID string) error {
	ret := _m.Called(msgs, hostName, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for SendOrchestratorManifests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.ProcessMessageBody, string, string) error); ok {
		r0 = rf(msgs, hostName, clusterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendOrchestratorManifests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOrchestratorManifests'
type MetricSerializer_SendOrchestratorManifests_Call struct {
	*mock.Call
}

// SendOrchestratorManifests is a helper method to define mock.On call
//   - msgs []types.ProcessMessageBody
//   - hostName string
//   - clusterID string
func (_e *MetricSerializer_Expecter) SendOrchestratorManifests(msgs interface{}, hostName interface{}, clusterID interface{}) *MetricSerializer_SendOrchestratorManifests_Call {
	return &MetricSerializer_SendOrchestratorManifests_Call{Call: _e.mock.On("SendOrchestratorManifests", msgs, hostName, clusterID)}
}

func (_c *MetricSerializer_SendOrchestratorManifests_Call) Run(run func(msgs []types.ProcessMessageBody, hostName string, clusterID string)) *MetricSerializer_SendOrchestratorManifests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.ProcessMessageBody), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MetricSerializer_SendOrchestratorManifests_Call) Return(_a0 error) *MetricSerializer_SendOrchestratorManifests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendOrchestratorManifests_Call) RunAndReturn(run func([]types.ProcessMessageBody, string, string) error) *MetricSerializer_SendOrchestratorManifests_Call {
	_c.Call.Return(run)
	return _c
}

// SendOrchestratorMetadata provides a mock function with given fields: msgs, hostName, clusterID, payloadType
func (_m *MetricSerializer) SendOrchestratorMetadata(msgs []types.ProcessMessageBody, hostName string, clusterID string, payloadType int) error {
	ret := _m.Called(msgs, hostName, clusterID, payloadType)

	if len(ret) == 0 {
		panic("no return value specified for SendOrchestratorMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.ProcessMessageBody, string, string, int) error); ok {
		r0 = rf(msgs, hostName, clusterID, payloadType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendOrchestratorMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOrchestratorMetadata'
type MetricSerializer_SendOrchestratorMetadata_Call struct {
	*mock.Call
}

// SendOrchestratorMetadata is a helper method to define mock.On call
//   - msgs []types.ProcessMessageBody
//   - hostName string
//   - clusterID string
//   - payloadType int
func (_e *MetricSerializer_Expecter) SendOrchestratorMetadata(msgs interface{}, hostName interface{}, clusterID interface{}, payloadType interface{}) *MetricSerializer_SendOrchestratorMetadata_Call {
	return &MetricSerializer_SendOrchestratorMetadata_Call{Call: _e.mock.On("SendOrchestratorMetadata", msgs, hostName, clusterID, payloadType)}
}

func (_c *MetricSerializer_SendOrchestratorMetadata_Call) Run(run func(msgs []types.ProcessMessageBody, hostName string, clusterID string, payloadType int)) *MetricSerializer_SendOrchestratorMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.ProcessMessageBody), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MetricSerializer_SendOrchestratorMetadata_Call) Return(_a0 error) *MetricSerializer_SendOrchestratorMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendOrchestratorMetadata_Call) RunAndReturn(run func([]types.ProcessMessageBody, string, string, int) error) *MetricSerializer_SendOrchestratorMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SendProcessesMetadata provides a mock function with given fields: data
func (_m *MetricSerializer) SendProcessesMetadata(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendProcessesMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendProcessesMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendProcessesMetadata'
type MetricSerializer_SendProcessesMetadata_Call struct {
	*mock.Call
}

// SendProcessesMetadata is a helper method to define mock.On call
//   - data interface{}
func (_e *MetricSerializer_Expecter) SendProcessesMetadata(data interface{}) *MetricSerializer_SendProcessesMetadata_Call {
	return &MetricSerializer_SendProcessesMetadata_Call{Call: _e.mock.On("SendProcessesMetadata", data)}
}

func (_c *MetricSerializer_SendProcessesMetadata_Call) Run(run func(data interface{})) *MetricSerializer_SendProcessesMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MetricSerializer_SendProcessesMetadata_Call) Return(_a0 error) *MetricSerializer_SendProcessesMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendProcessesMetadata_Call) RunAndReturn(run func(interface{}) error) *MetricSerializer_SendProcessesMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SendServiceChecks provides a mock function with given fields: serviceChecks
func (_m *MetricSerializer) SendServiceChecks(serviceChecks servicecheck.ServiceChecks) error {
	ret := _m.Called(serviceChecks)

	if len(ret) == 0 {
		panic("no return value specified for SendServiceChecks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(servicecheck.ServiceChecks) error); ok {
		r0 = rf(serviceChecks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendServiceChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendServiceChecks'
type MetricSerializer_SendServiceChecks_Call struct {
	*mock.Call
}

// SendServiceChecks is a helper method to define mock.On call
//   - serviceChecks servicecheck.ServiceChecks
func (_e *MetricSerializer_Expecter) SendServiceChecks(serviceChecks interface{}) *MetricSerializer_SendServiceChecks_Call {
	return &MetricSerializer_SendServiceChecks_Call{Call: _e.mock.On("SendServiceChecks", serviceChecks)}
}

func (_c *MetricSerializer_SendServiceChecks_Call) Run(run func(serviceChecks servicecheck.ServiceChecks)) *MetricSerializer_SendServiceChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(servicecheck.ServiceChecks))
	})
	return _c
}

func (_c *MetricSerializer_SendServiceChecks_Call) Return(_a0 error) *MetricSerializer_SendServiceChecks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendServiceChecks_Call) RunAndReturn(run func(servicecheck.ServiceChecks) error) *MetricSerializer_SendServiceChecks_Call {
	_c.Call.Return(run)
	return _c
}

// SendSketch provides a mock function with given fields: sketches
func (_m *MetricSerializer) SendSketch(sketches metrics.SketchesSource) error {
	ret := _m.Called(sketches)

	if len(ret) == 0 {
		panic("no return value specified for SendSketch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metrics.SketchesSource) error); ok {
		r0 = rf(sketches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricSerializer_SendSketch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSketch'
type MetricSerializer_SendSketch_Call struct {
	*mock.Call
}

// SendSketch is a helper method to define mock.On call
//   - sketches metrics.SketchesSource
func (_e *MetricSerializer_Expecter) SendSketch(sketches interface{}) *MetricSerializer_SendSketch_Call {
	return &MetricSerializer_SendSketch_Call{Call: _e.mock.On("SendSketch", sketches)}
}

func (_c *MetricSerializer_SendSketch_Call) Run(run func(sketches metrics.SketchesSource)) *MetricSerializer_SendSketch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metrics.SketchesSource))
	})
	return _c
}

func (_c *MetricSerializer_SendSketch_Call) Return(_a0 error) *MetricSerializer_SendSketch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricSerializer_SendSketch_Call) RunAndReturn(run func(metrics.SketchesSource) error) *MetricSerializer_SendSketch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricSerializer creates a new instance of MetricSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricSerializer {
	mock := &MetricSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
