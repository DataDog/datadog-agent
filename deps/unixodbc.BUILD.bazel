load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@rules_cc//cc:cc_shared_library.bzl", "cc_shared_library")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_pkg//pkg:install.bzl", "pkg_install")
load("@rules_pkg//pkg:mappings.bzl", "pkg_files", "pkg_mklink")

COMMON_COPTS = ["-O3"]

# Version info from unixODBC 2.3.9
# The actual SONAME version would be determined by LIB_VERSION in the autotools build
# For unixODBC 2.3.9, the libraries typically have SONAME like libodbc.so.2
VERSION = "2.3.9"
SOVERSION = "2"

# Public headers installed by unixODBC
_UNIXODBC_PUBLIC_HEADERS = [
    "include/odbcinst.h",
    "include/odbcinstext.h",
    "include/sql.h",
    "include/sqlext.h",
    "include/sqltypes.h",
    "include/sqlucode.h",
    "include/sqlspi.h",
    "include/autotest.h",
    "include/uodbc_stats.h",
    "include/uodbc_extras.h",
    "include/unixodbc_conf.h",
]

_LIBLTDL_PUBLIC_HEADERS = [
    "libltdl/ltdl.h",
]

copy_file(
    name = "unixodbc_conf_h",
    src = select({
        "@platforms//cpu:x86_64": "x86_64/unixodbc_conf.h",
        "//conditions:default": "@platforms//:incompatible",
    }),
    out = "include/unixodbc_conf.h",
)

copy_file(
    name = "libltdl_config_h",
    src = select({
        "@platforms//cpu:x86_64": "x86_64/libltdl/config.h",
        "//conditions:default": "@platforms//:incompatible",
    }),
    out = "libltdl/config.h",
)

copy_file(
    name = "config_h",
    src = select({
        "@platforms//cpu:x86_64": "x86_64/config.h",
        "//conditions:default": "@platforms//:incompatible",
    }),
    out = "config.h",
)

# Built-in libltdl library to address "--with-included-ltdl" configure option.
cc_library(
    name = "libltdl",
    # This header has to be exposed along with the library to address
    # "--enable-ltdl-install" configure option.
    hdrs = ["libltdl/ltdl.h"],
    srcs = glob(
        ["libltdl/**/*.c", "libltdl/**/*.h"],
        exclude = [
            # Non-Unix loaders
            "libltdl/loaders/load_add_on.c",
            "libltdl/loaders/dyld.c",
            "libltdl/loaders/loadlibrary.c",
            "libltdl/loaders/shl_load.c",
            # Non-glibc implementation that is not needed
            "libltdl/lt__argz.c",
        ],
    ) + [
        ":libltdl_config_h",
    ],
    visibility = ["//visibility:public"],
    copts = COMMON_COPTS + [
        "-DLTDL",
        # LTDLOPEN must match what's used in the autotools build
        # This expands to lt_libltdl_LTX_preloaded_symbols
        "-DLTDLOPEN=libltdl",
    ],
    # "." is needed to make sure config.h is found.
    includes = ["libltdl/libltdl", "libltdl/."],
    # Link against libdl for dynamic loading support
    linkopts = ["-ldl"],
)

# Extra utility functions (snprintf, strcasecmp)
cc_library(
    name = "extras",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["extras/**/*.c", "include/*.h"], exclude = ["extras/vms.c"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
)

# Logging library
cc_library(
    name = "log",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["log/**/*.c", "include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
)

# List management library
cc_library(
    name = "lst",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["lst/**/*.c", "include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
)

# INI file parsing library
cc_library(
    name = "ini",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["ini/**/*.c", "include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [":extras"],
)

# ODBC installer library (internal version)
cc_library(
    name = "odbcinstlc",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["odbcinst/**/*.c", "include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [
        ":ini",
        ":log",
        ":lst",
        ":libltdl",
    ],
)

# ODBC installer library (public version with exports)
cc_library(
    name = "odbcinst",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["odbcinst/**/*.c", "include/*.h"]) + [":config_h"],
    hdrs = [
        "include/odbcinst.h",
        "include/odbcinstext.h",
    ],
    visibility = ["//visibility:public"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [
        ":ini",
        ":log",
        ":lst",
        ":libltdl",
    ],
)

# Main ODBC Driver Manager library
cc_library(
    name = "odbc",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["DriverManager/**/*.c", "DriverManager/**/*.h", "include/*.h"]) + [":config_h"],
    hdrs = [
        "include/sql.h",
        "include/sqlext.h",
        "include/sqltypes.h",
        "include/sqlucode.h",
        "include/sqlspi.h",
    ],
    visibility = ["//visibility:public"],
    copts = COMMON_COPTS,
    includes = [".", "include", "DriverManager"],
    deps = [
        ":lst",
        ":log",
        ":ini",
        ":odbcinstlc",
        ":libltdl",
    ],
)

# Cursor library
cc_library(
    name = "odbccr",
    # :config_h cannot be inside of the glob() because
    # actions are executed during execution phase, not during analysis phase
    # and glob is evaluated during analysis phase.
    srcs = glob(["cur/**/*.c", "cur/**/*.h", "include/*.h"]) + [":config_h"],
    visibility = ["//visibility:public"],
    copts = COMMON_COPTS,
    includes = [".", "include", "DriverManager", "cur"],
    deps = [":odbc"],
)

# ============================================================================
# Binary Executables
# ============================================================================

# odbcinst - ODBC driver/data source management utility
cc_binary(
    name = "odbcinst_bin",
    srcs = ["exe/odbcinst.c"] + glob(["include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [
        ":odbcinst",  # This refers to the cc_library
        ":ini",
        ":libltdl",
    ],
    visibility = ["//visibility:public"],
)

# odbc_config - ODBC configuration information utility
cc_binary(
    name = "odbc_config",
    srcs = ["exe/odbc-config.c"] + glob(["include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    visibility = ["//visibility:public"],
)

# isql - Interactive SQL tool
cc_binary(
    name = "isql",
    srcs = ["exe/isql.c", "exe/isql.h"] + glob(["include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [
        ":odbc",
        ":extras",
    ],
    visibility = ["//visibility:public"],
)

# iusql - Interactive Unicode SQL tool
cc_binary(
    name = "iusql",
    srcs = ["exe/iusql.c"] + glob(["include/*.h", "exe/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [
        ":odbc",
        ":odbcinst",
        ":ini",
    ],
    visibility = ["//visibility:public"],
)

# dltest - Dynamic loader test utility
cc_binary(
    name = "dltest",
    srcs = ["exe/dltest.c"] + glob(["include/*.h"]) + [":config_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [":libltdl"],
    visibility = ["//visibility:public"],
)

# slencheck - SQL length checker utility
cc_binary(
    name = "slencheck",
    srcs = ["exe/slencheck.c"] + glob(["include/*.h"]) + [":config_h", ":unixodbc_conf_h"],
    copts = COMMON_COPTS,
    includes = [".", "include"],
    deps = [":odbc"],
    visibility = ["//visibility:public"],
)

# ============================================================================
# Shared Libraries (*.so files)
# ============================================================================

# libltdl.so - Dynamic loader library (--enable-ltdl-install)
cc_shared_library(
    name = "libltdl_so",
    shared_lib_name = "libltdl.so.%s" % SOVERSION,
    deps = [":libltdl"],
    visibility = ["//visibility:public"],
)

# libodbcinst.so - ODBC Installer/Configuration library
cc_shared_library(
    name = "libodbcinst_so",
    shared_lib_name = "libodbcinst.so.%s" % SOVERSION,
    deps = [":odbcinst"],
    visibility = ["//visibility:public"],
)

# libodbc.so - Main ODBC Driver Manager library
cc_shared_library(
    name = "libodbc_so",
    shared_lib_name = "libodbc.so.%s" % SOVERSION,
    deps = [":odbc"],
    visibility = ["//visibility:public"],
)

# libodbccr.so - Cursor library
cc_shared_library(
    name = "libodbccr_so",
    shared_lib_name = "libodbccr.so.%s" % SOVERSION,
    deps = [":odbccr"],
    visibility = ["//visibility:public"],
)

# ============================================================================
# Packaging - Library files
# ============================================================================

# Symlinks for libltdl
pkg_mklink(
    name = "libltdl_so_link",
    link_name = "lib/libltdl.so",
    target = "libltdl.so.%s" % SOVERSION,
)

# Symlinks for libodbcinst
pkg_mklink(
    name = "libodbcinst_so_link",
    link_name = "lib/libodbcinst.so",
    target = "libodbcinst.so.%s" % SOVERSION,
)

# Symlinks for libodbc
pkg_mklink(
    name = "libodbc_so_link",
    link_name = "lib/libodbc.so",
    target = "libodbc.so.%s" % SOVERSION,
)

# Symlinks for libodbccr
pkg_mklink(
    name = "libodbccr_so_link",
    link_name = "lib/libodbccr.so",
    target = "libodbccr.so.%s" % SOVERSION,
)

pkg_files(
    name = "lib_files",
    srcs = [
        ":libltdl_so",
        ":libodbcinst_so",
        ":libodbc_so",
        ":libodbccr_so",
    ],
    prefix = "lib",
)

pkg_files(
    name = "bin_files",
    srcs = [
        ":odbcinst_bin",
        ":odbc_config",
        ":isql",
        ":iusql",
        ":dltest",
        ":slencheck",
    ],
    prefix = "bin",
    # Rename odbcinst_bin to odbcinst in the package
    renames = {
        ":odbcinst_bin": "odbcinst",
    },
)

# ============================================================================
# Packaging - Header files
# ============================================================================

pkg_files(
    name = "unixodbc_hdr_files",
    srcs = _UNIXODBC_PUBLIC_HEADERS,
    prefix = "include",
)

pkg_files(
    name = "libltdl_hdr_files",
    srcs = _LIBLTDL_PUBLIC_HEADERS,
    prefix = "include",
)

# ============================================================================
# Installation target
# ============================================================================

pkg_install(
    name = "install",
    srcs = [
        ":lib_files",
        ":libltdl_so_link",
        ":libodbcinst_so_link",
        ":libodbc_so_link",
        ":libodbccr_so_link",
        ":bin_files",
        ":unixodbc_hdr_files",
        ":libltdl_hdr_files",
    ],
)
