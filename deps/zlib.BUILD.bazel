# Adapted from https://github.com/protocolbuffers/protobuf/blob/master/third_party/zlib.BUILD

#  Copyright 2008 Google Inc.  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above
#  copyright notice, this list of conditions and the following disclaimer
#  in the documentation and/or other materials provided with the
#  distribution.
#      * Neither the name of Google Inc. nor the names of its
#  contributors may be used to endorse or promote products derived from
#  this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  Code generated by the Protocol Buffer compiler is owned by the owner
#  of the input file used when generating it.  This code is not
#  standalone and requires a support library to be linked with it.  This
#  support library is itself covered by the above license.

"""Agent specific BUILD file for zlib."""

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_shared_library.bzl", "cc_shared_library")
load("@rules_license//rules:license.bzl", "license")
load("@rules_pkg//pkg:install.bzl", "pkg_install")
load("@rules_pkg//pkg:mappings.bzl", "pkg_files")

package(
    default_applicable_licenses = [":license"],
    default_visibility = ["//visibility:private"],
)

license(
    name = "license",
    license_kinds = ["@rules_license//licenses/spdx:Zlib"],
    license_text = "LICENSE",
    visibility = ["//visibility:public"],
)

exports_files([
    "LICENSE",
])

_ZLIB_PUBLIC_HEADERS = [
    "zconf.h",
    "zlib.h",
]

config_setting(
    name = "mingw_gcc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "mingw-gcc",
    },
    visibility = [":__subpackages__"],
)

cc_library(
    name = "zlib",
    srcs = [
        "adler32.c",
        "compress.c",
        "crc32.c",
        "crc32.h",
        "deflate.c",
        "deflate.h",
        "gzclose.c",
        "gzguts.h",
        "gzlib.c",
        "gzread.c",
        "gzwrite.c",
        "infback.c",
        "inffast.c",
        "inffast.h",
        "inffixed.h",
        "inflate.c",
        "inflate.h",
        "inftrees.c",
        "inftrees.h",
        "trees.c",
        "trees.h",
        "uncompr.c",
        "zutil.c",
        "zutil.h",
    ],
    hdrs = _ZLIB_PUBLIC_HEADERS,
    copts = [
        "-I.",
        "-Wall",
    ] + select({
        ":mingw_gcc_compiler": [
            "-fpermissive",
        ],
        "@platforms//os:windows": [
            "/O2",
            "/wd4127",  # conditional expression is constant
            "/wd4242",  # possible loss of data
            "/wd4244",  # possible loss of data
            "/wd4711",  # it inlined a function
            "/wd5045",  # padding bytes inserted
        ],
        "@platforms//os:macos": [
            "-fPIC",
            "-O3",
            "-Wno-deprecated-non-prototype",
            "-Wno-unused-variable",
            "-Wno-implicit-function-declaration",
        ],
        # TODO: solaris: " -DNO_VIZ",
        "//conditions:default": [
            "-fPIC",
            "-O3",
            "-Wno-deprecated-non-prototype",
            "-Wno-unused-variable",
            "-Wno-implicit-function-declaration",
        ],
    }),
    includes = ["zlib/include"],
    local_defines = select({
        "@platforms//os:windows": ["_CRT_NONSTDC_NO_WARNINGS"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

cc_shared_library(
    name = "libz_so",
    shared_lib_name = "libz.so",
    win_def_file = "win32/zlib.def",
    deps = [":zlib"],
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "lib_files",
    srcs = [":libz_so"],
    prefix = "lib",
)

pkg_files(
    name = "hdr_files",
    srcs = _ZLIB_PUBLIC_HEADERS,
    prefix = "include",
)

pkg_install(
    name = "install",
    srcs = [
        ":hdr_files",
        ":lib_files",
    ],
)

# buildifier: disable=no-effect
"""
TODO: Syntheizes license file up to licenses.csv
TODO: patch source: "zlib-windows-relocate.patch", env: env

build do
  license "Zlib"
  license_file "https://gist.githubusercontent.com/remh/77877aa00b45c1ebc152/raw/372a65de9f4c4ed376771b8d2d0943da83064726/zlib.license"

  if windows?
    env = with_standard_compiler_flags(with_embedded_path, bfd_flags: true)

    patch <<THIS
 IMAGE_BASE = 0x63300000
 LDFLAGS = $(LOC)

@@ -93,7 +95,7 @@
 $(SHAREDLIB): win32/zlib.def $(OBJS) $(OBJA) zlibrc.o
-       $(CC) -shared -Wl,--out-implib,$(IMPLIB) $(LDFLAGS) \
+       $(CC) -shared -Wl,--out-implib,$(IMPLIB),--image-base,$(IMAGE_BASE) $(LDFLAGS) \
        -o $@ win32/zlib.def $(OBJS) $(OBJA) zlibrc.o
THIS

    # We can't use the top-level Makefile. Instead, the developers have made
    # an organic, artisanal, hand-crafted Makefile.gcc for us which takes a few
    # variables.
    env["BINARY_PATH"] = "/bin"
    env["LIBRARY_PATH"] = "/lib"
    env["INCLUDE_PATH"] = "/include"
    env["DESTDIR"] = "#{install_dir}/embedded"

    make_args = [
      "-fwin32/Makefile.gcc",
      "SHARED_MODE=1",
      "CFLAGS=\"#{env["CFLAGS"]} -Wall\"",
      "ASFLAGS=\"#{env["CFLAGS"]} -Wall\"",
      "LDFLAGS=\"#{env["LDFLAGS"]}\"",
      "ARFLAGS=\"rcs #{env["ARFLAGS"]}\"",
      "RCFLAGS=\"--define GCC_WINDRES #{env["RCFLAGS"]}\"",
    ]

    # On windows, msys make 3.81 doesn't support -j.
    make(*make_args, env: env)
    make("install", *make_args, env: env)
  end
"""
