"""Agent specific BUILD file for xz-utils / liblzma."""

load("@@//bazel/rules:so_symlink.bzl", "so_symlink")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_license//rules:license.bzl", "license")
load("@rules_pkg//pkg:install.bzl", "pkg_install")
load("@rules_pkg//pkg:mappings.bzl", "pkg_files")

package(
    default_applicable_licenses = [":license"],
    default_visibility = ["//visibility:private"],
)

alias(
    name = "xz",
    actual = "@xz//:liblzma",
)

VERSION = "5.4.2"

# Warning: starting from 5.5.2, the license switches to BSD-0
license(
    name = "license",
    license_kinds = ["@rules_license//licenses/generic:unencumbered"],
    license_text = "LICENSE",
    visibility = ["//visibility:public"],
)

exports_files([
    "LICENSE",
])

copy_file(
    name = "copy_config",
    src = selects.with_or({
        "@//:linux_arm64": "config.lzma-linux-arm64.h",
        "@//:linux_x86_64": "config.lzma-linux-x86_64.h",
        "@//:macos_arm64": "config.lzma-osx-arm64.h",
        "@//:macos_x86_64": "config.lzma-osx-x86_64.h",
        "@platforms//os:windows": "config.lzma-windows.h",
    }),
    out = "src/liblzma/api/config.h",  # minimize the number of exported include paths
)

_MAIN_HEADER = ["src/liblzma/api/lzma.h"]

_API_HEADERS = glob([
    "src/liblzma/api/lzma/*.h",
])

cc_library(
    name = "liblzma",
    srcs = [
        "src/common/tuklib_cpucores.c",
        "src/common/tuklib_physmem.c",
    ] + glob(
        [
            "src/**/*.h",
            "src/liblzma/**/*.c",
        ],
        exclude = [
            "src/liblzma/check/crc*_small.c",
            "src/liblzma/**/*_tablegen.c",
        ],
    ),
    hdrs = _MAIN_HEADER + _API_HEADERS,
    copts = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["-std=c99", "-O2"],
    }),
    defines = select({
        "@platforms//os:windows": ["LZMA_API_STATIC"],
        "//conditions:default": [],
    }),
    local_defines = [
        "TUKLIB_SYMBOL_PREFIX=lzma_",
    ],
    linkopts = select({
        "@platforms//os:android": [],
        "//conditions:default": ["-lpthread"],
    }),
    linkstatic = select({
        "@platforms//os:windows": True,
        "//conditions:default": False,
    }),
    strip_include_prefix = "src/liblzma/api",  # Allows public header without the path and without COPTS -I or includes = []
    visibility = ["//visibility:public"],
    deps = [
        "//:lzma_src_common",
        "//:lzma_src_liblzma",
        "//:lzma_src_liblzma_api",
        "//:lzma_src_liblzma_check",
        "//:lzma_src_liblzma_common",
        "//:lzma_src_liblzma_delta",
        "//:lzma_src_liblzma_lz",
        "//:lzma_src_liblzma_lzma",
        "//:lzma_src_liblzma_rangecoder",
        "//:lzma_src_liblzma_simpler",
    ],
)

cc_library(
    name = "lzma_src_common",
    srcs = [
        "src/common/tuklib_exit.c",
        "src/common/tuklib_progname.c",
    ],
    hdrs = glob(["src/common/*.h"]),
    defines = ["HAVE_CONFIG_H"] + select({
        "@platforms//os:windows": [
            "LZMA_API_STATIC",
            "TUKLIB_GETTEXT=0",  # Disable libintl for windows
        ],
        "//conditions:default": [],
    }),
    strip_include_prefix = "src/common",
    deps = [
        "//:lzma_src_liblzma_api",
    ],
)

cc_library(
    name = "lzma_src_liblzma",
    strip_include_prefix = "src/liblzma",
)

cc_library(
    name = "lzma_src_liblzma_api",
    hdrs = [
        "src/liblzma/api/config.h",  # Generated above, so missed by glob. In srcs so it's not public like the other headers
    ] + _API_HEADERS,
    strip_include_prefix = "src/liblzma/api",
)

cc_library(
    name = "lzma_src_liblzma_check",
    hdrs = glob(["src/liblzma/check/*.h"]),
    strip_include_prefix = "src/liblzma/check",
)

cc_library(
    name = "lzma_src_liblzma_common",
    hdrs = glob(["src/liblzma/common/*.h"]),
    includes = ["src/liblzma"],  # Needed as well as some usages use common/*.h instead of just the header
    strip_include_prefix = "src/liblzma/common",
)

cc_library(
    name = "lzma_src_liblzma_delta",
    hdrs = glob(["src/liblzma/delta/*.h"]),
    strip_include_prefix = "src/liblzma/delta",
)

cc_library(
    name = "lzma_src_liblzma_lz",
    hdrs = glob(["src/liblzma/lz/*.h"]),
    strip_include_prefix = "src/liblzma/lz",
)

cc_library(
    name = "lzma_src_liblzma_lzma",
    hdrs = glob(["src/liblzma/lzma/*.h"]),
    strip_include_prefix = "src/liblzma/lzma",
)

cc_library(
    name = "lzma_src_liblzma_rangecoder",
    hdrs = glob(["src/liblzma/rangecoder/*.h"]),
    strip_include_prefix = "src/liblzma/rangecoder",
)

cc_library(
    name = "lzma_src_liblzma_simpler",
    hdrs = glob(["src/liblzma/simple/*.h"]),
    strip_include_prefix = "src/liblzma/simple",
)

cc_shared_library(
    name = "lzma",
    deps = [":liblzma"],
    features = select({
        "@platforms//os:macos": ["-macos_default_link_flags"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

so_symlink(
    name = "lib_files",
    src = ":lzma",
    libname = "liblzma",
    version = VERSION,
)

pkg_files(
    name = "main_header",
    srcs = _MAIN_HEADER,
    prefix = "include",
)

pkg_files(
    name = "api_headers",
    srcs = _API_HEADERS,
    prefix = "include/lzma",
)

expand_template(
    name = "gen_pkgconfig",
    template = "@@//deps/xz:liblzma.pc.in",
    out = "liblzma.pc",
    substitutions = {
        "{{VERSION}}": VERSION,
    },
)

pkg_files(
    name = "pkgconfig",
    srcs = [":gen_pkgconfig"],
    prefix = "lib/pkgconfig",
)

pkg_install(
    name = "install",
    srcs = [
        ":main_header",
        ":api_headers",
        ":lib_files",
        ":pkgconfig",
    ],
)
