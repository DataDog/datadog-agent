load("@@//bazel/rules:preprocessor.bzl", "c_preprocessor")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

package(default_visibility = ["//visibility:private"])

genrule(
    name = "codes_to_errno_h",
    srcs = ["src/mkerrnos.awk", "src/errnos.in"],
    tools = ["@gawk"],
    cmd = "$(location @gawk) -f $(location src/mkerrnos.awk) $(location src/errnos.in) > $@",
    outs = ["code-to-errnos.h"]
)

genrule(
    name = "_mkerrcodes_h",
    srcs = ["src/mkerrcodes1.awk", "src/errnos.in"],
    tools = ["@gawk"],
    cmd = "$(location @gawk) -f $(location src/mkerrcodes1.awk) $(location src/errnos.in) > $@",
    outs = ["_mkerrcodes.h"]
)

c_preprocessor(
    name = "mkerrcodes_tmp_h",
    input = ":_mkerrcodes_h",
    output = "_mkerrcodes.tmp.h",
)

genrule(
    name = "mkerrcodes_h",
    srcs = ["src/mkerrcodes.awk", ":mkerrcodes_tmp_h"],
    tools = ["@gawk"],
    cmd = "grep GPG_ERR_ $(location :mkerrcodes_tmp_h) | gawk -f $(location src/mkerrcodes.awk) > $@",
    outs = ["mkerrcodes.h"]
)

cc_binary(
    name = "mkerrcodes",
    srcs = ["src/mkerrcodes.c", ":mkerrcodes_h"],
)

genrule(
    name = "codefromerrno_h",
    srcs = ["src/mkerrcodes2.awk"],
    outs = ["codes-from-errno.h"],
    tools = [
        ":mkerrcodes",
        "@gawk",
    ],
    cmd = "$(location mkerrcodes) | $(location @gawk) -f $(location src/mkerrcodes2.awk) > $@",
)

genrule(
    name = "err_sources_sym_h",
    srcs = [
        "src/mkstrtable.awk",
        "src/err-sources.h.in",
    ],
    outs = ["err-sources-sym.h"],
    tools = ["@gawk"],
    cmd = "$(location @gawk) -f $(location src/mkstrtable.awk) -v textidx=2 -v nogettext=1 $(location src/err-sources.h.in) > $@",
)

genrule(
    name = "err_codes_sym_h",
    srcs = [
        "src/mkstrtable.awk",
        "src/err-codes.h.in",
    ],
    outs = ["err-codes-sym.h"],
    tools = ["@gawk"],
    cmd = "$(location @gawk) -f $(location src/mkstrtable.awk) -v textidx=2 -v nogettext=1 $(location src/err-codes.h.in) > $@",
)

genrule(
    name = "errnos_sym_h",
    srcs = [
        "src/mkstrtable.awk",
        "src/errnos.in",
    ],
    outs = ["errnos-sym.h"],
    tools = ["@gawk"],
    cmd = "$(location @gawk) -f $(location src/mkstrtable.awk) -v textidx=2 -v nogettext=1 -v prefix=GPG_ERR_ -v pkg_namespace=errnos_ $(location src/errnos.in) > $@",
)

copy_file(
    name = "copy_config_h",
    src = select({
        "@//:linux_x86_64": "config-linux-x86_64.h",
        "@//:linux_arm64": "config-linux-aarch64.h",
    }),
    out = "src/config.h",
)

cc_binary(
    name = "mkheader",
    srcs = ["src/mkheader.c"],
)

cc_binary(
    name = "gen-posix-lock-obj",
    srcs = ["src/gen-posix-lock-obj.c", "src/posix-lock-obj.h", "src/config.h"],
    local_defines = ["HAVE_CONFIG_H"],
    includes = ["src"],
)

genrule(
    name = "lock-obj-pub_native_h",
    outs = ["lock-obj-pub.native.h"],
    tools = [":gen-posix-lock-obj"],
    cmd = "$(location :gen-posix-lock-obj) > $@",
)

# parametes are:
# - triplet (see mkheader.c for the list of valid values)
# - path to gpg-error.h.in template
# - path to config.h
# - the version in usual (ie. major.minor) format
# - the version as hexadecimal number (0x{major}{minor}00)
mkheader_cmds = [
    "cp $(location :lock-obj-pub_native_h) $$(pwd) && $(location :mkheader) {} $(location src/gpg-error.h.in) $(location src/config.h) 1.47 0x012F00 > $@".format(arch)
for arch in ["x86_64-unknown-linux-gnu", "arm-unknown-linux-gnueabi"] ]

# The mkheader tool will use the folder containing gpg-error.h.in as the source
# folder contanining all the other includes, so we need to gather all generated
# sources in the same folder, otherwise mkheader will fail to perform its inclusions
#
# config.h is given through the command line so this requirement doesn't apply

# copy_file(
#     name = "copy_lock_obj",
#     src = ":lock-obj-pub-native_h",
#     out = "src/lock-obj-pub.native.h",
# )

# [
# copy_file(
#     name = "copy_" + src_file,
#     src = src_file,
#     out = "src/" + src_file,
# ) for src_file in mkheader_srcs
# ]

genrule(
    name = "gpg-error_h",
    srcs = [
        "src/config.h",
        "src/err-codes.h.in",
        "src/err-sources.h.in",
        "src/errnos.in",
        "src/gpg-error.h.in",
        ":lock-obj-pub_native_h",
    ],
    tools = [":mkheader"],
    outs = ["src/gpg-error.h"],
    cmd = select({
        "@//:linux_x86_64": mkheader_cmds[0],
        "@//:linux_arm64": mkheader_cmds[1],
    })
)
