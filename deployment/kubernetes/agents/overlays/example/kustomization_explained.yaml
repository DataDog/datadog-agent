# ----------------------------------------------------
# apiVersion and kind of Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# Adds namespace to all resources.
# namespace: my-namespace

# Labels to add to all resources and selectors.
# commonLabels:
#   someName: someValue

# Annotations (non-identifying metadata)
# to add to all resources.  Like labels,
# these are key value pairs.
# commonAnnotations:
#   someName: someValue


# Each entry in this list should resolve to a directory
# containing a kustomization file, else the
# customization fails.
#
# The entry could be a relative path pointing to a local directory
# or a url pointing to a directory in a remote repo.
# The url should follow hashicorp/go-getter URL format
# https://github.com/hashicorp/go-getter#url-format
#
# The presence of this field means this file (the file
# you a reading) is an _overlay_ that further
# customizes information coming from these _bases_.
#
# Typical use case: a dev, staging and production
# environment that are mostly identical but differing
# crucial ways (image tags, a few server arguments,
# etc. that differ from the common base).
bases:
- ../../base


# Each entry in this list must resolve to an existing
# resource definition in YAML.  These are the resource
# files that kustomize reads, modifies and emits as a
# YAML string, with resources separated by document
# markers ("---").
# resources:
# - some-service.yaml
# - sub-dir/some-deployment.yaml


# Each entry in this list results in the creation of
# one ConfigMap resource (it's a generator of n maps).
# The example below creates two ConfigMaps. One with the
# names and contents of the given files, the other with
# key/value as data.
# Each configMapGenerator item accepts a parameter of
# behavior: [create|replace|merge]. This allows an overlay to modify or
# replace an existing configMap from the parent.
configMapGenerator:
- name: sts-agent-config
  behavior: merge
  literals:
     - STS_API_KEY=SOMEOTHER
     - STS_STS_URL=http://localhost/stsAgent
- name: sts-clusteragent-config
  behavior: merge
  literals:
     - STS_API_KEY=SOMEOTHER2
     - STS_STS_URL=http://localhost/stsAgent
     - STS_CLUSTER_NAME=custom_cluster_name
# - name: sts-agent-config
#   env: config.env

# config.env
# STS_API_KEY=SOMEOTHER2


# Each entry in this list results in the creation of
# one Secret resource (it's a generator of n secrets).
secretGenerator:
- name: stackstate-auth-token
  # env is a path to a file to read lines of key=val
  # you can only specify one env file per secret.
  behavior: merge
  env: env.txt
  type: Opaque


# generatorOptions modify behavior of all ConfigMap and Secret generators
generatorOptions:
  # labels to add to all generated resources
#   labels:
#     kustomize.generated.resources: somevalue
  # annotations to add to all generated resources
#   annotations:
#     kustomize.generated.resource: somevalue
  # disableNameSuffixHash is true disables the default behavior of adding a
  # suffix to the names of generated resources that is a hash of
  # the resource contents.
  disableNameSuffixHash: true



# Vars are used to capture text from one resource's field
# and insert that text elsewhere.
#
# For example, suppose someone specifies the name of a k8s Service
# object in a container's command line, and the name of a
# k8s Secret object in a container's environment variable,
# so that the following would work:
#
#   containers:
#     - image: myimage
#       command: ["start", "--host", "$(MY_SERVICE_NAME)"]
#       env:
#         - name: SECRET_TOKEN
#           value: $(SOME_SECRET_NAME)
#
#
# To do so, add an entry to `vars:` as follows:
#
# vars:
#   - name: SOME_SECRET_NAME
#     objref:
#       kind: Secret
#       name: my-secret
#       apiVersion: v1
#   - name: MY_SERVICE_NAME
#     objref:
#       kind: Service
#       name: my-service
#       apiVersion: v1
#     fieldref:
#       fieldpath: metadata.name
#   - name: ANOTHER_DEPLOYMENTS_POD_RESTART_POLICY
#     objref:
#       kind: Deployment
#       name: my-deployment
#       apiVersion: apps/v1
#     fieldref:
#       fieldpath: spec.template.spec.restartPolicy
#
# A var is a tuple of variable name, object reference and field
# reference within that object.  That's where the text is found.
#
# The field reference is optional; it defaults to `metadata.name`,
# a normal default, since kustomize is used to generate or
# modify the names of resources.
#
# At time of writing, only string type fields are supported.
# No ints, bools, arrays etc.  It's not possible to, say,
# extract the name of the image in container number 2 of
# some pod template.
#
# A variable reference, i.e. the string '$(FOO)', can only
# be placed in particular fields of particular objects as
# specified by kustomize's configuration data.
#
# The default config data for vars is at
# https://github.com/kubernetes-sigs/kustomize/blob/master/pkg/transformers/config/defaultconfig/varreference.go
# Long story short, the default targets are all
# container command args and env value fields.
#
# Vars should _not_ be used for inserting names in places
# where kustomize is already handling that job.  E.g.,
# a Deployment may reference a ConfigMap by name, and
# if kustomize changes the name of a ConfigMap, it knows
# to change the name reference in the Deployment.
