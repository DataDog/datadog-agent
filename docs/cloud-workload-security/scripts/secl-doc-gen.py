import argparse
import json
from dataclasses import dataclass
from typing import List

import common


@dataclass
class EventTypeProperty:
    name: str
    datatype: str
    definition: str


@dataclass
class EventType:
    name: str
    kind: str
    definition: str
    min_agent_version: str
    experimental: bool
    properties: List[EventTypeProperty]


def build_event_types(json_top_node):
    event_types = []
    for et in json_top_node["secl"]:
        event_type = EventType(
            et["name"], et["type"], et["definition"], et["from_agent_version"], et["experimental"], []
        )
        for p in et["properties"]:
            prop = EventTypeProperty(p["name"], p["type"], p["definition"])
            event_type.properties.append(prop)
        event_types.append(event_type)
    return event_types


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate SECL documentation")
    parser.add_argument("--input", type=str, help="input json file generated by the accessors generator")
    parser.add_argument("--output", type=str, help="output file")
    parser.add_argument("--template", type=str, default="agent_expressions.md", help="template used for the generation")
    args = parser.parse_args()

    secl_json_file = open(args.input)
    json_top_node = json.load(secl_json_file)
    secl_json_file.close()

    event_types = build_event_types(json_top_node)

    output_file = open(args.output, "w")
    print(common.fill_template(args.template, event_types=event_types), file=output_file)
    output_file.close()
