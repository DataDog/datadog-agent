import argparse
import json
import sys
import os


class MarkdownTable:
    def __init__(self, n_cols):
        self.n_cols = n_cols
        self.sizes = [0] * self.n_cols
        self.lines = []

    def append_line(self, elements):
        if len(elements) != self.n_cols:
            raise "Wrong column count when appending a column"

        str_elements = []
        for col, elem in enumerate(elements):
            selem = str(elem)
            str_elements.append(selem)
            self.sizes[col] = max(self.sizes[col], len(selem))
        self.lines.append(str_elements)

    def append_end_of_header(self):
        self.append_line(["---"] * self.n_cols)

    def display(self, file):
        for line in self.lines:
            elements = [elem.ljust(w) for w, elem in zip(self.sizes, line)]
            print("|", " | ".join(elements), "|", file=file)


class Translator:
    def __init__(self, translation_path):
        if translation_path:
            translation_file = open(translation_path)
            self.keys = json.load(translation_file)
            translation_file.close()

    def get_or_default(self, key, default):
        return self.keys.get(key, default)


def build_event_type_line(event_type, translator):
    name = event_type["name"]
    return [
        name,
        event_type["type"],
        translator.get_or_default(f"{name}_definition", event_type["definition"]),
        event_type["from_agent_version"],
    ]


def build_event_type_property_line(prop, translator, prefix=""):
    name = prop["name"]
    normalized_name = name.replace(".", "_")
    prefixed_name = prefix + name
    return [prefixed_name, prop["type"], translator.get_or_default(f"{normalized_name}_definition", prop["definition"])]


def event_types_list(event_types, translator, file):
    print(f"### Event types\n", file=file)

    table = MarkdownTable(4)
    table.append_line(["SECL Event", "Type", "Definition", "Agent Version"])
    table.append_end_of_header()

    for event_type in event_types:
        table.append_line(build_event_type_line(event_type, translator))

    table.display(file=file)


def event_type_properties_list(event_type, translator, file):
    event_type_name = event_type["name"]
    if event_type_name == "*":
        prefix = "*."
        print("### Common to all event types\n", file=file)
    else:
        prefix = ""
        print(f"### Event `{event_type_name}`\n", file=file)

    table = MarkdownTable(3)
    table.append_line(["Property", "Type", "Definition"])
    table.append_end_of_header()

    for prop in event_type["properties"]:
        table.append_line(build_event_type_property_line(prop, translator, prefix=prefix))

    table.display(file=file)


def output_doc(event_types, translator, file=sys.stdout):
    print("# SECL Documentation\n", file=file)
    event_types_list(event_types, translator, file=file)
    print("\n", file=file)

    for event_type in event_types:
        event_type_properties_list(event_type, translator, file=file)
        print("\n", file=file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate SECL documentation")
    parser.add_argument("--input", type=str, help="input json file generated by the accessors generator")
    parser.add_argument("--output", type=str, help="output file")
    parser.add_argument("--translation", type=str, help="translation file path")
    args = parser.parse_args()

    translator = Translator(args.translation)

    secl_json_file = open(args.input)
    secl_doc = json.load(secl_json_file)
    secl_json_file.close()

    output_file = open(args.output, "w")
    event_types = secl_doc["secl"]
    output_doc(event_types, translator, file=output_file)
    output_file.close()
