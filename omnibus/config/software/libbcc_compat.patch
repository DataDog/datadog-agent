Patch to libbcc to remove references to glibc symbols with a too recent version.

Whereas the current build of libbcc works well as long as the runtime target
is the same as the compilation target, things are not that simple with the CI.

In the CI, the agents are built on old Ubuntu and old CentOS to guarantee that
the resulting binaries will work on old distributions. libbcc cannot be built
on those old environments.
So, libbcc is built on a more recent environment.
Then, omnibus packages the agents, system-probe and libbcc altogether and
checks that all symbols can be resolved in libraries that are part of the
package (in `/opt/datadog-agent/embedded/lib`).

Except for the glibc which is not packaged with the rest. We expect to use
the glibc shipped with the system.

We are currently facing compatibility issues with old distributions.

Here is the error we get on CentOS 7 when trying to start system-probe:
```
[root@qa-linux-agent6-unstable-centos7-node-01 datadog]# /opt/datadog-agent/embedded/bin/system-probe --config=/etc/datadog-agent/system-probe.yaml --pid=/opt/datadog-agent/run/system-probe.pid
/opt/datadog-agent/embedded/bin/system-probe: /lib64/libm.so.6: version `GLIBC_2.29' not found (required by /opt/datadog-agent/embedded/lib/libbcc.so.0)
/opt/datadog-agent/embedded/bin/system-probe: /lib64/libc.so.6: version `GLIBC_2.26' not found (required by /opt/datadog-agent/embedded/lib/libbcc.so.0)

[root@qa-linux-agent6-unstable-centos7-node-01 datadog]# datadog-agent version
Agent 6.21.0-devel - Meta: git.107.a66e1ee - Commit: a66e1ee - Serialization version: 4.34.0 - Go version: go1.13.8
```

Here is the error we get on Ubuntu 18.04:
```
root@qa-linux-agent6-longrun-ubuntu1804-node-01:/home/datadog# /opt/datadog-agent/embedded/bin/system-probe --config=/etc/datadog-agent/system-probe.yaml --pid=/opt/datadog-agent/run/system-probe.pid/opt/datadog-agent/embedded/bin/system-probe --config=/etc/datadog-agent/system-probe.yaml --pid=/opt/datadog-agent/run/system-probe.pid
/opt/datadog-agent/embedded/bin/system-probe: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /opt/datadog-agent/embedded/lib/libbcc.so.0)

root@qa-linux-agent6-longrun-ubuntu1804-node-01:/home/datadog# datadog-agent version
Agent 6.21.0-devel - Meta: git.108.910af82 - Commit: 910af82 - Serialization version: 4.34.0 - Go version: go1.13.8
```

The reference to `GLIBC_2.29` comes from the mathematical functions `exp`,
`log`, `pow`, `exp2` and `log2`.
Fortunately, the glibc also provides older versions of those function.
So, the fix consists in using the `GLIBC_2.2.5` version of those symbols
instead of the `GLIBC_2.29` version one.
However, those functions are not used directly by libbcc itself but by the
LLVM object files that are embedded by it.
That’s why it was not possible to patch libbcc directly to make it use the
other version of those symbols.
Instead, I’m using wrapper functions.

diff --git a/src/cc/CMakeLists.txt b/src/cc/CMakeLists.txt
index 931de2d9..1cd1212f 100644
--- a/src/cc/CMakeLists.txt
+++ b/src/cc/CMakeLists.txt
@@ -90,7 +92,7 @@ endif()
 if(ENABLE_CLANG_JIT)
 add_library(bcc-shared SHARED
   link_all.cc ${bcc_common_sources} ${bcc_table_sources} ${bcc_sym_sources}
-  ${bcc_util_sources})
+  ${bcc_util_sources} wrapper.c)
 set_target_properties(bcc-shared PROPERTIES VERSION ${REVISION_LAST} SOVERSION 0)
 set_target_properties(bcc-shared PROPERTIES OUTPUT_NAME bcc)
 
@@ -148,7 +150,7 @@ endif()
 add_subdirectory(frontends)
 
 # Link against LLVM libraries
-target_link_libraries(bcc-shared ${bcc_common_libs_for_s})
+target_link_libraries(bcc-shared ${bcc_common_libs_for_s} -Wl,--wrap=exp -Wl,--wrap=log -Wl,--wrap=pow -Wl,--wrap=exp2 -Wl,--wrap=log2 -Wl,--wrap=log2f -Wl,--wrap=fmemopen)
 target_link_libraries(bcc-static ${bcc_common_libs_for_a} bcc-loader-static)
 set(bcc-lua-static ${bcc-lua-static} ${bcc_common_libs_for_lua})
 
diff --git a/src/cc/wrapper.c b/src/cc/wrapper.c
new file mode 100644
index 0000000..c01fbe2
--- /dev/null
+++ b/src/cc/wrapper.c
@@ -0,0 +1,54 @@
+#ifdef __x86_64__
+#define GLIBC_VERS "GLIBC_2.2.5"
+#elif defined(__aarch64__)
+#define GLIBC_VERS "GLIBC_2.17"
+#else
+#error Unknown architecture
+#endif
+
+#include <stddef.h>
+#include <stdio.h>
+
+#define define_wrapper1_for(func)                               \
+double __ ## func ## _prior_glibc(double x);                    \
+                                                                \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);  \
+                                                                \
+double __wrap_ ## func (double x) {                             \
+  return __ ## func ## _prior_glibc(x);                         \
+}
+
+#define define_wrapper2_for(func)                               \
+double __ ## func ## _prior_glibc(double x, double y);          \
+                                                                \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);  \
+                                                                \
+double __wrap_ ## func (double x, double y) {                   \
+  return __ ## func ## _prior_glibc(x, y);                      \
+}
+
+#define define_wrapper3_for(func)                               \
+double __ ## func ## _prior_glibc(float x);                     \
+                                                                \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);  \
+                                                                \
+double __wrap_ ## func (float x) {                              \
+  return __ ## func ## _prior_glibc(x);                         \
+}
+
+#define define_fmemopen_wrapper_for(func)                                      \
+FILE *__ ## func ## _prior_glibc(void *buf, size_t size, const char *mode);    \
+                                                                               \
+asm(".symver __" #func "_prior_glibc, " #func "@" GLIBC_VERS);                 \
+                                                                               \
+FILE *__wrap_## func (void *buf, size_t size, const char *mode) {           \
+ return __ ## func ## _prior_glibc(buf, size, mode);                           \
+}                                                                              \
+
+define_wrapper1_for(exp)
+define_wrapper1_for(log)
+define_wrapper2_for(pow)
+define_wrapper1_for(exp2)
+define_wrapper1_for(log2)
+define_wrapper3_for(log2f)
+define_fmemopen_wrapper_for(fmemopen)
