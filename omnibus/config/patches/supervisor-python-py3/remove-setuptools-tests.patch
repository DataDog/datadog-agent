diff --git a/supervisor/tests/test_end_to_end.py b/supervisor/tests/test_end_to_end.py
index 763da48..c313d6e 100644
--- a/supervisor/tests/test_end_to_end.py
+++ b/supervisor/tests/test_end_to_end.py
@@ -1,14 +1,20 @@
 # ~*~ coding: utf-8 ~*~
+# Modified for datadog-agent build with changes from PR
+# https://github.com/Supervisor/supervisor/pull/1578
+# submitted on 2023-03-02
 from __future__ import unicode_literals
 
 import os
 import signal
 import sys
 import unittest
-import pkg_resources
 from supervisor.compat import xmlrpclib
 from supervisor.xmlrpc import SupervisorTransport
 
+if sys.version_info >= (3, 9):
+    from importlib.resources import files as resource_files
+else:
+    from importlib_resources import files as resource_files
 
 # end-to-test tests are slow so only run them when asked
 if 'END_TO_END' in os.environ:
@@ -26,7 +32,7 @@ class EndToEndTests(BaseTestCase):
         passed to the child without the percent sign being mangled."""
         key = "SUPERVISOR_TEST_1441B"
         val = "foo_%s_%_%%_%%%_%2_bar"
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-291a.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-291a.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         try:
             os.environ[key] = val
@@ -39,7 +45,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_550(self):
         """When an environment variable is set in the [supervisord] section,
         it should be put into the environment of the subprocess."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-550.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-550.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -55,7 +61,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_565(self):
         """When a log file has Unicode characters in it, 'supervisorctl
         tail -f name' should still work."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-565.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-565.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -72,7 +78,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_638(self):
         """When a process outputs something on its stdout or stderr file
         descriptor that is not valid UTF-8, supervisord should not crash."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-638.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-638.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -91,7 +97,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_663(self):
         """When Supervisor is run on Python 3, the eventlistener protocol
         should work."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-663.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-663.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -103,7 +109,7 @@ class EndToEndTests(BaseTestCase):
         """When a subprocess name has Unicode characters, 'supervisord'
         should not send incomplete XML-RPC responses and 'supervisorctl
         status' should work."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-664.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-664.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -122,7 +128,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_733(self):
         """When a subprocess enters the FATAL state, a one-line eventlistener
         can be used to signal supervisord to shut down."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-733.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-733.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -131,7 +137,7 @@ class EndToEndTests(BaseTestCase):
         supervisord.expect(pexpect.EOF)
 
     def test_issue_835(self):
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-835.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-835.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -147,7 +153,7 @@ class EndToEndTests(BaseTestCase):
             transport.connection.close()
 
     def test_issue_836(self):
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-836.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-836.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -170,7 +176,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_986_command_string_with_double_percent(self):
         """A percent sign can be used in a command= string without being
         expanded if it is escaped by a second percent sign."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-986.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-986.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -179,7 +185,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1054(self):
         """When run on Python 3, the 'supervisorctl avail' command
         should work."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1054.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1054.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -197,7 +203,7 @@ class EndToEndTests(BaseTestCase):
         """When the [supervisord] section has a variable defined in
         environment=, that variable should be able to be used in an
         %(ENV_x) expansion in a [program] section."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1170a.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1170a.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -208,7 +214,7 @@ class EndToEndTests(BaseTestCase):
         environment=, and a variable by the same name is defined in
         enviroment= of a [program] section, the one in the [program]
         section should be used."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1170b.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1170b.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -219,7 +225,7 @@ class EndToEndTests(BaseTestCase):
         environment=, and a variable by the same name is defined in
         enviroment= of an [eventlistener] section, the one in the
         [eventlistener] section should be used."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1170c.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1170c.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -230,7 +236,7 @@ class EndToEndTests(BaseTestCase):
         then the non-rotating logger will be used to avoid an
         IllegalSeekError in the case that the user has configured a
         non-seekable file like /dev/stdout."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1224.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1224.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -239,7 +245,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1231a(self):
         """When 'supervisorctl tail -f name' is run and the log contains
         unicode, it should not fail."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231a.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1231a.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -256,7 +262,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1231b(self):
         """When 'supervisorctl tail -f name' is run and the log contains
         unicode, it should not fail."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231b.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1231b.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -290,7 +296,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1231c(self):
         """When 'supervisorctl tail -f name' is run and the log contains
         unicode, it should not fail."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1231c.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1231c.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -332,7 +338,7 @@ class EndToEndTests(BaseTestCase):
         """When the output of 'supervisorctl tail -f worker' is piped such as
         'supervisor tail -f worker | grep something', 'supervisorctl' should
         not crash."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1298.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1298.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -366,7 +372,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1483a_identifier_default(self):
         """When no identifier is supplied on the command line or in the config
         file, the default is used."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1483a.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1483a.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -385,7 +391,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1483b_identifier_from_config_file(self):
         """When the identifier is supplied in the config file only, that
         identifier is used instead of the default."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1483b.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1483b.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename]
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
@@ -404,7 +410,7 @@ class EndToEndTests(BaseTestCase):
     def test_issue_1483c_identifier_from_command_line(self):
         """When an identifier is supplied in both the config file and on the
         command line, the one from the command line is used."""
-        filename = pkg_resources.resource_filename(__name__, 'fixtures/issue-1483c.conf')
+        filename = str(resource_files(__package__).joinpath('fixtures/issue-1483c.conf'))
         args = ['-m', 'supervisor.supervisord', '-c', filename, '-i', 'from_command_line']
         supervisord = pexpect.spawn(sys.executable, args, encoding='utf-8')
         self.addCleanup(supervisord.kill, signal.SIGINT)
