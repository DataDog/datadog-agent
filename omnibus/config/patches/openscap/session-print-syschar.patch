--- a/src/OVAL/oval_sysModel.c
+++ b/src/OVAL/oval_sysModel.c
@@ -411,3 +411,19 @@ int oval_syschar_model_export(struct oval_syschar_model *model, const char *file
 	return oscap_xml_save_filename_free(file, doc);
 }
 
+int oval_syschar_model_print(struct oval_syschar_model *model)
+{
+
+	__attribute__nonnull__(model);
+
+	LIBXML_TEST_VERSION;
+
+	xmlDocPtr doc = xmlNewDoc(BAD_CAST "1.0");
+	if (doc == NULL) {
+		oscap_setxmlerr(xmlGetLastError());
+		return -1;
+	}
+
+	oval_syschar_model_to_dom(model, doc, NULL, NULL, NULL, true);
+	return oscap_xml_print_free(doc);
+}
--- a/src/OVAL/public/oval_system_characteristics.h
+++ b/src/OVAL/public/oval_system_characteristics.h
@@ -218,6 +218,11 @@ OSCAP_API struct oval_syschar_model *oval_syschar_model_clone(struct oval_syscha
  * @memberof oval_syschar_model
  */
 OSCAP_API int oval_syschar_model_export(struct oval_syschar_model *, const char *file);
+/**
+ * Print system characteristics.
+ * @memberof oval_syschar_model
+ */
+OSCAP_API int oval_syschar_model_print(struct oval_syschar_model *);
 /**
  * Free memory allocated to a specified syschar model.
  * @param model the specified syschar model
--- a/src/XCCDF/public/xccdf_session.h
+++ b/src/XCCDF/public/xccdf_session.h
@@ -530,6 +530,14 @@ OSCAP_API int xccdf_session_export_check_engine_plugins(struct xccdf_session *se
  */
 OSCAP_API int xccdf_session_export_arf(struct xccdf_session *session);
 
+/**
+ * Print system characteristics.
+ * @memberof xccdf_session
+ * @param session XCCDF Session
+ * @returns zero on success
+ */
+OSCAP_API int xccdf_session_print_syschar(struct xccdf_session *session);
+
 /**
  * Get policy_model of the session. The @ref xccdf_session_load_xccdf shall be run
  * before this to parse XCCDF file to the policy_model.
--- a/src/XCCDF/xccdf_session.c
+++ b/src/XCCDF/xccdf_session.c
@@ -1831,6 +1831,39 @@ int xccdf_session_export_arf(struct xccdf_session *session)
 	return 0;
 }
 
+static struct oval_result_system *_xccdf_oval_session_get_first_result_system(struct oval_agent_session *oval_session)
+{
+	struct oval_results_model *rmodel = oval_agent_get_results_model(oval_session);
+	struct oval_result_system_iterator *rsystem_it = oval_results_model_get_systems(rmodel);
+	struct oval_result_system *rsystem = NULL;
+	if (oval_result_system_iterator_has_more(rsystem_it)) {
+		rsystem = oval_result_system_iterator_next(rsystem_it);
+	}
+	oval_result_system_iterator_free(rsystem_it);
+	return rsystem;
+}
+
+static struct oval_result_system *_xccdf_session_get_first_result_system(struct xccdf_session *session)
+{
+	if (session->oval.agents) {
+		for (int i = 0; session->oval.agents[i]; i++) {
+			return _xccdf_oval_session_get_first_result_system(session->oval.agents[i]);
+		}
+	}
+
+	return NULL;
+}
+
+int xccdf_session_print_syschar(struct xccdf_session *session)
+{
+	struct oval_result_system *sys = _xccdf_session_get_first_result_system(session);
+	struct oval_syschar_model *syschar_model = oval_result_system_get_syschar_model(sys);
+	if (syschar_model != NULL)
+		oval_syschar_model_print(syschar_model);
+
+	return 0;
+}
+
 OSCAP_GENERIC_GETTER(struct xccdf_policy_model *, xccdf_session, policy_model, xccdf.policy_model)
 OSCAP_GENERIC_GETTER(float, xccdf_session, base_score, xccdf.base_score);
 
--- a/src/common/elements.c
+++ b/src/common/elements.c
@@ -257,6 +257,40 @@ int oscap_xml_save_filename_free(const char *filename, xmlDocPtr doc)
 	return ret;
 }
 
+int oscap_xml_print(xmlDocPtr doc)
+{
+	xmlOutputBufferPtr buff;
+	int xmlCode;
+
+	int fd = 1;
+	if (fd == -1)
+		return -1;
+
+	buff = xmlOutputBufferCreateFile(stdout, NULL);
+	if (buff == NULL) {
+		close(fd);
+		oscap_setxmlerr(xmlGetLastError());
+		dW("xmlOutputBufferCreateFile() failed.");
+		return -1;
+	}
+
+	xmlCode = xmlSaveFormatFileTo(buff, doc, "UTF-8", 1);
+
+	if (xmlCode <= 0) {
+		oscap_setxmlerr(xmlGetLastError());
+		dW("No bytes exported: xmlCode: %d.", xmlCode);
+	}
+
+	return (xmlCode >= 1) ? 1 : -1;
+}
+
+int oscap_xml_print_free(xmlDocPtr doc)
+{
+	int ret = oscap_xml_print(doc);
+	xmlFreeDoc(doc);
+	return ret;
+}
+
 xmlNs *lookup_xsi_ns(xmlDoc *doc)
 {
 	// Look-up xsi namespace pointer. We can be pretty sure that this namespace
--- a/src/common/elements.h
+++ b/src/common/elements.h
@@ -76,6 +76,20 @@ int oscap_xml_save_filename(const char *filename, xmlDocPtr doc);
  */
 int oscap_xml_save_filename_free(const char *filename, xmlDocPtr doc);
 
+/**
+ * Print XML Document.
+ * @param doc the XML document content
+ * @return 1 on success, -1 on failure (oscap_seterr is set appropriatly).
+ */
+int oscap_xml_print(xmlDocPtr doc);
+
+/**
+ * Print XML Document and dispose the document afterwards.
+ * @param doc the XML document content
+ * @return 1 on success, -1 on failure (oscap_seterr is set appropriatly).
+ */
+int oscap_xml_print_free(xmlDocPtr doc);
+
 xmlNs *lookup_xsi_ns(xmlDoc *doc);
 
 #endif
