#!/bin/sh
##########################################################################
#             DO NOT EDIT THIS SCRIPT DIRECTLY.                          #
#                                                                        #
# The installation logic is handled by the installer in the following    #
# file: pkg/fleet/installer/packages/datadog_agent_linux.go              #
#                                                                        #
##########################################################################

INSTALL_DIR=/opt/datadog-agent

set -e

# Uninstall the agent if it was installed by the installer
if command -v datadog-installer >/dev/null 2>&1 && datadog-installer is-installed datadog-agent; then
    datadog-installer remove datadog-agent || printf "[ WARNING ]\tFailed to remove datadog-agent installed by the installer\n"
fi

# RPM Agents < 5.18.0 expect the preinst script of the _new_ package to stop the agent service on upgrade (which is defined with an init.d script on Agent 5)
# So let's stop the Agent 5 service here until we don't want to support upgrades from Agents < 5.18.0 anymore
if [ -f "/etc/init.d/datadog-agent" ]; then
    /etc/init.d/datadog-agent stop || true
fi

# Old version of the install scripts created a __pycache__ directory in the python-scripts directory
# Remove it to avoid any issues with the new package.
if [ -d "${INSTALL_DIR}/python-scripts/__pycache__" ]; then
    rm -rf "${INSTALL_DIR}/python-scripts/__pycache__" || true
fi

# Run the upgrade prerm if supported in the previous version. See pkg/fleet/installer/packages/datadog_agent_linux.go
if [ "$*" = "2" ] && [ -f "${INSTALL_DIR}/embedded/bin/installer" ] && ${INSTALL_DIR}/embedded/bin/installer is-prerm-supported; then
    ${INSTALL_DIR}/embedded/bin/installer prerm --upgrade datadog-agent rpm || true
    exit 0
fi

##########################################################################
#    LEGACY INSTALLATION LOGIC BELOW WHEN UPGRADING FROM AGENT <7.68     #
#                   DO NOT EDIT THIS SECTION                             #
##########################################################################

SERVICE_NAME=datadog-agent

stop_agent() {
    # Stop an already running agent
    # Only supports systemd and upstart
    if command -v systemctl >/dev/null 2>&1; then
        systemctl stop $SERVICE_NAME-process || true
        systemctl stop $SERVICE_NAME-sysprobe || true
        systemctl stop $SERVICE_NAME-trace || true
        systemctl stop $SERVICE_NAME-security || true
        systemctl stop $SERVICE_NAME || true
    elif command -v initctl >/dev/null 2>&1; then
        initctl stop $SERVICE_NAME-process || true
        initctl stop $SERVICE_NAME-sysprobe || true
        initctl stop $SERVICE_NAME-trace || true
        initctl stop $SERVICE_NAME-security || true
        initctl stop $SERVICE_NAME || true
    else
        echo "[ WARNING ]\tCannot detect a supported init system. The datadog-agent package only provides service files for systemd and upstart."
    fi
}

deregister_agent() {
    # Disable agent start on system boot
    # Only supports systemd and upstart
    if command -v systemctl >/dev/null 2>&1; then
        # Force systemd to ignore the sysvinit scripts. Only cosmetic, remove some irrelevant warnings during upgrade
        SYSTEMCTL_SKIP_SYSV=true systemctl disable $SERVICE_NAME-process || true
        SYSTEMCTL_SKIP_SYSV=true systemctl disable $SERVICE_NAME-sysprobe || true
        SYSTEMCTL_SKIP_SYSV=true systemctl disable $SERVICE_NAME-trace || true
        SYSTEMCTL_SKIP_SYSV=true systemctl disable $SERVICE_NAME-security || true
        SYSTEMCTL_SKIP_SYSV=true systemctl disable $SERVICE_NAME || true
    elif command -v initctl >/dev/null 2>&1; then
        # Nothing to do, this is defined directly in the upstart job file
        :
    else
        echo "[ WARNING ]\tCannot detect a supported init system. The datadog-agent package only provides service files for systemd and upstart."
    fi
}

stop_agent
deregister_agent

# RPM unpacks the new files before running prerm of the old package
# triggering manually the prerm python script of the old package
if [ -f "$INSTALL_DIR/embedded/bin/python" ]; then
    if [ -f "${INSTALL_DIR}/python-scripts/pre.py" ]; then
        PRE_PYTHON_FILE="${INSTALL_DIR}/python-scripts/pre.py"
    elif [ -f "${INSTALL_DIR}/python-scripts/prerm.py" ]; then
        PRE_PYTHON_FILE="${INSTALL_DIR}/python-scripts/prerm.py"
    fi

    if [ -n "$PRE_PYTHON_FILE" ]; then
        # -B prevents writing a cache of the bytecode since this is only run once
        ${INSTALL_DIR}/embedded/bin/python -B "${PRE_PYTHON_FILE}" "${INSTALL_DIR}" || true
    else
        echo "[ WARNING ]\tPRE_PYTHON_FILE is not set"
    fi
fi

# Starting with 6.10, integrations are also uninstalled on package removal

# Since 6.18.0, a file containing all integrations files which have been installed by
# the package is available. We use it to remove only the datadog-related check files which
# have *NOT* been installed by the package (eg: installed using the `integration` command).

if [ -f "$INSTALL_DIR/embedded/.installed_by_pkg.txt" ]; then
    echo "Removing integrations installed with the 'agent integration' command"

    # List all files in the embedded dir of the datadog-agent install dir
    PREV_DIR=$(pwd)
    cd $INSTALL_DIR
    find . -depth -path './embedded/lib/python*/site-packages/datadog_*' >$INSTALL_DIR/embedded/.all-integrations.txt

    # List all files in the embedded dir of the datadog-agent install dir
    # which were not installed by the package and rm them.
    grep -Fxv -f $INSTALL_DIR/embedded/.installed_by_pkg.txt $INSTALL_DIR/embedded/.all-integrations.txt | grep -v '^#' | xargs --no-run-if-empty -I '{}' rm -r $INSTALL_DIR/{}

    rm $INSTALL_DIR/embedded/.all-integrations.txt
    cd "$PREV_DIR"
else
    PIP2_PATH=$INSTALL_DIR/embedded/bin/pip2
    PIP3_PATH=$INSTALL_DIR/embedded/bin/pip3
    if [ -x $PIP2_PATH ]; then
        echo "Uninstalling Python 2 integrations..."
        $PIP2_PATH freeze | grep ^datadog- | grep -v datadog-checks-base | xargs $PIP2_PATH uninstall -y -q --no-cache-dir || true
    fi
    if [ -x $PIP3_PATH ]; then
        echo "Uninstalling Python 3 integrations..."
        $PIP3_PATH freeze | grep ^datadog- | grep -v datadog-checks-base | xargs $PIP3_PATH uninstall -y -q --no-cache-dir || true
    fi
fi

# Delete all the .pyc/.pyo files in the embedded dir that are part of the old agent's package
# This MUST be done after using pip or any python, because executing python might generate .pyc files
if [ -f "$INSTALL_DIR/embedded/.py_compiled_files.txt" ]; then
    # (commented lines are filtered out)
    cat $INSTALL_DIR/embedded/.py_compiled_files.txt | grep -v '^#' | xargs rm -f
fi

exit 0
