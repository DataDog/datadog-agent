#!/bin/sh
#
# Perform necessary datadog-agent setup steps prior to remove the old package.
#
# .deb: STEP 1 of 5

INSTALL_DIR=/opt/datadog-agent
CONFIG_DIR=/etc/datadog-agent

# Run the prerm. See pkg/fleet/installer/packages/datadog_agent_linux.go
case "$1" in
remove)
    ${INSTALL_DIR}/embedded/bin/installer prerm datadog-agent deb
    ;;
upgrade)
    ${INSTALL_DIR}/embedded/bin/installer prerm --upgrade datadog-agent deb
    ;;
*) ;;
esac

remove_py_compiled_files() {
    # Delete all the .pyc files in the embedded dir that are part of the agent's package
    # This MUST be done after using pip or any python, because executing python might generate .pyc files
    if [ -f "$INSTALL_DIR/embedded/.py_compiled_files.txt" ]; then
        # (commented lines are filtered out)
        cat $INSTALL_DIR/embedded/.py_compiled_files.txt | grep -v '^#' | xargs rm -f
    fi
}

remove_custom_integrations() {
    # Since 6.18.0, a file containing all integrations files which have been installed by
    # the package is available. We use it to remove only the datadog-related check files which
    # have *NOT* been installed by the package (eg: installed using the `integration` command).

    if [ -f "$INSTALL_DIR/embedded/.installed_by_pkg.txt" ]; then
        echo "Removing integrations installed with the 'agent integration' command"

        # List all files in the embedded dir of the datadog-agent install dir
        PREV_DIR=$(pwd)
        cd "$INSTALL_DIR" || return
        find . -depth -path './embedded/lib/python*/site-packages/datadog_*' >$INSTALL_DIR/embedded/.all-integrations.txt

        # List all files in the embedded dir of the datadog-agent install dir
        # which were not installed by the package and rm them.
        grep -Fxv -f $INSTALL_DIR/embedded/.installed_by_pkg.txt $INSTALL_DIR/embedded/.all-integrations.txt | grep -v '^#' | xargs --no-run-if-empty -I '{}' rm -r $INSTALL_DIR/{}

        rm $INSTALL_DIR/embedded/.all-integrations.txt
        cd "$PREV_DIR" || return
    fi
}

remove_run_dir() {
    if [ -d "$INSTALL_DIR/run" ]; then
        rm -rf "$INSTALL_DIR/run" || true
    fi
}

remove_persist_integration_files() {
    # Remove any file related to reinstalling non-core integrations (see python-scripts/packages.py for the names)
    if [ -f "$INSTALL_DIR/.pre_python_installed_packages.txt" ]; then
        rm "$INSTALL_DIR/.pre_python_installed_packages.txt" || true
    fi
    if [ -f "$INSTALL_DIR/.post_python_installed_packages.txt" ]; then
        rm "$INSTALL_DIR/.post_python_installed_packages.txt" || true
    fi
    if [ -f "$INSTALL_DIR/.diff_python_installed_packages.txt" ]; then
        rm "$INSTALL_DIR/.diff_python_installed_packages.txt" || true
    fi
}

remove_fips_module() {
    # We explicitly remove the ssl directory because files within this folder are generated via a script
    # outside of package installation (deb package only removes files initially present in the package).
    rm -rf "${INSTALL_DIR}/embedded/ssl/fipsmodule.cnf" || true
}

case "$1" in #this can't be merged with the later case block because running 'remove_custom_integrations' would defeat the persisting integrations feature
upgrade)
    # We're upgrading.
    if [ -f "$INSTALL_DIR/embedded/bin/python" ]; then
        # -B prevents writing a cache of the bytecode since this is only run once
        ${INSTALL_DIR}/embedded/bin/python -B "${INSTALL_DIR}/python-scripts/pre.py" "${INSTALL_DIR}" || true
    fi
    ;;
*) ;;
esac
remove_custom_integrations
remove_py_compiled_files

case "$1" in
remove)
    # We're uninstalling.
    remove_run_dir
    remove_fips_module
    remove_persist_integration_files
    rm "$CONFIG_DIR/install_info" || true
    rm "$CONFIG_DIR/install.json" || true
    rm -f "/usr/bin/datadog-agent"
    ;;
upgrade)
    # We're upgrading.
    ;;
*) ;;
esac

# Delete all .pyc files in the `agent/` and the `bin/agent/dist` dirs
find $INSTALL_DIR/bin/agent/dist -name '*.py[co]' -type f -delete || echo "Unable to delete .pyc files in $INSTALL_DIR/bin/agent/dist"
find $INSTALL_DIR/bin/agent/dist -name '__pycache__' -type d -delete || echo "Unable to delete __pycache__ directories in $INSTALL_DIR/bin/agent/dist"
# Delete all .pyc files in the `python-scripts/` dir
find $INSTALL_DIR/python-scripts -name '*.py[co]' -type f -delete || echo "Unable to delete .pyc files in $INSTALL_DIR/python-scripts"
find $INSTALL_DIR/python-scripts -name '__pycache__' -type d -delete || echo "Unable to delete __pycache__ directories in $INSTALL_DIR/python-scripts"

exit 0
