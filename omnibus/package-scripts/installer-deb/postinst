#!/bin/sh
#
# Perform necessary datadog-updater setup steps after package is installed.
#
# .deb: STEP 5 of 5

readonly PACKAGES_DIR=/opt/datadog-packages
readonly INSTALL_DIR=/opt/datadog-installer
readonly BOOTSTRAP_INSTALLER=${INSTALL_DIR}/bin/installer/installer
readonly STABLE_INSTALLER=${PACKAGES_DIR}/datadog-installer/stable/bin/installer/installer
readonly PACKAGES_LOCK_DIR=/var/run/datadog-packages

bootstrap() {
    $BOOTSTRAP_INSTALLER bootstrap --package "datadog-installer" && \
    $STABLE_INSTALLER bootstrap
}

add_user_and_group() {
    # Only create group and/or user if they don't already exist
    NAME=$1
    HOME_DIR=$2
    getent group "$NAME" >/dev/null || (echo "Creating $NAME group" && addgroup --system "$NAME" --quiet)
    set +e
    id -u "$NAME" >/dev/null 2>&1
    USER_EXISTS=$?
    set -e
    if [ ! $USER_EXISTS -eq 0 ]; then
        echo "Creating $NAME user"
        adduser --system "$NAME" --disabled-login --shell /usr/sbin/nologin --home "$HOME_DIR" --no-create-home --group --quiet
    elif id -nG "$NAME" | grep --invert-match --word-regexp --quiet "$NAME"; then
        # User exists but is not part of the $NAME group
        echo "Adding $NAME user to $NAME group"
        usermod -g "$NAME" "$NAME"
    fi
}

set -e
case "$1" in
    configure)
        add_user_and_group 'dd-installer' $PACKAGES_DIR
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
    ;;
esac

# Set proper rights to the dd-installer user
chown -R dd-installer:dd-installer ${PACKAGES_DIR}
chown -R dd-installer:dd-installer ${PACKAGES_LOCK_DIR}
chown -R dd-installer:dd-installer ${INSTALL_DIR}

# Lock_dir is world read/write/x as any application with a tracer injected
# needs to write PID files
chmod 777 ${PACKAGES_LOCK_DIR}

# we currently allow failures to install the installer
(bootstrap) || exit_code=$?
if [ -n "$exit_code" ]; then
    echo "Failed to bootstrap the installer: $exit_code"
fi

exit 0
