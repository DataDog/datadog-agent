#!/bin/sh
#
# Perform necessary stackstate-agent setup steps before package is installed.
#
# .deb: STEP 2 of 5
# .rpm: STEP 2 of 6

INSTALL_DIR=/opt/stackstate-agent
LOG_DIR=/var/log/stackstate-agent
SERVICE_NAME=stackstate-agent

KNOWN_DISTRIBUTION="(Debian|Ubuntu|RedHat|CentOS|openSUSE|Amazon|Arista|SUSE)"
DISTRIBUTION=$(lsb_release -d 2>/dev/null | grep -Eo $KNOWN_DISTRIBUTION  || grep -Eo $KNOWN_DISTRIBUTION /etc/issue 2>/dev/null || grep -Eo $KNOWN_DISTRIBUTION /etc/Eos-release 2>/dev/null || grep -m1 -Eo $KNOWN_DISTRIBUTION /etc/os-release 2>/dev/null || uname -s)
if [ -f "/etc/debian_version" ] || [ "$DISTRIBUTION" = "Debian" ] || [ "$DISTRIBUTION" = "Ubuntu" ]; then
    DISTRIBUTION_FAMILY="Debian"
fi
# Linux installation
if [ "$DISTRIBUTION" != "Darwin" ]; then
    set -e

    if [ -f "/lib/systemd/system/$SERVICE_NAME.service" ] || [ -f "/usr/lib/systemd/system/$SERVICE_NAME.service" ]; then
        # Stop an already running agent
        # Only supports systemd and upstart
        if command -v systemctl >/dev/null 2>&1; then
            systemctl stop $SERVICE_NAME-process || true
            systemctl stop $SERVICE_NAME-network || true
            systemctl stop $SERVICE_NAME-trace || true
            systemctl stop $SERVICE_NAME || true
        elif command -v initctl >/dev/null 2>&1; then
            initctl stop $SERVICE_NAME-process || true
            initctl stop $SERVICE_NAME-network || true
            initctl stop $SERVICE_NAME-trace || true
            initctl stop $SERVICE_NAME || true
        elif [ "$DISTRIBUTION_FAMILY" = "Debian" ]; then
            if command -v service >/dev/null 2>&1; then
                service $SERVICE_NAME-process stop || true
                service $SERVICE_NAME-network stop || true
                service $SERVICE_NAME-trace stop || true
                service $SERVICE_NAME stop || true
            else
                echo "[ WARNING ]\tCannot detect a supported init system. The datadog-agent package only provides service files for systemd, upstart and sysvinit."
            fi
        else
            echo "[ WARNING ]\tCannot detect a supported init system. The stackstate-agent package only provides service files for systemd and upstart."
        fi
    fi

    # For versions < 6.10 using the custom datadog-pip, TUF and in-toto files were kept in TUF_REPO_DIR.
    # They were not being cleaned by these versions, so let's do that now on install/upgrade
    TUF_REPO_DIR=$INSTALL_DIR/repositories
    if [ -d $TUF_REPO_DIR ]; then
        rm -rf $TUF_REPO_DIR
    fi

    if [ -f "/etc/debian_version" ] || [ "$DISTRIBUTION" = "Debian" ] || [ "$DISTRIBUTION" = "Ubuntu" ]; then
        # Nothing specific on Debian
        :
        #DEBHELPER#
    elif [ -f "/etc/redhat-release" ] || [ -f "/etc/system-release" ] || [ -f "/etc/SuSE-release" ] || [ "$DISTRIBUTION" = "RedHat" ] || [ "$DISTRIBUTION" = "CentOS" ] || [ "$DISTRIBUTION" = "openSUSE" ] || [ "$DISTRIBUTION" = "Amazon" ] || [ "$DISTRIBUTION" = "SUSE" ] || [ "$DISTRIBUTION" = "Arista" ]; then
        # RPM Agents < 5.18.0 expect the preinst script of the _new_ package to stop the agent service on upgrade (which is defined with an init.d script on Agent 5)
        # So let's stop the Agent 5 service here until we don't want to support upgrades from Agents < 5.18.0 anymore
        if [ -f "/etc/init.d/stackstate-agent" ]; then
            /etc/init.d/stackstate-agent stop || true
        fi

        # Set up `stackstate-agent` user and group
        getent group stackstate-agent >/dev/null || groupadd -r stackstate-agent
        getent passwd stackstate-agent >/dev/null || \
            useradd -r -M -g stackstate-agent -d $INSTALL_DIR -s /sbin/nologin \
                -c "Stackstate Agent" stackstate-agent && \
                { usermod -L stackstate-agent || echo "[ WARNING ]\tCannot lock the 'stackstate-agent' user account"; }

        # Uninstall every datadog integration
        # Starting with 6.10, integrations are also uninstalled on package removal
        # See https://github.com/DataDog/datadog-agent/pull/3066 for more details
        PIP_PATH=$INSTALL_DIR/embedded/bin/pip
        if [ -x $PIP_PATH ]; then
            echo "Uninstalling integrations..."
            $PIP_PATH freeze | grep ^datadog- | grep -v datadog-checks-base | xargs $PIP_PATH uninstall -y -q --no-cache-dir || true
        fi

        # Delete all the .pyc/.pyo files in the embedded dir that are part of the old agent's package
        # This MUST be done after using pip or any python, because executing python might generate .pyc files
        if [ -f "$INSTALL_DIR/embedded/.py_compiled_files.txt" ]; then
            # (commented lines are filtered out)
            cat $INSTALL_DIR/embedded/.py_compiled_files.txt | grep -v '^#' | xargs rm -f
        fi
        # Remove all the data that was downloaded using the integration command
        DOWNLOADER_DATA="$INSTALL_DIR/embedded/lib/python2.7/site-packages/datadog_checks/downloader/data"
        if [ -f $DOWNLOADER_DATA ]; then
            rm -rf $DOWNLOADER_DATA
        fi
    else
        echo "[ FAILED ]\tYour system is currently not supported by this script.";
        exit 1;
    fi
else
    # macOS
    mkdir -p $LOG_DIR

    CONF_DIR="$INSTALL_DIR/etc"
    APP_DIR="/Applications/Stackstate Agent.app"

    LOG_FILE="$LOG_DIR/preinstall.log"
    exec > $LOG_FILE 2>&1

    # Determine current user if he is using the Graphical installer
    INSTALL_USER=$(ps aux | grep "CoreServices/Installer" | grep -v grep | awk '{print $1;}')

    # Otherwise, we hope he is using the install script and try to use this user
    # If it fails, no choice but to use root :'(
    if [ -z "$INSTALL_USER" ] || [ "$INSTALL_USER" = "root" ]; then
        SCRIPT_INSTALL="yes"
        INSTALL_USER=`cat /tmp/stackstate-install-user || echo 'root'`
    fi
    echo "INSTALL_USER: $INSTALL_USER"

    USER_HOME=`sudo -Hu $INSTALL_USER sh -c 'echo $HOME'`

    if [ -e "$CONF_DIR/stackstate.conf" ] || [ -e "$CONF_DIR/stackstate.yaml" ]; then
        echo "# State at the beginning"
        echo "## Agent version"
        grep AGENT_VERSION $INSTALL_DIR/agent/config.py || echo "No config.py file (agent 5)"
        stackstate-agent version || echo "No stackstate-agent binary version (agent 6)"
        echo "## $INSTALL_DIR"
        ls -al $INSTALL_DIR || echo "No agent installed"
        echo "## $APP_DIR/Contents/Resources"
        ls -al "$APP_DIR/Contents/Resources" || echo "No app installed"

        echo '# Stop old agent'
        echo '## Trying to stop agent 5'
        $INSTALL_DIR/bin/stackstate-agent stop || true
        echo '## Trying to stop agent 6'
        sudo -Hu $INSTALL_USER launchctl stop com.datadoghq.agent || true
        echo '## Trying to kill agent GUI'
        kill `ps aux | grep 'Stackstate Agent.app' | grep -v grep  | cut -d ' ' -f 4` || true

        echo '## Trying to unload agent 6 launchd service'
        sudo -Hu $INSTALL_USER launchctl unload -w "$USER_HOME/Library/LaunchAgents/com.datadoghq.agent.plist" || true

        # Save old conf
        rm -rvf /tmp/{checks,conf}.d/* /tmp/stackstate.conf /tmp/stackstate.yaml
        mkdir -vp /tmp/{conf,checks}.d
        cp -vf $CONF_DIR/stackstate.conf /tmp
        cp -vf $CONF_DIR/stackstate.yaml /tmp
        cp -vfR $CONF_DIR/conf.d/* /tmp/conf.d
        find /tmp/conf.d '(' -name '*.yaml.example' -o -name '*.yaml.default' ')' -delete -print # don't save old example and default yamls
        cp -vfR $CONF_DIR/checks.d/* /tmp/checks.d
    fi

    echo '# Deleting old stackstate-agent link'
    rm -vf /usr/local/bin/stackstate-agent

    echo '# Deleting old stackstate-agent files'
    rm -rf $INSTALL_DIR/agent || true
    rm -rf $INSTALL_DIR/checks.d || true

    echo "# Disabling the login launch of the app"
    sudo -u $INSTALL_USER osascript -e 'tell application "System Events" to delete every login item whose name is "Stackstate Agent"'

    # Debriefing time
    echo "# State at the end"
    echo "## Agent version"
    grep AGENT_VERSION $INSTALL_DIR/agent/config.py || echo "No config.py file (agent 5)"
    stackstate-agent version || echo "No stackstate-agent binary version (agent 6)"
    echo "## $INSTALL_DIR"
    ls -al $INSTALL_DIR || echo "No agent installed"
    echo "## $APP_DIR/Contents/Resources"
    ls -al "$APP_DIR/Contents/Resources" || echo "No app installed"
fi

exit 0
