#!/bin/sh
#
# Perform necessary datadog-updater setup steps after package is installed.
#
# .deb: STEP 5 of 5

readonly INSTALL_DIR=/opt/datadog/updater
readonly UPDATER_HELPER=${INSTALL_DIR}/bin/updater/updater-helper
readonly PACKAGES_DIR=/opt/datadog-packages
readonly LOG_DIR=/var/log/datadog
readonly PACKAGES_LOCK_DIR=/var/run/datadog-packages
readonly CONFIG_DIR=/etc/datadog-agent

add_user_and_group() {
    # Only create group and/or user if they don't already exist
    NAME=$1
    HOME_DIR=$2
    getent group "$NAME" >/dev/null || (echo "Creating $NAME group" && addgroup --system "$NAME" --quiet)
    set +e
    id -u "$NAME" >/dev/null 2>&1
    USER_EXISTS=$?
    set -e
    if [ ! $USER_EXISTS -eq 0 ]; then
        echo "Creating $NAME user"
        adduser --system "$NAME" --disabled-login --shell /usr/sbin/nologin --home "$HOME_DIR" --no-create-home --group --quiet
    elif id -nG "$NAME" | grep --invert-match --word-regexp --quiet "$NAME"; then
        # User exists but is not part of the $NAME group
        echo "Adding $NAME user to $NAME group"
        usermod -g "$NAME" "$NAME"
    fi
}

set -e
case "$1" in
    configure)
        add_user_and_group 'dd-agent' $PACKAGES_DIR/datadog-agent
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
    ;;
esac
#DEBHELPER#

# Set the installation information if not already present;
# This is done in posttrans for .rpm packages
if [ ! -f "$CONFIG_DIR/install_info" ]; then

    if command -v dpkg >/dev/null 2>&1 && command -v dpkg-query >/dev/null 2>&1; then
        tool=dpkg
        tool_version=dpkg-$(dpkg-query --showformat='${Version}' --show dpkg  | cut -d "." -f 1-3 || echo "unknown")
    else
        tool=unknown
        tool_version=unknown
    fi

    install_info_content="---
install_method:
  tool: $tool
  tool_version: $tool_version
  installer_version: deb_package
  installer: updater
"
    echo "$install_info_content" > $CONFIG_DIR/install_info
fi

set +e
generate_install_id()
{
    # Try generating a UUID based on /proc/sys/kernel/random/uuid
    uuid=$(cat /proc/sys/kernel/random/uuid 2>/dev/null)
    # If that does not work, then try uuidgen
    if [ ${#uuid} -ne 36 ]; then
        uuid=$(uuidgen 2>/dev/null)
    fi
    # Convert to lowercase
    uuid=$(echo "$uuid" | tr '[:upper:]' '[:lower:]')
    printf "$uuid"
}

generate_install_signature()
{
    install_id="$1"
    install_type="$2"
    install_time="$3"
    printf "{\"install_id\":\"$install_id\",\"install_type\":\"$install_type\",\"install_time\":$install_time}"
}

if [ ! -f "$CONFIG_DIR/install.json" ]; then
    install_id=$(generate_install_id)
    install_type="manual_update_via_apt"
    install_time=$(date +%s)
    install_signature=$(generate_install_signature "$install_id" "$install_type" "$install_time")
    echo "$install_signature" > $CONFIG_DIR/install.json
    chown -R dd-agent:dd-agent ${CONFIG_DIR}
fi
set -e

# Set proper rights to the dd-agent user
chown -R dd-agent:dd-agent ${CONFIG_DIR}
chown -R dd-agent:dd-agent ${LOG_DIR}
chown -R dd-agent:dd-agent ${INSTALL_DIR}
chown -R dd-agent:dd-agent ${PACKAGES_DIR}
chown -R dd-agent:dd-agent ${PACKAGES_LOCK_DIR}

chmod -R 755 ${PACKAGES_DIR}
# Lock_dir is world writable as any application with a tracer injected
# needs to write the PID
chown -R 666 ${PACKAGES_LOCK_DIR}

# Make system-probe configs read-only
chmod 0440 ${CONFIG_DIR}/system-probe.yaml.example || true
if [ -f "$CONFIG_DIR/system-probe.yaml" ]; then
    chmod 0440 ${CONFIG_DIR}/system-probe.yaml || true
fi

# Make security-agent config read-only
chmod 0440 ${CONFIG_DIR}/security-agent.yaml.example || true
if [ -f "$CONFIG_DIR/security-agent.yaml" ]; then
    chmod 0440 ${CONFIG_DIR}/security-agent.yaml || true
fi

if [ -d "$CONFIG_DIR/compliance.d" ]; then
    chown -R root:root ${CONFIG_DIR}/compliance.d || true
fi

if [ -d "$CONFIG_DIR/runtime-security.d" ]; then
    chown -R root:root ${CONFIG_DIR}/runtime-security.d || true
fi

# Set updater helper rights
chmod 750 ${UPDATER_HELPER}
setcap cap_setuid+ep ${UPDATER_HELPER}

$INSTALL_DIR/bin/updater/updater bootstrap -P datadog-agent
# Bootstrap installs first agent with root ownership, overriding to dd-agent
chown -R dd-agent:dd-agent ${PACKAGES_DIR}

# start updater
SYSTEMCTL_SKIP_SYSV=true systemctl enable datadog-updater || true
SYSTEMCTL_SKIP_SYSV=true systemctl start datadog-updater || true

exit 0
