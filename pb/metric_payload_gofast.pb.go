// Code generated by protoc-gen-gogo.
// source: metric_payload_gofast.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		metric_payload_gofast.proto

	It has these top-level messages:
		MetricsPayloadGoFast
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricsPayloadGoFast struct {
	Timeseries []*MetricsPayloadGoFast_Timeserie `protobuf:"bytes,1,rep,name=timeseries" json:"timeseries,omitempty"`
}

func (m *MetricsPayloadGoFast) Reset()         { *m = MetricsPayloadGoFast{} }
func (m *MetricsPayloadGoFast) String() string { return proto.CompactTextString(m) }
func (*MetricsPayloadGoFast) ProtoMessage()    {}
func (*MetricsPayloadGoFast) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricPayloadGofast, []int{0}
}

func (m *MetricsPayloadGoFast) GetTimeseries() []*MetricsPayloadGoFast_Timeserie {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

type MetricsPayloadGoFast_Timeserie struct {
	Metric   string                                  `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Type     string                                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Host     string                                  `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Points   []*MetricsPayloadGoFast_Timeserie_Point `protobuf:"bytes,4,rep,name=points" json:"points,omitempty"`
	Tags     []string                                `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Interval int32                                   `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *MetricsPayloadGoFast_Timeserie) Reset()         { *m = MetricsPayloadGoFast_Timeserie{} }
func (m *MetricsPayloadGoFast_Timeserie) String() string { return proto.CompactTextString(m) }
func (*MetricsPayloadGoFast_Timeserie) ProtoMessage()    {}
func (*MetricsPayloadGoFast_Timeserie) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricPayloadGofast, []int{0, 0}
}

func (m *MetricsPayloadGoFast_Timeserie) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricsPayloadGoFast_Timeserie) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricsPayloadGoFast_Timeserie) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MetricsPayloadGoFast_Timeserie) GetPoints() []*MetricsPayloadGoFast_Timeserie_Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *MetricsPayloadGoFast_Timeserie) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MetricsPayloadGoFast_Timeserie) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type MetricsPayloadGoFast_Timeserie_Point struct {
	Ts    int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricsPayloadGoFast_Timeserie_Point) Reset()         { *m = MetricsPayloadGoFast_Timeserie_Point{} }
func (m *MetricsPayloadGoFast_Timeserie_Point) String() string { return proto.CompactTextString(m) }
func (*MetricsPayloadGoFast_Timeserie_Point) ProtoMessage()    {}
func (*MetricsPayloadGoFast_Timeserie_Point) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricPayloadGofast, []int{0, 0, 0}
}

func (m *MetricsPayloadGoFast_Timeserie_Point) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *MetricsPayloadGoFast_Timeserie_Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*MetricsPayloadGoFast)(nil), "pb.MetricsPayloadGoFast")
	proto.RegisterType((*MetricsPayloadGoFast_Timeserie)(nil), "pb.MetricsPayloadGoFast.Timeserie")
	proto.RegisterType((*MetricsPayloadGoFast_Timeserie_Point)(nil), "pb.MetricsPayloadGoFast.Timeserie.Point")
}
func (m *MetricsPayloadGoFast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayloadGoFast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, msg := range m.Timeseries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsPayloadGoFast_Timeserie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayloadGoFast_Timeserie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(len(m.Metric)))
		i += copy(dAtA[i:], m.Metric)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Points) > 0 {
		for _, msg := range m.Points {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Interval != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(m.Interval))
	}
	return i, nil
}

func (m *MetricsPayloadGoFast_Timeserie_Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayloadGoFast_Timeserie_Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetricPayloadGofast(dAtA, i, uint64(m.Ts))
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64MetricPayloadGofast(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func encodeFixed64MetricPayloadGofast(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MetricPayloadGofast(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetricPayloadGofast(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetricsPayloadGoFast) Size() (n int) {
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, e := range m.Timeseries {
			l = e.Size()
			n += 1 + l + sovMetricPayloadGofast(uint64(l))
		}
	}
	return n
}

func (m *MetricsPayloadGoFast_Timeserie) Size() (n int) {
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovMetricPayloadGofast(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMetricPayloadGofast(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMetricPayloadGofast(uint64(l))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovMetricPayloadGofast(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMetricPayloadGofast(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovMetricPayloadGofast(uint64(m.Interval))
	}
	return n
}

func (m *MetricsPayloadGoFast_Timeserie_Point) Size() (n int) {
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovMetricPayloadGofast(uint64(m.Ts))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func sovMetricPayloadGofast(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetricPayloadGofast(x uint64) (n int) {
	return sovMetricPayloadGofast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsPayloadGoFast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricPayloadGofast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsPayloadGoFast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsPayloadGoFast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeseries = append(m.Timeseries, &MetricsPayloadGoFast_Timeserie{})
			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricPayloadGofast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayloadGoFast_Timeserie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricPayloadGofast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timeserie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timeserie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &MetricsPayloadGoFast_Timeserie_Point{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetricPayloadGofast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayloadGoFast_Timeserie_Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricPayloadGofast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMetricPayloadGofast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricPayloadGofast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetricPayloadGofast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetricPayloadGofast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricPayloadGofast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetricPayloadGofast
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetricPayloadGofast
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetricPayloadGofast(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetricPayloadGofast = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetricPayloadGofast   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metric_payload_gofast.proto", fileDescriptorMetricPayloadGofast) }

var fileDescriptorMetricPayloadGofast = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xcd, 0x6e, 0x77, 0xb1, 0x23, 0x88, 0x84, 0x22, 0xa1, 0xc2, 0xb2, 0xf4, 0xb4, 0x17,
	0x73, 0xd0, 0x17, 0x90, 0x1e, 0xf4, 0x24, 0x94, 0xe0, 0xbd, 0x64, 0x35, 0xae, 0x81, 0x6d, 0x13,
	0x76, 0xc6, 0x42, 0xdf, 0xc2, 0xc7, 0xd2, 0x9b, 0x8f, 0x20, 0xeb, 0xd5, 0x87, 0x90, 0x4d, 0x6a,
	0xf1, 0x20, 0x78, 0x9b, 0xff, 0xcf, 0xff, 0x67, 0x3e, 0x06, 0xce, 0x56, 0x86, 0x3a, 0x7b, 0xbf,
	0xf4, 0x7a, 0xdb, 0x3a, 0xfd, 0xb0, 0x6c, 0xdc, 0xa3, 0x46, 0x92, 0xbe, 0x73, 0xe4, 0x78, 0xe2,
	0xeb, 0xd9, 0x5b, 0x02, 0x93, 0xdb, 0x90, 0xc1, 0x45, 0xcc, 0xdc, 0xb8, 0x6b, 0x8d, 0xc4, 0xe7,
	0x00, 0x64, 0x57, 0x06, 0x4d, 0x67, 0x0d, 0x0a, 0x56, 0xa6, 0xd5, 0xd1, 0xc5, 0x4c, 0xfa, 0x5a,
	0xfe, 0x95, 0x96, 0x77, 0x3f, 0x51, 0xf5, 0xab, 0x35, 0xfd, 0x62, 0x30, 0xde, 0xbf, 0xf0, 0x53,
	0xc8, 0x23, 0x8d, 0x60, 0x25, 0xab, 0xc6, 0x6a, 0xa7, 0x38, 0x87, 0x11, 0x6d, 0xbd, 0x11, 0x49,
	0x70, 0xc3, 0x3c, 0x78, 0x4f, 0x0e, 0x49, 0xa4, 0xd1, 0x1b, 0x66, 0x7e, 0x05, 0xb9, 0x77, 0x76,
	0x4d, 0x28, 0x46, 0x81, 0xa6, 0xfa, 0x9f, 0x46, 0x2e, 0x86, 0x82, 0xda, 0xf5, 0xc2, 0x26, 0xdd,
	0xa0, 0xc8, 0xca, 0x34, 0x6c, 0xd2, 0x0d, 0xf2, 0x29, 0x1c, 0xda, 0x35, 0x99, 0x6e, 0xa3, 0x5b,
	0x91, 0x97, 0xac, 0xca, 0xd4, 0x5e, 0x4f, 0xcf, 0x21, 0x0b, 0x1f, 0xf0, 0x63, 0x48, 0x08, 0x03,
	0x76, 0xaa, 0x12, 0x42, 0x3e, 0x81, 0x6c, 0xa3, 0xdb, 0xe7, 0xc8, 0xcc, 0x54, 0x14, 0xf3, 0x93,
	0xd7, 0xbe, 0x60, 0xef, 0x7d, 0xc1, 0x3e, 0xfa, 0x82, 0xbd, 0x7c, 0x16, 0x07, 0x75, 0x1e, 0x0e,
	0x7d, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x53, 0xd4, 0x36, 0x87, 0x01, 0x00, 0x00,
}
