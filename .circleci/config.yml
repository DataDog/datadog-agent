version: 2

jobs:
  checkout_code:
    docker:
      - image: &builder_image jfullaondo/datadog-agent-builder-deb:0.0.4
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - checkout
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - save_cache:
          key: v1-repo-{{ checksum ".circle-sha" }}
          paths:
            - /go/src/github.com/DataDog/datadog-agent

  dependencies:
    docker:
      - image: *builder_image
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
            - v1-govendordeps-{{ checksum "Gopkg.toml" }}
      - run:
          name: grab go deps
          command: invoke deps
      - save_cache:
          key: v1-govendordeps-{{ checksum "Gopkg.toml" }}
          paths:
            - /go/src/github.com/DataDog/datadog-agent/vendor
      - save_cache:
          key: v1-gobindeps
          paths:
            - /go/bin

  unit_tests:
    docker:
      - image: *builder_image
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v1-govendordeps-{{ checksum "Gopkg.toml" }}
      - restore_cache:
          keys:
            - v1-gobindeps
      - run:
          name: run unit tests
          command: invoke -e test --coverage --race

  integration_tests:
    docker:
      - image: *builder_image
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v1-govendordeps-{{ checksum "Gopkg.toml" }}
      - restore_cache:
          keys:
            - v1-gobindeps
      - setup_remote_docker
      - run:
          name: run integration tests
          command: inv integration-tests --install-deps --remote-docker

  build_binaries:
    docker:
      - image: *builder_image
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v1-govendordeps-{{ checksum "Gopkg.toml" }}
      - restore_cache:
          keys:
            - v1-gobindeps
      - run:
          name: build dogstatsd
          command: inv -e dogstatsd.build --static
      - run:
          name: build agent
          command: inv agent.build

  build_puppy:
    docker:
      - image: *builder_image
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v1-govendordeps-{{ checksum "Gopkg.toml" }}
      - restore_cache:
          keys:
            - v1-gobindeps
      - run:
          name: build puppy
          command: inv agent.build --puppy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout_code
      - dependencies:
          requires:
            - checkout_code
      - unit_tests:
          requires:
            - dependencies
      - integration_tests:
          requires:
            - dependencies
      - build_binaries:
          requires:
            - unit_tests
            - integration_tests
      - build_puppy:
          requires:
            - unit_tests
            - integration_tests
