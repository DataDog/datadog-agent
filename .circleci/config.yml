version: 2

# This file uses YAML anchors to deduplicate steps
# see https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
# and https://learnxinyminutes.com/docs/yaml/

experimental:
  # For some reason filtering out notifications keeps being undocumented and
  # marked as experimental but as of today, it's still working.
  notify:
    branches:
      only:
        - master

templates:
  job_template: &job_template
    docker:
      - image: datadog/datadog-agent-runner-circle:go11311
        environment:
          USE_SYSTEM_LIBS: "1"
    working_directory: /go/src/github.com/DataDog/datadog-agent

  step_templates:
    - restore_cache: &restore_deps
        keys:
          # The first match will be used. Doing that so new branches
          # use master's cache but don't pollute it back.
          #
          # If incremental dep fails, increase the cache gen number
          # in restore_deps AND save_deps
          # See https://github.com/DataDog/datadog-agent/pull/2384
          - gen15-godeps-{{ .Branch }}-{{ .Revision }}
          - gen15-godeps-{{ .Branch }}-
          - gen15-godeps-master-
    - save_cache: &save_deps
        key: gen15-godeps-{{ .Branch }}-{{ .Revision }}
    - restore_cache: &restore_source
        keys:
          # Cache retrieval is faster than full git checkout
          - v4-repo-{{ .Revision }}
    - save_cache: &save_source
        key: v4-repo-{{ .Revision }}

jobs:
  checkout_code:
    docker:
      - image: alpine/git:latest
    working_directory: /go/src/github.com/DataDog/datadog-agent
    steps:
      - checkout
      - save_cache:
          <<: *save_source
          paths:
            - /go/src/github.com/DataDog/datadog-agent

  dependencies:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: setup python deps
          command: |
            pip install wheel
            pip install -r requirements.txt
            pip3 install flake8~=3.8.3 flake8-bugbear~=20.1.4 black~=19.10b0
      - run:
          name: grab go deps
          command: |
            inv deps --verbose --dep-vendor-only
      - run:
          name: build rtloader
          command: |
            inv rtloader.make --install-prefix=/go/src/github.com/DataDog/datadog-agent/dev
            inv rtloader.install
      - run:
          name: lint rtloader
          command: |
            inv rtloader.format --raise-if-changed
      - run:
          name: test rtloader
          command: |
            inv rtloader.test
      - run:
          name: pre-compile go deps
          command: inv -e agent.build --exclude-rtloader --race --precompile-only
      - save_cache:
          <<: *save_deps
          paths:
            - /go/src/github.com/DataDog/datadog-agent/vendor
            - /go/src/github.com/DataDog/datadog-agent/dev
            - /go/pkg
            - /go/bin
            - /usr/local/lib/python2.7/dist-packages
            - /usr/local/lib/python3.6/dist-packages
            - /usr/local/bin

  unit_tests:
    <<: *job_template
    resource_class: large
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: run unit tests
          command: inv -e test --python-runtimes 3 --coverage --race --profile --fail-on-fmt --cpus 3
      - run:
          name: upload code coverage results
          # Never fail on coverage upload
          command: bash <(curl -s https://codecov.io/bash) -f profile.cov -F linux || true

  integration_tests:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - setup_remote_docker
      - run:
          name: run integration tests
          command: inv -e integration-tests --race --remote-docker

  release_note:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-releasenote
          name: run PR check for release note

  team_label:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-teamassignment
          name: run PR check for team assignment labels

  milestone:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          command: inv -e lint-milestone
          name: run PR check for milestone assignment

  filename_linting:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: run filename linting
          command: inv -e lint-filenames

  shell_linting:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: Install shellcheck
          command: inv -e install-shellcheck
      - run:
          name: Print shellcheck version
          command: shellcheck --version
      - run:
          name: Run shellcheck
          #Excludes:
          #SC2028: echo may not expand escape sequences. Use printf.
          #SC2059: Don't use variables in the printf format string. Use printf "..%s.." "$foo".
          command: shellcheck --severity=info -e SC2059 -e SC2028 --shell=bash ./cmd/**/*.sh ./omnibus/package-scripts/*/*

  python_linting:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: lint python files
          command: inv -e lint-python

  docker_tests:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - setup_remote_docker
      - run:
          name: run docker image tests
          command: inv -e docker.test
      - run:
          name: run docker image integration tests
          command: inv -e docker.integration-tests

  build_binaries:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: build dogstatsd
          command: inv -e dogstatsd.build --static
      - run:
          name: build agent
          command: inv -e agent.build --exclude-rtloader

  build_iot_agent:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: build iot agent
          command: inv -e agent.build --iot
      - run:
          name: test iot agent
          command: ./bin/agent/agent -c ./bin/agent/dist check cpu

  documentation_generation:
    <<: *job_template
    steps:
      - restore_cache: *restore_source
      - restore_cache: *restore_deps
      - run:
          name: generate doxygen documentation
          command: inv -e rtloader.generate-doc

  macos_build:
    macos:
      xcode: 10.1.0
    environment:
      BUILDIMAGES_VERSION: "a8226a8e78774afad285e7372fe8c6c179340dd9" # datadog-agent-buildimages commit to fetch to get the MacOS scripts
      RELEASE_VERSION: "nightly-a7"
      AGENT_MAJOR_VERSION: "7"
      PYTHON_RUNTIMES: "3"
    working_directory: ~/go/src/github.com/DataDog/datadog-agent
    steps:
      - checkout
      - run:
          name: Setup builder
          command: |
            bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent-buildimages/$BUILDIMAGES_VERSION/macos/builder_setup.sh)"
      - run:
          name: Run omnibus build
          no_output_timeout: 30m
          command: |
            export VERSION=$CIRCLE_SHA1
            bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent-buildimages/$BUILDIMAGES_VERSION/macos/build_script.sh)"
      - run: mkdir -p ~/artifacts && cp omnibus/pkg/*.dmg ~/artifacts
      - store_artifacts:
          path: ~/artifacts

workflows:
  version: 2
  test_and_build:
    jobs:
      - checkout_code
      - macos_build
      - dependencies:
          requires:
            - checkout_code
      - unit_tests:
          requires:
            - dependencies
      - integration_tests:
          requires:
            - dependencies
      - release_note:
          requires:
            - dependencies
      - team_label:
          requires:
            - dependencies
      - milestone:
          requires:
            - dependencies
      - filename_linting:
          requires:
            - dependencies
      - shell_linting:
          requires:
            - dependencies
      - python_linting:
          requires:
            - dependencies
      - docker_tests:
          requires:
            - dependencies
      - documentation_generation:
          requires:
            - dependencies
      - build_binaries:
          requires:
            - unit_tests
            - integration_tests
            - docker_tests
      - build_iot_agent:
          requires:
            - unit_tests
            - integration_tests
            - docker_tests
