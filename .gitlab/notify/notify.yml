---
# notify stage
# Contains jobs which send notifications depending on pipeline status.

include:
  - https://gitlab-templates.ddbuild.io/slack-notifier/v3-sdm/template.yml

notify-on-tagged-success:
  extends: .slack-notifier-base
  stage: notify
  rules: !reference [.on_deploy_stable_or_beta_repo_branch]
  dependencies: []
  tags: ["arch:amd64"]
  script: |
    MESSAGE_TEXT=":host-green: Tagged build <$CI_PIPELINE_URL|$CI_PIPELINE_ID> succeeded.
    *$CI_COMMIT_REF_NAME* is available in the staging repositories."
    postmessage "#agent-release-sync" "$MESSAGE_TEXT"

notify:
  extends: .slack-notifier-base
  stage: notify
  rules: !reference [.on_main_or_release_branch_or_deploy_always]
  dependencies: []
  tags: ["arch:amd64"]
  resource_group: notification
  timeout: 15 minutes # Added to prevent a stuck job blocking the resource_group defined above
  script:
    - export GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh ci.datadog-agent.gitlab_read_api_token)
    - !reference [.setup_python_mirror_linux]
    - python3 -m pip install -r tasks/libs/requirements-notifications.txt
    - |
      # Do not send notifications if this is a child pipeline of another repo
      # The triggering repo should already have its own notification system
      if [ "$CI_PIPELINE_SOURCE" != "pipeline" ]; then
        if [ "$DEPLOY_AGENT" = "true" ]; then
          invoke -e notify.send-message --notification-type "deploy"
        else
          invoke -e notify.send-message --notification-type "merge"
        fi
        invoke notify.check-consistent-failures
      else
        echo "This pipeline was triggered by another repository, skipping notification."
      fi

send_pipeline_stats:
  stage: notify
  # Using a buildimage image with python 3.7+, datadog-api-client and invoke installed
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/datadog-ci-uploader$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  when: always
  dependencies: []
  script:
    - source /root/.bashrc
    - export GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh ci.datadog-agent.gitlab_read_api_token)
    - export DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh ci.datadog-agent.datadog_api_key_org2)
    - !reference [.setup_python_mirror_linux]
    - invoke -e notify.send-stats

notify_github:
  stage: notify
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker"]
  when: always
  dependencies: []
  allow_failure: true
  script: |
    # Add janky means of installing PR commenter borrowed from
    # https://github.com/DataDog/dogweb/blob/45d7fcf035d0d515ebd901919099d4c8bfa82829/docker/docker-builder/Dockerfile#L69-L77
    apt-get update
    apt-get install -y curl
    curl -OL https://s3.amazonaws.com/dd-package-public/dd-package.deb
    dpkg -i dd-package.deb
    rm dd-package.deb
    apt-get update
    dd-package --bucket binaries.ddbuild.io --package devtools/dd-package-dev --distribution "20.04"
    # Kludge from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4645#note_287636439 to avoid
    # doubled output
    echo
    echo "####################### NOTE TO MAINTAINERS #####################################"
    echo "# Ignore bdist_wheel build error raised when installing 'devtools/pr-commenter' #"
    echo "# This error is known behavior, and you should see a successful install         #"
    echo "# beneath the error message in the GitLab CI logs                               #"
    echo "#################################################################################"
    echo
    # Pinned version of pr-commenter taken from https://github.com/DataDog/dogweb/blob/b249c0815f70e71e07846f5e42fb6504c17a7c3e/tasks/gitlab/k8s-diff-helper.sh#L22
    dd-package --bucket binaries.ddbuild.io --package devtools/pr-commenter --distribution "20.04" --version "16841676-368d2e2d"
    # Command
    messagefile="$(mktemp)"
    echo "Use this command to run CI on your branch:" >> "$messagefile"
    echo '```sh' >> "$messagefile"
    echo "inv create-vm --pipeline-id=$CI_PIPELINE_ID --os-family=ubuntu" >> "$messagefile"
    echo '```' >> "$messagefile"
    echo "Message:"
    cat "$messagefile"
    cat "$messagefile" | /usr/local/bin/pr-commenter --for-pr="$CI_COMMIT_REF_NAME"
    rm "$messagefile"
