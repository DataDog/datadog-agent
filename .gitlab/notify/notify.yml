---
# notify stage
# Contains jobs which send notifications depending on pipeline status.

include:
  - https://gitlab-templates.ddbuild.io/slack-notifier/v3-sdm/template.yml

notify-on-tagged-success:
  extends: .slack-notifier-base
  stage: notify
  rules: !reference [.on_deploy_stable_or_beta_repo_branch]
  dependencies: []
  tags: ["arch:amd64"]
  script: |
    MESSAGE_TEXT=":host-green: Tagged build <$CI_PIPELINE_URL|$CI_PIPELINE_ID> succeeded.
    *$CI_COMMIT_REF_NAME* is available in the staging repositories."
    postmessage "#agent-release-sync" "$MESSAGE_TEXT"

notify:
  extends: .slack-notifier-base
  stage: notify
  rules: !reference [.on_main_or_release_branch_or_deploy_always]
  dependencies: []
  tags: ["arch:amd64"]
  resource_group: notification
  timeout: 15 minutes # Added to prevent a stuck job blocking the resource_group defined above
  script:
    - GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $GITLAB_TOKEN read_api) || exit $?; export GITLAB_TOKEN
    - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
    - python3 -m pip install -r requirements.txt -r tasks/libs/requirements-notifications.txt
    - |
      # Do not send notifications if this is a child pipeline of another repo
      # The triggering repo should already have its own notification system
      if [ "$CI_PIPELINE_SOURCE" != "pipeline" ]; then
        if [ "$DEPLOY_AGENT" = "true" ]; then
          invoke -e notify.send-message --notification-type "deploy"
        elif [ "$CI_PIPELINE_SOURCE" != "push" ]; then
          invoke -e notify.send-message --notification-type "trigger"
        else
          invoke -e notify.send-message --notification-type "merge"
        fi
        if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
          invoke notify.check-consistent-failures
        fi
      else
        echo "This pipeline was triggered by another repository, skipping notification."
      fi

send_pipeline_stats:
  stage: notify
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  when: always
  dependencies: []
  script:
    - GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $GITLAB_TOKEN read_api) || exit $?; export GITLAB_TOKEN
    - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
    - invoke -e notify.send-stats

notify_github:
  stage: notify
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:arm64"]
  rules:
    - !reference [.except_mergequeue]
    - !reference [.except_main_or_release_branch]
    - !reference [.except_no_tests_no_deploy]
    - if: $RELEASE_VERSION_7 != ""
      changes:
        paths:
          - '**/*.go'
        compare_to: main # TODO: use a variable, when this is supported https://gitlab.com/gitlab-org/gitlab/-/issues/369916
      when: on_success
    - when: never
  needs:
    - job: "deploy_deb_testing-a7_x64"
      optional: true
  dependencies: []
  allow_failure: true
  script:
    - !reference [.setup_agent_github_app]
    # Python 3.12 changes default behavior how packages are installed.
    # In particular, --break-system-packages command line option is 
    # required to use the old behavior or use a virtual env. https://github.com/actions/runner-images/issues/8615      
    - python3 -m pip install -r tasks/libs/requirements-github.txt --break-system-packages
    - messagefile="$(mktemp)"
    - echo "Use this command from [test-infra-definitions](https://github.com/DataDog/test-infra-definitions) to manually test this PR changes on a VM:" >> "$messagefile"
    - echo '```sh' >> "$messagefile"
    - echo "inv create-vm --pipeline-id=$CI_PIPELINE_ID --os-family=ubuntu" >> "$messagefile"
    - echo '```' >> "$messagefile"
    - 'echo "Note: This applies to commit **$CI_COMMIT_SHORT_SHA**" >> "$messagefile"'
    - inv -e github.pr-commenter --title "Test changes on VM" --body "$(cat "$messagefile")" --echo
    - rm "$messagefile"

notify_gitlab_ci_changes:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  stage: notify
  needs: [compute_gitlab_ci_config]
  tags: ["arch:amd64"]
  rules:
    - changes:
        paths:
          - .gitlab-ci.yml
          - .gitlab/**/*.yml
        compare_to: main # TODO: use a variable, when this is supported https://gitlab.com/gitlab-org/gitlab/-/issues/369916
  script:
    # Python 3.12 changes default behavior how packages are installed.
    # In particular, --break-system-packages command line option is 
    # required to use the old behavior or use a virtual env. https://github.com/actions/runner-images/issues/8615    
    - python3 -m pip install -r tasks/libs/requirements-github.txt --break-system-packages
    - !reference [.setup_agent_github_app]
    - inv -e notify.gitlab-ci-diff --from-diff artifacts/diff.gitlab-ci.yml --pr-comment

.failure_summary_job:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  stage: notify
  dependencies: []
  tags: ["arch:amd64"]
  resource_group: notification
  timeout: 15 minutes # Added to prevent a stuck job blocking the resource_group defined above

.failure_summary_setup:
  - SLACK_API_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $SLACK_AGENT token) || exit $?; export SLACK_API_TOKEN
  - GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $GITLAB_TOKEN read_api) || exit $?; export GITLAB_TOKEN
  - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
  - python3 -m pip install -r requirements.txt -r tasks/libs/requirements-notifications.txt

# Upload failure summary data to S3 at the end of each main pipeline
notify_failure_summary_on_pipeline:
  extends: .failure_summary_job
  rules:
    - if: $CI_PIPELINE_SOURCE != "push" && $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - !reference [.on_main_always]
  script:
    - !reference [.failure_summary_setup]
    - inv -e notify.failure-summary-upload-pipeline-data

# Send failure summary notifications daily and weekly
notify_failure_summary_daily:
  extends: .failure_summary_job
  rules:
    - if: $CI_COMMIT_BRANCH != "main" || $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - !reference [.on_deploy_nightly_repo_branch_always]
  script:
    - !reference [.failure_summary_setup]
    - weekday="$(date --utc '+%A')"
    - |
      if [ "$weekday" = "Sunday" ] || [ "$weekday" = "Monday" ]; then
        echo "Skipping daily summary on $weekday"
        exit
      fi
    # Daily
    - inv -e notify.failure-summary-send-notifications --daily-summary
    # Send weekly if necessary (note that this workflow is usually triggered early in the morning)
    - |
      if [ "$weekday" = "Friday" ]; then
        echo 'Sending weekly summary'
        inv -e notify.failure-summary-send-notifications --weekly-summary
      fi

close_failing_tests_stale_issues:
  stage: notify
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  rules:
    # Daily
    - if: $CI_COMMIT_BRANCH != "main" || $CI_PIPELINE_SOURCE != "schedule"
      when: never
    - !reference [.on_deploy_nightly_repo_branch_always]
  needs: []
  tags: ["arch:arm64"]
  script:
    - weekday="$(date --utc '+%A')"
    # Weekly on Friday
    - |
      if [ "$weekday" != "Friday" ]; then
        echo "This script is run weekly on Fridays"
        exit
      fi
    - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
    - DD_APP_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_APP_KEY_ORG2 token) || exit $?; export DD_APP_KEY
    - ATLASSIAN_PASSWORD=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $ATLASSIAN_WRITE token) || exit $?; export ATLASSIAN_PASSWORD
    - ATLASSIAN_USERNAME=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $ATLASSIAN_WRITE user) || exit $?; export ATLASSIAN_USERNAME
    - python3 -m pip install -r requirements.txt -r tasks/requirements_release_tasks.txt --break-system-packages # For Atlassian / Jira dependencies
    - inv -e notify.close-failing-tests-stale-issues
