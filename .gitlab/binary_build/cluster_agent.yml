---
.if_version_7: &if_version_7
  if: $RELEASE_VERSION_7 != ""

.retrieve_linux_go_deps: &retrieve_linux_go_deps |
  mkdir vendor && tar xzf vendor.tar.gz -C vendor
  rm -f vendor.tar.gz

.cluster_agent-build_common:
  stage: binary_build
  needs: ["go_mod_tidy_check"]
  script:
    # Assuming that by default, the RELEASE_VERSION_7 entry will get used (ie. nightly-a7)
    - if [[ "$CI_COMMIT_TAG" =~ ^dca- ]]; then export RELEASE_VERSION="$CI_COMMIT_TAG"; else export RELEASE_VERSION="$RELEASE_VERSION_7"; fi
    - inv -e cluster-agent.build --release-version "$RELEASE_VERSION"
    - $S3_CP_CMD $SRC_PATH/$CLUSTER_AGENT_BINARIES_DIR/datadog-cluster-agent $S3_ARTIFACTS_URI/datadog-cluster-agent.$ARCH
    - $S3_CP_CMD $SRC_PATH/Dockerfiles/cluster-agent/datadog-cluster.yaml $S3_ARTIFACTS_URI/datadog-cluster.yaml
    - $S3_CP_CMD $SRC_PATH/Dockerfiles/cluster-agent/security-agent-policies $S3_ARTIFACTS_URI/security-agent-policies --recursive

cluster_agent-build_amd64:
  extends: .cluster_agent-build_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:large"]
  needs: ["go_mod_tidy_check", "linux_x64_go_deps"]
  variables:
    ARCH: amd64
  before_script:
    - *retrieve_linux_go_deps
    - source /root/.bashrc && conda activate ddpy3

cluster_agent-build_arm64:
  extends: .cluster_agent-build_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: ["go_mod_tidy_check", "linux_arm64_go_deps"]
  variables:
    ARCH: arm64
  before_script:
    - *retrieve_linux_go_deps
    - source /root/.bashrc && conda activate ddpy3
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog
    - cd $SRC_PATH
