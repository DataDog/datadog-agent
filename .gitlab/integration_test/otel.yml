---
# integration_test stage
# Contains jobs to run integration tests in otel go binaries

integration_tests_otel:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_deps"]
  script:
    - !reference [.retrieve_linux_go_deps]
    - inv check-otel-build
    - inv check-otel-module-versions
  rules:
    - if: $CI_PIPELINE_SOURCE =~ /^schedule.*$/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /.*\[skip cancel\].*/
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /.*-skip-cancel$/
      when: never
    - when: always


docker_image_build_otel:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/docker_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  needs: ["go_deps","integration_tests_otel"]
  tags: ["runner:docker"]  # Still required because the otel_agent_build_tests.py is doing a container run
  before_script:
    - !reference [.retrieve_linux_go_deps]
    - mkdir -p /tmp/otel-ci
    - cp comp/otelcol/collector-contrib/impl/manifest.yaml /tmp/otel-ci/
    - cp Dockerfiles/agent-ot/Dockerfile.agent-otel /tmp/otel-ci/
    - cp test/integration/docker/otel_agent_build_tests.py /tmp/otel-ci/
    - wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O
      /usr/bin/yq && chmod +x /usr/bin/yq
    - export OTELCOL_VERSION=v$(/usr/bin/yq r /tmp/otel-ci/manifest.yaml dist.version)
    - yq w -i /tmp/otel-ci/manifest.yaml "receivers[+] gomod"
      "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sobjectsreceiver ${OTELCOL_VERSION}"
    - yq w -i /tmp/otel-ci/manifest.yaml "processors[+] gomod"
      "github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstransformprocessor ${OTELCOL_VERSION}"
  script:
    - docker build --build-arg AGENT_BRANCH=$CI_COMMIT_BRANCH --tag agent-byoc:latest -f /tmp/otel-ci/Dockerfile.agent-otel /tmp/otel-ci
    - OT_AGENT_IMAGE_NAME=agent-byoc OT_AGENT_TAG=latest python3 /tmp/otel-ci/otel_agent_build_tests.py
  rules:
    - if: $CI_PIPELINE_SOURCE =~ /^schedule.*$/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /.*\[skip cancel\].*/
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /.*-skip-cancel$/
      when: never
    - when: always


ddflare_extension_ocb_build:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_deps"]
  before_script:
    - !reference [.retrieve_linux_go_deps]
    - mkdir -p /tmp/otel-ci
    - cp test/otel/testdata/* /tmp/otel-ci/
    - wget -O /tmp/otel-ci/ocb https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2Fv0.114.0/ocb_0.114.0_linux_amd64
    - chmod +x /tmp/otel-ci/ocb
  script:
    - echo 'Building collector with OCB and test ddflare extension'
    - /tmp/otel-ci/ocb --config=/tmp/otel-ci/builder-config.yaml > ocb-output.log 2>&1
    - grep -q 'Compiled' ocb-output.log || (echo "OCB failed to compile" && exit 1)
    - "grep -q '{\"binary\": \"/tmp/otel-ci/otelcol-custom/otelcol-custom\"}' ocb-output.log || (echo \"OCB failed to compile\" && exit 1)"
    - /tmp/otel-ci/otelcol-custom/otelcol-custom --config /tmp/otel-ci/collector-config.yaml > otelcol-custom.log 2>&1 &
    - OTELCOL_PID=$!  # Capture the process ID
    - sleep 10  # Wait for the process to start
    - grep -q 'Everything is ready. Begin running and processing data.' otelcol-custom.log || (echo "custom collector failed to start" && kill $OTELCOL_PID && exit 1)
    - curl -k https://localhost:7777 > flare-info.log 2>&1 # get the dd flare info
    - "grep -q '\"provided_configuration\": \"\"' flare-info.log || (echo \"provided config should not be supported with ocb\" && kill $OTELCOL_PID && exit 1)"
    - grep -q 'extensions:\\n  - ddflare\\n' flare-info.log || (echo "ddflare extension should be enabled" && kill $OTELCOL_PID && exit 1)
    - kill $OTELCOL_PID  # Kill the process
  rules:
    - if: $CI_PIPELINE_SOURCE =~ /^schedule.*$/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /.*\[skip cancel\].*/
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /.*-skip-cancel$/
      when: never
    - when: always
