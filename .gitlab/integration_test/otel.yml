---
# integration_test stage
# Contains jobs to run integration tests in otel go binaries

integration_tests_otel:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux$CI_IMAGE_LINUX_SUFFIX:$CI_IMAGE_LINUX
  tags: ["arch:amd64", "specific:true"]
  needs: ["go_deps"]
  script:
    - !reference [.retrieve_linux_go_deps]
    - dda inv -- check-otel-build
    - dda inv -- check-otel-module-versions
    - dda inv -- otel-agent.integration-test
  rules:
    - !reference [.except_mergequeue]
    - when: on_success

docker_image_build_otel:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/docker_x64$CI_IMAGE_DOCKER_X64_SUFFIX:$CI_IMAGE_DOCKER_X64
  needs: ["integration_tests_otel"]
  tags: ["docker-in-docker:amd64"]
  before_script:
    - mkdir -p /tmp/otel-ci
    - cp comp/otelcol/collector-contrib/impl/manifest.yaml /tmp/otel-ci/
    - cp Dockerfiles/agent-ddot/Dockerfile.agent-otel /tmp/otel-ci/
    - cp test/integration/docker/otel_agent_build_tests.py /tmp/otel-ci/
    - wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O
      /usr/bin/yq && chmod +x /usr/bin/yq
    - export OTELCOL_VERSION=v$(/usr/bin/yq r /tmp/otel-ci/manifest.yaml dist.version)
    - yq w -i /tmp/otel-ci/manifest.yaml "receivers[+] gomod"
      "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sobjectsreceiver ${OTELCOL_VERSION}"
    - yq w -i /tmp/otel-ci/manifest.yaml "processors[+] gomod"
      "github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstransformprocessor ${OTELCOL_VERSION}"
  script:
    - !reference [.login_to_docker_readonly]
    - docker build --build-arg AGENT_BRANCH=$CI_COMMIT_REF_NAME --tag agent-byoc:latest -f /tmp/otel-ci/Dockerfile.agent-otel /tmp/otel-ci
    - OT_AGENT_IMAGE_NAME=agent-byoc OT_AGENT_TAG=latest python3 /tmp/otel-ci/otel_agent_build_tests.py
  rules:
    - !reference [.except_mergequeue]
    - when: on_success

datadog_otel_components_ocb_build:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux$CI_IMAGE_LINUX_SUFFIX:$CI_IMAGE_LINUX
  tags: ["arch:amd64", "specific:true"]
  needs: ["go_deps"]
  artifacts:
    paths:
      - ocb-output.log
      - otelcol-custom.log
      - flare-info.log
    when: always
  before_script:
    - !reference [.retrieve_linux_go_deps]
  script:
    - echo "Building custom collector with datadog components"
    - test/otel/testdata/ocb_build_script.sh
    - echo "see artifacts for job logs"
  rules:
    - !reference [.except_mergequeue]
    - when: never
  timeout: 15 minutes

# Test that the BYOC packages can be built with the existing Dockerfile
ddot_byoc_package_build_test_rpm:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/docker_x64$CI_IMAGE_DOCKER_X64_SUFFIX:$CI_IMAGE_DOCKER_X64  
  needs: ["integration_tests_otel"]
  tags: ["docker-in-docker:amd64"]
  before_script:
    - !reference [docker_image_build_otel, before_script]
  script:
    - !reference [.login_to_docker_readonly]
    - AGENT_VERSION=$(dda inv -- agent.version --no-include-git --no-include-pre)
    - |
      docker build \
        --target artifact \
        --output type=local,dest=./ \
        --build-arg AGENT_BRANCH=$CI_COMMIT_REF_NAME \
        --build-arg PACKAGE_TYPE=rpm \
        --build-arg AGENT_VERSION=$AGENT_VERSION \
        -f /tmp/otel-ci/Dockerfile.agent-otel /tmp/otel-ci
    - |
      RPM_PATH=ddot-byoc/datadog-agent-ddot-byoc-${AGENT_VERSION}-1.x86_64.rpm
      if [ ! -f "$RPM_PATH" ]; then
        echo "ERROR: Expected RPM package not found in output directory!" >&2
        exit 1
      fi
      rpm2archive - < "$RPM_PATH" | tar -tz | grep /opt/datadog-agent/embedded/bin/otel-agent || { echo "ERROR: otel-agent binary not found in RPM package"; exit 1; }
  rules:
    - !reference [.except_mergequeue]
    - when: on_success

ddot_byoc_package_build_test_deb:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/docker_x64$CI_IMAGE_DOCKER_X64_SUFFIX:$CI_IMAGE_DOCKER_X64
  needs: ["integration_tests_otel"]
  tags: ["docker-in-docker:amd64"]
  before_script:
    - !reference [docker_image_build_otel, before_script]
  script:
    - !reference [.login_to_docker_readonly]
    - AGENT_VERSION=$(dda inv -- agent.version --no-include-git --no-include-pre)
    - |
      docker build \
        --target artifact \
        --output type=local,dest=./ \
        --build-arg AGENT_BRANCH=$CI_COMMIT_REF_NAME \
        --build-arg PACKAGE_TYPE=deb \
        --build-arg AGENT_VERSION=$AGENT_VERSION \
        -f /tmp/otel-ci/Dockerfile.agent-otel /tmp/otel-ci
    - |
      DEB_PATH=ddot-byoc/datadog-agent-ddot-byoc_${AGENT_VERSION}_amd64.deb
      if [ ! -f "$DEB_PATH" ]; then
        echo "ERROR: Expected DEB package not found in output directory!" >&2
        exit 1
      fi
      dpkg -c "$DEB_PATH" | grep /opt/datadog-agent/embedded/bin/otel-agent || { echo "ERROR: otel-agent binary not found in DEB package"; exit 1; }
    # Check conflicts field for generated package
    - |
      [ "$(dpkg -f ${DEB_PATH} Conflicts)" = "datadog-agent-ddot" ] || { echo "ERROR: missing expected value for 'Conflicts'"; exit 1; }
    # Check runtime dependencies for generated package
    - |
      dpkg -f "${DEB_PATH}" Depends | grep datadog-agent || { echo "ERROR: package should depend on datadog-agent"; exit 1; }
  rules:
    - !reference [.except_mergequeue]
    - when: on_success

ddot_byoc_binary_build_test_ubuntu2004:
  stage: integration_test
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/docker_x64$CI_IMAGE_DOCKER_X64_SUFFIX:$CI_IMAGE_DOCKER_X64
  needs: ["integration_tests_otel"]
  tags: ["docker-in-docker:amd64"]
  before_script:
    - !reference [docker_image_build_otel, before_script]
  script:
    - !reference [.login_to_docker_readonly]
    - AGENT_VERSION=$(dda inv -- agent.version --no-include-git --no-include-pre)
    - |
      docker build \
        --target artifact \
        --output type=local,dest=./ \
        --build-arg AGENT_BRANCH=$CI_COMMIT_REF_NAME \
        --build-arg AGENT_VERSION=$AGENT_VERSION \
        --build-arg UBUNTU_VERSION=20.04 \
        -f /tmp/otel-ci/Dockerfile.agent-otel /tmp/otel-ci
    - |
      BIN_PATH=ddot-byoc/otel-agent
      if [ ! -f "$BIN_PATH" ]; then
        echo "ERROR: Expected otel-agent binary not found in output directory!" >&2
        exit 1
      fi
    # Check GLIBC compatibility (must be <= 2.31, given we built with Ubuntu 20.04)
    - |
      ALLOWED_GLIBC=2.31
      REQUIRED_GLIBC=$(objdump -T "$BIN_PATH" 2>/dev/null | grep -o 'GLIBC_[0-9][0-9.]*' | sed 's/[^0-9.]//g' | sort -V | tail -1)
      echo "Detected required GLIBC version: ${REQUIRED_GLIBC:-unknown} (allowed max: $ALLOWED_GLIBC)"
      if [ -z "$REQUIRED_GLIBC" ]; then
        echo "WARNING: Could not detect GLIBC requirement from binary; proceeding without hard failure." >&2
      else
        # This amounts to reporting an error when $REQUIRED_GLIBC > $ALLOWED_GLIBC
        highest_version=$(printf '%s\n%s\n' "$REQUIRED_GLIBC" "$ALLOWED_GLIBC" | sort -V | tail -1)
        if [[ "$REQUIRED_GLIBC" != "$ALLOWED_GLIBC" && "$highest_version" == "$REQUIRED_GLIBC" ]]; then
          echo "ERROR: otel-agent requires GLIBC_$REQUIRED_GLIBC which exceeds expected GLIBC_$ALLOWED_GLIBC" >&2
          objdump -T "$BIN_PATH" | grep 'GLIBC'
          exit 1
        fi
      fi
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
