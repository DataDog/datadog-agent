
.lint:
  stage: lint
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]

lint_licenses:
  extends: .lint
  script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.retrieve_linux_go_tools_deps]
    - inv -e install-tools
    - inv -e lint-licenses
  needs: ["go_tools_deps", "go_deps"]

lint_shell:
  extends: .lint
  script:
    - inv -e install-shellcheck
    - shellcheck --version
    #Excludes:
    #SC2028: echo may not expand escape sequences. Use printf.
    #SC2059: Don't use variables in the printf format string. Use printf "..%s.." "$foo".
    - shellcheck --severity=info -e SC2059 -e SC2028 --shell=bash ./cmd/**/*.sh ./omnibus/package-scripts/*/*

lint_filename:
  extends: .lint
  script:
    - inv -e linter.filenames

lint_copyrights:
  extends: .lint
  script:
    - inv -e linter.copyrights

lint_codeowners:
  extends: .lint
  script:
    - inv -e github.lint-codeowner

lint_components:
  extends: .lint
  script:
    - inv -e lint-components lint-fxutil-oneshot-test


lint_python:
  extends: .lint
  needs: []
  script:
    - inv -e linter.python

lint_update_go:
  extends: .lint
  needs: []
  script:
    - inv -e linter.update-go

validate_modules:
  extends: .lint
  needs: []
  script:
    - inv -e modules.validate
    - inv -e modules.validate-used-by-otel

# windows_validate_modules:
#   stage: lint
#   needs: []
#   variables:
#     IMAGE: registry.ddbuild.io/ci/datadog-agent/agent
#     BUILD_CONTEXT: Dockerfiles/agent
#   script:
#     - $ECR_RELEASE_SUFFIX="$(If ($BUCKET_BRANCH -eq `"nightly`") { `"-nightly`" } elseif ($CI_COMMIT_TAG) { `"-release`" } else { `"`" })"
#     - $TARGET_TAG="${IMAGE}${ECR_RELEASE_SUFFIX}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win${VARIANT}${SERVERCORE}-amd64"
#     - $ErrorActionPreference = "Stop"
#     - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
#     - cp ${OMNIBUS_PACKAGE_DIR}/${AGENT_ZIP} ${BUILD_CONTEXT}/datadog-agent-latest.amd64.zip
#     - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe

#     # Much faster but doesn't exist in build container
#     # - & 'C:\Program Files\7-Zip\7z.exe' x .\datadog-agent-latest.amd64.zip -o"Datadog Agent"
#     - pushd ${BUILD_CONTEXT}
#     - Expand-Archive datadog-agent-latest.amd64.zip
#     - Remove-Item datadog-agent-latest.amd64.zip
#     - Get-ChildItem -Path datadog-agent-* | Rename-Item -NewName "Datadog Agent"
#     - popd

#     - get-childitem ${BUILD_CONTEXT}
#     # Docker setup
#     - >
#       docker run --rm
#       -w C:\mnt
#       -e AWS_NETWORKING=true
#       -e SIGN_WINDOWS_DD_WCS=true
#       -e CI_PIPELINE_ID=${CI_PIPELINE_ID}
#       -e CI_PROJECT_NAME=${CI_PROJECT_NAME}
#       -e DOCKER_REGISTRY_LOGIN=${DOCKER_REGISTRY_LOGIN}
#       -e DOCKER_REGISTRY_PWD=${DOCKER_REGISTRY_PWD}
#       -v "$(Get-Location):C:\mnt"
#       -v \\.\pipe\docker_engine:\\.\pipe\docker_engine registry.ddbuild.io/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64${Env:DATADOG_AGENT_WINBUILDIMAGES_SUFFIX}:${Env:DATADOG_AGENT_WINBUILDIMAGES}
#       powershell
#       -Command "invoke -e modules.validate"
#     - If ($lastExitCode -ne "0") { exit "$lastExitCode" }
