
.lint:
  stage: lint
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]

lint_licenses:
  extends: .lint
  script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.retrieve_linux_go_tools_deps]
    - inv -e install-tools
    - inv -e lint-licenses
  needs: ["go_tools_deps", "go_deps"]

lint_shell:
  extends: .lint
  script:
    - inv -e install-shellcheck
    - shellcheck --version
    #Excludes:
    #SC2028: echo may not expand escape sequences. Use printf.
    #SC2059: Don't use variables in the printf format string. Use printf "..%s.." "$foo".
    - shellcheck --severity=info -e SC2059 -e SC2028 --shell=bash ./cmd/**/*.sh ./omnibus/package-scripts/*/*

lint_filename:
  extends: .lint
  script:
    - inv -e linter.filenames

lint_copyrights:
  extends: .lint
  script:
    - inv -e linter.copyrights

lint_codeowners:
  extends: .lint
  script:
    - inv -e github.lint-codeowner

lint_components:
  extends: .lint
  script:
    - inv -e lint-components lint-fxutil-oneshot-test


lint_python:
  extends: .lint
  needs: []
  script:
    - inv -e linter.python

lint_update_go:
  extends: .lint
  needs: []
  script:
    - inv -e linter.update-go

validate_modules:
  extends: .lint
  needs: []
  script:
    - inv -e modules.validate
    - inv -e modules.validate-used-by-otel

windows_validate_modules:
  stage: lint
  needs: []
  tags: ["runner:windows-docker", "windowsversion:1809"]
  script:
    - $ErrorActionPreference = "Stop"
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    # Previously this job required only 8Gb of memory but since Go 1.20 it requires more to avoid being OOM killed.
    # Each Windows VM has 32Gb of memory and contains 3 runners that can run one job at a time each (so a maximum of 3 simultaneous jobs per VM).
    # Windows jobs are using either 8Gb or 16Gb of memory so we can limit memory to 16Gb on this job because even if we decided to limit to 10Gb for instance,
    # it would leave 6Gb free but we could not fit another job with these 6Gb remaining.
    - >
      docker run --rm
      -m 16384M
      --storage-opt "size=50GB"
      -v "$(Get-Location):c:\mnt"
      -e AWS_NETWORKING=true
      -e CI_PIPELINE_ID=${CI_PIPELINE_ID}
      -e CI_PROJECT_NAME=${CI_PROJECT_NAME}
      -e GOMODCACHE="c:\modcache"
      registry.ddbuild.io/ci/datadog-agent-buildimages/windows_1809_${ARCH}${Env:DATADOG_AGENT_WINBUILDIMAGES_SUFFIX}:$Env:DATADOG_AGENT_WINBUILDIMAGES inv -e modules.validate
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
