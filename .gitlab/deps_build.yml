---
# deps_build stage
# Contains jobs which build various libraries needed for system-probe.

.build_clang_common:
  rules:
    !reference [.manual]
  stage: deps_build
  before_script:
    # Hack to work around the cloning issue with arm runners
    - mkdir -p $GOPATH/src/github.com/DataDog
    - '[[ "$ARCH" == arm64 ]] && cp -R $GOPATH/src/github.com/*/*/DataDog/datadog-agent $GOPATH/src/github.com/DataDog'
    - cd $SRC_PATH
    # HACK: empty the build directory cache (that can come from previous runs)
    #       to not have remainders of previous runs, which can make our deps bootstrapping logic fail.
    # TODO: remove this once we switch to k8s runners, they won't have this problem
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -depth  # -delete implies -depth
    - find "$CI_BUILDS_DIR" ! -path '*DataDog/datadog-agent*' -delete || true  # Allow failure, we can't remove parent folders of datadog-agent
  script:
    # use tmpdir to prevent git remote capture by clang build
    - mkdir /tmp/clangbuild && cd /tmp/clangbuild
    - CLANG_MAJOR_VER=$(echo "${CLANG_LLVM_VER}" | cut -d '.' -f 1)
    - CLANG_SHA256SUM=2b5847b6a63118b9efe5c85548363c81ffe096b66c3b3675e953e26342ae4031
    - LLVM_SHA256SUM=050922ecaaca5781fdf6631ea92bc715183f202f9d2f15147226f023414f619a
    - wget ${GENERAL_ARTIFACTS_CACHE_BUCKET_URL}/llvm/clang-${CLANG_LLVM_VER}.src.tar.xz -O clang.src.tar.xz
    - wget ${GENERAL_ARTIFACTS_CACHE_BUCKET_URL}/llvm/llvm-${CLANG_LLVM_VER}.src.tar.xz -O llvm.src.tar.xz
    - echo -e "${LLVM_SHA256SUM} llvm.src.tar.xz\n${CLANG_SHA256SUM} clang.src.tar.xz" | sha256sum --check -
    - mkdir clang && tar xf clang.src.tar.xz --strip-components=1 --no-same-owner -C clang
    - mkdir llvm && tar xf llvm.src.tar.xz --strip-components=1 --no-same-owner -C llvm
    - mkdir build && cd build
    # copy llvm cmake modules into the correct directory to ensure discovery
    # Build runs into this issue if the correct modules cannot be discovered:
    # https://github.com/llvm/llvm-project/issues/53281
    - cp ../llvm/Modules/* ../llvm/cmake/modules || echo "LLVM common cmake utils not found in directory 'Modules'"
    # patch references to glibc >= 2.18
    - patch -ruN ../llvm/CMakeLists.txt < $SRC_PATH/pkg/ebpf/c/cmakelists.patch
    - patch -ruN ../llvm/lib/Analysis/ConstantFolding.cpp < $SRC_PATH/pkg/ebpf/c/constant_folding.patch
    - |
      cmake -DLLVM_ENABLE_PROJECTS=clang \
      -DLLVM_TARGETS_TO_BUILD="BPF" \
      -DCMAKE_INSTALL_PREFIX=$DATADOG_AGENT_EMBEDDED_PATH \
      -G "Ninja" \
      -DCMAKE_BUILD_TYPE=MinSizeRel \
      -DLLVM_BUILD_TOOLS=ON \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_BENCHMARKS=OFF \
      -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
      -DLLVM_ENABLE_BINDINGS=OFF \
      -DLLVM_PARALLEL_COMPILE_JOBS=4 \
      -DLLVM_PARALLEL_LINK_JOBS=4 \
      -DLLVM_ENABLE_UNWIND_TABLES=OFF \
      ../llvm
    - cmake --build . --target install
    # fail if references to glibc >= 2.18
    - objdump -p $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} | egrep 'GLIBC_2\.(1[8-9]|[2-9][0-9])' && exit 1
    - objdump -p $DATADOG_AGENT_EMBEDDED_PATH/bin/llc | egrep 'GLIBC_2\.(1[8-9]|[2-9][0-9])' && exit 1
    # fail if clang or llc targets anything other than bpf
    - $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} -print-targets > clang_targets.txt
    - diff $SRC_PATH/pkg/ebpf/c/expected_targets.txt clang_targets.txt
    - $DATADOG_AGENT_EMBEDDED_PATH/bin/llc --version | tail -n +7 > llc_targets.txt # remove first 6 lines of llc version output; we only care about the registered targets
    - diff $SRC_PATH/pkg/ebpf/c/expected_targets.txt llc_targets.txt
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $S3_PERMANENT_ARTIFACTS_URI/clang-${CLANG_LLVM_VER}.${ARCH}
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $S3_PERMANENT_ARTIFACTS_URI/llc-${CLANG_LLVM_VER}.${ARCH}
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $S3_DD_AGENT_OMNIBUS_LLVM_URI/clang-${CLANG_LLVM_VER}.${ARCH} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - $S3_CP_CMD $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $S3_DD_AGENT_OMNIBUS_LLVM_URI/llc-${CLANG_LLVM_VER}.${ARCH} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - mkdir -p $CI_PROJECT_DIR/.tmp
    - cp $DATADOG_AGENT_EMBEDDED_PATH/bin/clang-${CLANG_MAJOR_VER} $CI_PROJECT_DIR/.tmp/clang
    - cp $DATADOG_AGENT_EMBEDDED_PATH/bin/llc $CI_PROJECT_DIR/.tmp/llc
  timeout: 2h 00m
  artifacts:
    expire_in: 2 weeks
    paths:
      - $CI_PROJECT_DIR/.tmp/clang
      - $CI_PROJECT_DIR/.tmp/llc

build_clang_x64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:main"]
  variables:
    ARCH: amd64

build_clang_arm64:
  extends: .build_clang_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

.build_omnibus-nikos_common:
  stage: deps_build
  rules:
    !reference [.manual]
  script:
    - git clone https://github.com/DataDog/omnibus-nikos.git /tmp/omnibus-nikos
    - cd /tmp/omnibus-nikos
    - !reference [.setup_ruby_mirror_linux]
    - /bin/bash -l -c "bundle install"
    - /bin/bash -l -c "export NIKOS_INSTALL_DIR=$NIKOS_INSTALL_DIR && bundle exec omnibus build nikos"
    - cd $NIKOS_EMBEDDED_PATH
    - cp lib/glib-2.0/include/glibconfig.h include
    - tar czf nikos.tar.gz *
    - $S3_CP_CMD nikos.tar.gz $S3_PERMANENT_ARTIFACTS_URI/nikos-$ARCH.tar.gz

build_omnibus-nikos_x64:
  extends: .build_omnibus-nikos_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/omnibus-nikos_x64:$DATADOG_AGENT_NIKOS_BUILDIMAGES
  tags: ["runner:main"]
  variables:
    ARCH: amd64

build_omnibus-nikos_arm64:
  extends: .build_omnibus-nikos_common
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/omnibus-nikos_arm64:$DATADOG_AGENT_NIKOS_BUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  variables:
    ARCH: arm64

build_vcpkg_deps:
  stage: deps_build
  tags: ["runner:windows-docker", "windowsversion:1809"]
  variables:
    ARCH: "x64"
  before_script:
    - $vcpkgBlobSaSUrl = (aws ssm get-parameter --region us-east-1 --name ci.datadog-agent-buildimages.vcpkg_blob_sas_url --with-decryption --query "Parameter.Value" --out text)
  script:
    - $ErrorActionPreference = "Stop"
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - if (Test-Path build-out) { remove-item -recurse -force build-out }
    - docker run --rm -m 4096M -v "$(Get-Location):c:\mnt" -e VCPKG_BINARY_SOURCES="clear;x-azblob,${vcpkgBlobSaSUrl},readwrite" 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_1809_${ARCH}:${Env:DATADOG_AGENT_WINBUILDIMAGES} C:\mnt\tasks\winbuildscripts\build_vcpkg_deps.bat
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
