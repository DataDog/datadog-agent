---
.agent_build_common_dmg:
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - mkdir -p $OMNIBUS_PACKAGE_DIR
    - !reference [.setup_macos_github_app]
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    - python3 -m pip install -r tasks/libs/requirements-github.txt
    - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
    - !reference [.upload_sbom_artifacts]
  timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

agent_dmg-x64-a7:
  extends: .agent_build_common_dmg
  rules:
    - !reference [.on_macos_gui_change]
    - !reference [.on_packaging_change]
    - !reference [.on_main_or_release_branch]
    - !reference [.on_all_builds]
    - !reference [.manual]
  stage: package_build
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check"]
  timeout: 6h
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7


# new-agent_dmg-x64-a7:
#   stage: package_build
#   # extends: .macos_gitlab
#   # tags: ["macos:ventura-amd64-test", "specific:true"]
#   tags: ["macos:ventura-arm64-test", "specific:true"] # TODO
#   needs: []
#   timeout: 6h
#   artifacts:
#     expire_in: 2 weeks
#     paths:
#   script:
#     - set -e
#     # TODO: Do it in runner
#     - |
#       brew install curl
#     - |
#       export PKG_CONFIG_VERSION=0.29.2
#       export RUBY_VERSION=2.7.4
#       export BUNDLER_VERSION=2.3.18
#       export PYTHON_VERSION=3.12.6
#       export RUST_VERSION=1.74.0
#       export RUSTUP_VERSION=1.25.1
#       export CMAKE_VERSION=3.30.2
#       export GIMME_VERSION=1.5.4
#       export GPG_VERSION=1.4.23
#       export CODECOV_VERSION=v0.6.1
#       export OPENSSL_VERSION=1.1
#     # - |
#     #   echo Setup env
#     #   mkdir bin
#     #   binaries="curl chmod cp mkdir tar rm mv ls bash make xz"
#     #   for binary in $binaries; do
#     #     echo Using $binary
#     #     ln -s "$(which $binary)" bin/$binary
#     #   done
#     #   # TODO A: PATH="$PWD/bin"
#     - |
#       echo Setup homebrew
#       mkdir homebrew
#       curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip-components 1 -C homebrew
#       eval "$(homebrew/bin/brew shellenv)"
#       brew update --force
#       chmod -R go-w "$(brew --prefix)/share/zsh"
#       brew tap DataDog/datadog-agent-macos-build
#     - |
#       echo Install cmake
#       brew install DataDog/datadog-agent-macos-build/cmake@$CMAKE_VERSION -f
#       brew link --overwrite cmake@$CMAKE_VERSION
#     - |
#       echo Install pkg-config
#       brew install DataDog/datadog-agent-macos-build/pkg-config@$PKG_CONFIG_VERSION -f
#       brew link --overwrite pkg-config@$PKG_CONFIG_VERSION
#     - |
#       echo Install python
#       brew install --build-from-source DataDog/datadog-agent-macos-build/python@$PYTHON_VERSION -f
#       brew link --overwrite python@$PYTHON_VERSION

new-agent_dmg-x64-a7:
  stage: package_build
  # extends: .macos_gitlab
  tags: ["macos:ventura-amd64-test", "specific:true"]
  # tags: ["macos:ventura-arm64-test", "specific:true"] # TODO
  needs: []
  timeout: 6h
  artifacts:
    expire_in: 2 weeks
    paths:
      # - $OMNIBUS_PACKAGE_DIR
      - /tmp/celian
  # after_script:
  #   - brew install gettext -fv || true
  #   - brew link --overwrite gettext || true
  #   - python3 --version || ( brew remove --force --ignore-dependencies python@3.12.6 && brew install python@3.12.6 --force ) || true
  script:
    - eval $("$HOME/homebrew/bin/brew" shellenv)
    # - echo AWS config
    # - which aws
    # - python3 -m venv .venv
    # - . .venv/bin/activate
    # - pip install awscli
    # - which aws
    # - instance_id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
    # - aws configure list
    # - export PATH="$PWD/bin:$PATH"
    # - |
    #   association_id="$(aws ec2 describe-iam-instance-profile-associations --filter "Name=instance-id,Values=$instance_id" --query 'IamInstanceProfileAssociations[0].AssociationId' --out text)" || true
    #   echo "ASSOCIATION ID (v1): $association_id" || true
    # - aws configure set region us-east-1
    # -  |
    #   association_id="$(aws ec2 describe-iam-instance-profile-associations --filter "Name=instance-id,Values=$instance_id" --query 'IamInstanceProfileAssociations[0].AssociationId' --out text)"
    #   echo "ASSOCIATION ID (v2): $association_id"

    # - env | grep -i aws
    # - sudo find ~ -name "*aws*" || true
    # - sudo find /etc -name "*aws*" || true
    # - sudo find /var -name "*aws*" || true
    # - sudo find /usr -name "*aws*" || true
    # - ls ~/.aws/config
    # - cat ~/.aws/config
    # - aws configure list
    # - aws configure get region
    # - exit
    # - echo Verifying libintl
    # - sudo find /usr -name "libintl*" || true
    # - sudo find /opt -name "libintl*" || true

    # - export PYTHON_VERSION=3.12.6
    # - which python
    # - brew remove --force --ignore-dependencies --formula gettext
    # - echo 'Trying to build python from source now without gettext, install it somewhere else and update path'
    # - brew remove --ignore-dependencies python@$PYTHON_VERSION -f
    # - |
    #   sudo bash -c 'rm -f /usr/local/bin/2to3*' || true
    #   sudo bash -c 'rm -f /usr/local/bin/idle3*' || true
    #   sudo bash -c 'rm -f /usr/local/bin/pydoc3*' || true
    #   sudo bash -c 'rm -f /usr/local/bin/python3*' || true
    #   sudo bash -c 'rm -f /usr/local/bin/python3*-config' || true
    #   sudo bash -c "rm -rf /Library/Frameworks/Python.framework/Versions/*" || true
    #   sudo bash -c "rm -rf /usr/local/Cellar/python@*" || true
    # - brew install --build-from-source DataDog/datadog-agent-macos-build/python@$PYTHON_VERSION -f
    # - brew link --overwrite python@$PYTHON_VERSION

    # - echo Verifying libintl
    # - sudo find /usr -name "libintl*" || true
    # - sudo find /opt -name "libintl*" || true
    # - echo Installed python
    # - which python
    # - ls -l "$(which python)"
    # - python --version


    # # TODO: Useful?
    # # - which python3 || true
    # # - source .venv/bin/activate
    # # - echo goroot $GOROOT
    # # - echo gopath $GOPATH
    # # - set -e

    - export RELEASE_VERSION=$RELEASE_VERSION_7
    - !reference [.vault_login]
    - NCPU="$(sysctl -n hw.ncpu)"

    # - |
    #   echo Removing preinstalled environment
    #   # brew remove --force --ignore-dependencies --formula aria2
    #   # # TODO: brew remove --force --ignore-dependencies --formula git
    #   # brew remove --force --ignore-dependencies --formula libidn2
    #   # brew remove --force --ignore-dependencies --formula wget
    #   brew remove --force --ignore-dependencies --formula gettext

    # - ls /usr/local/opt/python@3.12.6/libexec/bin || true
    # - export PATH="/usr/local/opt/python@3.12.6/libexec/bin:$PATH"
    # - which python3 || true
    # - python3 --help || true
    # - exit

    # - |
    #   debug()
    #   {
    #     echo Searching for libintl
    #     sudo find /usr -name "libintl*" || true
    #     sudo find /opt -name "libintl*" || true
    #   }
    #   echo After preinstall removal
    #   debug

    # # Install custom git to avoid libintl dependencies provided by gettext
    # - |
    #   install_git()
    #   {
    #     GIT_VERSION=2.48.1
    #     curl -LO https://github.com/git/git/archive/refs/tags/v${GIT_VERSION}.tar.gz
    #     # TODO: Remove etc.
    #     tar -xzf v${GIT_VERSION}.tar.gz
    #     pushd git-$GIT_VERSION

    #     make configure -j "$NCPU"
    #     ./configure
    #     echo Git Configured

    #     make all -j "$NCPU"
    #     echo Git Built

    #     echo "$PWD/git"

    #     popd

    #     # TODO A: Install?
    #     # sudo make install -j "$NCPU"
    #   }

    #   echo Installing git
    #   install_git

    #   # Use this local git
    #   export PATH="$PWD/git-$GIT_VERSION:$PATH"
    #   git --version

    #   echo After git install
    #   debug

    # # Setup builder
    # - |
    #   for dependency in $(brew list --formula); do
    #     brew remove --force --ignore-dependencies $dependency || echo "Warning: $dependency could not be removed"
    #   done
    # - rm -rf /usr/local/lib/ruby
    # - rm -rf /Library/Frameworks/Python.framework/Versions/*
    # # TODO
    # - bash .gitlab/package_build/builder_setup.sh
    # Setup
    - |
      echo Setting up venv
      python3 -m venv .venv
      . .venv/bin/activate
      python3 -m pip install -r requirements.txt -r tasks/requirements.txt
    - |
      # TODO A: Omnibus cache
      unset INTEGRATION_WHEELS_CACHE_BUCKET || true
      unset INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD || true
      unset S3_OMNIBUS_CACHE_BUCKET || true
      unset S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS || true
      # export INTEGRATION_WHEELS_CACHE_BUCKET=dd-agent-omnibus
      # export INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD="true"
      # export S3_OMNIBUS_CACHE_BUCKET="dd-ci-datadog-agent-omnibus-cache-build-stable"
      # export S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS="true"
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export AGENT_MAJOR_VERSION=7
      export PYTHON_RUNTIMES=3
      export INSTALL_DIR=/tmp/celian/bin
      export CONFIG_DIR=/tmp/celian/config
      export GOPATH="$GOROOT"
      export OMNIBUS_DIR=omnibus_build
    - rm -f ~/.build_setup; touch ~/.build_setup
    - rm -rf "$INSTALL_DIR" "$CONFIG_DIR"
    - mkdir -p "$INSTALL_DIR" "$CONFIG_DIR"
    # Omnibus TODO: Useless?
    - |
      rm -rf "$OMNIBUS_DIR" && mkdir -p "$OMNIBUS_DIR"
      echo Ignoring omnibus build cache
      # TODO: Omnibus cache
      # rm -rf _omnibus_cache_key_files && mkdir -p _omnibus_cache_key_files
      # cp ./{release.json,omnibus/Gemfile} _omnibus_cache_key_files
    # TODO: Cache go?
    - |
      mkdir -p $HOME/go
      echo 'export GOPATH=$HOME/go' >> ~/.build_setup
      echo 'export PATH="$GOPATH/bin:$PATH"' >> ~/.build_setup
      export GO_VERSION="$(cat .go-version)"
      eval "$(gimme $GO_VERSION)"
    - . ~/.build_setup
    # TODO: xcode 14.2?
    # - xcode-select -s /Applications/Xcode_14.3.1.app
    # TODO: Cache brew deps
    # TODO: Cache _omnibus_cache_key
    # TODO: Verify runner - bash .gitlab/package_build/builder_setup.sh
    # TODO: Add certificates to the keychain
    # TODO: Cache ruby deps
    # TODO: Cache...
    # - |
    #   export GOMODCACHE=~/gomodcache
    #   if [ "${USE_CACHING_PROXY_RUBY}" = "true" ]; then export BUNDLE_MIRROR__RUBYGEMS__ORG=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_GEMS_PATH}; fi
    #   if [ "${USE_CACHING_PROXY_PYTHON}" = "true" ]; then export PIP_INDEX_URL=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_PYPI_PATH}; fi
    #   mkdir -p $GOMODCACHE
    - bash .gitlab/package_build/build_script.sh
    # TODO: Other things...






    # - echo "About to build for $RELEASE_VERSION"
    # # remove artifacts from previous pipelines that may come from the cache
    # - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # - mkdir -p $OMNIBUS_PACKAGE_DIR
    # - !reference [.setup_macos_github_app]
    # - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    # - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    # - python3 -m pip install -r tasks/libs/requirements-github.txt
    # - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
    # - !reference [.upload_sbom_artifacts]

    # TODO
    # - echo "About to build for $RELEASE_VERSION"
    # # remove artifacts from previous pipelines that may come from the cache
    # - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # - mkdir -p $OMNIBUS_PACKAGE_DIR
    # - !reference [.setup_macos_github_app]
    # - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    # - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    # - python3 -m pip install -r tasks/libs/requirements-github.txt
    - echo Done
