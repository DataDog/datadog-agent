---
.agent_build_common_dmg:
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - mkdir -p $OMNIBUS_PACKAGE_DIR
    - !reference [.setup_macos_github_app]
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    - python3 -m pip install "git+https://github.com/DataDog/datadog-agent-dev.git@v$(cat .dda/version)"
    - python3 -m dda self dep sync -f legacy-tasks
    - dda inv -- -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
    - !reference [.upload_sbom_artifacts]
  timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

agent_dmg-x64-a7:
  extends: .agent_build_common_dmg
  rules:
    - !reference [.on_macos_gui_change]
    - !reference [.on_packaging_change]
    - !reference [.on_main_or_release_branch]
    - !reference [.on_all_builds]
    - !reference [.manual]
  stage: package_build
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check"]
  timeout: 6h

.macos_setup_python:
  # Selecting the current Python version
  - !reference [.select_python_env_commands]
  # List Python and Go existing environments and their disk space
  - !reference [.list_python_versions_commands]
  - !reference [.install_python_dependencies]

.macos_setup_cache:
  # Clean up previous builds
  - sudo bash -c "rm -rf /var/cache/omnibus/src/*" || true
  # Set bundler install path to cached folder
  - !reference [.cache_omnibus_ruby_deps, setup]
  - |
    export GOMODCACHE=~/gomodcache
    mkdir -p $GOMODCACHE

new-agent_dmg-x64-a7:
  stage: package_build
  tags: ["macos:ventura-amd64", "specific:true"]
  needs: ["go_mod_tidy_check"]
  allow_failure: true

  # TODO(celian): Temporary rules.
  rules:
    # This is used to avoid conflicts with the current build job on main / release branches with s3. This will run on dev branches
    - !reference  [.except_mergequeue]
    - !reference [.on_main_or_release_branch_or_deploy_manual]
    - when: on_success

  # TODO(celian): Replace by the following after testing new builds.
  # rules:
  #    - !reference [.on_macos_gui_change]
  #    - !reference [.on_packaging_change]
  #    - !reference [.on_main_or_release_branch]
  #    - !reference [.on_all_builds]
  #    - !reference [.manual]
  # allow_failure: false  # (remove)
  artifacts:
    expire_in: 2 weeks
    paths:
      - omnibus/pkg/*.dmg
      - omnibus/pkg/version-manifest.json
  variables:
    SIGN: true
    KEYCHAIN_NAME: "build.keychain"
    INTEGRATION_WHEELS_CACHE_BUCKET: dd-agent-omnibus
    INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD: true
    S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
    S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS: true
    NOTARIZATION_TIMEOUT: 30m
    NOTARIZATION_ATTEMPTS: 3
    NOTARIZATION_WAIT_TIME: 15s
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]
  before_script:
    # Since there is no virtualization on the macOS runners, we need to unmount the Agent dmg volume to avoid conflicts
    - sudo umount /Volumes/Agent || true
  after_script:
    # Destroy the keychain used to sign packages
    - |
      if [ "$SIGN" = true ]; then
        security delete-keychain "build.keychain" || true
      fi
    - sudo umount /Volumes/Agent || true
  script:
    - set -eo pipefail
    - !reference [.vault_login]
    - !reference [.macos_setup_python]
    - !reference [.macos_setup_cache]
    - bash .gitlab/package_build/build_agent_dmg.sh
    - !reference [.upload_sbom_artifacts]
