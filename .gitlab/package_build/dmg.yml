---
include:
  - .gitlab/common/macos.yml

# .agent_build_common_dmg:
#   script:
#     - echo "About to build for $RELEASE_VERSION"
#     # remove artifacts from previous pipelines that may come from the cache
#     - rm -rf $OMNIBUS_PACKAGE_DIR/*
#     - mkdir -p $OMNIBUS_PACKAGE_DIR
#     - !reference [.setup_macos_github_app]
#     - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
#     - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
#     - python3 -m pip install -r tasks/libs/requirements-github.txt
#     - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
#     - !reference [.upload_sbom_artifacts]
#   timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
#   artifacts:
#     expire_in: 2 weeks
#     paths:
#       - $OMNIBUS_PACKAGE_DIR

# agent_dmg-x64-a7:
#   extends: .agent_build_common_dmg
#   rules:
#     - !reference [.on_macos_gui_change]
#     - !reference [.on_packaging_change]
#     - !reference [.on_main_or_release_branch]
#     - !reference [.on_all_builds]
#     - !reference [.manual]
#   stage: package_build
#   image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
#   tags: ["arch:amd64"]
#   needs: ["go_mod_tidy_check"]
#   timeout: 6h
#   before_script:
#     - export RELEASE_VERSION=$RELEASE_VERSION_7



# TODO: Update image + rm gettext dependencies
new-agent_dmg-x64-a7:
  stage: package_build
  tags: ["macos:ventura-amd64-test", "specific:true"]
  # parallel: 2
  needs: []
  timeout: 6h
  artifacts:
    expire_in: 2 weeks
    paths:
      # TODO: Verify
      - datadog-agent-build
      - omnibus_build
    when: always
  before_script:
    - sudo umount /Volumes/Agent || true
  after_script:
    - sudo umount /Volumes/Agent || true
  script:
    - set -e

    # If 1, will isolate the build environment
    - export CUSTOM_HOMEBREW=
    # Adds one fix
    - export OMNIBUS_RUBY_VERSION=celian/macos-build

    - brew uses gettext --installed || true
    # - ls /usr/local/opt/gettext || true

    # - |
    #   # This sets the permission to send apple events to the Finder (required when using osascript)
    #   # TODO: vvv Verify if true vvv
    #   # NOTE: A reboot is required after this
    #   BINARY="/usr/local/bin/gitlab-runner"
    #   # Encoded: `identifier "com.apple.finder" and anchor apple`
    #   CSREQ=fade0c000000002c00000001000000060000000200000010636f6d2e6170706c652e66696e64657200000003
    #   sudo sqlite3 $HOME/Library/Application\ Support/com.apple.TCC/TCC.db "INSERT OR REPLACE INTO access VALUES('kTCCServiceAppleEvents','$BINARY',1,2,3,1,NULL,NULL,0,'com.apple.finder',X'$CSREQ',NULL,1592919552);"
    #   sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db "INSERT OR REPLACE INTO access VALUES('kTCCServiceAppleEvents','$BINARY',1,2,3,1,NULL,NULL,0,'com.apple.finder',X'$CSREQ',NULL,1592919552);"
    #   echo sudo sqlite3 $HOME/Library/Application\ Support/com.apple.TCC/TCC.db "INSERT OR REPLACE INTO access VALUES('kTCCServiceAppleEvents','$BINARY',1,2,3,1,NULL,NULL,0,'com.apple.finder',X'$CSREQ',NULL,1592919552);"
    # - sudo reboot

    - |
      osascript -e '
        tell application "Finder"
          tell disk "Macintosh HD"
            open
            set current view of container window to icon view
          end tell
        end tell'

    # - |
    #   if [ -n "$CUSTOM_HOMEBREW" ]; then
    #     if ! [ -d ~/homebrew ] || ! [ -d ~/bin ] || ! [ -d ~/rust/rustup ] || ! [ -d ~/rust/cargo ]; then
    #       echo "WARNING: Doing setup again"
    #       echo "home: $(ls ~)"
    #       rm -rf ~/bin ~/homebrew ~/rust
    #       export BUILD_SCRIPT="$PWD/.gitlab/package_build/build_script.sh"
    #       ( cd ~ && bash "$BUILD_SCRIPT" SETUP_RUNNER )
    #       ls ~
    #       ~/bin/git --version
    #     fi
    #   fi

    # Backport to avoid doing the setup again
    # - |
    #   echo Setup env
    #   (
    #     cd ~
    #     rm -rf bin
    #     mkdir bin
    #     binaries=("curl" "chmod" "cp" "cut" "date" "mkdir" "readlink" "dirname" "tar" "rm" "mv" "ls" "bash" "make" "xz" "true" "which" "vault" "du" "security" "touch" "cat" "basename" "go" "tr" "uname" "find" "tmutil" "sed" "grep" "git" "tee" "sudo" "xcodes" "xcodebuild" "sort" "uniq" "head")
    #     for binary in "${binaries[@]}"; do
    #         echo Using $binary
    #         ln -s "$(which $binary)" bin/$binary || true
    #     done
    #   )

    # - |
    #   binaries="tmutil sed grep git tee"
    #   for binary in $binaries; do
    #     echo Using $binary
    #     if [ -f "$HOME"/bin/$binary ]; then
    #       echo "Binary $binary already exists"
    #       continue
    #     fi
    #     ln -s "$(which $binary)" "$HOME"/bin/$binary || true
    #   done
    #   "$HOME"/bin/git --version || true

    # - echo Verifying libintl
    # - sudo find /usr -name "libintl*" || true
    # - sudo find /opt -name "libintl*" || true

    - export RELEASE_VERSION=$RELEASE_VERSION_7
    - !reference [.vault_login]
    - NCPU="$(sysctl -n hw.ncpu)"

    # Setup
    - |
      # TODO A: Omnibus cache
      unset INTEGRATION_WHEELS_CACHE_BUCKET || true
      unset INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD || true
      unset S3_OMNIBUS_CACHE_BUCKET || true
      unset S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS || true
      # export INTEGRATION_WHEELS_CACHE_BUCKET=dd-agent-omnibus
      # export INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD="true"
      # export S3_OMNIBUS_CACHE_BUCKET="dd-ci-datadog-agent-omnibus-cache-build-stable"
      # export S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS="true"
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export AGENT_MAJOR_VERSION=7
      export PYTHON_RUNTIMES=3
      export INSTALL_DIR=/tmp/celian/bin
      export CONFIG_DIR=/tmp/celian/config
      export OMNIBUS_DIR=omnibus_build
    - rm -rf "$INSTALL_DIR" "$CONFIG_DIR"
    - mkdir -p "$INSTALL_DIR" "$CONFIG_DIR"
    # Omnibus TODO: Useless?
    - |
      rm -rf "$OMNIBUS_DIR" && mkdir -p "$OMNIBUS_DIR"
      echo Ignoring omnibus build cache
      # TODO: Omnibus cache
      # rm -rf _omnibus_cache_key_files && mkdir -p _omnibus_cache_key_files
      # cp ./{release.json,omnibus/Gemfile} _omnibus_cache_key_files
    # TODO: Cache go?
    - mkdir -p ~/go
    # TODO: xcode 14.2?
    # - xcode-select -s /Applications/Xcode_14.3.1.app
    # TODO: Cache brew deps
    # TODO: Cache _omnibus_cache_key
    # TODO: Verify runner - bash .gitlab/package_build/builder_setup.sh
    # TODO: Add certificates to the keychain
    # TODO: Cache ruby deps
    # TODO: Cache...
    # - |
    #   export GOMODCACHE=~/gomodcache
    #   if [ "${USE_CACHING_PROXY_RUBY}" = "true" ]; then export BUNDLE_MIRROR__RUBYGEMS__ORG=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_GEMS_PATH}; fi
    #   if [ "${USE_CACHING_PROXY_PYTHON}" = "true" ]; then export PIP_INDEX_URL=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_PYPI_PATH}; fi
    #   mkdir -p $GOMODCACHE

    # - sudo xcodebuild -license accept
    # - sudo xcodes select 15.2
    # - ls ~/rust/rustup/bin || true
    # - python3 --version
    # - rustup --version || true
    # - cargo --version || true
    # - |
    #   debugruby()
    #   {
    #     (
    #       set +e
    #       echo "=== mkmf.log ==="
    #       cat omnibus/vendor/bundle/ruby/2.7.0/extensions/x86_64-darwin-22/2.7.0/ffi-1.15.5/mkmf.log
    #       echo "=== gem_make.out ==="
    #       cat omnibus/vendor/bundle/ruby/2.7.0/extensions/x86_64-darwin-22/2.7.0/ffi-1.15.5/gem_make.out
    #       echo "=== END DEBUG (see above for specific error) ==="
    #     )
    #   }

    # +=========================+
    # +--------- BUILD ---------+
    # +=========================+
    - bash .gitlab/package_build/build_script.sh
    # TODO: Other things...
    - echo Done
