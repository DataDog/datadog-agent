---
include:
  - .gitlab/common/macos.yml

# .agent_build_common_dmg:
#   script:
#     - echo "About to build for $RELEASE_VERSION"
#     # remove artifacts from previous pipelines that may come from the cache
#     - rm -rf $OMNIBUS_PACKAGE_DIR/*
#     - mkdir -p $OMNIBUS_PACKAGE_DIR
#     - !reference [.setup_macos_github_app]
#     - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
#     - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
#     - python3 -m pip install -r tasks/libs/requirements-github.txt
#     - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
#     - !reference [.upload_sbom_artifacts]
#   timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
#   artifacts:
#     expire_in: 2 weeks
#     paths:
#       - $OMNIBUS_PACKAGE_DIR

# agent_dmg-x64-a7:
#   extends: .agent_build_common_dmg
#   rules:
#     - !reference [.on_macos_gui_change]
#     - !reference [.on_packaging_change]
#     - !reference [.on_main_or_release_branch]
#     - !reference [.on_all_builds]
#     - !reference [.manual]
#   stage: package_build
#   image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
#   tags: ["arch:amd64"]
#   needs: ["go_mod_tidy_check"]
#   timeout: 6h
#   before_script:
#     - export RELEASE_VERSION=$RELEASE_VERSION_7


# Activates the python home venv where we install global packages
.macos_python_home_venv:
  - . $HOME/.venv/bin/activate

.macos_setup_python:
  - |
    PY_VERSION_AGENT=$(cat .python-version)
    PY_VERSION_RUNNER=$(python3 --version | cut -d " " -f 2)
    echo "Python version on the agent: $PY_VERSION_AGENT"
    echo "Python version on the runner: $PY_VERSION_RUNNER"
    # Verify that python versions are compatible
    if [[ "$PY_VERSION_RUNNER" != "$PY_VERSION_AGENT"* ]]; then
      echo "Python versions are not compatible. Please update the python version on the runner (https://github.com/DataDog/ci-platform-machine-images/blob/main/packer/macos-ami/team/datadog-agent-ventura.pkr.hcl)."
      exit 1
    fi
  - !reference [.macos_python_home_venv]
  - |
    # Install dda in the home venv
    # TODO A: Merge with main
    # python3 -m pip install "git+https://github.com/DataDog/datadog-agent-dev.git@v$(cat .dda/version)"
    python3 -m pip install "git+https://github.com/DataDog/datadog-agent-dev.git@v0.5.0"
    python3 -m dda self dep sync -f legacy-tasks
    which dda

# Add certificates to temporary keychain
.setup_signing:
  - |
    if [ "$SIGN" = true ]; then
      echo "Setting up signing secrets"

      KEYCHAIN_PWD=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_KEYCHAIN_PWD password) || exit $?; export KEYCHAIN_PWD
      CODESIGNING_CERT_BASE64=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_APPLICATION_SIGNING certificate) || exit $?; export CODESIGNING_CERT_BASE64
      CODESIGNING_CERT_PASSPHRASE=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_APPLICATION_SIGNING passphrase) || exit $?; export CODESIGNING_CERT_PASSPHRASE
      INSTALLER_CERT_BASE64=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_INSTALLER_SIGNING certificate) || exit $?; export INSTALLER_CERT_BASE64
      INSTALLER_CERT_PASSPHRASE=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_INSTALLER_SIGNING passphrase) || exit $?; export INSTALLER_CERT_PASSPHRASE

      # TODO: Verify export is necessary
      export NOTARIZATION_PWD=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_NOTARIZATION password) || exit $?; export NOTARIZATION_PWD
      export TEAM_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_DEVELOPER_ACCOUNT team-id) || exit $?; export TEAM_ID
      export APPLE_ACCOUNT=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_APPLE_DEVELOPER_ACCOUNT password) || exit $?; export APPLE_ACCOUNT

      # Create temporary build keychain
      security create-keychain -p "$KEYCHAIN_PWD" "build.keychain"

      # Let the keychain stay unlocked for 2 hours, otherwise the OS might lock
      # it again after a period of inactivity.
      security set-keychain-settings -lut 7200 "build.keychain"

      # Add the build keychain to the list of active keychains
      security list-keychains -d user -s "build.keychain" "login.keychain"

      security unlock-keychain -p "$KEYCHAIN_PWD" "build.keychain"

      # Apple has two different kinds of certificates:
      # - code signing certificates, to sign binaries.
      # - installer certificates, to sign the .pkg archive.
      # We use both, because having signed binaries & a signed installer is a prerequisite to
      # have an app notarized by Apple.
      echo "$CODESIGNING_CERT_BASE64" | base64 -d > ~/codesigning_cert.p12
      echo "$INSTALLER_CERT_BASE64" | base64 -d > ~/installer_cert.p12

      # Import codesigning cert, only allow codesign to use it without confirmation
      security import ~/codesigning_cert.p12 -f pkcs12 -P "$CODESIGNING_CERT_PASSPHRASE" -k "build.keychain" -T "/usr/bin/codesign"
      rm -f ~/codesigning_cert.p12

      # Import installer cert, only allow productbuild to use it without confirmation
      security import ~/installer_cert.p12 -f pkcs12 -P "$INSTALLER_CERT_PASSPHRASE" -k "build.keychain" -T "/usr/bin/productbuild"
      rm -f ~/installer_cert.p12

      # Update the key partition list
      # Since MacOS Sierra, this line is needed to "apply" the security import changes above
      # (namely the changes that allow using codesign and productbuild without user prompts)
      # See: https://stackoverflow.com/questions/39868578/security-codesign-in-sierra-keychain-ignores-access-control-settings-and-ui-p
      #      https://stackoverflow.com/questions/43002579/after-set-key-partition-list-codesign-still-prompts-for-key-access/43002580
      # for reference.
      # Note: this feature is badly documented (and doesn't even appear in the command list if you run security --help...).
      # Note: we silence the output of this command because it contains metadata about the certificates.
      security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PWD" "build.keychain" &>/dev/null
    fi


.macos_do_build:
  - |
    INVOKE_TASK="omnibus.build"
    if ! dda inv -- --list | grep -qF "$INVOKE_TASK"; then
        echo -e "\033[0;31magent.omnibus-build is deprecated. Please use omnibus.build!\033[0m"
        INVOKE_TASK="agent.omnibus-build"
    fi
  - |
    echo Launching omnibus build
    if [ "$SIGN" = "true" ]; then
        # Unlock the keychain to get access to the signing certificates
        security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
        dda inv -- -e $INVOKE_TASK --hardened-runtime --major-version "$AGENT_MAJOR_VERSION" --release-version "$RELEASE_VERSION" --config-directory "$CONFIG_DIR" --install-directory "$INSTALL_DIR" --base-dir "$OMNIBUS_DIR" || exit 1
        # Lock the keychain once we're done
        security lock-keychain "$KEYCHAIN_NAME"
    else
        dda inv -- -e $INVOKE_TASK --skip-sign --major-version "$AGENT_MAJOR_VERSION" --release-version "$RELEASE_VERSION" --config-directory "$CONFIG_DIR" --install-directory "$INSTALL_DIR" --base-dir "$OMNIBUS_DIR" || exit 1
    fi
    echo Built packages using omnibus


.macos_do_notarization:
  - |
    if [ "$SIGN" = true ]; then
      echo Doing notarization
      export RELEASE_VERSION=${RELEASE_VERSION:-$VERSION}
      unset LATEST_DMG

      # Find latest .dmg file in $GOPATH/src/github.com/Datadog/datadog-agent/omnibus/pkg
      for file in "$GOPATH/src/github.com/Datadog/datadog-agent/omnibus/pkg"/*.dmg; do
        if [[ -z "$LATEST_DMG" || "$file" -nt "$LATEST_DMG" ]]; then LATEST_DMG="$file"; fi
      done

      echo "File to upload: $LATEST_DMG"

      # Send package for notarization; retrieve REQUEST_UUID
      echo "Sending notarization request."

      RESULT=$(xcrun notarytool submit --apple-id "$APPLE_ACCOUNT" --team-id "$TEAM_ID" --password "$NOTARIZATION_PWD" "$LATEST_DMG" --wait) || EXIT_CODE=$?
      echo "Results: $RESULT"
      SUBMISSION_ID=$(echo "$RESULT" | awk '$1 == "id:"{print $2; exit}')
      echo "Submission ID: $SUBMISSION_ID"
      echo "Submission logs:"
      xcrun notarytool log --apple-id "$APPLE_ACCOUNT" --team-id "$TEAM_ID" --password "$NOTARIZATION_PWD" "$SUBMISSION_ID"
      if [ -n "$EXIT_CODE" ]; then
        # Once we have some logs, propagate potential failures
        exit $EXIT_CODE
      fi
    fi


new-agent_dmg-x64-a7:
  stage: package_build
  tags: ["macos:ventura-amd64-test", "specific:true"]
  # parallel: 2
  # needs:
  #   - setup_agent_version
  # TODO
  needs: []
  timeout: 6h
  artifacts:
    expire_in: 2 weeks
    paths:
      # TODO: Verify + only *.dmg + version manifest
      - omnibus_build/pkg
    when: always
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: 3
    # TODO
    OMNIBUS_RUBY_VERSION: celian/macos-build
    # TODO
    # SIGN: true
  before_script:
    - sudo umount /Volumes/Agent || true
  after_script:
    # Destroy the keychain used to sign packages
    - |
      if [ "$SIGN" = true ]; then
        security delete-keychain "build.keychain"
      fi
    - sudo umount /Volumes/Agent
  script:
    - set -eo pipefail

    - !reference [.macos_setup_python]

    - brew uses gettext --installed || true

    # TODO
    # - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache /tmp/cache && cat /tmp/cache

    - |
      if [ "$SIGN" = true ]; then
        echo "Signing enabled"
      else
        echo "Signing disabled"
      fi

    - !reference [.vault_login]

    # TODO A: Remove
    - KEYCHAIN_PWD=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_KEYCHAIN_PWD password) || exit $?

    # Setup
    - |
      # TODO A: Omnibus cache
      unset INTEGRATION_WHEELS_CACHE_BUCKET || true
      unset INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD || true
      unset S3_OMNIBUS_CACHE_BUCKET || true
      unset S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS || true
      # export INTEGRATION_WHEELS_CACHE_BUCKET=dd-agent-omnibus
      # export INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD="true"
      # export S3_OMNIBUS_CACHE_BUCKET="dd-ci-datadog-agent-omnibus-cache-build-stable"
      # export S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS="true"
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export INSTALL_DIR="$PWD/datadog-agent-build/bin"
      export CONFIG_DIR="$PWD/datadog-agent-build/config"
      export OMNIBUS_DIR="$PWD/omnibus_build"
      unset OMNIBUS_BASE_DIR
      unset OMNIBUS_PACKAGE_DIR
    - !reference [.setup_signing]
    # TODO
    # - |
    #   export OMNIBUS_BASE_DIR="$PWD/omnibus_build"
    #   mkdir -p "$OMNIBUS_BASE_DIR/pkg"
    # TODO: xcode 14.2?
    # - xcode-select -s /Applications/Xcode_14.3.1.app
    - |
      rm -rf "$INSTALL_DIR" "$CONFIG_DIR"
      mkdir -p "$INSTALL_DIR" "$CONFIG_DIR"
      rm -rf "$OMNIBUS_DIR" && mkdir -p "$OMNIBUS_DIR"
      echo Ignoring omnibus build cache
      # TODO: Omnibus cache
      # rm -rf _omnibus_cache_key_files && mkdir -p _omnibus_cache_key_files
      # cp ./{release.json,omnibus/Gemfile} _omnibus_cache_key_files
    # TODO: Cache go?
    - mkdir -p ~/go
    # TODO: Cache brew deps
    # TODO: Cache _omnibus_cache_key
    # TODO: Verify runner - bash .gitlab/package_build/builder_setup.sh
    # TODO: Cache ruby deps
    # TODO: Cache...
    # - |
      # export ARTIFACTORY_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_ARTIFACTORY bearer-token) || exit $?; export ARTIFACTORY_TOKEN
      # export ARTIFACTORY_USERNAME=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_ARTIFACTORY user) || exit $?; export ARTIFACTORY_USERNAME
      # export ARTIFACTORY_URL=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_ARTIFACTORY hostname) || exit $?; export ARTIFACTORY_URL
    #   export GOMODCACHE=~/gomodcache
    #   if [ "${USE_CACHING_PROXY_RUBY}" = "true" ]; then export BUNDLE_MIRROR__RUBYGEMS__ORG=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_GEMS_PATH}; fi
    #   if [ "${USE_CACHING_PROXY_PYTHON}" = "true" ]; then export PIP_INDEX_URL=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_PYPI_PATH}; fi
    #   mkdir -p $GOMODCACHE

    # TODO A: Remove
    # -  |
    #   echo Setting up python venv
    #   python3 -m venv .venv
    #   source .venv/bin/activate
    #   python3 -m pip install -r requirements.txt -r tasks/requirements.txt
    #   echo Python version
    #   python3 --version

    - |
      echo Setting up Go
      export GO_VERSION="$(cat .go-version)"
      eval "$(gimme $GO_VERSION)"
      export GOPATH="$GOROOT" # TODO
      export PATH="$PATH:$GOPATH/bin"
      echo Go version should be $GO_VERSION
      go version
      # TODO: Use dda
      inv check-go-version || exit 1

    - |
      # Clean up previous builds
      # TODO: Verify
      ls /omnibus || true
      sudo bash -c "rm -rf /var/cache/omnibus/src/* /omnibus/Gemfile.lock" || true

      # Set bundler install path to cached folder
      pushd omnibus && bundle config set --local path 'vendor/bundle' && popd

      # Update the INTEGRATION_CORE_VERSION if requested
      if [ -n "$INTEGRATIONS_CORE_REF" ]; then
          export INTEGRATIONS_CORE_VERSION="$INTEGRATIONS_CORE_REF"
      fi
    - !reference [.macos_do_build]
    - !reference [.macos_do_notarization]
    - |
      if [ "$SIGN" = true ]; then
        echo Built signed package
      else
        echo Built unsigned package
      fi
