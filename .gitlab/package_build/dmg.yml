---
include:
  - .gitlab/common/macos.yml

# .agent_build_common_dmg:
#   script:
#     - echo "About to build for $RELEASE_VERSION"
#     # remove artifacts from previous pipelines that may come from the cache
#     - rm -rf $OMNIBUS_PACKAGE_DIR/*
#     - mkdir -p $OMNIBUS_PACKAGE_DIR
#     - !reference [.setup_macos_github_app]
#     - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
#     - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
#     - python3 -m pip install -r tasks/libs/requirements-github.txt
#     - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
#     - !reference [.upload_sbom_artifacts]
#   timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
#   artifacts:
#     expire_in: 2 weeks
#     paths:
#       - $OMNIBUS_PACKAGE_DIR

# agent_dmg-x64-a7:
#   extends: .agent_build_common_dmg
#   rules:
#     - !reference [.on_macos_gui_change]
#     - !reference [.on_packaging_change]
#     - !reference [.on_main_or_release_branch]
#     - !reference [.on_all_builds]
#     - !reference [.manual]
#   stage: package_build
#   image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
#   tags: ["arch:amd64"]
#   needs: ["go_mod_tidy_check"]
#   timeout: 6h
#   before_script:
#     - export RELEASE_VERSION=$RELEASE_VERSION_7

# Add certificates to temporary keychain
.setup_signing:
  # CODESIGNING_CERT_BASE64: ${{ secrets.CODESIGNING_CERT_2025_B64 }}
  # CODESIGNING_CERT_PASSPHRASE: ${{ secrets.CODESIGNING_CERT_2025_PASSPHRASE }}
  # INSTALLER_CERT_BASE64: ${{ secrets.INSTALLER_CERT_2024_B64 }}
  # INSTALLER_CERT_PASSPHRASE: ${{ secrets.INSTALLER_CERT_2024_PASSPHRASE }}
  # KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
  # ENABLE_SIGN: ${{ secrets.ENABLE_SIGN }}
  - |
    # Create temporary build keychain
    security create-keychain -p "$KEYCHAIN_PWD" "build.keychain"

    # Let the keychain stay unlocked for 2 hours, otherwise the OS might lock
    # it again after a period of inactivity.
    security set-keychain-settings -lut 7200 "build.keychain"

    # Add the build keychain to the list of active keychains
    security list-keychains -d user -s "build.keychain" "login.keychain"

    security unlock-keychain -p "$KEYCHAIN_PWD" "build.keychain"

    # Apple has two different kinds of certificates:
    # - code signing certificates, to sign binaries.
    # - installer certificates, to sign the .pkg archive.
    # We use both, because having signed binaries & a signed installer is a prerequisite to
    # have an app notarized by Apple.
    echo "$CODESIGNING_CERT_BASE64" | base64 -d > ~/codesigning_cert.p12
    echo "$INSTALLER_CERT_BASE64" | base64 -d > ~/installer_cert.p12

    # Import codesigning cert, only allow codesign to use it without confirmation
    security import ~/codesigning_cert.p12 -f pkcs12 -P "$CODESIGNING_CERT_PASSPHRASE" -k "build.keychain" -T "/usr/bin/codesign"
    rm -f ~/codesigning_cert.p12

    # Import installer cert, only allow productbuild to use it without confirmation
    security import ~/installer_cert.p12 -f pkcs12 -P "$INSTALLER_CERT_PASSPHRASE" -k "build.keychain" -T "/usr/bin/productbuild"
    rm -f ~/installer_cert.p12

    # Update the key partition list
    # Since MacOS Sierra, this line is needed to "apply" the security import changes above
    # (namely the changes that allow using codesign and productbuild without user prompts)
    # See: https://stackoverflow.com/questions/39868578/security-codesign-in-sierra-keychain-ignores-access-control-settings-and-ui-p
    #      https://stackoverflow.com/questions/43002579/after-set-key-partition-list-codesign-still-prompts-for-key-access/43002580
    # for reference.
    # Note: this feature is badly documented (and doesn't even appear in the command list if you run security --help...).
    # Note: we silence the output of this command because it contains metadata about the certificates.
    security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PWD" "build.keychain" &>/dev/null



# TODO: Update image + rm gettext dependencies
new-agent_dmg-x64-a7:
  stage: package_build
  tags: ["macos:ventura-amd64-test", "specific:true"]
  # parallel: 2
  needs: []
  timeout: 6h
  artifacts:
    expire_in: 2 weeks
    paths:
      # TODO: Verify + only *.dmg + version manifest
      - omnibus_build/pkg
    when: always
  before_script:
    - sudo umount /Volumes/Agent || true
  after_script:
    - sudo umount /Volumes/Agent || true
    # TODO A
    - rm -rf ~/datadog-agent
    - ls ~
  script:
    - set -euo pipefail

    - rm -rf ~/datadog-agent
    - cp -r ./* ~/datadog-agent
    - WORKDIR="$PWD"
    - cd "$HOME/datadog-agent"

    # - !reference [.setup_signing]

    # TODO A: Remove
    # Adds one fix
    - export OMNIBUS_RUBY_VERSION=celian/macos-build
    - !reference [.vault_login]
    - NCPU="$(sysctl -n hw.ncpu)"

    # Setup
    - |
      # export SIGN=true
      # TODO A: Omnibus cache
      unset INTEGRATION_WHEELS_CACHE_BUCKET || true
      unset INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD || true
      unset S3_OMNIBUS_CACHE_BUCKET || true
      unset S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS || true
      # export INTEGRATION_WHEELS_CACHE_BUCKET=dd-agent-omnibus
      # export INTEGRATION_WHEELS_SKIP_CACHE_UPLOAD="true"
      # export S3_OMNIBUS_CACHE_BUCKET="dd-ci-datadog-agent-omnibus-cache-build-stable"
      # export S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS="true"
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export RELEASE_VERSION=$RELEASE_VERSION_7
      export AGENT_MAJOR_VERSION=7
      export PYTHON_RUNTIMES=3
      export INSTALL_DIR="$PWD/datadog-agent-build/bin"
      export CONFIG_DIR="$PWD/datadog-agent-build/config"
      export OMNIBUS_DIR=omnibus_build
      unset OMNIBUS_BASE_DIR
      unset OMNIBUS_PACKAGE_DIR
    - rm -rf "$INSTALL_DIR" "$CONFIG_DIR"
    - mkdir -p "$INSTALL_DIR" "$CONFIG_DIR"
    # Omnibus TODO: Useless?
    - |
      rm -rf "$OMNIBUS_DIR" && mkdir -p "$OMNIBUS_DIR"
      echo Ignoring omnibus build cache
      # TODO: Omnibus cache
      # rm -rf _omnibus_cache_key_files && mkdir -p _omnibus_cache_key_files
      # cp ./{release.json,omnibus/Gemfile} _omnibus_cache_key_files
    # TODO: Cache go?
    - mkdir -p ~/go
    # TODO: xcode 14.2?
    # - xcode-select -s /Applications/Xcode_14.3.1.app
    # TODO: Cache brew deps
    # TODO: Cache _omnibus_cache_key
    # TODO: Verify runner - bash .gitlab/package_build/builder_setup.sh
    # TODO: Add certificates to the keychain
    # TODO: Cache ruby deps
    # TODO: Cache...
    # - |
    #   export GOMODCACHE=~/gomodcache
    #   if [ "${USE_CACHING_PROXY_RUBY}" = "true" ]; then export BUNDLE_MIRROR__RUBYGEMS__ORG=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_GEMS_PATH}; fi
    #   if [ "${USE_CACHING_PROXY_PYTHON}" = "true" ]; then export PIP_INDEX_URL=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_PYPI_PATH}; fi
    #   mkdir -p $GOMODCACHE

    # +=========================+
    # +--------- BUILD ---------+
    # +=========================+
    # TODO A: Move this to this script section
    - bash "$WORKDIR"/.gitlab/package_build/build_script.sh
    - mkdir -p "$WORKDIR"/omnibus_build/pkg
    - cp -r omnibus_build/pkg/* "$WORKDIR"/omnibus_build/pkg
    # TODO: Other things...
    - echo Done
