---
.agent_build_common_dmg:
  script:
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - mkdir -p $OMNIBUS_PACKAGE_DIR
    - !reference [.setup_macos_github_app]
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    - python3 -m pip install -r tasks/libs/requirements-github.txt
    - inv -e github.trigger-macos --workflow-type "build" --datadog-agent-ref "$CI_COMMIT_SHA" --release-version "$RELEASE_VERSION" --destination "$OMNIBUS_PACKAGE_DIR" --version-cache "$VERSION_CACHE_CONTENT" --integrations-core-ref "$INTEGRATIONS_CORE_VERSION"
    - !reference [.upload_sbom_artifacts]
  timeout: 3h # MacOS builds can take 1h~2h, increase the timeout to avoid timeout flakes
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

agent_dmg-x64-a7:
  extends: .agent_build_common_dmg
  rules:
    - !reference [.on_macos_gui_change]
    - !reference [.on_packaging_change]
    - !reference [.on_main_or_release_branch]
    - !reference [.on_all_builds]
    - !reference [.manual]
  stage: package_build
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check"]
  timeout: 6h
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

.runner_setup_custom_homebrew:
  # TODO: Do it in runner
  - |
    export HOMEBREW_VERSION=4.4.21
    export PKG_CONFIG_VERSION=0.29.2
    export RUBY_VERSION=2.7.4
    export BUNDLER_VERSION=2.3.18
    export PYTHON_VERSION=3.12.6
    export RUST_VERSION=1.74.0
    export RUSTUP_VERSION=1.25.1
    export CMAKE_VERSION=3.30.2
    export GIMME_VERSION=1.5.4
    export GPG_VERSION=1.4.23
    export CODECOV_VERSION=v0.6.1
    export OPENSSL_VERSION=1.1
  - |
    echo Setup env
    mkdir bin
    binaries="curl chmod cp date mkdir readlink dirname tar rm mv ls bash make xz true which vault du security"
    for binary in $binaries; do
      echo Using $binary
      ln -s "$(which $binary)" bin/$binary
    done
  - |
    echo Setup homebrew
    mkdir homebrew
    curl -L https://github.com/Homebrew/brew/tarball/$HOMEBREW_VERSION | tar xz --strip-components 1 -C homebrew
    # Enable custom env
    export PATH="$PWD/bin"
    eval "$(homebrew/bin/brew shellenv)"
    brew update --force
    # TODO A: Necessary?
    chmod -R go-w "$(brew --prefix)/share/zsh"
    brew tap DataDog/datadog-agent-macos-build
  - |
    echo Install cmake
    brew install DataDog/datadog-agent-macos-build/cmake@$CMAKE_VERSION -f
    brew link --overwrite cmake@$CMAKE_VERSION
  - |
    echo Install pkg-config
    brew install DataDog/datadog-agent-macos-build/pkg-config@$PKG_CONFIG_VERSION -f
    brew link --overwrite pkg-config@$PKG_CONFIG_VERSION
  # TODO A: Not the proper path
  - |
    brew install DataDog/datadog-agent-macos-build/gnupg@$GPG_VERSION -f
    brew link --overwrite gnupg@$GPG_VERSION
    # TODO
    echo GPG debug
    export PATH="$PWD/homebrew/Cellar/gnupg@$GPG_VERSION/libexec/gpgbin:$PATH"
    ls -l "$PWD/homebrew/Cellar/gnupg@$GPG_VERSION/libexec/gpgbin" || true
    # # Adding gpgbin to the PATH to be able to call gpg and gpgv
    # echo 'export PATH="/usr/local/opt/gnupg@1.4.23/libexec/gpgbin:$PATH"' >>~/.zshrc
    echo "$PWD/homebrew/Cellar/gnupg@$GPG_VERSION/libexec/gpgbin" || true
    ls "$PWD/homebrew/Cellar/gnupg@$GPG_VERSION" || true
    which gpg || true
    which gpgv || true
  - |
    echo Install openssl
    brew install -v DataDog/datadog-agent-macos-build/openssl@$OPENSSL_VERSION -f
    brew link --overwrite openssl@$OPENSSL_VERSION
  - |
    echo Install ruby
    brew install DataDog/datadog-agent-macos-build/ruby@$RUBY_VERSION -f
    brew link --overwrite ruby@$RUBY_VERSION
    gem install bundler -v $BUNDLER_VERSION -f
  - |
    echo Install python
    brew install --build-from-source DataDog/datadog-agent-macos-build/python@$PYTHON_VERSION -f
    brew link --overwrite python@$PYTHON_VERSION
    # TODO:
    # echo 'export PATH="/usr/local/opt/python@'"$PYTHON_VERSION"'/libexec/bin:$PATH"' >>~/.zshrc
  # TODO A: Install in homebrew env
  - |
    echo Install rust on arm64
    mkdir -p rust/cargo rust/rustup
    export CARGO_HOME="$PWD/rust/cargo"
    export RUSTUP_HOME="$PWD/rust/rustup"
    # TODO A: amd64 x86_64
    # export ARCH=aarch64
    export ARCH=x86_64
    curl -sSL -o rustup-init https://static.rust-lang.org/rustup/archive/$RUSTUP_VERSION/$ARCH-apple-darwin/rustup-init
    chmod +x ./rustup-init
    ./rustup-init -y --profile minimal --default-toolchain $RUST_VERSION
    rm ./rustup-init
    export PATH="$CARGO_HOME/bin:$RUSTUP_HOME/bin:$PATH"
    # which cargo
    # which rustc
  - |
    echo Install gimme
    brew install DataDog/datadog-agent-macos-build/gimme@$GIMME_VERSION -f
    brew link --overwrite gimme@$GIMME_VERSION

new-agent_dmg-x64-a7:
  stage: package_build
  extends: .macos_gitlab
  tags: ["macos:ventura-amd64-test", "specific:true"]
  # tags: ["macos:ventura-arm64-test", "specific:true"] # TODO
  needs: []
  timeout: 6h
  artifacts:
    expire_in: 2 weeks
    paths:
      - /tmp/celian
  script:
    - set -e
    - !reference [.runner_setup_custom_homebrew]
    # TODO A: - !reference [.vault_login]
    - |
      echo Starting build script
      bash .gitlab/package_build/build_script.sh
