---
.static_quality_gate_msi: |
  # Measure MSI package size and generate in-place report
  # This runs after the main script and won't fail the job if there are issues.
  # Windows-only, runs on MSI build jobs

  if ($null -ne $env:STATIC_QUALITY_GATE_NAME) {
    Write-Host "📊 Starting MSI measurement..."
    
    # Determine project name based on AGENT_FLAVOR
    if ($env:AGENT_FLAVOR -eq "fips") {
      $ProjectName = "fips-datadog-agent"
    } else {
      $ProjectName = "datadog-agent"
    }
    
    # MSI pattern in omnibus package directory
    $PackagePattern = "omnibus\pkg\pipeline-$env:CI_PIPELINE_ID\$ProjectName-7*-$env:ARCH.msi"
    
    Write-Host "🔍 Looking for MSI with pattern: $PackagePattern"
    
    # Extract report prefix from gate name
    $ReportPrefix = $env:STATIC_QUALITY_GATE_NAME -replace '^static_quality_gate_', ''
    
    $MsiFiles = Get-ChildItem -Path $PackagePattern -ErrorAction SilentlyContinue
    
    if ($MsiFiles) {
      foreach ($MsiFile in $MsiFiles) {
        Write-Host "📏 Measuring MSI: $($MsiFile.FullName)"
        
        # Generate measurement report using STATIC_QUALITY_GATE_NAME variable
        $OutputPath = "${ReportPrefix}_size_report_${env:CI_PIPELINE_ID}_$($env:CI_COMMIT_SHA.Substring(0,8)).yml"
        
        dda inv quality-gates.measure-msi `
          --msi-path $MsiFile.FullName `
          --gate-name $env:STATIC_QUALITY_GATE_NAME `
          --build-job-name $env:CI_JOB_NAME `
          --output-path $OutputPath `
          --debug
        
        if ($LASTEXITCODE -ne 0) {
          Write-Host "⚠️  MSI measurement failed for $($MsiFile.FullName)"
          exit 0
        }
        
        Write-Host "✅ MSI measurement completed"
        
        # Upload the report to S3
        $BucketBasePath = "s3://dd-ci-artefacts-build-stable/datadog-agent/static_quality_gates/GATE_REPORTS/$env:CI_COMMIT_SHA"
        Write-Host "Uploading report to ${BucketBasePath}"
        try {
          aws s3 cp --only-show-errors --region us-east-1 --sse AES256 `
            $OutputPath `
            "${BucketBasePath}/${OutputPath}"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "⚠️  S3 upload failed but continuing"
          }
        } catch {
          Write-Host "⚠️  S3 upload failed: $_"
        }
      }
    } else {
      Write-Host "⚠️  No MSI found matching pattern: $PackagePattern"
      exit 0
    }
  } else {
    Write-Host "ℹ️  Skipping MSI measurement (no STATIC_QUALITY_GATE_NAME defined)"
  }

.static_quality_gate_msi_report_path: "**/*_size_report_*.yml"

.windows_msi_base:
  stage: package_build
  extends: .windows_docker_default
  needs: ["go_deps"]
  script:
    - $ErrorActionPreference = 'Stop'
    - if (Test-Path omnibus\pkg) { remove-item -recurse -force omnibus\pkg }
    - mkdir omnibus\pkg
    - >
      docker run --rm
      -m 24576M
      -v "$(Get-Location):c:\mnt"
      -e CI_JOB_ID=${CI_JOB_ID}
      -e CI_PIPELINE_ID=${CI_PIPELINE_ID}
      -e CI_PROJECT_NAME=${CI_PROJECT_NAME}
      -e CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      -e CI_JOB_NAME_SLUG=${CI_JOB_NAME_SLUG}
      -e CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}
      -e OMNIBUS_TARGET=${OMNIBUS_TARGET}
      -e WINDOWS_BUILDER=true
      -e INTEGRATIONS_CORE_VERSION="$INTEGRATIONS_CORE_VERSION"
      -e WINDOWS_DDNPM_DRIVER="$WINDOWS_DDNPM_DRIVER"
      -e WINDOWS_DDNPM_VERSION="$WINDOWS_DDNPM_VERSION"
      -e WINDOWS_DDNPM_SHASUM="$WINDOWS_DDNPM_SHASUM"
      -e WINDOWS_DDPROCMON_DRIVER="$WINDOWS_DDPROCMON_DRIVER"
      -e WINDOWS_DDPROCMON_VERSION="$WINDOWS_DDPROCMON_VERSION"
      -e WINDOWS_DDPROCMON_SHASUM="$WINDOWS_DDPROCMON_SHASUM"
      -e GOMODCACHE="c:\modcache"
      -e AWS_NETWORKING=true
      -e SIGN_WINDOWS_DD_WCS=true
      -e TARGET_ARCH="$ARCH"
      -e DEBUG_CUSTOMACTION="$DEBUG_CUSTOMACTION"
      -e BUCKET_BRANCH="$BUCKET_BRANCH"
      -e S3_OMNIBUS_CACHE_BUCKET="$S3_OMNIBUS_CACHE_BUCKET"
      -e S3_OMNIBUS_GIT_CACHE_BUCKET="$S3_OMNIBUS_GIT_CACHE_BUCKET"
      -e INTEGRATION_WHEELS_CACHE_BUCKET="$INTEGRATION_WHEELS_CACHE_BUCKET"
      -e BUNDLE_MIRROR__RUBYGEMS__ORG=${BUNDLE_MIRROR__RUBYGEMS__ORG}
      -e PIP_INDEX_URL=${PIP_INDEX_URL}
      -e API_KEY_ORG2=${API_KEY_ORG2}
      -e OMNIBUS_GIT_CACHE_DIR=${Env:TEMP}/${CI_PIPELINE_ID}/omnibus-git-cache
      -e AGENT_FLAVOR=${AGENT_FLAVOR}
      -e OMNIBUS_RUBY_VERSION="${OMNIBUS_RUBY_VERSION}"
      -e PYTHONUTF8=1
      -e E2E_COVERAGE_PIPELINE=${E2E_COVERAGE_PIPELINE}
      -e CI_JOB_TOKEN=${CI_JOB_TOKEN}
      ${WINBUILDIMAGE}
      powershell -C "c:\mnt\tasks\winbuildscripts\Build-AgentPackages.ps1 -BuildOutOfSource 1 -InstallDeps 1 -CheckGoVersion 1 -BuildUpgrade 1"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - get-childitem omnibus\pkg\pipeline-$CI_PIPELINE_ID
    - !reference [.upload_sbom_artifacts_windows]
  artifacts:
    expire_in: 2 weeks
    paths:
      - omnibus/pkg/pipeline-$CI_PIPELINE_ID

.windows_main_agent_base:
  extends: .windows_msi_base
  variables:
    OMNIBUS_TARGET: main

windows_msi_and_bosh_zip_x64-a7:
  extends: .windows_main_agent_base
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  variables:
    ARCH: "x64"
    STATIC_QUALITY_GATE_NAME: "static_quality_gate_agent_msi"
  after_script:
    - !reference [.static_quality_gate_msi]
  artifacts:
    expire_in: 2 weeks
    paths:
      - omnibus/pkg/pipeline-$CI_PIPELINE_ID
      - !reference [.static_quality_gate_msi_report_path]
  timeout: 2h

windows_msi_and_bosh_zip_x64-a7-fips:
  extends: .windows_main_agent_base
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  variables:
    ARCH: "x64"
    AGENT_FLAVOR: fips
  timeout: 2h

.windows_zip_base:
  stage: package_build
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  extends: .windows_docker_default
  needs: ["go_mod_tidy_check", "go_deps"]
  variables:
    ARCH: "x64"
  script:
    - $ErrorActionPreference = "Stop"
    - if (Test-Path omnibus\pkg) { remove-item -recurse -force omnibus\pkg }
    - mkdir omnibus\pkg
    - >
      docker run --rm
      -m 24576M
      -v "$(Get-Location):c:\mnt"
      -e CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      -e CI_PIPELINE_ID=${CI_PIPELINE_ID}
      -e CI_PROJECT_NAME=${CI_PROJECT_NAME}
      -e CI_JOB_NAME_SLUG=${CI_JOB_NAME_SLUG}
      -e CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}
      -e OMNIBUS_TARGET=${OMNIBUS_TARGET}
      -e WINDOWS_BUILDER=true
      -e INTEGRATIONS_CORE_VERSION="$INTEGRATIONS_CORE_VERSION"
      -e WINDOWS_DDNPM_DRIVER="$WINDOWS_DDNPM_DRIVER"
      -e WINDOWS_DDNPM_VERSION="$WINDOWS_DDNPM_VERSION"
      -e WINDOWS_DDNPM_SHASUM="$WINDOWS_DDNPM_SHASUM"
      -e WINDOWS_DDPROCMON_DRIVER="$WINDOWS_DDPROCMON_DRIVER"
      -e WINDOWS_DDPROCMON_VERSION="$WINDOWS_DDPROCMON_VERSION"
      -e WINDOWS_DDPROCMON_SHASUM="$WINDOWS_DDPROCMON_SHASUM"
      -e GOMODCACHE="c:\modcache"
      -e AWS_NETWORKING=true
      -e SIGN_WINDOWS_DD_WCS=true
      -e BUCKET_BRANCH="$BUCKET_BRANCH"
      -e INTEGRATION_WHEELS_CACHE_BUCKET="$INTEGRATION_WHEELS_CACHE_BUCKET"
      -e S3_OMNIBUS_CACHE_BUCKET="$S3_OMNIBUS_CACHE_BUCKET"
      -e USE_S3_CACHING="$USE_S3_CACHING"
      -e BUNDLE_MIRROR__RUBYGEMS__ORG=${BUNDLE_MIRROR__RUBYGEMS__ORG}
      -e PIP_INDEX_URL=${PIP_INDEX_URL}
      -e API_KEY_ORG2=${API_KEY_ORG2}
      ${WINBUILDIMAGE}
      powershell -C "c:\mnt\tasks\winbuildscripts\Build-OmnibusTarget.ps1 -BuildOutOfSource 1 -InstallDeps 1 -CheckGoVersion 1"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - get-childitem omnibus\pkg\pipeline-$CI_PIPELINE_ID
    - !reference [.upload_sbom_artifacts_windows]
  artifacts:
    expire_in: 2 weeks
    paths:
      - omnibus/pkg/pipeline-$CI_PIPELINE_ID

# azure-app-services build for Windows
windows_zip_agent_binaries_x64-a7:
  extends: .windows_zip_base
  variables:
    OMNIBUS_TARGET: agent-binaries

windows_zip_ddot_x64:
  extends: .windows_zip_base
  variables:
    OMNIBUS_TARGET: ddot
