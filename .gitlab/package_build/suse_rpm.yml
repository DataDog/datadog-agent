---
.if_version_6: &if_version_6
  if: $RELEASE_VERSION_6 != ""

.if_version_7: &if_version_7
  if: $RELEASE_VERSION_7 != ""

.retrieve_linux_go_deps: &retrieve_linux_go_deps |
  mkdir -p $GOPATH/bin && tar xzf go-bin.tar.gz -C $GOPATH/bin
  mkdir -p $GOPATH/pkg && tar xzf go-pkg.tar.gz -C $GOPATH/pkg
  mkdir vendor && tar xzf vendor.tar.gz -C vendor
  rm -f go-bin.tar.gz go-pkg.tar.gz vendor.tar.gz

.agent_build_common_suse_rpm:
  script:
    - echo "About to build for $RELEASE_VERSION"
    - *retrieve_linux_go_deps
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR_SUSE/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x
    - mkdir -p /tmp/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/system-probe.${PACKAGE_ARCH} /tmp/system-probe/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/tracer.o.${PACKAGE_ARCH} /tmp/system-probe/tracer.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/tracer-debug.o.${PACKAGE_ARCH} /tmp/system-probe/tracer-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/offset-guess.o.${PACKAGE_ARCH} /tmp/system-probe/offset-guess.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/offset-guess-debug.o.${PACKAGE_ARCH} /tmp/system-probe/offset-guess-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/runtime-security.o.${PACKAGE_ARCH} /tmp/system-probe/runtime-security.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/runtime-security-syscall-wrapper.o.${PACKAGE_ARCH} /tmp/system-probe/runtime-security-syscall-wrapper.o
    - chmod 755 /tmp/system-probe/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/libbcc-${PACKAGE_ARCH}.tar.xz /tmp/libbcc.tar.xz
    # use --skip-deps since the deps are installed by `before_script`
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR_SUSE ${USE_S3_CACHING} --skip-deps --system-probe-bin=/tmp/system-probe --libbcc-tarball=/tmp/libbcc.tar.xz
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*.rpm' ! -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' zypper in '{}'
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' zypper in '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && cp $OMNIBUS_BASE_DIR_SUSE/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR_SUSE
    # FIXME: skip the installation step until we fix the preinst/postinst scripts in the rpm package
    # to also work with SUSE11
    # - rpm -i $OMNIBUS_PACKAGE_DIR_SUSE/*.rpm
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE

# build Agent package for suse-x64
agent_suse-x64-a6:
  extends: .agent_build_common_suse_rpm
  rules:
    - <<: *if_version_6
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: ["runner:main", "size:2xlarge"]
  needs: ["tests_rpm-x64-py2", "tests_rpm-x64-py3", "build_system-probe-x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: amd64
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_6

# build Agent package for suse-x64
agent_suse-x64-a7:
  extends: .agent_build_common_suse_rpm
  rules:
    - <<: *if_version_7
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: ["runner:main", "size:2xlarge"]
  needs: ["tests_rpm-x64-py3", "build_system-probe-x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

iot_agent_suse-x64:
  rules:
    - <<: *if_version_7
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: ["runner:main", "size:2xlarge"]
  needs: ["linux_x64_go_deps"]
  before_script:
  script:
    - echo "About to build iot agent for $RELEASE_VERSION_7"
    - *retrieve_linux_go_deps
    - echo "Detected host architecture $(uname -m)"
    # $DD_TARGET_ARCH is only set by Arm build images, so assume amd64 if not present
    - echo "Target architecture ${DD_TARGET_ARCH:=amd64}"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR_SUSE/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --iot --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps
    - ls $OMNIBUS_BASE_DIR/pkg/
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && cp $OMNIBUS_BASE_DIR/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR_SUSE
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE

dogstatsd_suse-x64:
  rules:
    - <<: *if_version_7
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/suse_x64:$DATADOG_AGENT_BUILDERS
  tags: ["runner:main", "size:large"]
  needs: ["build_dogstatsd-deb_x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  before_script:
    - *retrieve_linux_go_deps
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR_SUSE/*
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e dogstatsd.omnibus-build --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR_SUSE ${USE_S3_CACHING} --skip-deps
    - find $OMNIBUS_BASE_DIR_SUSE/pkg -type f -name '*.rpm' -print0 | sort -z | xargs -0 -I '{}' rpm -i '{}'
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && cp $OMNIBUS_BASE_DIR_SUSE/pkg/*.{rpm,metadata.json} $OMNIBUS_PACKAGE_DIR_SUSE
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE
