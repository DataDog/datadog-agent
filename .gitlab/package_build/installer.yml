---
#
# Datadog installer payloads
#
.common_build_oci:
  script:
    - echo "About to build for $RELEASE_VERSION"
    - export INSTALL_DIR=/opt/datadog-packages/datadog-agent/$(inv agent.version -u)-1
    - !reference [.setup_ruby_mirror_linux]
    - !reference [.setup_python_mirror_linux]
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - tar -xf $CI_PROJECT_DIR/sysprobe-build-outputs.tar.xz
    - mkdir -p /tmp/system-probe
    - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/clang-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/clang-bpf
    - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/llc-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/llc-bpf
    - cp $CI_PROJECT_DIR/minimized-btfs.tar.xz /tmp/system-probe/minimized-btfs.tar.xz
    - chmod 0744 /tmp/system-probe/clang-bpf /tmp/system-probe/llc-bpf
    # NOTE: for now, we consider "ociru" to be a "redhat_target" in omnibus/lib/ostools.rb
    # if we ever start building on a different platform, that might need to change
    - inv -e omnibus.build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR  ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --host-distribution=ociru --install-directory="$INSTALL_DIR"
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

datadog-agent-oci-x64-a7:
  extends: .common_build_oci
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs:
    [
      "go_mod_tidy_check",
      "build_system-probe-x64",
      "go_deps",
      "generate_minimized_btfs_x64",
    ]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: "3"
    PACKAGE_ARCH: amd64
    DESTINATION_OCI: "datadog-agent-7-remote-updater-amd64.tar.xz"
  before_script:
    - source /root/.bashrc
    - export RELEASE_VERSION=$RELEASE_VERSION_7

datadog-agent-oci-arm64-a7:
  extends: .common_build_oci
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:arm64"]
  needs:
    [
      "go_mod_tidy_check",
      "build_system-probe-arm64",
      "go_deps",
      "generate_minimized_btfs_arm64",
    ]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: "3"
    PACKAGE_ARCH: arm64
    DESTINATION_OCI: "datadog-agent-7-remote-updater-arm64.tar.xz"
  before_script:
    - source /root/.bashrc
    - export RELEASE_VERSION=$RELEASE_VERSION_7

#
# The installer program
#
.installer_build_common:
  script:
    - source /root/.bashrc
    - !reference [.setup_ruby_mirror_linux]
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    - echo "About to build for $RELEASE_VERSION"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - inv -e omnibus.build --release-version "$RELEASE_VERSION" --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --target-project="installer" ${INSTALL_DIR_PARAM}
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    AGENT_MAJOR_VERSION: 7
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

# We build a "regular" installer, meant to be packaged as deb/rpm, without a custom install path
# and an artifact intended for OCI packaging, which has a custom install path

installer-amd64:
  extends: .installer_build_common
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["go_mod_tidy_check", "go_deps"]
  variables:
    PACKAGE_ARCH: amd64
    DESTINATION_FILE: "datadog-installer_7-amd64.tar.xz"
    RELEASE_VERSION: "$RELEASE_VERSION_7"

installer-arm64:
  extends: .installer_build_common
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64$DATADOG_AGENT_ARMBUILDIMAGES_SUFFIX:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["arch:arm64"]
  needs: ["go_mod_tidy_check", "go_deps"]
  variables:
    PACKAGE_ARCH: arm64
    DESTINATION_FILE: "datadog-installer_7-arm64.tar.xz"
    RELEASE_VERSION: "$RELEASE_VERSION_7"

installer-amd64-oci:
  extends: installer-amd64
  variables:
    DESTINATION_FILE: "datadog-updater_7-amd64-oci.tar.xz"
  before_script:
    - source /root/.bashrc
    - export INSTALL_DIR=/opt/datadog-packages/datadog-installer/$(inv agent.version -u)-1
    - export INSTALL_DIR_PARAM="--install-directory=$INSTALL_DIR"

installer-arm64-oci:
  extends: installer-arm64
  variables:
    DESTINATION_FILE: "datadog-updater_7-arm64-oci.tar.xz"
  before_script:
    - source /root/.bashrc
    - export INSTALL_DIR=/opt/datadog-packages/datadog-installer/$(inv agent.version -u)-1
    - export INSTALL_DIR_PARAM="--install-directory=$INSTALL_DIR"

windows-installer-amd64:
  stage: package_build
  tags: ["runner:windows-docker", "windowsversion:1809"]
  needs: ["go_mod_tidy_check", "go_deps"]
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  script:
    - $ErrorActionPreference = 'Stop'
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - if (Test-Path omnibus\pkg) { remove-item -recurse -force omnibus\pkg }
    - mkdir omnibus\pkg
    - !reference [.setup_ruby_mirror_win]
    - !reference [.setup_python_mirror_win]
    - >
      docker run --rm
      -m 8192M
      -v "$(Get-Location):c:\mnt"
      -e CI_JOB_ID=${CI_JOB_ID}
      -e CI_PIPELINE_ID=${CI_PIPELINE_ID}
      -e CI_PROJECT_NAME=${CI_PROJECT_NAME}
      -e CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      -e CI_JOB_NAME_SLUG=${CI_JOB_NAME_SLUG}
      -e CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}
      -e WINDOWS_BUILDER=true
      -e RELEASE_VERSION="$RELEASE_VERSION"
      -e GOMODCACHE="c:\modcache"
      -e AWS_NETWORKING=true
      -e SIGN_WINDOWS_DD_WCS=true
      -e S3_OMNIBUS_CACHE_BUCKET="$S3_OMNIBUS_CACHE_BUCKET"
      -e USE_S3_CACHING="$USE_S3_CACHING"
      -e API_KEY_ORG2_SSM_NAME=${API_KEY_ORG2_SSM_NAME}
      486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_1809_${ARCH}${Env:DATADOG_AGENT_WINBUILDIMAGES_SUFFIX}:${Env:DATADOG_AGENT_WINBUILDIMAGES}
      c:\mnt\tasks\winbuildscripts\buildinstaller.bat
  after_script:
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
  artifacts:
    expire_in: 2 weeks
    paths:
      - omnibus/pkg
  variables:
    ARCH: "x64"
    RELEASE_VERSION: "$RELEASE_VERSION_7"