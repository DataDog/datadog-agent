.agent_build_script:
  - !reference [.retrieve_linux_go_deps]
  - !reference [.cache_omnibus_ruby_deps, setup]
  # remove artifacts from previous pipelines that may come from the cache
  - rm -rf $OMNIBUS_PACKAGE_DIR/*
  # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
  # Thus, we move the artifacts at the end in a gitlab-friendly dir.
  - tar -xf $CI_PROJECT_DIR/sysprobe-build-outputs.tar.xz
  - mkdir -p /tmp/system-probe
  - ${S3_CP_CMD} "${S3_PERMANENT_ARTIFACTS_URI}/clang-${CLANG_LLVM_VER}.${PACKAGE_ARCH}.${CLANG_BUILD_VERSION}" /tmp/system-probe/clang-bpf
  - ${S3_CP_CMD} "${S3_PERMANENT_ARTIFACTS_URI}/llc-${CLANG_LLVM_VER}.${PACKAGE_ARCH}.${CLANG_BUILD_VERSION}" /tmp/system-probe/llc-bpf
  - cp $CI_PROJECT_DIR/minimized-btfs.tar.xz /tmp/system-probe/minimized-btfs.tar.xz
  - chmod 0744 /tmp/system-probe/clang-bpf /tmp/system-probe/llc-bpf
  - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --flavor "$FLAVOR" --config-directory "$CONFIG_DIR" --install-directory "$INSTALL_DIR"
  - pushd golinkinterceptor; scripts/build.sh; popd
  - TARBALL="$(basename "$(find "$OMNIBUS_PACKAGE_DIR" -maxdepth 1 -type f -name 'datadog-*agent-*.tar.xz' ! -name '*-dbg-*')")"
  - unxz "$OMNIBUS_PACKAGE_DIR/$TARBALL"
  - tar -rv --transform 's,^golinkinterceptor/bin,opt/datadog-agent/embedded/bin/,' -f "$OMNIBUS_PACKAGE_DIR/${TARBALL%.xz}" golinkinterceptor/bin/executor
  - tar -rv --transform "s,^$(go env GOTOOLDIR | sed 's|^/||'),opt/datadog-agent/embedded/bin/," -f "$OMNIBUS_PACKAGE_DIR/${TARBALL%.xz}" "$(go env GOTOOLDIR)/link"
  - |
    sqlite3 -readonly -init /dev/null /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'SELECT file FROM package_file;' | while read -r file; do
      tar -rv --transform 's,^root/.cache/,opt/datadog-agent/embedded/share/datadog-agent/,' -f "$OMNIBUS_PACKAGE_DIR/${TARBALL%.xz}" "$file"
    done
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE package_file SET file = REPLACE(file, "/root/.cache/", "/opt/datadog-agent/embedded/share/datadog-agent/");'
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE link_command SET binary_name = "agent" WHERE binary_name = "./bin/agent/agent";'
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE link_command SET binary_name = "process-agent" WHERE binary_name = "./bin/process-agent/process-agent";'
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE link_command SET binary_name = "trace-agent" WHERE binary_name = "./bin/trace-agent/trace-agent";'
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE link_command_args SET arg = "-extld=x86_64-linux-gnu-gcc" WHERE arg = "-extld=x86_64-unknown-linux-gnu-gcc";'
  - sqlite3 /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db 'UPDATE link_command_args SET arg = "-extld=aarch64-linux-gnu-gcc" WHERE arg = "-extld=aarch64-unknown-linux-gnu-gcc";'
  - tar -rv --transform 's,^omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/,opt/datadog-agent/embedded/share/datadog-agent/,' -f "$OMNIBUS_PACKAGE_DIR/${TARBALL%.xz}" /omnibus/src/datadog-agent/src/github.com/DataDog/datadog-agent/link.db
  - xz "$OMNIBUS_PACKAGE_DIR/${TARBALL%.xz}"
  - ls -la $OMNIBUS_PACKAGE_DIR
  - !reference [.upload_sbom_artifacts]

.agent_build_common:
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - !reference [.agent_build_script]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

.agent_build_x86:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$CI_IMAGE_LINUX_GLIBC_2_17_X64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_17_X64
  tags: ["arch:amd64"]
  needs: ["build_system-probe-x64", "go_deps", "generate_minimized_btfs_x64"]
  variables:
    PACKAGE_ARCH: amd64
    DD_CC: "x86_64-unknown-linux-gnu-gcc"
    DD_CXX: "x86_64-unknown-linux-gnu-g++"
    DD_CMAKE_TOOLCHAIN: "/opt/cmake/x86_64-unknown-linux-gnu.toolchain.cmake"

.agent_build_arm64:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$CI_IMAGE_LINUX_GLIBC_2_23_ARM64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_23_ARM64
  tags: ["arch:arm64"]
  needs:
    ["build_system-probe-arm64", "go_deps", "generate_minimized_btfs_arm64"]
  variables:
    PACKAGE_ARCH: arm64
    DD_CC: "aarch64-unknown-linux-gnu-gcc"
    DD_CXX: "aarch64-unknown-linux-gnu-g++"
    DD_CMAKE_TOOLCHAIN: "/opt/cmake/aarch64-unknown-linux-gnu.toolchain.cmake"

.agent_7_build:
  variables:
    FLAVOR: base

.agent_fips_build:
  variables:
    FLAVOR: fips

# build Agent 7 binaries for x86_64
datadog-agent-7-x64:
  extends: [.agent_build_common, .agent_build_x86, .agent_7_build]

# build Agent 7 binaries for arm64
datadog-agent-7-arm64:
  extends: [.agent_build_common, .agent_build_arm64, .agent_7_build]

# build Agent 7 binaries for x86_64 with FIPS
datadog-agent-7-x64-fips:
  extends: [.agent_build_common, .agent_build_x86, .agent_fips_build]

# build Agent 7 binaries for arm64 with FIPS
datadog-agent-7-arm64-fips:
  extends: [.agent_build_common, .agent_build_arm64, .agent_fips_build]

.iot-agent-common:
  extends: .agent_build_common
  needs: ["go_mod_tidy_check", "go_deps"]
  script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --flavor iot
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]

iot-agent-x64:
  extends: .iot-agent-common
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$CI_IMAGE_LINUX_GLIBC_2_17_X64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_17_X64
  variables:
    DD_CC: "x86_64-unknown-linux-gnu-gcc"
    DD_CXX: "x86_64-unknown-linux-gnu-g++"

iot-agent-arm64:
  extends: .iot-agent-common
  tags: ["arch:arm64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$CI_IMAGE_LINUX_GLIBC_2_23_ARM64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_23_ARM64
  variables:
    DD_CC: "aarch64-unknown-linux-gnu-gcc"
    DD_CXX: "aarch64-unknown-linux-gnu-g++"

iot-agent-armhf:
  extends: .iot-agent-common
  # Run with platform:arm64 since no platform:armhf exists and arm64 should be backwards compatible
  tags: ["arch:arm64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_armhf$CI_IMAGE_RPM_ARMHF_SUFFIX:$CI_IMAGE_RPM_ARMHF
  variables:
    # On armv7, dpkg is built as a 32bits application, which means
    # we can only address 32 bits of memory, which is likely to OOM
    # if we use too many compression threads or a too agressive level
    FORCED_PACKAGE_COMPRESSION_LEVEL: 5

.dogstatsd_build_common:
  needs: ["go_mod_tidy_check", "go_deps"]
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --target-project dogstatsd
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

dogstatsd-x64:
  extends: .dogstatsd_build_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$CI_IMAGE_LINUX_GLIBC_2_17_X64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_17_X64
  tags: ["arch:amd64"]
  variables:
    DD_CC: "x86_64-unknown-linux-gnu-gcc"
    DD_CXX: "x86_64-unknown-linux-gnu-g++"

dogstatsd-arm64:
  extends: .dogstatsd_build_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$CI_IMAGE_LINUX_GLIBC_2_23_ARM64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_23_ARM64
  tags: ["arch:arm64"]
  variables:
    DD_CC: "aarch64-unknown-linux-gnu-gcc"
    DD_CXX: "aarch64-unknown-linux-gnu-g++"

.otel_build_common:
  needs: ["go_mod_tidy_check", "go_deps"]
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --target-project otel-agent
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

datadog-otel-agent-x64:
  extends: .otel_build_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$CI_IMAGE_LINUX_GLIBC_2_17_X64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_17_X64
  tags: ["arch:amd64"]
  variables:
    DD_CC: "x86_64-unknown-linux-gnu-gcc"
    DD_CXX: "x86_64-unknown-linux-gnu-g++"

datadog-otel-agent-arm64:
  extends: .otel_build_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$CI_IMAGE_LINUX_GLIBC_2_23_ARM64_SUFFIX:$CI_IMAGE_LINUX_GLIBC_2_23_ARM64
  tags: ["arch:arm64"]
  variables:
    DD_CC: "aarch64-unknown-linux-gnu-gcc"
    DD_CXX: "aarch64-unknown-linux-gnu-g++"
