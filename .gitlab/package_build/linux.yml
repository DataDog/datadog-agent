.agent_build_script:
  - echo "About to build for $RELEASE_VERSION"
  - !reference [.retrieve_linux_go_deps]
  - !reference [.cache_omnibus_ruby_deps, setup]
  # remove artifacts from previous pipelines that may come from the cache
  - rm -rf $OMNIBUS_PACKAGE_DIR/*
  # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
  # Thus, we move the artifacts at the end in a gitlab-friendly dir.
  - tar -xf $CI_PROJECT_DIR/sysprobe-build-outputs.tar.xz
  - mkdir -p /tmp/system-probe
  - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/clang-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/clang-bpf
  - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/llc-$CLANG_LLVM_VER.${PACKAGE_ARCH} /tmp/system-probe/llc-bpf
  - cp $CI_PROJECT_DIR/minimized-btfs.tar.xz /tmp/system-probe/minimized-btfs.tar.xz
  - chmod 0744 /tmp/system-probe/clang-bpf /tmp/system-probe/llc-bpf
  - inv -e omnibus.build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --base-dir $OMNIBUS_BASE_DIR  ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --flavor "$FLAVOR" --config-directory "$CONFIG_DIR" --install-directory "$INSTALL_DIR"
  - ls -la $OMNIBUS_PACKAGE_DIR
  - !reference [.upload_sbom_artifacts]

.agent_build_common:
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - !reference [.agent_build_script]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

.agent_build_x86:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs:
    [
      "go_mod_tidy_check",
      "build_system-probe-x64",
      "go_deps",
      "generate_minimized_btfs_x64",
    ]
  variables:
    PACKAGE_ARCH: amd64
    DD_CC: 'x86_64-unknown-linux-gnu-gcc'
    DD_CXX: 'x86_64-unknown-linux-gnu-g++'
    DD_CMAKE_TOOLCHAIN: '/opt/cmake/x86_64-unknown-linux-gnu.toolchain.cmake'

.agent_build_arm64:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:arm64"]
  needs:
    [
      "go_mod_tidy_check",
      "build_system-probe-arm64",
      "go_deps",
      "generate_minimized_btfs_arm64",
    ]
  variables:
    PACKAGE_ARCH: arm64
    DD_CC: 'aarch64-unknown-linux-gnu-gcc'
    DD_CXX: 'aarch64-unknown-linux-gnu-g++'
    DD_CMAKE_TOOLCHAIN: '/opt/cmake/aarch64-unknown-linux-gnu.toolchain.cmake'

.agent_7_build:
  variables:
    AGENT_MAJOR_VERSION: 7
    FLAVOR: base
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

.ot_agent_7_build:
  variables:
    AGENT_MAJOR_VERSION: 7
    FLAVOR: ot
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

# Temporary custom agent build test to prevent regression
# This test will be removed when custom path are used to build macos agent
# with in-house macos runner builds.
datadog-agent-7-x64-custom-path-test:
  extends: [.agent_build_x86, .agent_7_build]
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - mkdir /custom
    - export CONFIG_DIR="/custom"
    - export INSTALL_DIR="/custom/datadog-agent"
    - !reference [.agent_build_script]
    - ls -la $OMNIBUS_PACKAGE_DIR
    - ls -la $INSTALL_DIR
    - ls -la /custom/etc
    - (ls -la /opt/datadog-agent 2>/dev/null && exit 1) || echo "/opt/datadog-agent has correctly not been generated"
    - (ls -la /etc/datadog-agent 2>/dev/null && exit 1) || echo "/etc/datadog-agent has correctly not been generated"
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

# build Agent 7 binaries for x86_64
datadog-agent-7-x64:
  extends: [.agent_build_common, .agent_build_x86, .agent_7_build]

# build Agent 7 binaries for arm64
datadog-agent-7-arm64:
  extends: [.agent_build_common, .agent_build_arm64, .agent_7_build]

# build Agent 7 binaries for x86_64
datadog-ot-agent-7-x64:
  extends: [.agent_build_common, .agent_build_x86, .ot_agent_7_build]

# build Agent 7 binaries for arm64
datadog-ot-agent-7-arm64:
  extends: [.agent_build_common, .agent_build_arm64, .ot_agent_7_build]

.iot-agent-common:
  extends: .agent_build_common
  needs: ["go_mod_tidy_check", "go_deps"]
  script:
    - echo "About to build for $RELEASE_VERSION"
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - inv -e omnibus.build --release-version "$RELEASE_VERSION" --major-version 7 --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --flavor iot
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  before_script:
    - export RELEASE_VERSION=$RELEASE_VERSION_7

iot-agent-x64:
  extends: .iot-agent-common
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  variables:
    DD_CC: 'x86_64-unknown-linux-gnu-gcc'
    DD_CXX: 'x86_64-unknown-linux-gnu-g++'

iot-agent-arm64:
  extends: .iot-agent-common
  tags: ["arch:arm64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  variables:
    DD_CC: 'aarch64-unknown-linux-gnu-gcc'
    DD_CXX: 'aarch64-unknown-linux-gnu-g++'

iot-agent-armhf:
  extends: .iot-agent-common
  # Run with platform:arm64 since no platform:armhf exists and arm64 should be backwards compatible
  tags: ["arch:arm64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_armhf$DATADOG_AGENT_ARMBUILDIMAGES_SUFFIX:$DATADOG_AGENT_ARMBUILDIMAGES
  variables:
    # On armv7, dpkg is built as a 32bits application, which means
    # we can only address 32 bits of memory, which is likely to OOM
    # if we use too many compression threads or a too agressive level
    FORCED_PACKAGE_COMPRESSION_LEVEL: 5

.dogstatsd_build_common:
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  stage: package_build
  script:
    - echo "About to build for $RELEASE_VERSION"
    - !reference [.retrieve_linux_go_deps]
    - !reference [.cache_omnibus_ruby_deps, setup]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    - inv -e omnibus.build --release-version $RELEASE_VERSION_7 --major-version 7 --base-dir $OMNIBUS_BASE_DIR  ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --target-project dogstatsd
    - ls -la $OMNIBUS_PACKAGE_DIR
    - !reference [.upload_sbom_artifacts]
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

dogstatsd-x64:
  extends: .dogstatsd_build_common
  needs: ["go_mod_tidy_check", "build_dogstatsd-binary_x64", "go_deps"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  variables:
    DD_CC: 'x86_64-unknown-linux-gnu-gcc'
    DD_CXX: 'x86_64-unknown-linux-gnu-g++'

dogstatsd-arm64:
  extends: .dogstatsd_build_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:arm64"]
  needs: ["go_mod_tidy_check", "build_dogstatsd-binary_arm64", "go_deps"]
  variables:
    DD_CC: 'aarch64-unknown-linux-gnu-gcc'
    DD_CXX: 'aarch64-unknown-linux-gnu-g++'

