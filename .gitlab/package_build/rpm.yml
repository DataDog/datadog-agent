---
.agent_build_common_rpm:
  script:
    - echo "About to build for $RELEASE_VERSION"
    - !reference [.retrieve_linux_go_deps]
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x

    - mkdir -p /tmp/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/system-probe.${PACKAGE_ARCH} /tmp/system-probe/system-probe
    - $S3_CP_CMD $S3_ARTIFACTS_URI/tracer.o.${PACKAGE_ARCH} /tmp/system-probe/tracer.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/tracer-debug.o.${PACKAGE_ARCH} /tmp/system-probe/tracer-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/offset-guess.o.${PACKAGE_ARCH} /tmp/system-probe/offset-guess.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/offset-guess-debug.o.${PACKAGE_ARCH} /tmp/system-probe/offset-guess-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/http.o.${PACKAGE_ARCH} /tmp/system-probe/http.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/http-debug.o.${PACKAGE_ARCH} /tmp/system-probe/http-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/dns.o.${PACKAGE_ARCH} /tmp/system-probe/dns.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/dns-debug.o.${PACKAGE_ARCH} /tmp/system-probe/dns-debug.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/runtime-security.o.${PACKAGE_ARCH} /tmp/system-probe/runtime-security.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/runtime-security-syscall-wrapper.o.${PACKAGE_ARCH} /tmp/system-probe/runtime-security-syscall-wrapper.o
    - $S3_CP_CMD $S3_ARTIFACTS_URI/tracer.c.${PACKAGE_ARCH} /tmp/system-probe/tracer.c
    - $S3_CP_CMD $S3_ARTIFACTS_URI/runtime-security.c.${PACKAGE_ARCH} /tmp/system-probe/runtime-security.c
    - $S3_CP_CMD $S3_ARTIFACTS_URI/conntrack.c.${PACKAGE_ARCH} /tmp/system-probe/conntrack.c
    - chmod 755 /tmp/system-probe/system-probe
    - $S3_CP_CMD $S3_PERMANENT_ARTIFACTS_URI/libbcc-${PACKAGE_ARCH}-${BCC_VERSION}.tar.xz /tmp/libbcc.tar.xz
    - inv -e agent.omnibus-build --release-version "$RELEASE_VERSION" --major-version "$AGENT_MAJOR_VERSION" --python-runtimes "$PYTHON_RUNTIMES" --base-dir $OMNIBUS_BASE_DIR  ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod" --system-probe-bin=/tmp/system-probe --libbcc-tarball=/tmp/libbcc.tar.xz
    - ls -la $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

# build Agent package for rpm-x64
agent_rpm-x64-a6:
  extends: .agent_build_common_rpm
  rules:
    !reference [.on_a6]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  needs: ["tests_rpm-x64-py2", "tests_rpm-x64-py3", "build_system-probe-x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: amd64
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - export RELEASE_VERSION=$RELEASE_VERSION_6

# build Agent package for rpm-x64
agent_rpm-x64-a7:
  extends: .agent_build_common_rpm
  rules:
    !reference [.on_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  needs: ["tests_rpm-x64-py3", "build_system-probe-x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: amd64
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - export RELEASE_VERSION=$RELEASE_VERSION_7

# build Agent package for rpm-arm64
agent_rpm-arm64-a6:
  extends: .agent_build_common_rpm
  rules:
    !reference [.on_all_builds_a6]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: ["go_mod_tidy_check", "build_system-probe-arm64", "linux_arm64_go_deps"]
  variables:
    AGENT_MAJOR_VERSION: 6
    PYTHON_RUNTIMES: '2,3'
    PACKAGE_ARCH: arm64
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - export RELEASE_VERSION=$RELEASE_VERSION_6

# build Agent package for rpm-arm64
agent_rpm-arm64-a7:
  extends: .agent_build_common_rpm
  rules:
    !reference [.on_all_builds_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: ["go_mod_tidy_check", "build_system-probe-arm64", "linux_arm64_go_deps"]
  variables:
    AGENT_MAJOR_VERSION: 7
    PYTHON_RUNTIMES: '3'
    PACKAGE_ARCH: arm64
  before_script:
    - source /root/.bashrc && conda activate ddpy3
    - export RELEASE_VERSION=$RELEASE_VERSION_7

.iot_agent_build_common_rpm:
  script:
    - echo "About to build iot agent for $RELEASE_VERSION_7"
    - !reference [.retrieve_linux_go_deps]
    - echo "Detected host architecture $(uname -m)"
    # $DD_TARGET_ARCH is only set by Arm build images, so assume amd64 if not present
    - echo "Target architecture ${DD_TARGET_ARCH:=amd64}"
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus in a neutral directory.
    # Thus, we move the artifacts at the end in a gitlab-friendly dir.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e agent.omnibus-build --iot --log-level debug --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR --skip-deps --go-mod-cache="$GOPATH/pkg/mod"
    - ls -la $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR

iot_agent_rpm-x64:
  extends: .iot_agent_build_common_rpm
  rules:
    !reference [.on_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:2xlarge"]
  needs: ["linux_x64_go_deps"]

iot_agent_rpm-arm64:
  extends: .iot_agent_build_common_rpm
  rules:
    !reference [.on_all_builds_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:$DATADOG_AGENT_ARMBUILDIMAGES
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: ["linux_arm64_go_deps"]

iot_agent_rpm-armhf:
  extends: .iot_agent_build_common_rpm
  rules:
    !reference [.on_all_builds_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_armhf:$DATADOG_AGENT_ARMBUILDIMAGES
  # Run with platform:arm64 since no platform:armhf exists and arm64 should be backwards compatible
  tags: ["runner:docker-arm", "platform:arm64"]
  needs: ["linux_armhf_go_deps"]
  before_script:
    # Ensures uname -m reports armv7l
    - export LD_PRELOAD="/usr/local/lib/libfakearmv7l.so"

dogstatsd_rpm-x64:
  rules:
    !reference [.on_a7]
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main", "size:large"]
  needs: ["build_dogstatsd-deb_x64", "linux_x64_go_deps"]
  variables:
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: /credentials
  before_script:
    - !reference [.retrieve_linux_go_deps]
    - source /root/.bashrc && conda activate ddpy3
  script:
    # remove artifacts from previous pipelines that may come from the cache
    - rm -rf $OMNIBUS_PACKAGE_DIR/*
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name $RPM_GPG_KEY_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name $RPM_SIGNING_PASSPHRASE_SSM_NAME --with-decryption --query "Parameter.Value" --out text)
    - set -x
    # Use --skip-deps since the deps are installed by `before_script`.
    - inv -e dogstatsd.omnibus-build --release-version "$RELEASE_VERSION_7" --major-version 7 --base-dir $OMNIBUS_BASE_DIR ${USE_S3_CACHING} --skip-deps --go-mod-cache="$GOPATH/pkg/mod"
    - ls -la $OMNIBUS_PACKAGE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
