tests_macos:
  stage: source_test
  # HACK: Run macOS unit tests only on full pipelines, to limit the use of macOS GitHub runners.
  rules:
    - !reference [.on_main_or_release_branch_or_all_builds_or_pkg_installer_changes]
    - when: manual
      allow_failure: true
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["setup_agent_version"]
  variables:
    PYTHON_RUNTIMES: "3"
  script:
    - source /root/.bashrc
    - !reference [.setup_macos_github_app]
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    - !reference [.setup_python_mirror_linux]
    - python3 -m pip install -r tasks/libs/requirements-github.txt
    - FAST_TESTS_FLAG=""
    - if [[ "$FAST_TESTS" = "true" ]]; then FAST_TESTS_FLAG="--fast-tests true"; fi
    - inv -e github.trigger-macos --workflow-type "test" --datadog-agent-ref "$CI_COMMIT_SHA" --python-runtimes "$PYTHON_RUNTIMES" --version-cache "$VERSION_CACHE_CONTENT" $FAST_TESTS_FLAG --test-washer
  timeout: 6h
  after_script:
    - $CI_PROJECT_DIR/tools/ci/junit_upload.sh "junit-*-repacked.tgz"
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - test_output.json
      - junit-*-repacked.tgz
    reports:
      junit: "**/junit-out-*.xml"

lint_macos:
  stage: source_test
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["setup_agent_version"]
  variables:
    PYTHON_RUNTIMES: "3"
  timeout: 6h
  script:
    - source /root/.bashrc
    - !reference [.setup_macos_github_app]
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - export VERSION_CACHE_CONTENT=$(cat agent-version.cache | base64 -)
    - !reference [.setup_python_mirror_linux]
    - python3 -m pip install -r tasks/libs/requirements-github.txt
    - inv -e github.trigger-macos --workflow-type "lint" --datadog-agent-ref "$CI_COMMIT_SHA" --python-runtimes "$PYTHON_RUNTIMES" --version-cache "$VERSION_CACHE_CONTENT"

.macos_gitlab_amd64:
  variables:
    PYTHON_RUNTIMES: "3"
  # The Gitlab macOS runners are currently long runners, so we need to clean them beforehand.
  before_script:
    # Remove the Go cache and env if the Go version changed
    - |
      GO_REPO_VERSION=$(cat .go-version)
      GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
      if [ "$GO_REPO_VERSION" != "$GO_VERSION" ]; then
        echo "Go version $GO_VERSION is different from $GO_REPO_VERSION in .go-version. Cleaning the environment."
        go clean -cache -modcache -testcache
        rm -rf $HOME/go/bin
        echo "Installing Go $GO_REPO_VERSION..."
        echo "$(gimme $(cat .go-version))"
        eval $(gimme $(cat .go-version))
      else
        echo "Go current version $GO_VERSION is the same as .go-version. Keeping the cache."
      fi
    # Remove the Python cache and env if the Python version changed
    - |
      PYTHON_REPO_VERSION=$(cat .python-version)
      PYTHON_VERSION=$(python3 --version | awk '{print $2}' | sed 's/\.[0-9]*$//')
      if [ "$PYTHON_REPO_VERSION" != "$PYTHON_VERSION" ]; then
        echo "Python version $PYTHON_VERSION is different from $PYTHON_REPO_VERSION in .python-version. Cleaning the environment."
        pyenv uninstall -f datadog-agent
        echo "Installing Python $PYTHON_REPO_VERSION..."
        pyenv virtualenv 3.11.8 datadog-agent
        pyenv activate datadog-agent
      else
        echo "Python current version $PYTHON_VERSION is the same as .python-version. Keeping the existing environment."
      fi
    # Installing the job dependencies
    - python3 -m pip install -r requirements.txt -r tasks/libs/requirements-github.txt
    - pyenv rehash
    - inv -e rtloader.make --python-runtimes $PYTHON_RUNTIMES
    - inv -e rtloader.install
    - inv -e install-tools
    - inv -e deps

lint_macos_gitlab_amd64:
  stage: source_test
  allow_failure: true
  rules:
    - !reference [.on_main]
    - !reference [.manual]
  extends: .macos_gitlab_amd64
  tags: ["macos:monterey-amd64", "specific:true"]
  needs: ["setup_agent_version"]
  script:
    - inv -e linter.go --cpus 12 --timeout 60

tests_macos_gitlab_amd64:
  stage: source_test
  allow_failure: true
  rules:
    !reference [.manual]
  extends: .macos_gitlab_amd64
  tags: ["macos:monterey-amd64", "specific:true"]
  needs: ["setup_agent_version"]
  variables:
    TEST_OUTPUT_FILE: test_output.json
  script:
    - FAST_TESTS_FLAG=""
    - if [[ "$FAST_TESTS" == "true" ]]; then FAST_TESTS_FLAG="--only-impacted-packages"; fi
    - inv -e test --rerun-fails=2 --python-runtimes $PYTHON_RUNTIMES --race --profile --cpus 12 --save-result-json $TEST_OUTPUT_FILE --junit-tar "junit-${CI_JOB_NAME}.tgz" $FAST_TESTS_FLAG
    - inv -e invoke-unit-tests
