---
# deps_fetch stage
# Contains jobs which fetch go dependencies, in order
# to reuse them in further jobs that need them.

.retrieve_linux_go_deps:
  - mkdir -p $GOPATH/pkg/mod/cache && tar xJf modcache.tar.xz -C $GOPATH/pkg/mod/cache
  - rm -f modcache.tar.xz

.retrieve_linux_go_tools_deps:
  - mkdir -p $GOPATH/pkg/mod/cache && tar xJf modcache_tools.tar.xz -C $GOPATH/pkg/mod/cache
  - rm -f modcache_tools.tar.xz

.retrieve_linux_go_e2e_deps:
  - mkdir -p $GOPATH/pkg/mod/cache && tar xJf modcache_e2e.tar.xz -C $GOPATH/pkg/mod/cache
  - rm -f modcache_e2e.tar.xz

.cache:
  stage: deps_fetch
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  needs: ["setup_agent_version"]
  variables:
    KUBERNETES_CPU_REQUEST: 16
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    variables:
      POLICY: pull-push
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    variables:
      POLICY: pull
  retry: 2

go_deps:
  extends: .cache
  variables:
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi
  script:
    # If the cache already contains the dependencies, don't redownload them
    # but still provide the artifact that's expected for the other jobs to run
    - if [ -f modcache.tar.xz  ]; then exit 0; fi
    - inv -e deps --verbose
    - inv -e install-tools
    - cd $GOPATH/pkg/mod/cache/ && tar c -I "pxz -T${KUBERNETES_CPU_REQUEST}" -f $CI_PROJECT_DIR/modcache.tar.xz .
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/modcache.tar.xz
  cache:
    # The `cache:key:files` only accepts up to two path ([docs](https://docs.gitlab.com/ee/ci/yaml/#cachekeyfiles)).
    # Ideally, we should also include the https://github.com/DataDog/datadog-agent/blob/main/.custom-gcl.yml file to
    # avoid issues if a plugin is added in one PR and enabled in another. However, we decided to accept this limitation
    # because the probability for this to happen is very low and go mod files are modified frequently so the risk of
    # failing a job because of a network issue when building the custom binary is very low, but still exists.
    - key:
        files:
          - \**/go.mod
          - .gitlab/deps_fetch/deps_fetch.yml
        prefix: "go_deps_modcache"
      paths:
        - modcache.tar.xz

go_tools_deps:
  extends: .cache
  script:
    - if [ -f modcache_tools.tar.xz  ]; then exit 0; fi
    - inv -e install-tools
    # Partial mitigation for #incident-30779. It will cache datadog-packages , but if the upstream version is updated without the key cache changing, the cache will not work until the key cache changes.
    # Long term solution will be to provide the datadog-packages as a binary hosted internally
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/".insteadOf "https://github.com/DataDog/"
    - go env -w GOPRIVATE="github.com/DataDog/*"
    - go install github.com/DataDog/datadog-packages/cmd/datadog-package@latest
    - cd $GOPATH/pkg/mod/cache/ && tar c -I "pxz -T${KUBERNETES_CPU_REQUEST}" -f $CI_PROJECT_DIR/modcache_tools.tar.xz .
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/modcache_tools.tar.xz
  cache:
    - key:
        files:
          - ./**/go.mod
          - .gitlab/deps_fetch/deps_fetch.yml
        prefix: "go_tools_deps_modcache"
      paths:
        - modcache_tools.tar.xz

go_e2e_deps:
  extends: .cache
  script:
    - if [ -f modcache_e2e.tar.xz  ]; then exit 0; fi
    - inv -e new-e2e-tests.deps
    - cd $GOPATH/pkg/mod/cache/ && tar c -I "pxz -T${KUBERNETES_CPU_REQUEST}" -f $CI_PROJECT_DIR/modcache_e2e.tar.xz .
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/modcache_e2e.tar.xz
  cache:
    - key:
        files:
          - ./test/new-e2e/go.mod
          - .gitlab/deps_fetch/deps_fetch.yml
        prefix: "go_e2e_deps_modcache"
      paths:
        - modcache_e2e.tar.xz
