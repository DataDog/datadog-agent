---
# Sets up a cache for gems used by Omnibus
# Usage:
# !reference [.cache_omnibus_ruby_deps, setup] somewhere ahead of invoking bundle
# !reference [.cache_omnibus_ruby_deps, cache] under `cache` for the same job
.cache_omnibus_ruby_deps:
  setup:
    - pushd omnibus && bundle config set --local path 'vendor/bundle' && popd
  cache:
    key:
      files:
        - omnibus/Gemfile
        # This is coarser than needed, but there's no more convenient way
        # to get a hold of OMNIBUS_RUBY_VERSION and OMNIBUS_SOFTWARE version
        - release.json
      # We still need to add the environment omnibus-related variables so that triggered pipelines
      # don't get undesired cache hits
      prefix: omnibus-deps-$CI_JOB_NAME-$OMNIBUS_RUBY_VERSION-$OMNIBUS_SOFTWARE
    paths:
      - omnibus/vendor/bundle

.setup_deb_signing_key: &setup_deb_signing_key
  - set +x
  - source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $DEB_GPG_KEY_SSM_NAME
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $DEB_SIGNING_PASSPHRASE_SSM_NAME
  - printf -- "$(pop_front)" | gpg --import --batch
  - export DEB_SIGNING_PASSPHRASE=$(pop_front)

.setup_macos_github_app:
  # GitHub App rate-limits are per-app.
  # This balances the requests made to GitHub between the two apps we have set up.
  - |
    source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
    if [[ "$(( RANDOM % 2 ))" == "1" ]]; then
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_KEY_SSM_NAME
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_APP_ID_SSM_NAME
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_INSTALLATION_ID_SSM_NAME
      export GITHUB_KEY_B64=$(pop_front)
      export GITHUB_APP_ID=$(pop_front)
      export GITHUB_INSTALLATION_ID=$(pop_front)
      echo "Using GitHub App instance 1"
    else
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_KEY_2_SSM_NAME
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_APP_ID_2_SSM_NAME
      $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_INSTALLATION_ID_2_SSM_NAME
      export GITHUB_KEY_B64=$(pop_front)
      export GITHUB_APP_ID=$(pop_front)
      export GITHUB_INSTALLATION_ID=$(pop_front)
      echo "Using GitHub App instance 2"
    fi

.setup_agent_github_app:
  - source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $AGENT_GITHUB_KEY_SSM_NAME
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $AGENT_GITHUB_APP_ID_SSM_NAME
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $AGENT_GITHUB_INSTALLATION_ID_SSM_NAME
  - export GITHUB_KEY_B64=$(pop_front)
  - export GITHUB_APP_ID=$(pop_front)
  - export GITHUB_INSTALLATION_ID=$(pop_front)
  - echo "Using agent GitHub App"

# Install `dd-pkg` and lint packages produced by Omnibus, supports only deb and rpm packages
.lint_linux_packages:
  - curl -sSL "https://dd-package-tools.s3.amazonaws.com/dd-pkg/${DD_PKG_VERSION}/dd-pkg_Linux_${DD_PKG_ARCH}.tar.gz" | tar -xz -C /usr/local/bin dd-pkg
  - find $OMNIBUS_PACKAGE_DIR -iregex '.*\.\(deb\|rpm\)' | xargs dd-pkg lint

.export_gitlab_token_scheduler:
  - source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $GITLAB_SCHEDULER_TOKEN_SSM_NAME   
  - export GITLAB_TOKEN=$(pop_front)

.export_gitlab_token_full:
  - source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $GITLAB_FULL_API_TOKEN_SSM_NAME   
  - export GITLAB_TOKEN=$(pop_front)

.export_dd_api_key_org2:
  - source $CI_PROJECT_DIR/tools/ci/open_file_descriptor.sh
  - $CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $API_KEY_ORG2_SSM_NAME
  - export DD_API_KEY=$(pop_front)