---
.get_artifactory_token_linux: &get_artifactory_token_linux
  - ARTIFACTORY_TOKEN=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $ARTIFACTORY_TOKEN_SSM_NAME)

.get_artifactory_token_win: &get_artifactory_token_win
  - $ARTIFACTORY_TOKEN=$(aws ssm get-parameter --region us-east-1 --name $ARTIFACTORY_TOKEN_SSM_NAME --with-decryption --query "Parameter.Value" --out text)

.get_artifactory_bypass_linux: &get_artifactory_bypass_linux
  - ARTIFACTORY_BYPASS=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $ARTIFACTORY_BYPASS_SSM_NAME)
  - if [ "${ARTIFACTORY_BYPASS}" = "true" ]; then echo "Bypassing Artifactory"; fi

.get_artifactory_bypass_win: &get_artifactory_bypass_win
  - $ARTIFACTORY_BYPASS=$(& "$env:CI_PROJECT_DIR\tools\ci\aws_ssm_get_wrapper.ps1" $ARTIFACTORY_BYPASS_SSM_NAME)
  - if ($Env:ARTIFACTORY_BYPASS -eq "true") { Write-Host "Bypassing Artifactory" }

.setup_ruby_mirror_linux:
  - *get_artifactory_bypass_linux
  - set +x
  - *get_artifactory_token_linux
  - if [ "${USE_CACHING_PROXY_RUBY}" = "true" ] && [ "${ARTIFACTORY_BYPASS}" = "false" ]; then export BUNDLE_MIRROR__RUBYGEMS__ORG=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_GEMS_PATH}; fi

.setup_ruby_mirror_win:
  - *get_artifactory_bypass_win
  - *get_artifactory_token_win
  - if (($Env:USE_CACHING_PROXY_RUBY -eq "true") -and ($Env:ARTIFACTORY_BYPASS -eq "false")) { $BUNDLE_MIRROR__RUBYGEMS__ORG="https://${Env:ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${Env:ARTIFACTORY_URL}/${Env:ARTIFACTORY_GEMS_PATH}" }

.setup_python_mirror_linux:
  - *get_artifactory_bypass_linux
  - set +x
  - *get_artifactory_token_linux
  - if [ "${USE_CACHING_PROXY_PYTHON}" = "true" ] && [ "${ARTIFACTORY_BYPASS}" = "false" ]; then export PIP_INDEX_URL=https://${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_URL}/${ARTIFACTORY_PYPI_PATH}; fi

.setup_python_mirror_win:
  - *get_artifactory_bypass_win
  - *get_artifactory_token_win
  - if (($Env:USE_CACHING_PROXY_PYTHON -eq "true") -and ($Env:ARTIFACTORY_BYPASS -eq "false")) { $PIP_INDEX_URL="https://${Env:ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN}@${Env:ARTIFACTORY_URL}/${Env:ARTIFACTORY_PYPI_PATH}" }

.setup_deb_signing_key: &setup_deb_signing_key
  - set +x
  - DEB_GPG_KEY=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $DEB_GPG_KEY_SSM_NAME)
  - printf -- "${DEB_GPG_KEY}" | gpg --import --batch
  - export DEB_SIGNING_PASSPHRASE=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $DEB_SIGNING_PASSPHRASE_SSM_NAME)

.setup_macos_github_app:
  # GitHub App rate-limits are per-app.
  # This balances the requests made to GitHub between the two apps we have set up.
  - |
    if [[ "$(( RANDOM % 2 ))" == "1" ]]; then
      export GITHUB_KEY_B64=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_KEY_SSM_NAME)
      export GITHUB_APP_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_APP_ID_SSM_NAME)
      export GITHUB_INSTALLATION_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_INSTALLATION_ID_SSM_NAME)
      echo "Using GitHub App instance 1"
    else
      export GITHUB_KEY_B64=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_KEY_2_SSM_NAME)
      export GITHUB_APP_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_APP_ID_2_SSM_NAME)
      export GITHUB_INSTALLATION_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $MACOS_GITHUB_INSTALLATION_ID_2_SSM_NAME)
      echo "Using GitHub App instance 2"
    fi

# Install `dd-pkg` and lint packages produced by Omnibus, supports only deb and rpm packages
.lint_linux_packages:
  - curl -sSL "https://dd-package-tools.s3.amazonaws.com/dd-pkg/${DD_PKG_VERSION}/dd-pkg_Linux_${DD_PKG_ARCH}.tar.gz" | tar -xz -C /usr/local/bin dd-pkg
  - find $OMNIBUS_PACKAGE_DIR -iregex '.*\.\(deb\|rpm\)' | xargs dd-pkg lint
