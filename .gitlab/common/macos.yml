---
# This is the scripts to be executed on the Gitlab macOS runners before every job.
# We don't have virtualization now so we need to clean the environment and install the proper dependencies before every job.
.macos_runner_maintenance:
  - DD_API_KEY="$("$CI_PROJECT_DIR"/tools/ci/fetch_secret.sh "$AGENT_API_KEY_ORG2" token)" || exit $?; export DD_API_KEY
  - DD_APP_KEY="$("$CI_PROJECT_DIR"/tools/ci/fetch_secret.sh "$AGENT_APP_KEY_ORG2" token)" || exit $?; export DD_APP_KEY
  # Report runner ID to Datadog, see this document for AWS meta data retrieval: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
  - |
    AWS_TOKEN="$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"
    RUNNER_ID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id -H "X-aws-ec2-metadata-token: $AWS_TOKEN" || hostname)"
    datadog-ci tag --level job --tags macos_runner:"$RUNNER_ID"
    echo "Reported runner ID to Datadog: $RUNNER_ID"
  # Report current version to datadog if main / release branch
  - |
    if [ "$CI_COMMIT_BRANCH" = "main" ] || [[ "$CI_COMMIT_BRANCH" =~ ^[0-9]+\.[0-9]+\.(x|[0-9]+)$ ]]; then
      dda inv -- -e macos.report-versions -l all || true
    fi
  # Remove inactive versions
  - |
    if [ "$((RANDOM%20))" -eq 0 ]; then
      echo Trying to remove inactive versions
      dda inv -- -e macos.remove-inactive-versions -l python -t "$PYTHON_VERSION" || true
      dda inv -- -e macos.remove-inactive-versions -l go -t "$(cat .go-version)" || true
    fi
  # Create custom temporary folder to isolate jobs from each other
  # We have to symlink it to /tmp/gitlabci to avoid some path length issues (sockets should be <= 104 characters on MacOS)
  - |
    if [ -z "$TMPDIR" ]; then
      echo "TMPDIR must be set" >& 2
      exit 1
    fi
    # Remove the trailing slashes etc.
    export OLDTMPDIR="$(realpath "$TMPDIR")"
    sudo rm -rf "$OLDTMPDIR/gitlabci"
    NEWTMPDIR="$OLDTMPDIR/gitlabci/$CI_JOB_ID"
    mkdir -m 777 -p "$NEWTMPDIR"
    sudo unlink /tmp/gitlabci 2> /dev/null || true
    sudo ln -s "$NEWTMPDIR" /tmp/gitlabci
    sudo chown "$USER":staff "$NEWTMPDIR" /tmp/gitlabci
    export TMPDIR="/tmp/gitlabci"
    echo "Temporary folder created, TMPDIR=$TMPDIR -> $NEWTMPDIR"

.install_python_dependencies:
  # Create custom temporary folder to isolate jobs from each other
  # We have to symlink it to /tmp/gitlabci to avoid some path length issues (sockets should be <= 104 characters on MacOS)
  - |
    if [ -z "$TMPDIR" ]; then
      echo "TMPDIR must be set" >& 2
      exit 1
    fi
  - export DDA_DIR="$TMPDIR/dda-${CI_JOB_ID}"
  - export PATH="$DDA_DIR:$PATH"
  - export DDA_NO_DYNAMIC_DEPS=1
  - |
    # Perform installation only if the directory does not exist
    if [ ! -d "$DDA_DIR" ]; then
      # Get the commit from the build image variable in the format `vPIPELINE_ID-COMMIT`
      export BUILDIMAGES_COMMIT="${CI_IMAGE_LINUX#*-}"
      export DDA_VERSION="$(curl -s https://raw.githubusercontent.com/DataDog/datadog-agent-buildimages/${BUILDIMAGES_COMMIT}/dda.env | awk -F= '/^DDA_VERSION=/ {print $2}')"
      # Detect architecture and download appropriate binary
      if [ "$(uname -m)" = "arm64" ]; then
        dda_target_triple="aarch64-apple-darwin"
      else
        dda_target_triple="x86_64-apple-darwin"
      fi
      curl -Lo dda.tar.gz https://github.com/DataDog/datadog-agent-dev/releases/download/${DDA_VERSION}/dda-${dda_target_triple}.tar.gz
      tar -xzf dda.tar.gz
      mkdir -p "$DDA_DIR"
      sudo mv dda $DDA_DIR
      rm -f dda.tar.gz
      dda self dep sync -f legacy-tasks
      dda self pip install awscli==1.29.45
    fi

.vault_login:
  # Point the CLI to our internal vault
  - export VAULT_ADDR=https://vault.us1.ddbuild.io
  - vault login -method=aws -no-print

.aws_retry_config:
  - export AWS_RETRY_MODE=standard
  - export AWS_RETRY_MAX_ATTEMPTS=5

.macos_gitlab:
  before_script:
    - !reference [.vault_login]
    - !reference [.aws_retry_config]
    # Selecting the current Go version
    - |
      eval $(gimme $(cat .go-version))
      export GOPATH=$GOROOT
    - !reference [.install_python_dependencies]
    # See there is no virtualization, we need to clean the environment regularly
    - !reference [.macos_runner_maintenance]
    - dda inv -- -e rtloader.make
    - dda inv -- -e rtloader.install
    - dda inv -- -e install-tools
