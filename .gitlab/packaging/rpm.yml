---

.package_rpm_common:
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  before_script:
  script:
    - !reference [.cache_omnibus_ruby_deps, setup]
    - printf -- "$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $RPM_GPG_KEY)" | gpg --import --batch
    - EXIT="${PIPESTATUS[0]}"; if [ $EXIT -ne 0 ]; then echo "Unable to locate credentials needs gitlab runner restart"; exit $EXIT; fi
    - RPM_SIGNING_PASSPHRASE=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $RPM_SIGNING_PASSPHRASE) || exit $?; export RPM_SIGNING_PASSPHRASE
    - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --target-project=${DD_PROJECT} ${OMNIBUS_EXTRA_ARGS}
    - ls -la $OMNIBUS_PACKAGE_DIR/
    - !reference [.create_signature_and_lint_linux_packages]
  stage: packaging
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
    OMNIBUS_PACKAGE_ARTIFACT_DIR: $OMNIBUS_PACKAGE_DIR
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/agent-rpm.txt"
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

.package_rpm_x86:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_x64$CI_IMAGE_RPM_X64_SUFFIX:$CI_IMAGE_RPM_X64
  tags: ["arch:amd64"]
  variables:
    DD_PKG_ARCH: x86_64
    PACKAGE_ARCH: amd64

.package_rpm_arm64:
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_arm64$CI_IMAGE_RPM_ARM64_SUFFIX:$CI_IMAGE_RPM_ARM64
  tags: ["arch:arm64"]
  variables:
    PACKAGE_ARCH: arm64
    DD_PKG_ARCH: arm64

.package_suse_rpm_common:
  extends: .package_rpm_common
  script:
    - !reference [.package_rpm_common, script]
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && mv $OMNIBUS_PACKAGE_DIR/*.rpm $OMNIBUS_PACKAGE_DIR_SUSE/
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE
  variables:
    OMNIBUS_EXTRA_ARGS: "--host-distribution=suse"

agent_rpm-x64-a7:
  extends: [.package_rpm_common, .package_rpm_x86]
  tags: ["arch:amd64"]
  needs: ["datadog-agent-7-x64"]
  variables:
    DD_PROJECT: agent

agent_rpm-arm64-a7:
  extends: [.package_rpm_common, .package_rpm_arm64]
  needs: ["datadog-agent-7-arm64"]
  variables:
    DD_PROJECT: agent

agent_suse-x64-a7:
  extends: [.package_suse_rpm_common, .package_rpm_x86]
  needs: ["datadog-agent-7-x64"]
  variables:
    DD_PROJECT: agent

agent_suse-arm64-a7:
  extends: [.package_suse_rpm_common, .package_rpm_arm64]
  needs: ["datadog-agent-7-arm64"]
  variables:
    DD_PROJECT: agent

installer_rpm-amd64:
  extends: [.package_rpm_common, .package_rpm_x86]
  needs: ["installer-amd64"]
  variables:
    DD_PROJECT: installer
    # There are currently no files to check for in the installer so we
    # explicitly disable the check
    PACKAGE_REQUIRED_FILES_LIST: ""
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false

agent_rpm-x64-a7-fips:
  extends: [.package_rpm_common, .package_rpm_x86]
  tags: ["arch:amd64"]
  needs: ["datadog-agent-7-x64-fips"]
  variables:
    OMNIBUS_EXTRA_ARGS: "--flavor fips"
    DD_PROJECT: agent

agent_rpm-arm64-a7-fips:
  extends: [.package_rpm_common, .package_rpm_arm64]
  needs: ["datadog-agent-7-arm64-fips"]
  variables:
    OMNIBUS_EXTRA_ARGS: "--flavor fips"
    DD_PROJECT: agent

agent_suse-x64-a7-fips:
  extends: [.package_suse_rpm_common, .package_rpm_x86]
  needs: ["datadog-agent-7-x64-fips"]
  variables:
    OMNIBUS_EXTRA_ARGS: "--host-distribution=suse --flavor fips"
    DD_PROJECT: agent

agent_suse-arm64-a7-fips:
  extends: [.package_suse_rpm_common, .package_rpm_arm64]
  needs: ["datadog-agent-7-arm64-fips"]
  variables:
    OMNIBUS_EXTRA_ARGS: "--host-distribution=suse --flavor fips"
    DD_PROJECT: agent

ddot_rpm-x64:
  extends: [.package_rpm_common, .package_rpm_x86]
  needs: ["datadog-otel-agent-x64"]
  variables:
    DD_PROJECT: ddot
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/ddot.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_DISABLE_VPA: true

ddot_rpm-arm64:
  extends: [.package_rpm_common, .package_rpm_arm64]
  needs: ["datadog-otel-agent-arm64"]
  variables:
    DD_PROJECT: ddot
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/ddot.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_DISABLE_VPA: true

ddot_suse_rpm-x64:
  extends: [.package_suse_rpm_common, .package_rpm_x86]
  needs: ["datadog-otel-agent-x64"]
  variables:
    DD_PROJECT: ddot
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/ddot.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_DISABLE_VPA: true

ddot_suse_rpm-arm64:
  extends: [.package_suse_rpm_common, .package_rpm_arm64]
  needs: ["datadog-otel-agent-arm64"]
  variables:
    DD_PROJECT: ddot
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/ddot.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_DISABLE_VPA: true

installer_rpm-arm64:
  extends: [.package_rpm_common, .package_rpm_arm64]
  needs: ["installer-arm64"]
  variables:
    DD_PROJECT: installer
    PACKAGE_REQUIRED_FILES_LIST: ""
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false

installer_suse_rpm-amd64:
  extends: [.package_suse_rpm_common, .package_rpm_x86]
  needs: ["installer-amd64"]
  variables:
    DD_PROJECT: installer
    PACKAGE_REQUIRED_FILES_LIST: ""
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false

installer_suse_rpm-arm64:
  extends: [.package_suse_rpm_common, .package_rpm_arm64]
  needs: ["installer-arm64"]
  variables:
    DD_PROJECT: installer
    PACKAGE_REQUIRED_FILES_LIST: ""
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false

.package_iot_rpm_common:
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  script:
    - !reference [.cache_omnibus_ruby_deps, setup]
    - printf -- "$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $RPM_GPG_KEY)" | gpg --import --batch
    - EXIT="${PIPESTATUS[0]}"; if [ $EXIT -ne 0 ]; then echo "Unable to locate credentials needs gitlab runner restart"; exit $EXIT; fi
    - RPM_SIGNING_PASSPHRASE=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $RPM_SIGNING_PASSPHRASE) || exit $?; export RPM_SIGNING_PASSPHRASE
    - dda inv -- -e omnibus.build --base-dir $OMNIBUS_BASE_DIR --skip-deps --flavor=iot ${OMNIBUS_EXTRA_ARGS}
    - ls -la $OMNIBUS_PACKAGE_DIR/
    # Measure IoT agent package size and generate in-place report
    - |
      # Find the main IoT agent RPM using pattern similar to gates.py (excludes debug packages)
      PACKAGE_PATTERN="$OMNIBUS_PACKAGE_DIR/datadog-iot-agent-7*${IOT_RPM_ARCH}.rpm"
      echo "üîç Looking for IoT agent package with pattern: $PACKAGE_PATTERN"
      
      for package_file in $PACKAGE_PATTERN; do
        if [[ -f "$package_file" ]]; then
          echo "üìè Measuring IoT agent package: $package_file"
          
          # Generate measurement report
          dda inv quality-gates.measure-package-local \
            --package-path "$package_file" \
            --gate-name "$IOT_GATE_NAME" \
            --build-job-name "$CI_JOB_NAME" \
            --output-path "iot_agent_size_report_${IOT_REPORT_ARCH}_${CI_PIPELINE_ID}.yml" \
            --debug || echo "‚ö†Ô∏è  Package measurement failed for $package_file"
        else
          echo "‚ö†Ô∏è  No IoT agent package found matching pattern: $PACKAGE_PATTERN"
        fi
      done
    - !reference [.create_signature_and_lint_linux_packages]
  stage: packaging
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR
      - "iot_agent_size_report_*.yml"
  variables:
    KUBERNETES_CPU_REQUEST: 16
    KUBERNETES_MEMORY_REQUEST: "32Gi"
    KUBERNETES_MEMORY_LIMIT: "32Gi"
    OMNIBUS_PACKAGE_ARTIFACT_DIR: $OMNIBUS_PACKAGE_DIR
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/iot-agent-rpm.txt"
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]
  retry: 2

iot_agent_rpm-x64:
  extends: [.package_iot_rpm_common, .package_rpm_x86]
  needs: ["iot-agent-x64"]
  variables:
    IOT_RPM_ARCH: "x86_64"
    IOT_GATE_NAME: "static_quality_gate_iot_agent_rpm_amd64"
    IOT_REPORT_ARCH: "x86_64"

iot_agent_rpm-arm64:
  extends: [.package_iot_rpm_common, .package_rpm_arm64]
  needs: ["iot-agent-arm64"]
  variables:
    IOT_RPM_ARCH: "aarch64"
    IOT_GATE_NAME: "static_quality_gate_iot_agent_rpm_arm64"
    IOT_REPORT_ARCH: "arm64"

iot_agent_rpm-armhf:
  extends: .package_iot_rpm_common
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_armhf$CI_IMAGE_RPM_ARMHF_SUFFIX:$CI_IMAGE_RPM_ARMHF
  # Run with platform:arm64 since no platform:armhf exists and arm64 should be backwards compatible
  tags: ["arch:arm64"]
  needs: ["iot-agent-armhf"]
  variables:
    PACKAGE_ARCH: armhf
    DD_PKG_ARCH: "arm64"
    IOT_RPM_ARCH: "armv7hl"
    IOT_GATE_NAME: "static_quality_gate_iot_agent_rpm_armhf"
    IOT_REPORT_ARCH: "armhf"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false
  before_script:
    # Ensures uname -m reports armv7l
    - export LD_PRELOAD="/usr/local/lib/libfakearmv7l.so"

iot_agent_suse-x64:
  extends: [.package_iot_rpm_common, .package_rpm_x86]
  needs: ["iot-agent-x64"]
  script:
    # Don't simply redefine OMNIBUS_PACKAGE_DIR since it also defines where the input
    # artifact is expected to be found. Since the build job is distribution agnostic
    # it shouldn't store its artifact in a suse/ subfolder
    - !reference [.package_iot_rpm_common, script]
    - mkdir -p $OMNIBUS_PACKAGE_DIR_SUSE && mv $OMNIBUS_PACKAGE_DIR/* $OMNIBUS_PACKAGE_DIR_SUSE/
  artifacts:
    expire_in: 2 weeks
    paths:
      - $OMNIBUS_PACKAGE_DIR_SUSE
      - "iot_agent_size_report_*.yml"
  variables:
    OMNIBUS_EXTRA_ARGS: "--host-distribution=suse"
    IOT_RPM_ARCH: "x86_64"
    IOT_GATE_NAME: "static_quality_gate_iot_agent_suse_amd64"
    IOT_REPORT_ARCH: "x86_64"
  cache:
    - !reference [.cache_omnibus_ruby_deps, cache]

dogstatsd_rpm-x64:
  extends: [.package_rpm_common, .package_rpm_x86]
  needs: ["dogstatsd-x64"]
  variables:
    DD_PROJECT: dogstatsd
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/dogstatsd-rpm.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false

dogstatsd_suse-x64:
  extends: [.package_suse_rpm_common, .package_rpm_x86]
  needs: ["dogstatsd-x64"]
  variables:
    DD_PROJECT: dogstatsd
    PACKAGE_REQUIRED_FILES_LIST: "test/required_files/dogstatsd-rpm.txt"
    # TODO(agent-devx): Re-enable VPA by removing this when it will be possible to configure memory lower bound to avoid OOMs
    DD_ENABLE_VPA: false
