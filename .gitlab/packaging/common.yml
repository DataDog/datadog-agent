---

.static_quality_gate_report_common:
  after_script:
    # Measure package size and generate in-place report
    # This runs after the main script and won't fail the job if there are issues
    - |
      if [[ "$CI_JOB_STATUS" != "success" ]]; then
        echo "‚ÑπÔ∏è  Skipping package measurement (job status is not success)"
        exit 0
      fi

      if [[ -n "$GATE_NAME" ]]; then
        echo "üìä Starting package measurement..."

        # Determine package type and set appropriate variables
        # Handle FIPS packages by adjusting project name
        PROJECT_NAME="$DD_PROJECT"
        if [[ "$GATE_NAME" == *"fips"* ]]; then
          PROJECT_NAME="fips-${DD_PROJECT}"
        fi

        if [[ "$GATE_NAME" == *"rpm"* ]] || [[ "$GATE_NAME" == *"suse"* ]]; then
          # RPM packages
          ARCH_VAR="$DD_PKG_ARCH"
          EXTENSION="rpm"
          
          # RPM architecture remapping
          MAPPED_ARCH="$DD_PKG_ARCH"
          if [[ "$DD_PKG_ARCH" == "amd64" ]]; then
            MAPPED_ARCH="x86_64"
          elif [[ "$DD_PKG_ARCH" == "arm64" ]] || [[ "$DD_PKG_ARCH" == "armhf" ]]; then
            MAPPED_ARCH="aarch64"
          fi
          
          PACKAGE_PATTERN="${BASE_PACKAGE_DIR}/datadog-${PROJECT_NAME}-7*${MAPPED_ARCH}.rpm"
        elif [[ "$GATE_NAME" == *"deb"* ]]; then
          # DEB packages
          ARCH_VAR="$PACKAGE_ARCH"
          EXTENSION="deb"
          
          # DEB packages typically don't need architecture remapping
          MAPPED_ARCH="$PACKAGE_ARCH"
          
          PACKAGE_PATTERN="${BASE_PACKAGE_DIR}/datadog-${PROJECT_NAME}_*_${MAPPED_ARCH}.deb"
        else
          echo "‚ö†Ô∏è  Unknown package type for gate: $GATE_NAME"
          exit 0
        fi

        echo "üîÑ Architecture mapping: $ARCH_VAR -> $MAPPED_ARCH"
        echo "üîç Looking for package with pattern: $PACKAGE_PATTERN"

        # Extract report prefix from gate name (e.g. static_quality_gate_agent_rpm_amd64 -> agent_rpm_amd64)
        REPORT_PREFIX="${GATE_NAME#static_quality_gate_}"

        for package_file in $PACKAGE_PATTERN; do
          if [[ -f "$package_file" ]]; then
            echo "üìè Measuring package: $package_file"

            # Generate measurement report using GATE_NAME variable
            dda inv quality-gates.measure-package-local \
              --package-path "$package_file" \
              --gate-name "$GATE_NAME" \
              --build-job-name "$CI_JOB_NAME" \
              --output-path "${REPORT_PREFIX}_size_report_${CI_PIPELINE_ID}_${CI_COMMIT_SHA:0:8}.yml" \
              --debug || echo "‚ö†Ô∏è  Package measurement failed for $package_file"

            echo "‚úÖ Package measurement completed"
          else
            echo "‚ö†Ô∏è  No package found matching pattern: $PACKAGE_PATTERN"
          fi
        done
      else
        echo "‚ÑπÔ∏è  Skipping package measurement (no GATE_NAME defined)"
      fi
