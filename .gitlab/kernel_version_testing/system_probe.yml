.upload_system_probe_tests:
  stage: kernel_matrix_testing_prepare
  allow_failure: true
  rules: !reference [.on_system_probe_changes_or_manual]
  before_script:
    - !reference [.retrieve_linux_go_deps]
    - !reference [.kernel_matrix_testing_new_profile]
    - !reference [.write_ssh_key_file]
  script:
    # Build dependencies directory
    - mkdir -p $DEPENDENCIES
    - pushd $DEPENDENCIES
    # copy clang and llc bins
    - mkdir -p $EMBEDDED_BIN
    - cp $CLANG_BPF $EMBEDDED_BIN
    - cp $LLC_BPF $EMBEDDED_BIN
    - mkdir -p $EMBEDDED_INC
    # copy gotestsum and test2json
    - mkdir -p $GO_BIN
    - cp $GOTESTSUM $GO_BIN
    - cp $TEST2JSON $GO_BIN
    - mkdir junit
    - mkdir testjson
    - mkdir pkgjson
    # copy system probe tests
    - mkdir -p $SYSTEM_PROBE_TESTS
    - cp -R $KITCHEN_TESTS $SYSTEM_PROBE_TESTS
    - pushd $CI_PROJECT_DIR/test/new-e2e/system-probe/test-runner && go build -o $DEPENDENCIES/test-runner && popd
    - pushd $CI_PROJECT_DIR/test/new-e2e/system-probe/test-json-review && go build -o $DEPENDENCIES/test-json-review && popd
    - cp $CI_PROJECT_DIR/test/new-e2e/system-probe/test-runner/files/*.json $DEPENDENCIES/
    - popd
    # package all the dependencies
    - ls -la $DEPENDENCIES
    - pushd $DD_AGENT_TESTING_DIR/$ARCH
    - tar czvf ../$ARCHIVE_NAME tests
    - popd
    # upload tests
    - !reference [.wait_for_instances]
    - !reference [.get_instance_ip_by_type]
    - !reference [.setup_ssh_config]
    - scp $DD_AGENT_TESTING_DIR/$ARCHIVE_NAME metal_instance:/opt/kernel-version-testing/
    # build connector
    - pushd $CI_PROJECT_DIR/test/new-e2e
    - go build -o $CI_PROJECT_DIR/connector-${ARCH} $CI_PROJECT_DIR/test/new-e2e/system-probe/connector/main.go
    - popd
    # upload connector to metal instance
    - scp $CI_PROJECT_DIR/connector-${ARCH} metal_instance:/home/ubuntu/connector
  variables:
    DEPENDENCIES: $DD_AGENT_TESTING_DIR/$ARCH/tests
    EMBEDDED_BIN: opt/datadog-agent/embedded/bin
    EMBEDDED_INC: opt/datadog-agent/embedded/include
    CLANG_BPF: $DD_AGENT_TESTING_DIR/site-cookbooks/dd-system-probe-check/files/default/clang-bpf
    LLC_BPF: $DD_AGENT_TESTING_DIR/site-cookbooks/dd-system-probe-check/files/default/llc-bpf
    GO_BIN: go/bin
    GOTESTSUM: $DD_AGENT_TESTING_DIR/site-cookbooks/dd-system-probe-check/files/default/gotestsum
    TEST2JSON: $DD_AGENT_TESTING_DIR/site-cookbooks/dd-system-probe-check/files/default/test2json
    SYSTEM_PROBE_TESTS: opt/system-probe-tests
    KITCHEN_TESTS: $DD_AGENT_TESTING_DIR/site-cookbooks/dd-system-probe-check/files/default/tests/pkg
    AWS_EC2_SSH_KEY_FILE: $CI_PROJECT_DIR/ssh_key
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/connector-${ARCH}

upload_system_probe_tests_x64:
  extends:
    - .upload_system_probe_tests
  needs: ["go_deps", "prepare_ebpf_functional_tests_x64", "tests_ebpf_x64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64$DATADOG_AGENT_SYSPROBE_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["arch:amd64"]
  variables:
    ARCHIVE_NAME: tests-x86_64.tar.gz
    ARCH: x86_64
    INSTANCE_TYPE: m5d.metal

upload_system_probe_tests_arm64:
  extends:
    - .upload_system_probe_tests
  needs: ["go_deps", "prepare_ebpf_functional_tests_arm64", "tests_ebpf_arm64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64$DATADOG_AGENT_SYSPROBE_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["arch:arm64"]
  variables:
    ARCHIVE_NAME: tests-arm64.tar.gz
    ARCH: arm64
    INSTANCE_TYPE: m6gd.metal

.kernel_matrix_testing_run_tests:
  stage: kernel_matrix_testing_system_probe
  allow_failure: true
  rules: !reference [.on_system_probe_changes_or_manual]
  variables:
    AWS_EC2_SSH_KEY_FILE: $CI_PROJECT_DIR/ssh_key
    RETRY: 2
    MICROVM_GREP_PATTERN: "$ARCH-$TAG-.*$TEST_SET.*-ddvm"
  before_script:
    - set +x
    - export DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.datadog_api_key_org2 --with-decryption --query "Parameter.Value" --out text)
    - set -x
    - !reference [.kernel_matrix_testing_new_profile]
    - !reference [.write_ssh_key_file]
    - echo "CI_JOB_URL=${CI_JOB_URL}" >> $DD_AGENT_TESTING_DIR/job_env.txt
    - echo "CI_JOB_ID=${CI_JOB_ID}" >> $DD_AGENT_TESTING_DIR/job_env.txt
    - echo "CI_JOB_NAME=${CI_JOB_NAME}" >> $DD_AGENT_TESTING_DIR/job_env.txt
    - echo "CI_JOB_STAGE=${CI_JOB_STAGE}" >> $DD_AGENT_TESTING_DIR/job_env.txt
  script:
    - INSTANCE_IP=$(grep "$ARCH-instance-ip" $CI_PROJECT_DIR/stack.output | cut -d ' ' -f 2 | tr -d '\n')
    - !reference [.shared_filters_and_queries]
    - RUNNING_INSTANCES=$(aws ec2 describe-instances --filters $FILTER_TEAM $FILTER_MANAGED $FILTER_PIPELINE "Name=private-ip-address,Values=$INSTANCE_IP" --output text --query $QUERY_INSTANCE_IDS | wc -l )
    - |
      if [ $RUNNING_INSTANCES -eq "0" ]; then
        echo "These jobs do not permit retries. The go tests are retried a user-specified number of times automatically. In order to re-run the tests, you must trigger the pipeline again"
        'false'
      fi
    - MICRO_VM_IP=$(cat $CI_PROJECT_DIR/stack.output | grep $MICROVM_GREP_PATTERN | cut -d ' ' -f 2)
    - MICRO_VM_NAME=$(cat $CI_PROJECT_DIR/stack.output | grep $MICROVM_GREP_PATTERN | cut -d ' ' -f 1)
    - GO_VERSION=$(inv go-version)
    - !reference [.setup_ssh_config]
    # ssh into each micro-vm and run initialization script. This script will also run the tests.
    - scp "$DD_AGENT_TESTING_DIR/job_env.txt" "metal_instance:/home/ubuntu/job_env-${ARCH}-${TAG}-${TEST_SET}.txt"
    - ssh metal_instance "scp /home/ubuntu/job_env-${ARCH}-${TAG}-${TEST_SET}.txt ${MICRO_VM_IP}:/job_env.txt"
    - NESTED_VM_CMD="/home/ubuntu/connector -host ${MICRO_VM_IP} -user root -ssh-file /home/kernel-version-testing/ddvm_rsa -vm-cmd 'bash /root/fetch_dependencies.sh ${ARCH} && /micro-vm-init.sh ${RETRY} /${TEST_SET}.json'"
    - $CI_PROJECT_DIR/connector-$ARCH -host $INSTANCE_IP -user ubuntu -ssh-file $AWS_EC2_SSH_KEY_FILE -vm-cmd "${NESTED_VM_CMD}"
    - ssh metal_instance "ssh ${MICRO_VM_IP} '/test-json-review'"
  after_script:
    - MICRO_VM_IP=$(cat $CI_PROJECT_DIR/stack.output | grep $MICROVM_GREP_PATTERN | cut -d ' ' -f 2)
    - ssh metal_instance "scp ${MICRO_VM_IP}:/ci-visibility/junit.tar.gz /home/ubuntu/junit-${ARCH}-${TAG}-${TEST_SET}.tar.gz"
    - scp "metal_instance:/home/ubuntu/junit-${ARCH}-${TAG}-${TEST_SET}.tar.gz" $DD_AGENT_TESTING_DIR/
    - ssh metal_instance "scp ${MICRO_VM_IP}:/ci-visibility/testjson.tar.gz /home/ubuntu/testjson-${ARCH}-${TAG}-${TEST_SET}.tar.gz"
    - scp "metal_instance:/home/ubuntu/testjson-${ARCH}-${TAG}-${TEST_SET}.tar.gz" $DD_AGENT_TESTING_DIR/
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - $DD_AGENT_TESTING_DIR/junit-$ARCH-$TAG-$TEST_SET.tar.gz
      - $DD_AGENT_TESTING_DIR/testjson-$ARCH-$TAG-$TEST_SET.tar.gz

kernel_matrix_testing_run_tests_x64:
  extends:
    - .kernel_matrix_testing_run_tests
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64$DATADOG_AGENT_SYSPROBE_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["arch:amd64"]
  needs:
    [
      "kernel_matrix_testing_setup_env_x64",
      "upload_dependencies_x64",
      "upload_system_probe_tests_x64",
      "upload_minimized_btfs_x64",
    ]
  timeout: 3h
  variables:
    ARCH: "x86_64"
  parallel:
    matrix:
      - TAG:
          [
            "ubuntu_16.04",
            "ubuntu_18.04",
            "ubuntu_20.04",
            "ubuntu_22.04",
            "ubuntu_23.10",
            "amzn_4.14",
            "amzn_5.4",
            "amzn_5.10",
            "fedora_37",
            "fedora_38",
            "debian_10",
            "debian_11",
            "debian_12",
            "centos_79",
            "centos_8",
          ]
        TEST_SET: ["no_tracersuite", "only_tracersuite"]

kernel_matrix_testing_run_tests_arm64:
  extends:
    - .kernel_matrix_testing_run_tests
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64$DATADOG_AGENT_SYSPROBE_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_SYSPROBE_BUILDIMAGES
  tags: ["arch:arm64"]
  needs:
    [
      "kernel_matrix_testing_setup_env_arm64",
      "upload_dependencies_arm64",
      "upload_system_probe_tests_arm64",
      "upload_minimized_btfs_arm64",
    ]
  timeout: 3h
  variables:
    ARCH: "arm64"
  parallel:
    matrix:
      - TAG:
          [
            "ubuntu_18.04",
            "ubuntu_20.04",
            "ubuntu_22.04",
            "ubuntu_23.10",
            "amzn_4.14",
            "amzn_5.4",
            "amzn_5.10",
            "fedora_37",
            "fedora_38",
            "debian_10",
            "debian_11",
            "debian_12",
            "centos_79",
            "centos_8",
          ]
        TEST_SET: ["no_tracersuite", "only_tracersuite"]
