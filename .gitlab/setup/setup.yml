---
setup_agent_version:
  stage: setup
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux$CI_IMAGE_LINUX_SUFFIX:$CI_IMAGE_LINUX
  tags: ["arch:amd64", "specific:true"]
  script:
    - |
      if ! dda inv -- -e agent.version --cache-version > build.env; then
        echo "Failed to get agent version"
        exit 1
      fi
    - sed -i 's/^/AGENT_VERSION=/' build.env
    - |
      if ! $S3_CP_CMD $CI_PROJECT_DIR/agent-version.cache $S3_ARTIFACTS_URI/agent-version.cache; then
        echo "Failed to upload agent version cache"
        exit 1
      fi
    - echo "Agent version:"
    - cat agent-version.cache
  needs: []
  artifacts:
    reports:
      dotenv: build.env
  variables:
    DISABLE_GIT_CACHE: true

github_rate_limit_info:
  stage: .pre
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/linux$CI_IMAGE_LINUX_SUFFIX:$CI_IMAGE_LINUX
  tags: ["arch:amd64", "specific:true"]
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  script:
    - dda self dep sync -f legacy-tasks
    # Send stats for app 1
    - GITHUB_KEY_B64=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_1 key_b64) || exit $?; export GITHUB_KEY_B64
    - GITHUB_APP_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_1 app_id) || exit $?; export GITHUB_APP_ID
    - GITHUB_INSTALLATION_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_1 installation_id) || exit $?; export GITHUB_INSTALLATION_ID
    - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
    - dda inv -- github.send-rate-limit-info-datadog --pipeline-id $CI_PIPELINE_ID --app-instance 1
    # Send stats for app 2
    - GITHUB_KEY_B64=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 key_b64) || exit $?; export GITHUB_KEY_B64
    - GITHUB_APP_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 app_id) || exit $?; export GITHUB_APP_ID
    - GITHUB_INSTALLATION_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 installation_id) || exit $?; export GITHUB_INSTALLATION_ID
    - DD_API_KEY=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $AGENT_API_KEY_ORG2 token) || exit $?; export DD_API_KEY
    - dda inv -- github.send-rate-limit-info-datadog --pipeline-id $CI_PIPELINE_ID --app-instance 2
  allow_failure: true
