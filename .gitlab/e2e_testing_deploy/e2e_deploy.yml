---
# e2e_deploy stage
# Contains jobs which deploy Agent package to testing repsoitories that are used in e2e tests.

.setup_signing: &setup_signing
  - ${CI_PROJECT_DIR}/tools/ci/retry.sh aws s3 cp s3://binaries-ddbuild-io-prod/dd-source/domains/seceng/sit/apps/artifact-security/vault-gpg-client/gpg-vault/dev/gpg-vault-v1.6.2-linux-amd64.tar.gz .
  - tar -xzf gpg-vault-v1.6.2-linux-amd64.tar.gz
  - mv gpg-vault-linux-amd64 /usr/bin/gpg-vault-bin

  # Set up gpg shim
  - echo '#!/usr/bin/env bash' > /usr/bin/gpg
  - echo 'GPG_VAULT_COMPAT_MODE=true GPG_USER_ID="Datadog Packages" GPG_USER_EMAIL="package@datadoghq.com" /usr/bin/gpg-vault "$@"' >> /usr/bin/gpg
  - chmod +x /usr/bin/gpg

  # Set up gpg-vault shim
  - echo '#!/usr/bin/env bash' > /usr/bin/gpg-vault
  - echo 'GPG_USER_ID="Datadog Packages" GPG_USER_EMAIL="package@datadoghq.com" /usr/bin/gpg-vault-bin "$@"' >> /usr/bin/gpg-vault
  - chmod +x /usr/bin/gpg-vault

# TODO(Agent DevX/SDLC Security - SINT-3845) maybe: add an empty "datadog-signing-keys" package to the pool,
# this may be simpler and it should not break the tests
# because this package is only used when updating the signing key using apt-get update
.setup_signing_keys_package: &setup_signing_keys_package # Set up prod apt repo to get the datadog-signing-keys package
  - echo 'deb [signed-by=/usr/share/keyrings/datadog-archive-keyring.gpg] https://apt.datadoghq.com/ stable 7' > /etc/apt/sources.list.d/datadog.list
  - touch /usr/share/keyrings/datadog-archive-keyring.gpg
  - chmod a+r /usr/share/keyrings/datadog-archive-keyring.gpg
  - curl https://keys.datadoghq.com/DATADOG_APT_KEY_CURRENT.public | gpg --no-default-keyring --keyring /usr/share/keyrings/datadog-archive-keyring.gpg --import --batch

  - apt-get -o Acquire::Retries="5" update
  # Note: it's fine to overwrite the datadog-signing-keys package during each pipeline run, as the package in the
  # pool will remain the same for a given version (the hashsums of the package won't change as long as we
  # upload the same package, which is always going to be the case except if we overwrite a datadog-signing-keys package
  # in the prod repo).
  - apt-get -o Acquire::Retries="5" -o "Dir::Cache::archives=$OMNIBUS_PACKAGE_DIR" install --download-only datadog-signing-keys

  # Rename the package name to a name unique to the pipeline & Agent version, to avoid collisions
  # between packages in the pool.
  - pushd $OMNIBUS_PACKAGE_DIR
  - filename=$(ls datadog-signing-keys*.deb); mv $filename datadog-signing-keys_${DD_PIPELINE_ID}.deb
  - popd

.deploy_deb_testing-a7:
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR

deploy_deb_testing-a7_x64:
  rules:
    - !reference [.except_no_tests_no_deploy]
    - !reference [.except_mergequeue]
    - when: on_success
  extends:
    - .deploy_deb_testing-a7
  needs:
    [
      "installer_deb-amd64",
      "agent_deb-x64-a7",
      "agent_deb-x64-a7-fips",
      "agent_heroku_deb-x64-a7",
      "iot_agent_deb-x64",
      "dogstatsd_deb-x64",
      "lint_linux-x64",
      "ddot_deb-x64",
    ]
  script:
    # setup_signing_keys_package must be done *before* setup_signing
    # because setup_signing replaces gpg with gpg-vault
    # and gpg-vault does not support the operations required by setup_signing_keys_package
    - *setup_signing_keys_package
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR/datadog-*_7*amd64.deb; do
        tools/ci/signing/sign_deb_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - deb-s3 upload -c "stable-x86_64" -m 7 -b $DEB_TESTING_S3_BUCKET -a amd64 --sign=$GPG_TEST_KEY_ID --gpg_options="--batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} out/datadog-*_7*amd64.deb
    - deb-s3 upload -c "stable-x86_64" -m 7 -b $DEB_TESTING_S3_BUCKET -a x86_64 --sign=$GPG_TEST_KEY_ID --gpg_options="--batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} out/datadog-*_7*amd64.deb
    - deb-s3 upload -c "stable-x86_64" -m 7 -b $DEB_TESTING_S3_BUCKET -a amd64 --sign=$GPG_TEST_KEY_ID --gpg_options="--batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} $OMNIBUS_PACKAGE_DIR/datadog-signing-keys_${DD_PIPELINE_ID}.deb
    - deb-s3 upload -c "stable-x86_64" -m 7 -b $DEB_TESTING_S3_BUCKET -a x86_64 --sign=$GPG_TEST_KEY_ID --gpg_options="--batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} $OMNIBUS_PACKAGE_DIR/datadog-signing-keys_${DD_PIPELINE_ID}.deb

deploy_deb_testing-a7_arm64:
  rules:
    - !reference [.on_all_install_script_tests]
    - !reference [.on_installer_or_e2e_changes]
    - !reference [.manual]
  extends:
    - .deploy_deb_testing-a7
  needs: ["installer_deb-arm64", "agent_deb-arm64-a7", "agent_deb-arm64-a7-fips", "lint_linux-arm64", "ddot_deb-arm64"]
  script:
    # setup_signing_keys_package must be done *before* setup_signing
    # because setup_signing replaces gpg with gpg-vault
    # and gpg-vault does not support the operations required by setup_signing_keys_package
    - *setup_signing_keys_package
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR/datadog-*_7*arm64.deb; do
        tools/ci/signing/sign_deb_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - deb-s3 upload -c "stable-arm64" -m 7 -b $DEB_TESTING_S3_BUCKET -a arm64 --sign=$GPG_TEST_KEY_ID --gpg_options="--passphrase-fd 0 --batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} out/datadog-*_7*arm64.deb
    - deb-s3 upload -c "stable-arm64" -m 7 -b $DEB_TESTING_S3_BUCKET -a arm64 --sign=$GPG_TEST_KEY_ID --gpg_options="--passphrase-fd 0 --batch --digest-algo sha512" --preserve_versions --visibility public --prefix datadog-agent/pipeline-${DD_PIPELINE_ID} $OMNIBUS_PACKAGE_DIR/datadog-signing-keys_${DD_PIPELINE_ID}.deb

.deploy_rpm_testing-a7:
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR

deploy_rpm_testing-a7_x64:
  rules:
    - !reference [.except_no_tests_no_deploy]
    - !reference [.except_mergequeue]
    - when: on_success
  extends:
    - .deploy_rpm_testing-a7
  needs:
    [
      "installer_rpm-amd64",
      "agent_rpm-x64-a7",
      "agent_rpm-x64-a7-fips",
      "iot_agent_rpm-x64",
      "dogstatsd_rpm-x64",
      "lint_linux-x64",
      "ddot_rpm-x64",
    ]
  script:
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR/datadog-*-7.*x86_64.rpm; do
        tools/ci/signing/sign_rpm_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - python2 /opt/rpm-s3/bin/rpm-s3 --verbose --visibility public-read -c "https://s3.amazonaws.com" -b $RPM_TESTING_S3_BUCKET -p "testing/pipeline-$DD_PIPELINE_ID/7/x86_64/" -a "x86_64" --sign --metadata-signing-key $GPG_TEST_KEY_ID out/datadog-*-7.*x86_64.rpm

deploy_rpm_testing-a7_arm64:
  rules:
    - !reference [.on_all_install_script_tests]
    - !reference [.on_installer_or_e2e_changes]
    - !reference [.manual]
  extends:
    - .deploy_rpm_testing-a7
  needs: ["installer_rpm-arm64", "agent_rpm-arm64-a7", "agent_rpm-arm64-a7-fips", "lint_linux-arm64", "ddot_rpm-arm64"]
  script:
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR/datadog-*-7.*aarch64.rpm; do
        tools/ci/signing/sign_rpm_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - python2 /opt/rpm-s3/bin/rpm-s3 --verbose --visibility public-read -c "https://s3.amazonaws.com" -b $RPM_TESTING_S3_BUCKET -p "testing/pipeline-$DD_PIPELINE_ID/7/aarch64/" -a "aarch64" --sign --metadata-signing-key $GPG_TEST_KEY_ID out/datadog-*-7.*aarch64.rpm

deploy_suse_rpm_testing_x64-a7:
  rules:
    - !reference [.except_no_tests_no_deploy]
    - !reference [.except_mergequeue]
    - when: on_success
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  needs:
    [
      "installer_suse_rpm-amd64",
      "agent_suse-x64-a7",
      "iot_agent_suse-x64",
      "dogstatsd_suse-x64",
      "agent_suse-x64-a7-fips",
      "lint_linux-x64",
      "ddot_suse_rpm-x64",
    ]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR_SUSE
  script:
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR_SUSE/datadog-*-7.*x86_64.rpm; do
        tools/ci/signing/sign_rpm_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - python2 /opt/rpm-s3/bin/rpm-s3 --verbose --visibility public-read -c "https://s3.amazonaws.com" -b $RPM_TESTING_S3_BUCKET -p "suse/testing/pipeline-$DD_PIPELINE_ID/7/x86_64/" -a "x86_64" --sign --metadata-signing-key $GPG_TEST_KEY_ID --repodata-store-public-key out/datadog-*-7.*x86_64.rpm

deploy_suse_rpm_testing_arm64-a7:
  rules:
    - !reference [.on_e2e_tests]
    - !reference [.on_installer_or_e2e_changes]
    - !reference [.manual]
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  needs: ["installer_suse_rpm-arm64", "agent_suse-arm64-a7", "agent_suse-arm64-a7-fips", "lint_linux-arm64", "ddot_suse_rpm-arm64"]
  variables:
    DD_PIPELINE_ID: $CI_PIPELINE_ID-a7
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR_SUSE
  script:
    - *setup_signing
    - |
      for package in $OMNIBUS_PACKAGE_DIR_SUSE/datadog-*-7.*aarch64.rpm; do
        tools/ci/signing/sign_rpm_package.sh "$package" $GPG_TEST_KEY_ID out/
      done
    - python2 /opt/rpm-s3/bin/rpm-s3 --verbose --visibility public-read -c "https://s3.amazonaws.com" -b $RPM_TESTING_S3_BUCKET -p "suse/testing/pipeline-$DD_PIPELINE_ID/7/aarch64/" -a "aarch64" --sign --metadata-signing-key $GPG_TEST_KEY_ID --repodata-store-public-key out/datadog-*-7.*aarch64.rpm

deploy_windows_testing-a7:
  rules:
    - !reference [.except_no_tests_no_deploy]
    - !reference [.except_mergequeue]
    - when: on_success
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  retry: 2
  needs:
    ["lint_windows-x64", "windows_msi_and_bosh_zip_x64-a7", "windows-installer-amd64"]
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR/pipeline-$CI_PIPELINE_ID
  script:
    - $S3_CP_CMD
      --recursive
      --exclude "*"
      --include "datadog-agent-7.*.msi"
      --include "datadog-agent-upgrade-test-7.*.msi"
      --include "datadog-installer-*-1-x86_64.msi"
      --include "datadog-installer-*-1-x86_64.exe"
      $OMNIBUS_PACKAGE_DIR/pipeline-$CI_PIPELINE_ID s3://$WIN_S3_BUCKET/$WINDOWS_TESTING_S3_BUCKET
      --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

deploy_windows_testing-a7-fips:
  rules:
    - !reference [.except_no_tests_no_deploy]
    - !reference [.except_mergequeue]
    - when: on_success
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  retry: 2
  needs:
    ["lint_windows-x64", "windows_msi_and_bosh_zip_x64-a7-fips"]
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR/pipeline-$CI_PIPELINE_ID
  script:
    - $S3_CP_CMD
      --recursive
      --exclude "*"
      --include "datadog-fips-agent-7.*.msi"
      $OMNIBUS_PACKAGE_DIR/pipeline-$CI_PIPELINE_ID s3://$WIN_S3_BUCKET/$WINDOWS_TESTING_S3_BUCKET
      --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732

export_testing_public_key:
  rules:
    - when: never # Comment this to add a job to export the testing public GPG key. Needed after rotating the testing GPG key.
    - !reference [.manual]
  needs: []
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  script:
    - *setup_signing
    - /usr/bin/gpg-vault export-public-key $GPG_TEST_KEY_ID > gpg-testing-public-key.asc
  artifacts:
    paths:
      - gpg-testing-public-key.asc
    expire_in: 1 day

.deploy_dmg_testing-a7:
  rules:
     - !reference [.on_macos_gui_change]
     - !reference [.on_packaging_change]
     - !reference [.on_main_or_release_branch]
     - !reference [.on_all_builds]
     - !reference [.manual]
  stage: e2e_deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy$CI_IMAGE_GITLAB_AGENT_DEPLOY_SUFFIX:$CI_IMAGE_GITLAB_AGENT_DEPLOY
  tags: ["arch:amd64", "specific:true"]
  before_script:
    - ls $OMNIBUS_PACKAGE_DIR
  script:
    - |
      echo "Listing all datadog-agent-7.*.dmg files in $OMNIBUS_PACKAGE_DIR:"
      ls -la "$OMNIBUS_PACKAGE_DIR"/datadog-agent-7.*.dmg 2>/dev/null || echo "No datadog-agent-7.*.dmg files found"
      
      count=$(ls -1 "$OMNIBUS_PACKAGE_DIR"/datadog-agent-7.*.dmg 2>/dev/null | wc -l || true)
      if [ "$count" -eq 0 ]; then
        echo "No DMG found in $OMNIBUS_PACKAGE_DIR matching datadog-agent-7.*.dmg" >&2
        exit 1
      fi
      if [ "$count" -gt 1 ]; then
        echo "Multiple DMGs found for datadog-agent-7.*.dmg pattern:" >&2
        ls -1 "$OMNIBUS_PACKAGE_DIR"/datadog-agent-7.*.dmg >&2
        exit 1
      fi
      dmg_src=$(ls -1 "$OMNIBUS_PACKAGE_DIR"/datadog-agent-7.*.dmg 2>/dev/null)
      echo "Found single DMG file: $dmg_src"
      $S3_CP_CMD --acl public-read "$dmg_src" "s3://$MACOS_S3_BUCKET/ci/datadog-agent/pipeline-$CI_PIPELINE_ID-$ARCH/datadog-agent-7-latest.dmg"


deploy_dmg_testing-a7_arm64:
  extends: .deploy_dmg_testing-a7
  needs: ["agent_dmg-arm64-a7"]
  variables:
    ARCH: "arm64"


deploy_dmg_testing-a7_x64:
  extends: .deploy_dmg_testing-a7
  needs: ["agent_dmg-x64-a7"]
  variables:
    ARCH: "x64"
