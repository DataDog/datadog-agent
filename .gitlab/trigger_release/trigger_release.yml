---
# trigger_release stage
# Contains jobs which trigger release pipelines in the datadog/agent-release-management repository.

.agent_release_management_trigger:
  stage: trigger_release
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  # We don't directly depend/need the package deploy jobs, because
  # that would make us deploy even when there are e2e tests failures etc
  # We only want to allow automatically triggering agent-release-manangement
  # pipelines when everything goes well
  variables:
    ACTION: promote
    BUILD_PIPELINE_ID: $CI_PIPELINE_ID
    RELEASE_PRODUCT: datadog-agent
    TARGET_REPO_BRANCH: $BUCKET_BRANCH
  script:
    # agent-release-management creates pipeline for both Agent 6 and Agent 7
    # when triggered with major version 7
    - RELEASE_VERSION="$(dda inv agent.version --url-safe --omnibus-format)-1" || exit $?; export RELEASE_VERSION
    - GITLAB_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $GITLAB_TOKEN write_api) || exit $?; export GITLAB_TOKEN
    - 'dda inv pipeline.trigger-child-pipeline --project-name "DataDog/agent-release-management" --git-ref "main"
      --variable ACTION
      --variable AUTO_RELEASE
      --variable BUILD_PIPELINE_ID
      --variable RELEASE_PRODUCT
      --variable RELEASE_VERSION
      --variable TARGET_REPO
      --variable TARGET_REPO_BRANCH
      $NO_FOLLOW'
  dependencies: []

trigger_auto_staging_release:
  extends: .agent_release_management_trigger
  timeout: 2h 30m
  variables:
    AUTO_RELEASE: "true"
    TARGET_REPO: staging
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - !reference [.on_deploy]

trigger_auto_staging_release_on_failure:
  extends: .agent_release_management_trigger
  timeout: 2h 30m
  variables:
    AUTO_RELEASE: "false"
    TARGET_REPO: staging
    # The jobs in the downstream pipeline will all be manual, so following
    # the created pipeline would likely cause this job to timeout
    NO_FOLLOW: "--no-follow"
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - !reference [.on_deploy_failure]

trigger_manual_prod_release:
  extends: .agent_release_management_trigger
  variables:
    AUTO_RELEASE: "false"
    TARGET_REPO: prod
    # The jobs in the downstream pipeline will all be manual, so following
    # the created pipeline would likely cause this job to timeout
    NO_FOLLOW: "--no-follow"
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - !reference [.on_deploy_stable_or_beta_manual_auto_on_stable]

trigger_manual_prod_release_on_failure:
  extends: .agent_release_management_trigger
  variables:
    AUTO_RELEASE: "false"
    TARGET_REPO: prod
    # The jobs in the downstream pipeline will all be manual, so following
    # the created pipeline would likely cause this job to timeout
    NO_FOLLOW: "--no-follow"
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - !reference [.on_deploy_stable_on_failure]

.setup_github_app_agent_platform_auto_pr:
  # GitHub App rate-limits are per-app. Since we are rarely calling the job, we are only using the instance 2
  - |
    GITHUB_KEY_B64=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 key_b64) || exit $?; export GITHUB_KEY_B64
    GITHUB_APP_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 app_id) || exit $?; export GITHUB_APP_ID
    GITHUB_INSTALLATION_ID=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $MACOS_GITHUB_APP_2 installation_id) || exit $?; export GITHUB_INSTALLATION_ID
    echo "Using GitHub App instance 2"

generate_windows_gitlab_runner_bump_pr:
  stage: trigger_release
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  needs: ["trigger_auto_staging_release"]
  tags: ["arch:arm64"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$/

  script:
    # We are using the agent platform auto PR github app to access the buildenv repository (already used for macOS builds)
    - !reference [.setup_github_app_agent_platform_auto_pr]
    - python3 -m pip install "git+https://github.com/DataDog/datadog-agent-dev.git@v$(cat .dda/version)"
    - python3 -m dda self dep sync -f legacy-tasks
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - SLACK_DATADOG_AGENT_BOT_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $SLACK_AGENT token) || exit $?; export SLACK_DATADOG_AGENT_BOT_TOKEN
    - dda inv -- -e github.update-windows-runner-version

# Manual job to generate the gitlab bump pr on buildenv if trigger_auto_staging_release fails
generate_windows_gitlab_runner_bump_pr_manual:
  stage: trigger_release
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_arm64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  needs: ["trigger_auto_staging_release"]
  tags: ["arch:arm64"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+){0,1}$/
      when: never
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$/
      when: manual
  script:
    # We are using the agent platform auto PR github app to access the buildenv repository (already used for macOS builds)
    - !reference [.setup_github_app_agent_platform_auto_pr]
    - python3 -m pip install "git+https://github.com/DataDog/datadog-agent-dev.git@v$(cat .dda/version)"
    - python3 -m dda self dep sync -f legacy-tasks
    - $S3_CP_CMD $S3_ARTIFACTS_URI/agent-version.cache .
    - SLACK_DATADOG_AGENT_BOT_TOKEN=$($CI_PROJECT_DIR/tools/ci/fetch_secret.sh $SLACK_AGENT token) || exit $?; export SLACK_DATADOG_AGENT_BOT_TOKEN
    - dda inv -- -e github.update-windows-runner-version
