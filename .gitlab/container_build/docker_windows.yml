---
.docker_build_windows_job_definition:
  stage: container_build
  before_script:
    - $ErrorActionPreference = "Stop"
    - mkdir ci-scripts
    - |
      @"
      Set-PSDebug -Trace 1
      `$ErrorActionPreference = "Stop"
      # ECR Login
      `$AWS_ECR_PASSWORD = aws ecr get-login-password --region us-east-1
      docker login --username AWS --password "`${AWS_ECR_PASSWORD}" 486234852809.dkr.ecr.us-east-1.amazonaws.com
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      # DockerHub login
      `$DOCKER_REGISTRY_LOGIN = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_LOGIN_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      `$DOCKER_REGISTRY_PWD = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.${DOCKER_REGISTRY_PWD_SSM_KEY} --with-decryption --query "Parameter.Value" --out text
      docker login --username "`${DOCKER_REGISTRY_LOGIN}" --password "`${DOCKER_REGISTRY_PWD}" "${DOCKER_REGISTRY_URL}"
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      "@ | out-file ci-scripts/docker-login.ps1
  # Workaround for temporary network failures
  retry: 2

.docker_build_agent_windows_common:
  extends:
    - .docker_build_windows_job_definition
  variables:
    IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
    BUILD_CONTEXT: Dockerfiles/agent
  script:
    - $ECR_RELEASE_SUFFIX="$(If ($CI_COMMIT_TAG) { `"-release`" } else { `"`" })"
    - $TARGET_TAG="${IMAGE}${ECR_RELEASE_SUFFIX}:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}${TAG_SUFFIX}-win${VARIANT}${SERVERCORE}-amd64"
    - $ErrorActionPreference = "Stop"
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - cp ${OMNIBUS_PACKAGE_DIR}/${AGENT_ZIP} ${BUILD_CONTEXT}/datadog-agent-latest.amd64.zip
    - cp entrypoint.exe ${BUILD_CONTEXT}/entrypoint.exe

    # Much faster but doesn't exist in build container
    # - & 'C:\Program Files\7-Zip\7z.exe' x .\datadog-agent-latest.amd64.zip -o"Datadog Agent"
    - pushd ${BUILD_CONTEXT}
    - Expand-Archive datadog-agent-latest.amd64.zip
    - Remove-Item datadog-agent-latest.amd64.zip
    - Get-ChildItem -Path datadog-agent-* | Rename-Item -NewName "Datadog Agent"
    - popd

    - get-childitem ${BUILD_CONTEXT}
    # Docker setup
    - cat ci-scripts/docker-login.ps1
    - >
      docker run --rm
      -w C:\mnt
      -e AWS_NETWORKING=true
      -e SIGN_WINDOWS=true
      -v "$(Get-Location):C:\mnt"
      -v \\.\pipe\docker_engine:\\.\pipe\docker_engine 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_${Env:VARIANT}_x64${Env:DATADOG_AGENT_WINBUILDIMAGES_SUFFIX}:${Env:DATADOG_AGENT_WINBUILDIMAGES}
      powershell
      -C C:\mnt\ci-scripts\docker-login.ps1
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - powershell -Command "docker build --no-cache --build-arg GENERAL_ARTIFACTS_CACHE_BUCKET_URL=${GENERAL_ARTIFACTS_CACHE_BUCKET_URL} ${BUILD_ARG} --pull --file ${BUILD_CONTEXT}/windows/amd64/Dockerfile --tag ${TARGET_TAG} ${BUILD_CONTEXT}"
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker push ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }
    - docker rmi ${TARGET_TAG}
    - If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }

.docker_build_agent7_windows_common:
  extends:
    - .docker_build_agent_windows_common
  rules:
    !reference [.on_a7]
  needs: ["windows_msi_and_bosh_zip_x64-a7", "build_windows_container_entrypoint"]
  variables:
    AGENT_ZIP: "datadog-agent-7*-x86_64.zip"
    BUILD_ARG: "--build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-${VARIANT} --build-arg WITH_JMX=${WITH_JMX} --build-arg VARIANT=${VARIANT} --build-arg INSTALL_INFO=nano-${VARIANT}"

.docker_build_agent6_windows_common:
  extends:
    - .docker_build_agent_windows_common
  rules:
    !reference [.on_a6]
  needs: ["windows_msi_x64-a6", "build_windows_container_entrypoint"]
  variables:
    AGENT_ZIP: "datadog-agent-6*-x86_64.zip"
    BUILD_ARG: "--build-arg BASE_IMAGE=mcr.microsoft.com/powershell:nanoserver-${VARIANT} --build-arg WITH_JMX=${WITH_JMX} --build-arg VARIANT=${VARIANT} --build-arg INSTALL_INFO=nano-${VARIANT}"

.docker_build_agent6_windows_servercore_common:
  extends:
    - .docker_build_agent6_windows_common
  variables:
    BUILD_ARG: "--build-arg BASE_IMAGE=mcr.microsoft.com/powershell:windowsservercore-${VARIANT} --build-arg WITH_JMX=${WITH_JMX} --build-arg VARIANT=${VARIANT} --build-arg INSTALL_INFO=core-${VARIANT}"
    SERVERCORE: "-servercore"

.docker_build_agent7_windows_servercore_common:
  extends:
    - .docker_build_agent7_windows_common
  variables:
    BUILD_ARG: "--build-arg BASE_IMAGE=mcr.microsoft.com/powershell:windowsservercore-${VARIANT} --build-arg WITH_JMX=${WITH_JMX} --build-arg VARIANT=${VARIANT} --build-arg INSTALL_INFO=core-${VARIANT}"
    SERVERCORE: "-servercore"

include:
  - /.gitlab/container_build/docker_windows_agent6.yml
  - /.gitlab/container_build/docker_windows_agent7.yml
