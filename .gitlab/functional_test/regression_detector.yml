single-machine-performance-regression_detector:
  stage: functional_test
  rules:
    - !reference [.except_mergequeue]
    - when: on_success
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker"]
  needs:
    - job: single_machine_performance-amd64-a7
      artifacts: false
  artifacts:
    expire_in: 1 weeks
    paths:
      - submission_metadata # for provenance, debugging
      - ${CI_COMMIT_SHA}-baseline_sha # for provenance, debugging
      - outputs/report.md # for debugging, also on S3
      - outputs/report.html # for debugging, also on S3
    when: always
  variables:
    SMP_VERSION: 0.12.0
    LADING_VERSION: 0.20.9
    CPUS: 7
    MEMORY: "30g"
  # At present we require two artifacts to exist for the 'baseline' and the
  # 'comparison'. We are guaranteed by the structure of the pipeline that
  # 'comparison' exists, not so much with 'baseline' as it has to come from main
  # merge pipeline run. This is solved in datadog-agent by updating a file in S3
  # with the SHA of the merge base from main. It's solved in Vector by
  # building Vector twice for each Regression Detector run.
  #
  # We allow failure for now. _Unfortunately_ this also means that if the
  # Regression Detector finds a performance issue with a PR it will not be
  # flagged.
  allow_failure: true
  script:
    # Ensure output files exist for artifact downloads step
    - mkdir outputs # Also needed for smp job sync step
    - touch outputs/report.md # Will be emitted by smp job sync
    - touch outputs/report.html # Will be emitted by smp job sync
    # Compute merge base of current commit and `main`
    - git fetch origin
    - SMP_BASE_BRANCH=$(inv release.get-release-json-value base_branch)
    - echo "Looking for merge base for branch ${SMP_BASE_BRANCH}"
    - SMP_MERGE_BASE=$(git merge-base ${CI_COMMIT_SHA} origin/${SMP_BASE_BRANCH})
    - echo "Merge base is ${SMP_MERGE_BASE}"
    # Setup AWS credentials for single-machine-performance AWS account
    - AWS_NAMED_PROFILE="single-machine-performance"
    - SMP_ACCOUNT_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $SMP_ACCOUNT_ID_SSM_NAME)
    - SMP_ECR_URL=${SMP_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com
    - SMP_AGENT_TEAM_ID=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $SMP_AGENT_TEAM_ID_SSM_NAME)
    - SMP_API=$($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $SMP_API_SSM_NAME)
    - aws configure set aws_access_key_id $($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $SMP_BOT_ACCESS_KEY_ID_SSM_NAME) --profile ${AWS_NAMED_PROFILE}
    - aws configure set aws_secret_access_key $($CI_PROJECT_DIR/tools/ci/aws_ssm_get_wrapper.sh $SMP_BOT_ACCESS_KEY_SSM_NAME) --profile ${AWS_NAMED_PROFILE}
    - aws configure set region us-west-2 --profile ${AWS_NAMED_PROFILE}
    # Download smp binary and prepare it for use
    - aws --profile single-machine-performance s3 cp s3://smp-cli-releases/v${SMP_VERSION}/x86_64-unknown-linux-gnu/smp smp
    - chmod +x smp
    - BASELINE_SHA="${SMP_MERGE_BASE}"
    - echo "Computing baseline..."
    - echo "Checking if image exists for commit ${BASELINE_SHA}..."
    - while [[ ! $(aws ecr describe-images --profile single-machine-performance --registry-id "${SMP_ACCOUNT_ID}" --repository-name "${SMP_AGENT_TEAM_ID}-agent" --image-ids imageTag="${BASELINE_SHA}-7-amd64") ]]; do echo "No image exists for ${BASELINE_SHA} - checking predecessor of ${BASELINE_SHA} next"; BASELINE_SHA=$(git rev-parse ${BASELINE_SHA}^); echo "Checking if image exists for commit ${BASELINE_SHA}..."; done
    - echo "Image exists for commit ${BASELINE_SHA}"
    - echo "Baseline SHA is ${BASELINE_SHA}"
    - echo -n "${BASELINE_SHA}" > "${CI_COMMIT_SHA}-baseline_sha"
    # Copy the baseline SHA to SMP for debugging purposes later
    - aws s3 cp --profile single-machine-performance --only-show-errors "${CI_COMMIT_SHA}-baseline_sha" "s3://${SMP_AGENT_TEAM_ID}-smp-artifacts/information/"
    - BASELINE_IMAGE=${SMP_ECR_URL}/${SMP_AGENT_TEAM_ID}-agent:${BASELINE_SHA}-7-amd64
    - echo "${BASELINE_SHA} | ${BASELINE_IMAGE}"
    - COMPARISON_IMAGE=${SMP_ECR_URL}/${SMP_AGENT_TEAM_ID}-agent:${CI_COMMIT_SHA}-7-amd64
    - echo "${CI_COMMIT_SHA} | ${COMPARISON_IMAGE}"
    - RUST_LOG="info,aws_config::profile::credentials=error"
    - RUST_LOG_DEBUG="debug,aws_config::profile::credentials=error"
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --api-base ${SMP_API} --aws-named-profile ${AWS_NAMED_PROFILE}
      job submit
      --lading-version ${LADING_VERSION}
      --baseline-image ${BASELINE_IMAGE}
      --comparison-image ${COMPARISON_IMAGE}
      --baseline-sha ${BASELINE_SHA}
      --comparison-sha ${CI_COMMIT_SHA}
      --target-name datadog-agent
      --target-command "/bin/entrypoint.sh"
      --target-environment-variables "DD_HOSTNAME=smp-regression,DD_DD_URL=http://127.0.0.1:9092"
      --target-config-dir test/regression/
      --target-cpu-allotment ${CPUS}
      --target-memory-allotment ${MEMORY}
      --submission-metadata submission_metadata
    # Wait for job to complete.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --api-base ${SMP_API} --aws-named-profile ${AWS_NAMED_PROFILE}
      job status
      --use-consignor welch
      --wait
      --wait-delay-seconds 60
      --submission-metadata submission_metadata
    # Now that the job is completed pull the analysis report, output it to stdout.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --api-base ${SMP_API} --aws-named-profile ${AWS_NAMED_PROFILE}
      job sync
      --use-consignor welch
      --submission-metadata submission_metadata
      --output-path outputs
    # Replace empty lines in the output with lines containing various unicode
    # space characters. This avoids
    # https://gitlab.com/gitlab-org/gitlab/-/issues/217231.
    - cat outputs/report.md | sed "s/^\$/$(echo -ne '\uFEFF\u00A0\u200B')/g"
    - !reference [.install_pr_commenter]
    # Post HTML report to GitHub
    - cat outputs/report.md | /usr/local/bin/pr-commenter --for-pr="$CI_COMMIT_REF_NAME" --header="Regression Detector"
    # Finally, exit 1 if the job signals a regression else 0.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --api-base ${SMP_API} --aws-named-profile ${AWS_NAMED_PROFILE}
      job result
      --use-consignor welch
      --submission-metadata submission_metadata
