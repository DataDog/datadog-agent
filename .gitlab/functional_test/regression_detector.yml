single-machine-performance-regression_detector:
  stage: functional_test
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64$DATADOG_AGENT_BUILDIMAGES_SUFFIX:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker"]
  needs:
    - job: single_machine_performance-amd64-a7
      artifacts: false
  artifacts:
    expire_in: 1 weeks
    paths:
      - submission_metadata              # for provenance, debugging
      - ${CI_COMMIT_SHA}-baseline_sha    # for provenance, debugging
      - outputs/report.md                # for debugging, also on S3
      - outputs/report.html              # for debugging, also on S3
    when: always
  variables:
    SMP_VERSION: 0.7.3
    LADING_VERSION: 0.15.3
    TOTAL_SAMPLES: 600
    WARMUP_SECONDS: 45
    REPLICAS: 20
    CPUS: 7
    MEMORY: "30g"
  # At present we require two artifacts to exist for the 'baseline' and the
  # 'comparison'. We are guaranteed by the structure of the pipeline that
  # 'comparison' exists, not so much with 'baseline' as it has to come from main
  # merge pipeline run. This is solved in datadog-agent by updating a file in S3
  # with the SHA of the merge base from main. It's solved in Vector by
  # building Vector twice for each Regression Detector run.
  #
  # We allow failure for now. _Unfortunately_ this also means that if the
  # Regression Detector finds a performance issue with a PR it will not be
  # flagged.
  allow_failure: true
  script:
    # Ensure output files exist for artifact downloads step
    - mkdir outputs              # Also needed for smp job sync step
    - touch outputs/report.md    # Will be emitted by smp job sync
    - touch outputs/report.html  # Will be emitted by smp job sync
    # Compute merge base of current commit and `main`
    - git fetch origin
    - SMP_MERGE_BASE=$(git merge-base ${CI_COMMIT_SHA} origin/main)
    - echo "Merge base is ${SMP_MERGE_BASE}"
    # Setup AWS credentials for single-machine-performance AWS account
    - AWS_NAMED_PROFILE="single-machine-performance"
    - SMP_ACCOUNT_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.single-machine-performance-account-id --with-decryption --query "Parameter.Value" --out text)
    - SMP_ECR_URL=${SMP_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com
    - SMP_AGENT_TEAM_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.single-machine-performance-agent-team-id --with-decryption --query "Parameter.Value" --out text)
    - aws configure set aws_access_key_id $(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.single-machine-performance-bot-access-key-id --with-decryption --query "Parameter.Value" --out text) --profile ${AWS_NAMED_PROFILE}
    - aws configure set aws_secret_access_key $(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.single-machine-performance-bot-access-key --with-decryption --query "Parameter.Value" --out text) --profile ${AWS_NAMED_PROFILE}
    - aws configure set region us-west-2 --profile ${AWS_NAMED_PROFILE}
    # Download smp binary and prepare it for use
    - aws --profile single-machine-performance s3 cp s3://smp-cli-releases/v${SMP_VERSION}/x86_64-unknown-linux-musl/smp smp
    - chmod +x smp
    - BASELINE_SHA="${SMP_MERGE_BASE}"
    - echo "Computing baseline..."
    - echo "Checking if image exists for commit ${BASELINE_SHA}..."
    - while [[ ! $(aws ecr describe-images --profile single-machine-performance --registry-id "${SMP_ACCOUNT_ID}" --repository-name "${SMP_AGENT_TEAM_ID}-agent" --image-ids imageTag="${BASELINE_SHA}-7-amd64") ]]; do echo "No image exists for ${BASELINE_SHA} - checking predecessor of ${BASELINE_SHA} next"; BASELINE_SHA=$(git rev-parse ${BASELINE_SHA}^); echo "Checking if image exists for commit ${BASELINE_SHA}..."; done
    - echo "Image exists for commit ${BASELINE_SHA}"
    - echo "Baseline SHA is ${BASELINE_SHA}"
    - echo -n "${BASELINE_SHA}" > "${CI_COMMIT_SHA}-baseline_sha"
    # Copy the baseline SHA to SMP for debugging purposes later
    - aws s3 cp --profile single-machine-performance --only-show-errors "${CI_COMMIT_SHA}-baseline_sha" "s3://${SMP_AGENT_TEAM_ID}-smp-artifacts/information/"
    - BASELINE_IMAGE=${SMP_ECR_URL}/${SMP_AGENT_TEAM_ID}-agent:${BASELINE_SHA}-7-amd64
    - echo "${BASELINE_SHA} | ${BASELINE_IMAGE}"
    - COMPARISON_IMAGE=${SMP_ECR_URL}/${SMP_AGENT_TEAM_ID}-agent:${CI_COMMIT_SHA}-7-amd64
    - echo "${CI_COMMIT_SHA} | ${COMPARISON_IMAGE}"
    - RUST_LOG="info,aws_config::profile::credentials=error"
    - RUST_LOG_DEBUG="debug,aws_config::profile::credentials=error"
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --aws-named-profile ${AWS_NAMED_PROFILE}
            job submit
            --lading-version ${LADING_VERSION}
            --total-samples ${TOTAL_SAMPLES}
            --warmup-seconds ${WARMUP_SECONDS}
            --replicas ${REPLICAS}
            --baseline-image ${BASELINE_IMAGE}
            --comparison-image ${COMPARISON_IMAGE}
            --baseline-sha ${BASELINE_SHA}
            --comparison-sha ${CI_COMMIT_SHA}
            --target-name datadog-agent
            --target-command "/bin/entrypoint.sh"
            --target-environment-variables "DD_HOSTNAME=smp-regression,DD_DD_URL=http://127.0.0.1:9092,DD_API_KEY=00000001"
            --target-config-dir test/regression/
            --target-cpu-allotment ${CPUS}
            --target-memory-allotment ${MEMORY}
            --submission-metadata submission_metadata
    # Wait for job to complete.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --aws-named-profile ${AWS_NAMED_PROFILE}
            job status
            --wait
            --wait-delay-seconds 60
            --submission-metadata submission_metadata
    # Now that the job is completed pull the analysis report, output it to stdout.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --aws-named-profile ${AWS_NAMED_PROFILE}
            job sync
            --submission-metadata submission_metadata
            --output-path outputs
    # Replace empty lines in the output with lines containing various unicode
    # space characters. This avoids
    # https://gitlab.com/gitlab-org/gitlab/-/issues/217231.
    - cat outputs/report.md | sed "s/^\$/$(echo -ne '\uFEFF\u00A0\u200B')/g"
    # Add janky means of installing PR commenter borrowed from
    # https://github.com/DataDog/dogweb/blob/45d7fcf035d0d515ebd901919099d4c8bfa82829/docker/docker-builder/Dockerfile#L69-L77
    - apt-get update
    - apt-get install -y curl
    - curl -OL https://s3.amazonaws.com/dd-package-public/dd-package.deb
    - dpkg -i dd-package.deb
    - rm dd-package.deb
    - apt-get update
    - dd-package --bucket binaries.ddbuild.io --package devtools/dd-package-dev --distribution "20.04"
    # Kludge from https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4645#note_287636439 to avoid
    # doubled output
    - echo ""
    - "####################### NOTE TO MAINTAINERS #####################################"
    - "# Ignore bdist_wheel build error raised when installing 'devtools/pr-commenter' #"
    - "# This error is known behavior, and you should see a successful install         #"
    - "# beneath the error message in the GitLab CI logs                               #"
    - "#################################################################################"
    - echo ""
    # Pinned version of pr-commenter taken from https://github.com/DataDog/dogweb/blob/b2a891c2a2186b8fecd27ca9b13ebabe5f289a4a/tasks/gitlab/k8s-diff-helper.sh#L22
    - dd-package --bucket binaries.ddbuild.io --package devtools/pr-commenter --distribution "20.04" --version "14692290-a6440fd1"
    # Post HTML report to GitHub
    - cat outputs/report.html | /usr/local/bin/pr-commenter --for-pr="$CI_COMMIT_REF_NAME"
    # Finally, exit 1 if the job signals a regression else 0.
    - RUST_LOG="${RUST_LOG}" ./smp --team-id ${SMP_AGENT_TEAM_ID} --aws-named-profile ${AWS_NAMED_PROFILE}
            job result
            --submission-metadata submission_metadata
