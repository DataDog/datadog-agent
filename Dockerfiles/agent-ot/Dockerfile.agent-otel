ARG AGENT_VERSION=nightly-ot-beta-main-jmx
# Use the Ubuntu Slim AMD64 base image
FROM ubuntu:24.04 AS builder

# Set environment variables
ARG AGENT_VERSION
ENV DEBIAN_FRONTEND=noninteractive

# Set the working directory
WORKDIR /workspace

# Update and install necessary packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    software-properties-common \
    build-essential \
    git \
    python3 \
    python3-pip \
    python3-venv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# TEMP: Use github source code
RUN git clone --depth 1 https://github.com/DataDog/datadog-agent.git datadog-agent-${AGENT_VERSION}

# Once we have stable releases, we can use the following code to download the source code
# TODO: use released agent version once we have an agent release with the otel binary
# Download and unpack source code
#RUN curl -L https://github.com/DataDog/datadog-agent/archive/refs/tags/${AGENT_VERSION}.tar.gz -o datadog-agent-${AGENT_VERSION}.tar.gz && \
#    tar -xzvf datadog-agent-${AGENT_VERSION}.tar.gz && \
#    rm datadog-agent-${AGENT_VERSION}.tar.gz


# Set the working directory to the source code
WORKDIR /workspace/datadog-agent-${AGENT_VERSION}

# Install Go based on architecture
RUN GO_VERSION=$(cat .go-version) && \
    ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then \
    GO_ARCH="linux-amd64"; \
    elif [ "$ARCH" = "arm64" ]; then \
    GO_ARCH="linux-arm64"; \
    else \
    echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    curl -OL https://golang.org/dl/go${GO_VERSION}.$GO_ARCH.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.$GO_ARCH.tar.gz && \
    rm go${GO_VERSION}.$GO_ARCH.tar.gz

# Set up Go environment
ENV PATH="/usr/local/go/bin:${PATH}"
RUN mkdir /go
ENV GOPATH=/go

# Verify installations
RUN go version && \
    python3 --version && \
    curl --version

# Create and activate virtual environment, then install requirements
RUN python3 -m venv venv && \
    . venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -r tasks/requirements.txt

# Copy the manifest file
COPY manifest.yaml /workspace/datadog-agent-${AGENT_VERSION}/comp/otelcol/collector-contrib/impl/manifest.yaml

# Generate the files
RUN . venv/bin/activate && invoke collector.generate

# Build the OTel agent
RUN . venv/bin/activate && invoke otel-agent.build

# Use the final Datadog agent image
FROM datadog/agent-dev:${AGENT_VERSION}
ARG AGENT_VERSION
# Copy the built OTel agent from the builder stage
COPY --from=builder /workspace/datadog-agent-${AGENT_VERSION}/bin/otel-agent/otel-agent /opt/datadog-agent/embedded/bin/otel-agent

