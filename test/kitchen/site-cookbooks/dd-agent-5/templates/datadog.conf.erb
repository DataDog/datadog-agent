# Generated by Chef, local modifications will be overwritten

[Main]
dd_url: <%= @dd_urls.join(',') %>
api_key: <%= @api_keys.join(',') %>
check_freq: <%= node['datadog']['check_freq'] %>
hostname: <%= node['datadog']['hostname'] %>
use_mount: <%= node['datadog']['use_mount'] ? "yes" : "no"  %>
listen_port: <%= node['datadog']['agent_port'] %>
bind_host: <%= node['datadog']['bind_host'] %>
<% if node['datadog']['autorestart'] -%>
autorestart: <%= node['datadog']['autorestart'] %>
<% end -%>
<% if node['datadog']['web_proxy']['skip_ssl_validation'] -%>
skip_ssl_validation: <%= node['datadog']['web_proxy']['skip_ssl_validation'] %>
<% end -%>
<% if node['datadog']['developer_mode'] -%>
developer_mode: <%= node['datadog']['developer_mode'] %>
<% end -%>

<% if node['datadog']['tags'].respond_to?(:each_pair) -%>
tags: <%= node['datadog']['tags'].reject{ |_k,v| v.empty? }.map{ |k,v| "#{k}:#{v}" }.join(',') %>
<% elsif node['datadog']['tags'].respond_to?(:join) %>
tags: <%= node['datadog']['tags'].join(',') %>
<% else %>
tags: <%= node['datadog']['tags'] %>
<% end -%>
<% if node['datadog']['create_dd_check_tags'] -%>
create_dd_check_tags: <%= node['datadog']['create_dd_check_tags'] %>
<% end -%>
<% if node['datadog']['collect_ec2_tags'] -%>
collect_ec2_tags: <%= node['datadog']['collect_ec2_tags'] %>
<% end -%>

<% if node['datadog']['web_proxy']['host'] -%>
proxy_host: <%= node['datadog']['web_proxy']['host'] %>
proxy_port: <%= node['datadog']['web_proxy']['port'] %>
proxy_user: <%= node['datadog']['web_proxy']['user'] %>
proxy_password: <%= node['datadog']['web_proxy']['password'] %>
<% end -%>

<% if node['datadog']['non_local_traffic'] == true %>
non_local_traffic: true
<% end -%>

<% if !node['datadog']['dogstreams'].empty? -%>
dogstreams: <%= node['datadog']['dogstreams'].join(', ') %>
<% end -%>

<% if !node['datadog']['custom_emitters'].empty? -%>
custom_emitters: <%= node['datadog']['custom_emitters'].join(', ') %>
<% end -%>

<% if node['datadog']['agent_checks_interval'] -%>
agent_checks_interval: <%= node['datadog']['agent_checks_interval'] %>
<% end -%>

<% if node['datadog']['graphite'] -%>
graphite_listen_port: <%= node['datadog']['graphite_port'] %>
<% end -%>

## Histogram settings
histogram_aggregates: <%= node['datadog']['histogram_aggregates'] %>
histogram_percentiles: <%= node['datadog']['histogram_percentiles'] %>

<% if node['datadog']['service_discovery_backend'] -%>
# ========================================================================== #
# Service Discovery                                                          #
# See https://docs.datadoghq.com/guides/servicediscovery/ for details        #
# ========================================================================== #

# Service discovery allows the agent to look for running services
# and load a configuration object for the one it recognizes.
# This feature is disabled by default.
# Uncomment this line to enable it (works for docker containers only for now).
service_discovery_backend: <%= node['datadog']['service_discovery_backend'] %>

# Define which key/value store must be used to look for configuration templates.
# Default is etcd. Consul is also supported.
sd_config_backend: <%= node['datadog']['sd_config_backend'] %>

# Settings for connecting to the service discovery backend.
sd_backend_host: <%= node['datadog']['sd_backend_host'] %>
sd_backend_port: <%= node['datadog']['sd_backend_port'] %>

# By default, the agent will look for the configuration templates under the
# `/datadog/check_configs` key in the back-end. If you wish otherwise, uncomment this option
# and modify its value.
sd_template_dir: <%= node['datadog']['sd_template_dir'] %>

# Enable JMX checks for service discovery
sd_jmx_enable: <%= node['datadog']['sd_jmx_enable'] %>

<% if node['datadog']['jmx_custom_jars'] %>
# If you require custom jars to be loaded for JMX checks, you can set their paths here
# instead of setting them in the checks' custom_jar_paths option
jmx_custom_jars: <%= node['datadog']['jmx_custom_jars'] %>
<% end -%>
<% end -%>

<% if node['datadog']['dogstatsd'] -%>
# ========================================================================== #
# DogStatsd configuration                                                    #
# ========================================================================== #

# DogStatsd is a small server that aggregates your custom app metrics. For
# usage information, check out http://docs.datadoghq.com

#  Make sure your client is sending to the same port.
dogstatsd_port: <%= node['datadog']['dogstatsd_port'] %>

## The dogstatsd flush period.
dogstatsd_interval: <%= node['datadog']['dogstatsd_interval'] %>

## The target location to send the data
dogstatsd_target: <%= node['datadog']['dogstatsd_target'] %>

## If 'yes', counters and rates will be normalized to 1 second (that is divided
## by the dogstatsd_interval) before being sent to the server. Defaults to 'yes'
dogstatsd_normalize: <%= node['datadog']['dogstatsd_normalize'] %>
<% if node['datadog']['statsd_forward_host'] -%>
statsd_forward_host: <%= node['datadog']['statsd_forward_host'] %>
statsd_forward_port: <%= node['datadog']['statsd_forward_port'] %>
<% end -%>

<% if node['datadog']['statsd_metric_namespace'] -%>
statsd_metric_namespace: <%= node['datadog']['statsd_metric_namespace'] %>
<% end -%>
<% else -%>
use_dogstatsd: no
<% end -%>

# ========================================================================== #
# Logging
# ========================================================================== #

log_level: <%= node['datadog']['log_level'] %>

<% if node['datadog']['log_file_directory'] -%>
collector_log_file: <%= node['datadog']['log_file_directory'] %>/collector.log
forwarder_log_file: <%= node['datadog']['log_file_directory'] %>/forwarder.log
dogstatsd_log_file: <%= node['datadog']['log_file_directory'] %>/dogstatsd.log
jmxfetch_log_file: <%= node['datadog']['log_file_directory'] %>/jmxfetch.log
<% unless node['platform_family'] == 'windows' -%>
go-metro_log_file: <%= node['datadog']['log_file_directory'] %>/go-metro.log
<% end -%>
<% end -%>

# if syslog is enabled but a host and port are not set, a local domain socket
# connection will be attempted
#
log_to_syslog: <%= node['datadog']['syslog']['active'] ? 'yes' : 'no' %>
<% if node['datadog']['syslog']['udp'] -%>
syslog_host: <%= node['datadog']['syslog']['host'] %>
syslog_port: <%= node['datadog']['syslog']['port'] %>

<% end -%>
# ========================================================================== #
# Legacy Integrations
# ========================================================================== #

# For integrations which do not yet use the yaml configurations
<%
if node['datadog']['legacy_integrations']
  node['datadog']['legacy_integrations'].each do |int_name, int_hash|
    if int_hash["enabled"] and int_hash.has_key? "config"
      description = int_name
      description += " - #{int_hash["description"]}" if int_hash["description"]
      description.gsub!(/^/, '# ')
-%>
<%= description %>
<%
      int_hash['config'].each do |k,v|
-%>
<%= k %>: <%= v %>
<%
      end
    end
  end
end
-%>

<% if node['datadog']['enable_process_agent'].is_a?(TrueClass) || node['datadog']['enable_process_agent'].is_a?(FalseClass) -%>
process_agent_enabled: <%= node['datadog']['enable_process_agent'] %>
<% end -%>

<% if node['datadog']['enable_trace_agent'].is_a?(TrueClass) || node['datadog']['enable_trace_agent'].is_a?(FalseClass) -%>
apm_enabled: <%= node['datadog']['enable_trace_agent'] %>
<% end -%>

<% if ! node['datadog']['extra_config'].empty? -%>
# ========================================================================== #
# Other config options
# ========================================================================== #
  <% node['datadog']['extra_config'].each do |k, v| -%>
    <% if ! v.nil? -%>
<%= k %>: <%= v %>
    <% end -%>
  <% end -%>
<% end -%>

## Trace settings

[trace.config]
<% unless node['datadog']['trace_env'].nil? -%>
env: <%= node['datadog']['trace_env'] %>
<% end -%>

[trace.sampler]
<% unless node['datadog']['extra_sample_rate'].nil? -%>
extra_sample_rate: <%= node['datadog']['extra_sample_rate'] %>
<% end -%>
<% unless node['datadog']['max_traces_per_second'].nil? -%>
max_traces_per_second: <%= node['datadog']['max_traces_per_second'] %>
<% end -%>

[trace.receiver]
<% unless node['datadog']['receiver_port'].nil? -%>
receiver_port: <%= node['datadog']['receiver_port'] %>
<% end -%>
<% unless node['datadog']['connection_limit'].nil? -%>
connection_limit: <%= node['datadog']['connection_limit'] %>
<% end -%>

## Process settings

[process.config]
<% unless node['datadog']['process_agent']['blacklist'].nil? -%>
blacklist: <%= node['datadog']['process_agent']['blacklist'] %>
<% end -%>
<% unless node['datadog']['process_agent']['scrub_args'].nil? -%>
scrub_args: <%= node['datadog']['process_agent']['scrub_args'] %>
<% end -%>
<% unless node['datadog']['process_agent']['custom_sensitive_words'].nil? -%>
custom_sensitive_words: <%= node['datadog']['process_agent']['custom_sensitive_words'].join(',') %>
<% end -%>
<% unless node['datadog']['process_agent']['process_interval'].nil? -%>
process_interval = <%= node['datadog']['process_agent']['process_interval'] %>
<% end -%>
<% unless node['datadog']['process_agent']['rtprocess_interval'].nil? -%>
rtprocess_interval = <%= node['datadog']['process_agent']['rtprocess_interval'] %>
<% end -%>
<% unless node['datadog']['process_agent']['container_interval'].nil? -%>
container_interval = <%= node['datadog']['process_agent']['container_interval'] %>
<% end -%>
<% unless node['datadog']['process_agent']['rtcontainer_interval'].nil? -%>
rtcontainer_interval = <%= node['datadog']['process_agent']['rtcontainer_interval'] %>
<% end -%>
<% unless node['datadog']['process_agent']['log_file'].nil? -%>
log_file: <%= node['datadog']['process_agent']['log_file'] %>
<% end -%>
