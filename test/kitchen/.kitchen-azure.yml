---
<%
  ENV['AZURE_LOCATION'] ||= "North Central US"
%>

<%
  vm_tags = {
    'dd_agent_testing': 'dd_agent_testing'
  }
  if ENV['CI_PIPELINE_ID']
    vm_tags['pipeline_id'] = ENV['CI_PIPELINE_ID']
  else
    vm_tags['pipeline_id'] = 'nopipeline'
  end
%>

driver:
  name: azurerm

driver_config:
  subscription_id: <%= ENV['AZURE_SUBSCRIPTION_ID'] %>
  location: <%= ENV['AZURE_LOCATION'] %>
  <% if ENV['CI_PIPELINE_ID'] %>
  azure_resource_group_suffix: pl<%= ENV['CI_PIPELINE_ID'] %>
  <% else %>
  azure_resource_group_suffix: plnone
  <% end %>

provisioner:
  name: chef_solo
  require_chef_omnibus: true
  product_version: 13.6.4
  require_chef_omnibus: 13.6.4

platforms:
# Loop through two lists and output a total matrix of all possible platform + chef versions,
# for both drivers


<%
    # TEST_PLATFORMS syntax is `short_name1,azure_full_qualified_name1|short_name2,azure_full_qualified_name1`
    azure_test_platforms = ENV['TEST_PLATFORMS'].split('|').map { |p| p.split(',') }

    chef_versions = %w(
      13.6.4
    )

    sizes = [
      "Standard_D1",
      "Standard_A1",
    ]

    windows_sizes = [
      "Standard_D1"
    ]

    # we wanna spread out our quotas
    locations = [
      "North Central US",
      "South Central US",
      "Central US",
    ]

    drivers = %w(
      azurerm
    )

    platforms_x64 = azure_test_platforms.product(chef_versions, drivers).select{|p, c, d| not p[0].include? "i386"}.collect{|p, c, d| p[0] + "-" + c + "-" + d}

    exclude_platforms = []
    windows_platforms = []

    idx = 0
    azure_test_platforms.product(chef_versions).each do |platform, chef_version|
    idx += 1
    location = locations[idx % locations.length]

    platform_name = platform[0] + "-azure"
    windows = platform_name.include?("win")
    if windows
      windows_platforms << platform_name
      size = "Standard_D1"
      size = windows_sizes[idx % windows_sizes.length]
    else
      size = sizes[idx % sizes.length]
    end

%>
- name: <%= platform_name %>
  driver_config:
    machine_size: <%= size %>
    image_urn: <%= platform[1] %>
    location: <%= location %>
    <% if windows %>
    vm_name: ddat<%= platform[0] %>
    username: datadog
    password: <%= ENV['SERVER_PASSWORD'] %>
    <% else %>
    vm_name: dd-agent-testing-<%= platform[0] %>-azure
    <% end %>
    vm_tags:
      <% vm_tags.each do |key,value| %>
      <%= key %>: <%= value %>
      <% end %>
  transport:
    <% if windows %>
    name: winrm
    <% else %>
    ssh_key: <%= ENV['AZURE_SSH_KEY_PATH'] %>
    <% end %>

<% end %>

suites:
  excludes: []
<%
  aptrepo = "http://apttesting.datad0g.com/"
  api_key = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  yumrepo = "http://yumtesting.datad0g.com/pipeline-#{ENV['CI_PIPELINE_ID']}/x86_64/"
  yumrepo_suse = "http://yumtesting.datad0g.com/suse/pipeline-#{ENV['CI_PIPELINE_ID']}/x86_64/"
  windows_agent_url = "https://s3.amazonaws.com/#{ENV['WINDOWS_TESTING_S3_BUCKET']}/"
  dd_agent_config = {
    'agent6': true,
    'api_key': api_key,
    'application_key': "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    'url': "https://app.datad0g.com",
    'aptrepo': aptrepo,
    'aptrepo_dist': "pipeline-#{ENV['CI_PIPELINE_ID']}",
    'yumrepo': yumrepo,
    'yumrepo_suse': yumrepo_suse,
    'agent6_aptrepo': "http://apttesting.datad0g.com/",
    'agent6_aptrepo_dist': "pipeline-#{ENV['CI_PIPELINE_ID']}",
    'agent6_yumrepo': "http://yumtesting.datad0g.com/pipeline-#{ENV['CI_PIPELINE_ID']}/x86_64/",
    'agent6_yumrepo_suse': "http://yumtesting.datad0g.com/suse/pipeline-#{ENV['CI_PIPELINE_ID']}/x86_64/",
    'windows_agent_url': windows_agent_url,
  }
%>

# Install the latest release candidate using Chef
- name: dd-agent
  run_list:
    - "recipe[dd-agent-install]"
  attributes:
    apt:
      unattended_upgrades:
        enable: false
    datadog:
      <% dd_agent_config.each do |key, value| %>
      <%= key %>: <%= value %>
      <% end %>
    dd-agent-install:
      agent6: true
      <% if ENV['AGENT_VERSION'] %>
      windows_version: "<%= ENV['AGENT_VERSION'] %>"
      <% end %>
      windows_agent_url: <%= windows_agent_url %>


# Installs the latest release Agent 6, then updates it to the latest release
# candidate
- name: dd-agent-upgrade-agent6
  run_list:
    - "recipe[dd-agent-install]"
    - "recipe[dd-agent-upgrade]"
  attributes:
    apt:
      unattended_upgrades:
        enable: false
    datadog:
      <% dd_agent_config.each do |key, value| %>
      <%= key %>: <%= value %>
      <% end %>
      # Get the latest release agents. The upgrade recipe will take care of
      # adding the staging repo and upgrading to the latest candidate
      agent6: true
      aptrepo: http://apt.datadoghq.com/
      aptrepo_dist: stable
      yumrepo: http://yum.datadoghq.com/beta/x86_64/
      agent6_yumrepo: http://yum.datadoghq.com/beta/x86_64/
      agent6_yumrepo_suse: http://yum.datadoghq.com/suse/beta/x86_64/
      windows_agent_url: https://s3.amazonaws.com/ddagent-windows-stable/
    dd-agent-install:
      <% dd_agent_config.each do |key, value| %>
      <%= key %>: <%= value %>
      <% end %>
      # Get the latest release agents. The upgrade recipe will take care of
      # adding the staging repo and upgrading to the latest candidate
      agent6: true
      aptrepo: http://apt.datadoghq.com/
      aptrepo_dist: stable
      yumrepo: http://yum.datadoghq.com/beta/x86_64/
      agent6_yumrepo: http://yum.datadoghq.com/beta/x86_64/
      agent6_yumrepo_suse: http://yum.datadoghq.com/suse/beta/x86_64/
      windows_agent_url: https://s3.amazonaws.com/ddagent-windows-stable/
    dd-agent-upgrade:
      add_new_repo: true
      aptrepo: <%= aptrepo %>
      aptrepo_dist: "pipeline-<%= ENV['CI_PIPELINE_ID'] %>"
      yumrepo: http://yumtesting.datad0g.com/pipeline-<%= ENV['CI_PIPELINE_ID'] %>/x86_64/
      yumrepo_suse: http://yumtesting.datad0g.com/suse/pipeline-<%= ENV['CI_PIPELINE_ID'] %>/x86_64/
      windows_agent_url: <%= windows_agent_url %>
      <% if ENV['AGENT_VERSION'] %>
      windows_version: "<%= ENV['AGENT_VERSION'] %>"
      <% end %>
    dd-agent-upgrade-rspec:
      # Used by the rspec test to know the version to which the agent should be upgraded
      agent_expected_version: &agent_expected_version <%= ENV['DD_AGENT_EXPECTED_VERSION'] || "5.99.0" %>


# Installs the latest release Agent 5, then updates it to the latest release
# candidate
- name: dd-agent-upgrade-agent5
  run_list:
    - "recipe[datadog::dd-agent]"
    - "recipe[dd-agent-upgrade]"
  attributes:
    apt:
      unattended_upgrades:
        enable: false
    datadog:
      <% dd_agent_config.each do |key, value| %>
      <%= key %>: <%= value %>
      <% end %>
      # Get the latest release agents. The upgrade recipe will take care of
      # adding the staging repo and upgrading to the latest candidate
      agent6: false
      aptrepo: http://apt.datadoghq.com/
      aptrepo_dist: stable
      yumrepo: http://yum.datadoghq.com/rpm/x86_64/
      yumrepo_suse: http://yum.datadoghq.com/suse/rpm/x86_64/
      windows_agent_url: https://s3.amazonaws.com/ddagent-windows-stable/
    dd-agent-upgrade:
      add_new_repo: true
      aptrepo: <%= aptrepo %>
      aptrepo_dist: pipeline-<%= ENV['CI_PIPELINE_ID'] %>
      yumrepo: http://yumtesting.datad0g.com/pipeline-<%= ENV['CI_PIPELINE_ID'] %>/x86_64/
      yumrepo_suse: http://yumtesting.datad0g.com/suse/pipeline-<%= ENV['CI_PIPELINE_ID'] %>/x86_64/
      windows_agent_url: <%= windows_agent_url %>
      <% if ENV['AGENT_VERSION'] %>
      windows_version: "<%= ENV['AGENT_VERSION'] %>"
      <% end %>
    dd-agent-upgrade-rspec:
      # Used by the rspec test to know the version to which the agent should be upgraded
      agent_expected_version: &agent_expected_version <%= ENV['DD_AGENT_EXPECTED_VERSION'] || "5.99.0" %>


# Installs the latest release candidate using the install script
- name: dd-agent-install-script
  excludes:
    <% windows_platforms.each do |p| %>
    - <%= p %>
    <% end %>
  run_list:
    - "recipe[dd-agent-install-script]"
  attributes:
    apt:
      unattended_upgrades:
        enable: false
    dd-agent-install-script:
      api_key: <%= api_key %>
      candidate_repo_branch: pipeline-<%= ENV['CI_PIPELINE_ID'] %>
      install_candidate: true

# Installs the latest release candidate using the step-by-step instructions (on dogweb)
- name: dd-agent-step-by-step
  run_list:
    - "recipe[dd-agent-step-by-step]"
  excludes:
    <% windows_platforms.each do |p| %>
    - <%= p %>
    <% end %>
  attributes:
    apt:
      unattended_upgrades:
        enable: false
    dd-agent-step-by-step:
      <% dd_agent_config.each do |key, value| %>
      <%= key %>: <%= value %>
      <% end %>
      api_key: <%= api_key %>
      repo_branch_apt: pipeline-<%= ENV['CI_PIPELINE_ID'] %>
      repo_branch_yum: pipeline-<%= ENV['CI_PIPELINE_ID'] %>
      candidate_repo_branch: pipeline-<%= ENV['CI_PIPELINE_ID'] %>
      install_candidate: true
