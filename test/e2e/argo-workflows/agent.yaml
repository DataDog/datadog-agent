apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argo-datadog-agent-
spec:
  entrypoint: main
  #onExit: delete # call argo submit --entrypoint delete instead
  arguments:
    parameters:
    - name: redis-service
      value: |
        apiVersion: v1
        kind: Service
        metadata:
          name: redis
          namespace: default
        spec:
          ports:
          - port: 6379
            protocol: TCP
            targetPort: 6379
            name: redis
          selector:
            app: redis
          type: ClusterIP

    - name: redis-deployment
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: redis
          namespace: default
        spec:
          selector:
            matchLabels:
              app: redis
          replicas: 1
          template:
            metadata:
              labels:
                app: redis
              annotations:
                ad.datadoghq.com/redis.check_names: '["redisdb"]'
                ad.datadoghq.com/redis.init_configs: '[{}]'
                ad.datadoghq.com/redis.instances: '[{"host": "%%host%%", "port": "%%port%%"}]'
            spec:
              initContainers:
              - name: useless
                image: busybox:latest
                command:
                - /bin/true
                resources:
                  requests:
                    memory: "32Mi"
                    cpu: "25m"
                  limits:
                    memory: "64Mi"
                    cpu: "50m"
              containers:
              - name: redis
                image: redis
                ports:
                - name: redis
                  containerPort: 6379
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"

    - name: redis-deployment-unready
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: redis-unready
          namespace: default
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: redis
          template:
            metadata:
              labels:
                app: redis
              annotations:
                ad.datadoghq.com/tolerate-unready: "true"
            spec:
              containers:
              - name: redis-unready
                image: redis
                ports:
                - name: redis
                  containerPort: 6379
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
                readinessProbe:
                  tcpSocket:
                    port: 8080
                  initialDelaySeconds: 1
                  periodSeconds: 1

    - name: cpu-stress
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: cpu-stress
          namespace: default
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: cpu-stress
          template:
            metadata:
              labels:
                app: cpu-stress
            spec:
              containers:
              - name: cpu-stress
                image: datadog/docker-library:progrium_stress
                args:
                - "--cpu"
                - "2"
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "400m"
                  limits:
                    memory: "64Mi"
                    cpu: "400m"

    - name: dsd-hostname
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: dsd-hostname
          namespace: default
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: dsd-hostname
          template:
            metadata:
              labels:
                app: dsd-hostname
            spec:
              containers:
              - name: sender
                image: datadog/docker-library:e2e-dsd-sender_latest
                resources:
                  requests:
                    memory: "32Mi"
                    cpu: "100m"
                  limits:
                    memory: "32Mi"
                    cpu: "100m"
                volumeMounts:
                - name: dogstatsd
                  mountPath: /var/run/dogstatsd
                  readOnly: true
              volumes:
              - hostPath:
                  path: /var/run/dogstatsd
                name: dogstatsd

    - name: logs-hello-world
      value: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: logs-hello-world
          namespace: default
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                app: logs-hello-world
              annotations:
                ad.datadoghq.com/logs-short-lived-container.logs: '[{"source":"shell","service":"logs"}]'
            spec:
              initContainers:
              - name: logs-init-container
                image: busybox:latest
                command: ['sh', '-c', 'echo hello world']
                resources:
                  requests:
                    memory: "32Mi"
                    cpu: "50m"
                  limits:
                    memory: "64Mi"
                    cpu: "100m"
              containers:
              - name: logs-short-lived-container
                image: busybox:latest
                command: ['sh', '-c', 'echo goodbye']
                resources:
                  requests:
                    memory: "32Mi"
                    cpu: "50m"
                  limits:
                    memory: "64Mi"
                    cpu: "100m"

    - name: agent-service-account
      value: |
        kind: ServiceAccount
        apiVersion: v1
        metadata:
          name: datadog-agent
          namespace: default

    - name: agent-cluster-role
      value: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: datadog-agent
        rules:
        - apiGroups:
          - ""
          resources:
          - services
          - events
          - endpoints
          - pods
          - nodes
          - componentstatuses
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - configmaps
          resourceNames:
          - datadogtoken
          verbs:
          - get
          - update
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - update
          - create
        - apiGroups:
          - ""
          resources:
          - nodes/metrics
          - nodes/spec
          - nodes/proxy
          verbs:
          - get

    - name: agent-cluster-role-binding
      value: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: datadog-agent
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: datadog-agent
        subjects:
        - kind: ServiceAccount
          name: datadog-agent
          namespace: default

    - name: agent-configmap
      value: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: datadog
          namespace: default
        data:
          datadog.yaml: |
            api_key: "123er"
            dd_url: "http://fake-datadog.default.svc.cluster.local"
            listeners:
            - name: kubelet
            config_providers:
            - name: kubelet
              polling: true
            leader_election: true
            kubernetes_metadata_tag_update_freq: 20
            dogstatsd_socket: /var/run/dogstatsd/dsd.socket
            # Hardcode a hostname to test dogstatsd hostname injection
            hostname: e2e-test
            # logs-config
            logs_enabled: true
            logs:
              dd_url: "fake-datadog.default.svc.cluster.local"
              use_http: true
              dev_mode_no_ssl: true
              container_collect_all: true

          kubelet.yaml: |
            init_config:
            instances:
            - {}

          apiserver.yaml: |
            init_configs:
            instances:
            - {}

          memory.yaml: |
            # Test go check handling of empty_default_hostname
            instances:
            - empty_default_hostname: true

          network.yaml: |
            init_config:
            instances:
            - collect_connection_state: false
              excluded_interfaces:
                - lo
                - lo0
            - collect_connection_state: false
              empty_default_hostname: true
              excluded_interfaces:
                - lo
                - lo0

          docker.yaml: |
            init_config:
            instances:
            - {}

    - name: agent-daemonset
      value: |
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: datadog-agent
          namespace: default
        spec:
          updateStrategy:
            rollingUpdate:
              maxUnavailable: 1
          selector:
            matchLabels:
              app: datadog-agent
          template:
            metadata:
              labels:
                app: datadog-agent
              name: datadog-agent
            spec:
              serviceAccount: datadog-agent
              containers:
              - name: agent
                image: datadog/agent-dev:master
                command:
                - /opt/datadog-agent/bin/agent/agent
                - start
                env:
                - name: DD_KUBERNETES_KUBELET_HOST
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "250m"
                livenessProbe:
                  exec:
                    command:
                    - /opt/datadog-agent/bin/agent/agent
                    - health
                  initialDelaySeconds: 30
                  periodSeconds: 5
                readinessProbe:
                  exec:
                    command:
                    - /opt/datadog-agent/bin/agent/agent
                    - health
                  failureThreshold: 5
                  initialDelaySeconds: 20
                volumeMounts:
                - name: datadog-config
                  mountPath: /etc/datadog-agent/datadog.yaml
                  subPath: datadog.yaml
                - name: datadog-config
                  mountPath: /etc/datadog-agent/conf.d/kubernetes_apiserver.d/conf.yaml
                  subPath: apiserver.yaml
                - name: datadog-config
                  mountPath: /etc/datadog-agent/conf.d/kubelet.d/conf.yaml
                  subPath: kubelet.yaml
                - name: datadog-config
                  mountPath: /etc/datadog-agent/conf.d/network.d/conf.yaml.default
                  subPath: network.yaml
                - name: datadog-config
                  mountPath: /etc/datadog-agent/conf.d/memory.d/conf.yaml.default
                  subPath: memory.yaml
                - name: proc
                  mountPath: /host/proc
                  readOnly: true
                - name: cgroup
                  mountPath: /host/sys/fs/cgroup
                  readOnly: true
                - name: dockersocket
                  mountPath: /var/run/docker.sock
                  readOnly: true
                - name: dogstatsd
                  mountPath: /var/run/dogstatsd
                  readOnly: false
                - name: logsregistry
                  mountPath: /opt/datadog-agent/run
                - name: podslogs
                  mountPath: /var/log/pods
                - name: dockerlogs
                  mountPath: /var/lib/docker/containers
              volumes:
              - name: datadog-config
                configMap:
                  name: datadog
              - name: proc
                hostPath:
                  path: /proc
              - name: cgroup
                hostPath:
                  path: /sys/fs/cgroup
              - hostPath:
                  path: /var/run/docker.sock
                name: dockersocket
              - hostPath:
                  path: /var/run/dogstatsd
                name: dogstatsd
              - hostPath:
                  path: /opt/datadog-agent/run
                name: logsregistry
              - hostPath:
                  path: /var/log/pods
                name: podslogs
              - hostPath:
                  path: /var/lib/docker/containers
                name: dockerlogs

    - name: fake-datadog-service
      value: |
        apiVersion: v1
        kind: Service
        metadata:
          name: fake-datadog
          namespace: default
        spec:
          ports:
          - port: 80
            protocol: TCP
            targetPort: 80
            name: api
          - port: 27017
            protocol: TCP
            targetPort: 27017
            name: mongo
          selector:
            app: fake-datadog
          type: ClusterIP

    - name: fake-datadog-deployment
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: fake-datadog
          namespace: default
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: fake-datadog
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          template:
            metadata:
              labels:
                app: fake-datadog
            spec:
              containers:
              - name: api
                image: datadog/fake-datadog:latest
              - name: mongo
                image: mongo:3.6.3

    - name: kube-state-metrics-rbac
      value: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: kube-state-metrics
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: kube-state-metrics
        subjects:
        - kind: ServiceAccount
          name: kube-state-metrics
          namespace: kube-system
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: kube-state-metrics
        rules:
        - apiGroups: [""]
          resources:
          - configmaps
          - secrets
          - nodes
          - pods
          - services
          - resourcequotas
          - replicationcontrollers
          - limitranges
          - persistentvolumeclaims
          - persistentvolumes
          - namespaces
          - endpoints
          verbs: ["list", "watch"]
        - apiGroups: ["extensions"]
          resources:
          - daemonsets
          - deployments
          - replicasets
          verbs: ["list", "watch"]
        - apiGroups: ["apps"]
          resources:
          - statefulsets
          verbs: ["list", "watch"]
        - apiGroups: ["batch"]
          resources:
          - cronjobs
          - jobs
          verbs: ["list", "watch"]
        - apiGroups: ["autoscaling"]
          resources:
          - horizontalpodautoscalers
          verbs: ["list", "watch"]
        ---
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kube-state-metrics
          namespace: kube-system

    - name: kube-state-metrics-deployment
      value: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kube-state-metrics
          namespace: kube-system
        spec:
          selector:
            matchLabels:
              k8s-app: kube-state-metrics
          replicas: 1
          template:
            metadata:
              labels:
                k8s-app: kube-state-metrics
            spec:
              serviceAccountName: kube-state-metrics
              containers:
              - name: kube-state-metrics
                image: quay.io/coreos/kube-state-metrics:v1.3.1
                ports:
                - name: http-metrics
                  containerPort: 8080
                - name: telemetry
                  containerPort: 8081
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                  initialDelaySeconds: 5
                  timeoutSeconds: 5

    - name: kube-state-metrics-service
      value: |
        apiVersion: v1
        kind: Service
        metadata:
          name: kube-state-metrics
          namespace: kube-system
          labels:
            k8s-app: kube-state-metrics
          annotations:
            prometheus.io/scrape: 'true'
        spec:
          ports:
          - name: http-metrics
            port: 8080
            targetPort: http-metrics
            protocol: TCP
          - name: telemetry
            port: 8081
            targetPort: telemetry
            protocol: TCP
          selector:
            k8s-app: kube-state-metrics

  templates:
  - name: main
    inputs:
      parameters:
      - name: cpu-stress
      - name: dsd-hostname
      - name: redis-service
      - name: redis-deployment
      - name: redis-deployment-unready
      - name: logs-hello-world
      - name: agent-configmap
      - name: agent-service-account
      - name: agent-cluster-role
      - name: agent-cluster-role-binding
      - name: agent-daemonset
      - name: fake-datadog-deployment
      - name: fake-datadog-service
      - name: kube-state-metrics-rbac
      - name: kube-state-metrics-deployment
      - name: kube-state-metrics-service
    steps:
    - - name: fake-dd-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.fake-datadog-deployment}}"
        - "{{inputs.parameters.fake-datadog-service}}"

      - name: redis-deployment-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.redis-deployment}}"

      - name: redis-deployment-unready-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.redis-deployment-unready}}"

      - name: kube-state-metrics-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.kube-state-metrics-rbac}}"
        - "{{inputs.parameters.kube-state-metrics-deployment}}"
        - "{{inputs.parameters.kube-state-metrics-service}}"

      - name: cpu-stress-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.cpu-stress}}"

      - name: dsd-hostname
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.dsd-hostname}}"

    - - name: logs-hello-world-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.logs-hello-world}}"

    - - name: fake-dd-reset
        template: fake-dd-reset

    - - name: agent-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.agent-configmap}}"
        - "{{inputs.parameters.agent-service-account}}"
        - "{{inputs.parameters.agent-cluster-role}}"
        - "{{inputs.parameters.agent-cluster-role-binding}}"
        - "{{inputs.parameters.agent-daemonset}}"

    - - name: health
        template: datadog-agent-health

      - name: leader
        template: datadog-agent-leader

    - - name: find-metrics-kubernetes
        template: find-metrics-kubernetes

      - name: find-container-meta
        template: find-container-meta

      - name: find-kube-state-metrics
        template: find-kube-state-metrics

      - name: find-metrics-redis
        template: find-metrics-redis

      - name: find-metrics-redis-unready
        template: find-metrics-redis-unready

      - name: find-metrics-cpu-docker
        template: find-metrics-cpu-docker

      - name: find-metrics-cpu-kubelet
        template: find-metrics-cpu-kubelet

      - name: find-metrics-cpu-system
        template: find-metrics-cpu-system

      - name: find-dogstatsd-hostname
        template: find-dogstatsd-hostname

      - name: find-checks-hostname
        template: find-checks-hostname

    - - name: redis-service-setup
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "apply"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.redis-service}}"

    - - name: find-metrics-redis-tagged
        template: find-metrics-redis-tagged

    - - name: delete-redis
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "delete"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.redis-deployment}}"
        - "{{inputs.parameters.redis-deployment-unready}}"
        - "{{inputs.parameters.redis-service}}"

    - - name: no-more-redis
        template: no-more-metrics-redis

  - name: query-job
    activeDeadlineSeconds: 120
    inputs:
      parameters:
      - name: manifest
    resource:
      action: create
      successCondition: status.succeeded > 0
      failureCondition: status.failed > 10
      manifest: "{{inputs.parameters.manifest}}"

  - name: delete
    inputs:
      parameters:
      - name: redis-service
      - name: redis-deployment
      - name: redis-deployment-unready
      - name: cpu-stress
      - name: dsd-hostname
      - name: logs-hello-world
      - name: agent-configmap
      - name: agent-service-account
      - name: agent-cluster-role
      - name: agent-cluster-role-binding
      - name: agent-daemonset
      - name: fake-datadog-deployment
      - name: fake-datadog-service
      - name: kube-state-metrics-rbac
      - name: kube-state-metrics-deployment
      - name: kube-state-metrics-service
    steps:
    - - name: delete-manifest
        template: manifest
        arguments:
          parameters:
          - name: action
            value: "delete"
          - name: manifest
            value: "{{item}}"
        withItems:
        - "{{inputs.parameters.redis-service}}"
        - "{{inputs.parameters.redis-deployment}}"
        - "{{inputs.parameters.redis-deployment-unready}}"
        - "{{inputs.parameters.cpu-stress}}"
        - "{{inputs.parameters.dsd-hostname}}"
        - "{{inputs.parameters.logs-hello-world}}"
        - "{{inputs.parameters.agent-configmap}}"
        - "{{inputs.parameters.agent-service-account}}"
        - "{{inputs.parameters.agent-cluster-role}}"
        - "{{inputs.parameters.agent-cluster-role-binding}}"
        - "{{inputs.parameters.agent-daemonset}}"
        - "{{inputs.parameters.fake-datadog-service}}"
        - "{{inputs.parameters.fake-datadog-deployment}}"
        - "{{inputs.parameters.kube-state-metrics-rbac}}"
        - "{{inputs.parameters.kube-state-metrics-deployment}}"
        - "{{inputs.parameters.kube-state-metrics-service}}"

  - name: manifest
    inputs:
      parameters:
      - name: action
      - name: manifest
    resource:
      action: "{{inputs.parameters.action}}"
      manifest: "{{inputs.parameters.manifest}}"

  - name: datadog-agent-health
    activeDeadlineSeconds: 200
    script:
      image: argoproj/argoexec:latest
      command: [bash]
      source: |
        set -x
        set -o pipefail

        until kubectl get po -l app=datadog-agent -o json -n default | jq -re .items[].metadata.name
        do
          sleep 1
        done

        while true
        do
          for po in $(kubectl get po -l app=datadog-agent -o json -n default | jq -re .items[].metadata.name)
          do
            kubectl exec $po agent health || {
              sleep 4
              continue 2
            }
          done
          exit 0
        done

  - name: datadog-agent-leader
    activeDeadlineSeconds: 200
    script:
      image: argoproj/argoexec:latest
      command: [bash]
      source: |
        set -x
        set -o pipefail

        until kubectl get cm datadog-leader-election -n default -o json |  jq '.metadata.annotations | .["control-plane.alpha.kubernetes.io/leader"]'
        do
          sleep 1
        done

  - name: fake-dd-reset
    activeDeadlineSeconds: 200
    script:
      image: argoproj/argoexec:latest
      command: [bash]
      source: |
        set -o pipefail
        set -x

        until curl -f http://fake-datadog.default.svc.cluster.local/_/reset -XPOST --connect-timeout 1
        do
          sleep 3
        done

  - name: find-metrics-kubernetes
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.series.find({
            metric: {$regex: "kubernetes*"},
            tags: {$all: ["kube_namespace:kube-system", "pod_name:kube-controller-manager"]}
          }).count();

          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

  - name: find-kube-state-metrics
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        // This step is intended to test end-to-end scraping of prometheus metrics
        // by asserting the value of a few simple metrics collected from the
        // kubernetes_state integration.

        while (1) {
          var nb = db.series.find({
          metric: "kubernetes_state.daemonset.ready",
          tags: { $all: ["namespace:default", "daemonset:datadog-agent"] },
          "points.0.1": { $eq: 1 } }).count();
          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

        while (1) {
          var nb = db.series.find({
          metric: "kubernetes_state.deployment.replicas_available",
          tags: { $all: ["namespace:default", "deployment:redis"] },
          "points.0.1": { $eq: 1 } }).count();
          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

  - name: find-metrics-redis
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.series.find({
            metric: {$regex: "redis*"}
          }).count();

          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

  - name: find-metrics-cpu-docker
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.series.find({
          metric: "docker.cpu.usage",
          tags: { $all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"] },
          "points.0.1": { $gt: 39, $lt: 41 } }).count();
          print("find: " + nb)
          if (nb != 0) {
            print("cpu value in target range")
            break;
          }
          sleep(2000);
        }

  - name: find-metrics-redis-tagged
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.series.find({
            metric: {$regex: "redis*"},
            tags: "kube_service:redis"
          }).count();
          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

  - name: find-metrics-cpu-kubelet
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var point = db.series.find({
            metric: "kubernetes.cpu.usage.total",
            tags: {$all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"]}
          }).limit(1).sort({$natural:-1})[0];

          if (point) {
            value = point.points[0][1] / 10e6
            print("cpu value: " + value)
            // Sampling is less accurate than cgroups, widening the acceptable range
            if (value > 35 && value < 45) {
              print("cpu value in target range")
              break;
            }
          } else {
              print("no kubernetes.cpu.usage.total metric reported")
          }

          sleep(2000);
        }

  - name: find-dogstatsd-hostname
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          sleep(2000);

          // Gauges
          var nb = db.series.find({
            metric: "dsd.hostname.e2e",
            host: "e2e-test",
            tags: {$all: ["case:nominal"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e metric with nominal hostname");
            continue;
          }
          var nb = db.series.find({
            metric: "dsd.hostname.e2e",
            host: "forced",
            tags: {$all: ["case:forced"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e metric with forced hostname");
            continue;
          }
          var nb = db.series.find({
            metric: "dsd.hostname.e2e",
            host: "",
            tags: {$all: ["case:empty"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e metric with empty hostname");
            continue;
          }

          // Service checks
          var nb = db.check_run.find({
            check: "dsd.hostname.e2e",
            host_name: "e2e-test",
            tags: {$all: ["case:nominal"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e servicecheck with nominal hostname");
            continue;
          }
          var nb = db.check_run.find({
            check: "dsd.hostname.e2e",
            host_name: "forced",
            tags: {$all: ["case:forced"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e servicecheck with forced hostname");
            continue;
          }
          var nb = db.check_run.find({
            check: "dsd.hostname.e2e",
            host_name: "",
            tags: {$all: ["case:empty"]}
          }).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e servicecheck with empty hostname");
            continue;
          }

          // Events
          var nb = db.intake.find({
            "events.api": { $elemMatch: {
              msg_title: "dsd.hostname.e2e",
              host: "e2e-test",
              tags: {$all: ["case:nominal"]}
          }}}).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e event with nominal hostname");
            continue;
          }
          var nb = db.intake.find({
            "events.api": { $elemMatch: {
              msg_title: "dsd.hostname.e2e",
              host: "forced",
              tags: {$all: ["case:forced"]}
          }}}).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e event with forced hostname");
            continue;
          }
          var nb = db.intake.find({
            "events.api": { $elemMatch: {
              msg_title: "dsd.hostname.e2e",
              host: "",
              tags: {$all: ["case:empty"]}
          }}}).count();
          if (nb == 0) {
            print("no dsd.hostname.e2e event with empty hostname");
            continue;
          }

          print("All good");
          break;
        }

  - name: find-checks-hostname
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          sleep(2000);

          // Go memory check
          var nb = db.series.find({
            metric: "system.cpu.idle",
            host: "e2e-test"
          }).count();
          if (nb == 0) {
            print("no system.cpu.idle metric with nominal hostname");
            continue;
          }
          var nb = db.series.find({
            metric: "system.mem.free",
            host: ""
          }).count();
          if (nb == 0) {
            print("no system.mem.free metric with empty hostname");
            continue;
          }

          // Python network check
          var nb = db.series.find({
            metric: "system.net.bytes_sent",
            host: "e2e-test"
          }).count();
          if (nb == 0) {
            print("no system.net.bytes_sent metric with nominal hostname");
            continue;
          }
          var nb = db.series.find({
            metric: "system.net.bytes_sent",
            host: ""
          }).count();
          if (nb == 0) {
            print("no system.net.bytes_sent metric with empty hostname");
            continue;
          }

          print("All good");
          break;
        }

  - name: find-metrics-cpu-system
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          sleep(2000);

          // Determine the hostname the cpu-stress pod is running on
          var point = db.series.find({
            metric: "kubernetes.cpu.usage.total",
            tags: {$all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"]}
          }).limit(1).sort({$natural:-1})[0];
          if (!point) {
            print("cannot get hostname for pod");
            continue;
          }
          hostname = point.host;

          // Get the number of CPUs on that host
          var point = db.series.find({
            metric: "kubernetes.cpu.capacity",
            host: hostname
          }).limit(1).sort({$natural:-1})[0];
          if (!point) {
            print("cannot get cpu capacity for host " + hostname);
            continue;
          }
          cpucount = point.points[0][1];

          // Get the user CPU usage, make sure it's above 39% non-normalized
          var point = db.series.find({
            metric: "system.cpu.user",
            host: hostname
          }).limit(1).sort({$natural:-1})[0];
          if (!point) {
            print("no system.cpu.usage metric reported for host " + hostname)
            continue;
          }
          value = point.points[0][1] * cpucount;
          print("cpu value: " + value)
          if (value > 39) {
            print("cpu value in target range");
            break;
          }
        }

  - name: no-more-metrics-redis
    activeDeadlineSeconds: 300
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        var prevNb = -1;
        while (1) {
          var nb = db.series.find({
            metric: {$regex: "redis*"}
          }).count();

          print("prev-find: " + prevNb)
          print("find: " + nb)
          if (nb == prevNb) {
            break;
          }
          prevNb = nb;
          sleep(30000);
        }
        var prevNb = -1
        while (1) {
          var nb = db.check_run.find({check: "datadog.agent.check_status",
          tags: "check:redisdb",
          status: {$ne: 0}}).count();

          print("prev-find: " + prevNb)
          print("find: " + nb)
          if (nb == prevNb) {
            break;
          }
          prevNb = nb;
          sleep(30000);
        }

  - name: find-container-meta
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.intake.find({
            $and : [
            {"apiKey":"123er"},
            {"gohai":{$exists: 1}},
            {"container-meta.kubelet_version":{$regex: "^v1."}},
            {"container-meta.docker_swarm":"inactive"},
            {"container-meta.docker_version":{$exists: 1}} ]
          }).count();
          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }

  - name: find-metrics-redis-unready
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          var nb = db.series.find({
            metric: {$regex: "redis*"},
            tags: {$all: ["kube_deployment:redis-unready", "kube_container_name:redis-unready"]}
          }).count();

          print("find: " + nb)
          if (nb != 0) {
            break;
          }
          sleep(2000);
        }
  - name: find-hello-world-logs
    activeDeadlineSeconds: 200
    script:
      image: mongo:3.6.3
      command: [mongo, "fake-datadog.default.svc.cluster.local/datadog"]
      source: |
        while (1) {
          sleep(2000)
          var nb = db.logs.find({
            message: "hello world",
          }).count();
          if (nb == 0) {
            print("missing init container log for logs-hello-world application");
            continue;
          }
          var nb = db.logs.find({
            message: "goodbye",
            source: "shell",
            service: "logs",
          }).count();
          if (nb == 0) {
            print("missing short-lived container log for logs-hello-world application");
            continue;
          }
        }
