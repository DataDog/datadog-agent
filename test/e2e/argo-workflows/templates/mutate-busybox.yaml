apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: busybox
spec:
  templates:
    - name: create-busybox-with-tags
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: busybox-tags
            namespace: {{inputs.parameters.namespace}}
            labels:
              "app": "busybox"
              "admission.datadoghq.com/enabled": "true"
              "tags.datadoghq.com/env": "busybox-env"
              "tags.datadoghq.com/service": "busybox-service"
              "tags.datadoghq.com/version": "busybox-version"
          spec:
            containers:
              - command:
                  - sleep
                  - "3600"
                image: busybox
                name: busybox

    - name: create-busybox-with-mode
      inputs:
        parameters:
          - name: namespace
          - name: mode
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: busybox-{{inputs.parameters.mode}}
            namespace: {{inputs.parameters.namespace}}
            labels:
              "app": "busybox"
              "admission.datadoghq.com/enabled": "true"
              "admission.datadoghq.com/config.mode": "{{inputs.parameters.mode}}"
          spec:
            containers:
              - command:
                  - sleep
                  - "3600"
                image: busybox
                name: busybox

    - name: create-busybox-with-auto-instru-java
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: busybox-auto-instru-java
            namespace: {{inputs.parameters.namespace}}
            labels:
              "app": "busybox"
              "admission.datadoghq.com/enabled": "true"
            annotations:
              admission.datadoghq.com/java-lib.custom-image: "gcr.io/datadoghq/dd-java-agent-init:latest"  # TODO: Use the default repo when ready
          spec:
            containers:
              - command:
                  - sleep
                  - "3600"
                image: busybox
                name: busybox

    - name: create-busybox-with-auto-instru-js
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: busybox-auto-instru-js
            namespace: {{inputs.parameters.namespace}}
            labels:
              "app": "busybox"
              "admission.datadoghq.com/enabled": "true"
            annotations:
              admission.datadoghq.com/js-lib.custom-image: "ghcr.io/datadog/dd-trace-js/dd-lib-js-init:e1043d06c7b25f5494a80d3c95e43029ac5cefff"  # TODO: Use the default repo when ready
          spec:
            containers:
              - command:
                  - sleep
                  - "3600"
                image: busybox
                name: busybox

    - name: create
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: busybox-hostip
            template: create-busybox-with-mode
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: mode
                  value: hostip
          - name: busybox-service
            template: create-busybox-with-mode
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: mode
                  value: service
          - name: busybox-socket
            template: create-busybox-with-mode
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: mode
                  value: socket
          - name: busybox-tags
            template: create-busybox-with-tags
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: busybox-auto-instru-java
            template: create-busybox-with-auto-instru-java
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: busybox-auto-instru-js
            template: create-busybox-with-auto-instru-js
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"

    - name: delete-all
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          kubectl delete pods -l app=busybox --namespace {{inputs.parameters.namespace}}

    - name: delete
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: delete-pods
            template: delete-all
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"

    - name: test-env-fieldPath
      inputs:
        parameters:
          - name: namespace
          - name: envKey
          - name: envFieldPath
          - name: target
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(.spec.containers[].env[]? | .name == "{{inputs.parameters.envKey}}" and .valueFrom.fieldRef.fieldPath == "{{inputs.parameters.envFieldPath}}") | .metadata.name' | grep {{inputs.parameters.target}}; do
            sleep 2
          done

    - name: test-env-value
      inputs:
        parameters:
          - name: namespace
          - name: envKey
          - name: envValue
          - name: target
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(.spec.containers[].env[]? | .name == "{{inputs.parameters.envKey}}" and .value == "{{inputs.parameters.envValue}}") | .metadata.name' | grep {{inputs.parameters.target}}; do
            sleep 2
          done
    - name: test-volume-mount
      inputs:
        parameters:
          - name: namespace
          - name: volumeName
          - name: volumePath
          - name: withInitContainers
          - name: target
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(.spec.containers[].volumeMounts[]? | .name == "{{inputs.parameters.volumeName}}" and .mountPath == "{{inputs.parameters.volumePath}}") | .metadata.name' | grep {{inputs.parameters.target}}; do
            sleep 2
          done

          if [[ "{{inputs.parameters.withInitContainers}}" == "true" ]]; then
            until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(try .spec.initContainers[].volumeMounts[]? | .name == "{{inputs.parameters.volumeName}}" and .mountPath == "{{inputs.parameters.volumePath}}") | .metadata.name' | grep {{inputs.parameters.target}}; do
              sleep 2
            done
          fi
    - name: test-host-volume
      inputs:
        parameters:
          - name: namespace
          - name: volumeName
          - name: volumePath
          - name: target
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(.spec.volumes[]? | .name == "{{inputs.parameters.volumeName}}" and .hostPath.path == "{{inputs.parameters.volumePath}}") | .metadata.name' | grep {{inputs.parameters.target}}; do
            sleep 2
          done
    - name: test-empty-dir
      inputs:
        parameters:
          - name: namespace
          - name: volumeName
          - name: volumePath
          - name: target
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          until kubectl get pods -o json --namespace {{inputs.parameters.namespace}} | jq '.items[] | select(.spec.volumes[]? | .name == "{{inputs.parameters.volumeName}}" and .emptyDir == {} ) | .metadata.name' | grep {{inputs.parameters.target}}; do
            sleep 2
          done

    - name: test
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: agent-host-hostip
            template: test-env-fieldPath
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envKey
                  value: DD_AGENT_HOST
                - name: envFieldPath
                  value: "status.hostIP"
                - name: target
                  value: busybox-hostip
          - name: entity-id-hostip
            template: test-env-fieldPath
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envKey
                  value: DD_ENTITY_ID
                - name: envFieldPath
                  value: "metadata.uid"
                - name: target
                  value: busybox-hostip
          - name: agent-host-service
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: datadog.{{inputs.parameters.namespace}}.svc.cluster.local
                - name: envKey
                  value: DD_AGENT_HOST
                - name: target
                  value: busybox-service
          - name: entity-id-service
            template: test-env-fieldPath
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envKey
                  value: DD_ENTITY_ID
                - name: envFieldPath
                  value: "metadata.uid"
                - name: target
                  value: busybox-service
          - name: trace-url-socket
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: "unix:///var/run/datadog/apm.socket"
                - name: envKey
                  value: DD_TRACE_AGENT_URL
                - name: target
                  value: busybox-socket
          - name: volume-mount-socket
            template: test-volume-mount
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog
                - name: volumePath
                  value: "/var/run/datadog"
                - name: withInitContainers
                  value: "false"
                - name: target
                  value: busybox-socket
          - name: host-volume-socket
            template: test-host-volume
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog
                - name: volumePath
                  value: "/var/run/datadog"
                - name: target
                  value: busybox-socket
          - name: entity-id-socket
            template: test-env-fieldPath
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envKey
                  value: DD_ENTITY_ID
                - name: envFieldPath
                  value: "metadata.uid"
                - name: target
                  value: busybox-socket
          - name: env-tag
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: busybox-env
                - name: envKey
                  value: DD_ENV
                - name: target
                  value: busybox-tags
          - name: service-tag
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: busybox-service
                - name: envKey
                  value: DD_SERVICE
                - name: target
                  value: busybox-tags
          - name: version-tag
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: busybox-version
                - name: envKey
                  value: DD_VERSION
                - name: target
                  value: busybox-tags
          - name: env-auto-instru-java
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: " -javaagent:/datadog-lib/dd-java-agent.jar"
                - name: envKey
                  value: JAVA_TOOL_OPTIONS
                - name: target
                  value: busybox-auto-instru-java
          - name: volume-mount-auto-instru-java
            template: test-volume-mount
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog-auto-instrumentation
                - name: volumePath
                  value: "/datadog-lib"
                - name: withInitContainers
                  value: "true"
                - name: target
                  value: busybox-auto-instru-java
          - name: empty-dir-auto-instru-java
            template: test-empty-dir
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog-auto-instrumentation
                - name: volumePath
                  value: "/datadog-lib"
                - name: target
                  value: busybox-auto-instru-java
          - name: env-auto-instru-js
            template: test-env-value
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: envValue
                  value: " --require=/datadog-lib/node_modules/dd-trace/init"
                - name: envKey
                  value: NODE_OPTIONS
                - name: target
                  value: busybox-auto-instru-js
          - name: volume-mount-auto-instru-js
            template: test-volume-mount
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog-auto-instrumentation
                - name: volumePath
                  value: "/datadog-lib"
                - name: withInitContainers
                  value: "true"
                - name: target
                  value: busybox-auto-instru-js
          - name: empty-dir-auto-instru-js
            template: test-empty-dir
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
                - name: volumeName
                  value: datadog-auto-instrumentation
                - name: volumePath
                  value: "/datadog-lib"
                - name: target
                  value: busybox-auto-instru-js

    - name: diagnose
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 300
      script:
        image: argoproj/argoexec:v3.3.1
        command: [sh]
        source: |
          set -euo pipefail
          set -x

          kubectl describe pods -l app=busybox --namespace {{inputs.parameters.namespace}}
