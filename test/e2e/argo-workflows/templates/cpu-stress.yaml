apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cpu-stress
spec:
  templates:
    - name: create
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cpu-stress
            namespace: {{inputs.parameters.namespace}}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cpu-stress
            template:
              metadata:
                labels:
                  app: cpu-stress
              spec:
                containers:
                - name: cpu-stress
                  image: datadog/docker-library:progrium_stress
                  args:
                  - "--cpu"
                  - "2"
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "1"
                    limits:
                      memory: "64Mi"
                      cpu: "1"

    - name: delete
      inputs:
        parameters:
          - name: namespace
      resource:
        action: delete
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cpu-stress
            namespace: {{inputs.parameters.namespace}}

    - name: find-metrics-cpu-container-runtime
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 300
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          while (1) {
            var nb = db.series.find({
            metric: "cri.cpu.usage",
            tags: { $all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"] },
            "points.0.1": { $gt: 990000000, $lt: 1010000000 } }).count();
            print("find: " + nb)
            if (nb != 0) {
              print("cpu value in target range")
              break;
            }
            sleep(2000);
          }

    - name: find-metrics-cpu-kubelet
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 300
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          while (1) {
            var nb = db.series.find({
            metric: "kubernetes.cpu.usage.total",
            tags: { $all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"] },
            "points.0.1": { $gt: 800000000, $lt: 1200000000 } }).count();
            print("find: " + nb)
            if (nb != 0) {
              print("cpu value in target range")
              break;
            }
            sleep(2000);
          }

    - name: find-metrics-cpu-system
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 300
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          while (1) {
            sleep(2000);

            // Determine the hostname the cpu-stress pod is running on
            var point = db.series.find({
              metric: "kubernetes.cpu.usage.total",
              tags: {$all: ["kube_deployment:cpu-stress", "kube_container_name:cpu-stress"]}
            }).limit(1).sort({$natural:-1})[0];
            if (!point) {
              print("cannot get hostname for pod");
              continue;
            }
            hostname = point.host;

            // Get the number of CPUs on that host
            var point = db.series.find({
              metric: "kubernetes_state.node.cpu_capacity",
              host: hostname
            }).limit(1).sort({$natural:-1})[0];
            if (!point) {
              print("cannot get cpu capacity for host " + hostname);
              continue;
            }
            cpucount = point.points[0][1];
            print("cpu count: " + cpucount)

            // Get the user CPU usage, make sure it's above 39% non-normalized
            var point = db.series.find({
              metric: "system.cpu.user",
              host: hostname
            }).limit(1).sort({$natural:-1})[0];
            if (!point) {
              print("no system.cpu.usage metric reported for host " + hostname)
              continue;
            }
            print("raw value: " + point.points[0][1])
            value = point.points[0][1] * cpucount;
            print("cpu value: " + value)
            if (value > 95) {
              print("cpu value in target range");
              break;
            }
          }

    - name: test
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: find-metrics-cpu-container-runtime
            template: find-metrics-cpu-container-runtime
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: find-metrics-cpu-kubelet
            template: find-metrics-cpu-kubelet
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: find-metrics-cpu-system
            template: find-metrics-cpu-system
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
