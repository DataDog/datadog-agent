apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: nginx
spec:
  templates:
    - name: create-service
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: nginx
            name: nginx
            namespace: {{inputs.parameters.namespace}}
          spec:
            selector:
              app: nginx
            ports:
            - name: http
              port: 8090
              targetPort: 80

    - name: create-config
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: nginxconfig
            namespace: {{inputs.parameters.namespace}}
          data:
            nginx.conf: |+
              worker_processes  5;
              events {
                worker_connections  4096;  ## Default: 1024
              }
              http {
                  server {
                      location /nginx_status {
                        stub_status on;
                        access_log  /dev/stdout;
                        allow all;
                      }

                      location / {
                          proxy_pass http://nginx:80;
                          proxy_set_header Host  $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_redirect off;
                      }
                  }
              }

    - name: create-deployment
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
            labels:
              app: nginx
            namespace: {{inputs.parameters.namespace}}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
                annotations:
                  ad.datadoghq.com/nginx.check_names: '["nginx"]'
                  ad.datadoghq.com/nginx.init_configs: '[{}]'
                  ad.datadoghq.com/nginx.instances: '[{"nginx_status_url": "http://%%host%%/nginx_status", "tags": "%%tags%%"}]'
                  ad.datadoghq.com/nginx.logs: '[{"type": "docker","image": "nginx","service": "nginx","source": "nginx"}]'
              spec:
                containers:
                - name: nginx
                  image: nginx:latest
                  ports:
                  - name: http
                    containerPort: 80
                  volumeMounts:
                  - name: "config"
                    mountPath: "/etc/nginx/nginx.conf"
                    subPath: "nginx.conf"
                volumes:
                  - name: "config"
                    configMap:
                      name: "nginxconfig"

    - name: create-hpa
      inputs:
        parameters:
          - name: namespace
      resource:
        action: apply
        manifest: |
          apiVersion: autoscaling/v2beta1
          kind: HorizontalPodAutoscaler
          metadata:
            name: nginxext
            namespace: {{inputs.parameters.namespace}}
          spec:
            minReplicas: 1
            maxReplicas: 3
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: nginx
            metrics:
            - type: External
              external:
                metricName: nginx.net.request_per_s
                metricSelector:
                  matchLabels:
                      kube_container_name: nginx
                targetAverageValue: 9

    - name: delete-service
      inputs:
        parameters:
          - name: namespace
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx
            namespace: {{inputs.parameters.namespace}}

    - name: delete-config
      inputs:
        parameters:
          - name: namespace
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: nginxconfig
            namespace: {{inputs.parameters.namespace}}

    - name: delete-deployment
      inputs:
        parameters:
          - name: namespace
      resource:
        action: delete
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
            namespace: {{inputs.parameters.namespace}}

    - name: delete-hpa
      inputs:
        parameters:
          - name: namespace
      resource:
        action: delete
        manifest: |
          apiVersion: autoscaling/v2beta1
          kind: HorizontalPodAutoscaler
          metadata:
            name: nginxext
            namespace: {{inputs.parameters.namespace}}

    - name: create
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: service
            template: create-service
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: config
            template: create-config
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: deployment
            template: create-deployment
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: hpa
            template: create-hpa
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"

    - name: delete
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: service
            template: delete-service
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: config
            template: delete-config
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: deployment
            template: delete-deployment
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: hpa
            template: delete-hpa
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"

    - name: find-kube-state-metrics
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          // This step is intended to test end-to-end scraping of prometheus metrics
          // by asserting the value of a few simple metrics collected from the
          // kubernetes_state integration.

          while (1) {
            var nb = db.series.find({
            metric: "kubernetes_state.deployment.replicas_available",
            tags: { $all: ["namespace:{{inputs.parameters.namespace}}", "deployment:nginx"] },
            "points.0.1": { $eq: 1 } }).count();
            print("find: " + nb)
            if (nb != 0) {
              break;
            }
            sleep(2000);
          }

    - name: find-metrics-nginx
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          while (1) {
            var nb = db.series.find({
              metric: {$regex: "nginx*"},
              tags: {$all: ["image_name:nginx", "kube_service:nginx"]}
            }).count();
            print("find: " + nb)
            if (nb != 0) {
              break;
            }
            sleep(2000);
          }

    - name: validate-hpa
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: argoproj/argoexec:latest
        command: [bash]
        source: |
          set -euo pipefail
          set -x

          # Verify the DCA has written in the DatadogMetric
          until kubectl --namespace {{inputs.parameters.namespace}} get datadogmetrics.datadoghq.com -o jsonpath='{range .items[*]}{.spec.externalMetricName}{"\n"}{end}' | grep nginx.net.request_per_s; do
           sleep 1
          done

    - name: run-hpa
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: argoproj/argoexec:latest
        command: [bash]
        source: |
          set -euo pipefail
          set -x

          nginxsvc=$(kubectl --namespace {{inputs.parameters.namespace}} get svc nginx -o jsonpath='{.spec.clusterIP}')
          until [[ "$(kubectl --namespace {{inputs.parameters.namespace}} get hpa nginxext -o jsonpath='{.status.currentReplicas}')" -gt 1 ]]; do
            for i in {1..100}
            do
              curl $nginxsvc:8090/nginx_status >& /dev/null
              sleep 0.03
            done
          done

    - name: test
      inputs:
        parameters:
          - name: namespace
      dag:
        tasks:
          - name: find-kube-state-metrics
            template: find-kube-state-metrics
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: find-metrics-nginx
            template: find-metrics-nginx
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: validate-hpa
            template: validate-hpa
            dependencies:
              - find-metrics-nginx
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
          - name: run-hpa
            template: run-hpa
            dependencies:
              - validate-hpa
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"

    - name: no-more-metrics
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: mongo:4.4.1
        command: [mongo, "fake-datadog.{{inputs.parameters.namespace}}.svc.cluster.local/datadog"]
        source: |
          var prevNb = -1;
          while (1) {
            var nb = db.series.find({
              metric: {$regex: "nginx*"}
            }).count();

            print("prev-find: " + prevNb)
            print("find: " + nb)
            if (nb == prevNb) {
              break;
            }
            prevNb = nb;
            sleep(30000);
          }

    - name: describe-hpa
      inputs:
        parameters:
          - name: namespace
      activeDeadlineSeconds: 200
      script:
        image: argoproj/argoexec:latest
        command: [bash]
        source: |
          set -euo pipefail
          set -x

          kubectl --namespace {{inputs.parameters.namespace}} describe hpa nginxext

    - name: diagnose
      inputs:
        parameters:
          - name: namespace
      steps:
        - - name: describe-hpa
            template: describe-hpa
            arguments:
              parameters:
                - name: namespace
                  value: "{{inputs.parameters.namespace}}"
