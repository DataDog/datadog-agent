# IAM permissions require service name to begin with 'integration-tests'
# Adding a comment to start integration tests on push
service: integration-tests-extension

resources:
  Description: "[Serverless] Integration tests application for lambda extension"

provider:
  name: aws
  region: sa-east-1
  tracing:
    lambda: true
    apiGateway: true
  environment:
    DD_DD_URL: http://127.0.0.1:3333
    DD_API_KEY: NO_NEED_TO_BE_VALID
    DD_LOGS_CONFIG_LOGS_DD_URL: 127.0.0.1:3333
    DD_LOGS_CONFIG_LOGS_NO_SSL: true
    DD_LOGS_INJECTION: true
    DD_MERGE_XRAY_TRACES: false
    DD_TRACE_ENABLED: false
    DD_ENV: integration-tests-env
    DD_VERSION: integration-tests-version
    DD_SERVICE: integration-tests-service

  lambdaHashingVersion: 20201221
  timeout: 15
  deploymentBucket:
    name: integration-tests-deployment-bucket
  iam:
    # IAM permissions require that all functions are deployed with this role
    role: "arn:aws:iam::601427279990:role/serverless-integration-test-lambda-role"

layers:
  recorderExtension:
    package:
      artifact: ./recorder-extension/ext.zip
  datadogExtensionIntegrationTest:
    package:
      artifact: ../../../../datadog-lambda-extension/.layers/datadog_extension-amd64.zip

functions:
  enhanced-metric-node:
    runtime: nodejs14.x
    handler: src/metric.enhancedMetricTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  enhanced-metric-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_LAMBDA_HANDLER: src/metricPython.metric

  no-enhanced-metric-node:
    runtime: nodejs14.x
    handler: src/metric.noEnhancedMetricTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false

  no-enhanced-metric-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false
      DD_LAMBDA_HANDLER: src/metricPython.metric

  with-ddlambda-go:
    runtime: provided.al2
    handler: src/bin/with-ddlambda
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  without-ddlambda-go:
    runtime: provided.al2
    handler: src/bin/without-ddlambda
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  with-ddlambda-java:
    runtime: java8.al2
    handler: Handler
    package:
      individually: true
      artifact: src/java-tests/with-ddlambda/target/hello-dev.jar
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  metric-csharp:
    runtime: dotnetcore3.1
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/netcoreapp3.1/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/boot.sh
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  error-node:
    runtime: nodejs14.x
    handler: src/metric.errorTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  error-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_LAMBDA_HANDLER: src/metricPython.error

  error-java:
    runtime: java8.al2
    handler: ErrorHandler
    package:
      individually: true
      artifact: src/java-tests/error/target/error-dev.jar
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  timeout-node:
    runtime: nodejs14.x
    handler: src/metric.timeoutMetricTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }

  timeout-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_LAMBDA_HANDLER: src/metricPython.timeout

  timeout-go:
    runtime: provided.al2
    timeout: 3
    handler: src/bin/timeout
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }

  timeout-java:
    runtime: java8.al2
    handler: TimeoutHandler
    timeout: 3
    package:
      individually: true
      artifact: src/java-tests/timeout/target/timeout-dev.jar
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }

  log-node:
    runtime: nodejs14.x
    handler: src/log.logTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  log-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_LAMBDA_HANDLER: src/logPython.log

  log-go-with-ddlambda:
    runtime: provided.al2
    handler: src/bin/log-with-ddlambda
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  log-go-without-ddlambda:
    runtime: provided.al2
    handler: src/bin/log-without-ddlambda
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD

  log-csharp:
    runtime: dotnetcore3.1
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Logs
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/netcoreapp3.1/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/boot.sh
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_LOGS_ENABLED: true
      DD_SERVERLESS_LOGS_ENABLED: true
      DD_LOGS_INJECTION: true

  log-java:
    runtime: java8.al2
    handler: LogHandler
    package:
      individually: true
      artifact: src/java-tests/log/target/log-dev.jar
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_LOGS_ENABLED: true
      DD_SERVERLESS_LOGS_ENABLED: true
      DD_LOGS_INJECTION: true

  simple-trace-node:
    runtime: nodejs14.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node14-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_LAMBDA_HANDLER: src/trace.simpleTest
      DD_TRACE_ENABLED: true
      DD_APM_DD_URL: http://127.0.0.1:3333
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA,tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC,tagD:valueD

  simple-trace-python:
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_LAMBDA_HANDLER: src/tracePython.simple_test
      DD_TRACE_ENABLED: true
      DD_APM_DD_URL: http://127.0.0.1:3333
      DD_ENHANCED_METRICS: false
      DD_TAGS: tagA:valueA,tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC,tagD:valueD

  simple-trace-go:
    runtime: provided.al2
    handler: src/bin/trace
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_TRACE_ENABLED: true
      DD_APM_DD_URL: http://127.0.0.1:3333

  simple-trace-java:
    runtime: java8.al2
    handler: TraceHandler
    package:
      individually: true
      artifact: src/java-tests/trace/target/trace-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_TAGS: tagA:valueA tagB:valueB
      DD_EXTRA_TAGS: tagC:valueC tagD:valueD
      DD_TRACE_ENABLED: true
      DD_APM_DD_URL: http://127.0.0.1:3333
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar"'
      DD_JMXFETCH_ENABLED: false
