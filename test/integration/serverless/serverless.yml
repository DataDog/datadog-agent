# IAM permissions require service name to begin with 'integration-tests'
service: integration-tests-extension
frameworkVersion: "3"

plugins:
  - serverless-plugin-conditional-functions

resources:
  Description: "[Serverless] Integration tests application for lambda extension"

provider:
  name: aws
  region: eu-west-1
  tracing:
    lambda: true
    apiGateway: true
  environment:
    DD_DD_URL: http://127.0.0.1:3333
    DD_LOGS_CONFIG_LOGS_DD_URL: 127.0.0.1:3333
    DD_LOGS_CONFIG_LOGS_NO_SSL: true
    DD_LOGS_INJECTION: false
    DD_MERGE_XRAY_TRACES: false
    DD_TRACE_ENABLED: true
    DD_APM_DD_URL: http://127.0.0.1:3333
    DD_ENV: integration-tests-env
    DD_VERSION: integration-tests-version
    DD_SERVICE: integration-tests-service
    DD_TAGS: tagA:valueA tagB:valueB
    DD_EXTRA_TAGS: tagC:valueC tagD:valueD
    DD_CAPTURE_LAMBDA_PAYLOAD: true
    DD_COLD_START_TRACING: false
    DD_LOG_LEVEL: DEBUG
    DD_LOGS_CONFIG_PROCESSING_RULES: >-
      [
      {"type": "mask_sequences", "name": "masked_value", "replace_placeholder": "masked", "pattern": "__[\\w|_]*__"},
      {"type": "exclude_at_match", "name": "exclude_extension_logs", "pattern": "\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\sUTC\\s\\|\\sDD_EXTENSION"},
      {"type": "exclude_at_match", "name": "exclude_datadog_wrapper_logs", "pattern": "\\[datadog-wrapper\\]"},
      {"type": "exclude_at_match", "name": "exclude_dotnet_tracer_logs", "pattern": "\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}:\\d{3}\\s\\[DD_TRACE_DOTNET\\]"},
      {"type": "exclude_at_match", "name": "exclude_go_tracer_logs", "pattern": "\\d{4}/\\d{2}/\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\sDatadog\\sTracer"},
      {"type": "exclude_at_match", "name": "exclude_go_tracer_logs_2", "pattern": "\\d{4}/\\d{2}/\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\s{\"status\":\"debug\",.*?}"},
      {"type": "exclude_at_match", "name": "exclude_java_tracer_logs", "pattern": "\\[dd.trace\\s\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}:\\d{3}\\s\\+\\d{4}\\]"},
      {"type": "exclude_at_match", "name": "exclude_node_tracer_logs", "pattern": "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z\\s[a-z0-9\\-]+\\sDEBUG\\s{\"status\":\"debug\",.*?}"},
      {"type": "exclude_at_match", "name": "exclude_python_tracer_logs", "pattern": "\\[DEBUG\\]\\s\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z"}
      ]
  timeout: 15
  deploymentBucket:
    name: integration-tests-serververless-deployment-bucket
  iam:
    # IAM permissions require that all functions are deployed with this role
    role: "arn:aws:iam::425362996713:role/serverless-integration-test-lambda-role"
  architecture: ${self:custom.altArchitectureNames.${env:ARCHITECTURE}}

package:
  patterns:
    - "src"
    - "!src/csharp-tests"
    - "!src/java-tests"
    - "!src/bin"
    - "!recorder-extension"
    - "!snapshots"
    - "!datadog.yaml"

custom:
  ddLayerArchitectureFlag:
    amd64: ""
    arm64: "-ARM"
  # AWS uses x86_64 instead of amd64
  altArchitectureNames:
    amd64: "x86_64"
    arm64: "arm64"

layers:
  recorderExtension:
    package:
      artifact: ./recorder-extension/ext.zip
  datadogExtensionIntegrationTest:
    package:
      artifact: ../../../../datadog-lambda-extension/.layers/datadog_extension-${env:ARCHITECTURE}.zip

functions:
  appsec-node:
    enabled: '"${env:RUN_SUITE_APPSEC}" == "true"'
    runtime: nodejs18.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_APPSEC_WAF_TIMEOUT: 1m
      DD_LAMBDA_HANDLER: src/trace.simpleTest
      DD_SERVERLESS_APPSEC_ENABLED: true
      # Explicitly disable instrumentation telemetry as this causes the traces to somehow no longer be seen by the recorder.
      DD_INSTRUMENTATION_TELEMETRY_ENABLED: false
      DD_TRACE_TELEMETRY_ENABLED: false

  appsec-python:
    enabled: '"${env:RUN_SUITE_APPSEC}" == "true"'
    runtime: python3.11
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python311${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_APPSEC_WAF_TIMEOUT: 60000
      DD_LAMBDA_HANDLER: src/appSecPython.handler
      DD_SERVERLESS_APPSEC_ENABLED: true

  appsec-java:
    enabled: '"${env:RUN_SUITE_APPSEC}" == "true"'
    runtime: java8.al2
    handler: Handler
    package:
      individually: true
      artifact: src/java-tests/appsec/target/appsec-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_APPSEC_WAF_TIMEOUT: 1m
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false
      DD_SERVERLESS_APPSEC_ENABLED: true

  appsec-go:
    enabled: '"${env:RUN_SUITE_APPSEC}" == "true"'
    runtime: provided.al2
    package:
      individually: true
      patterns:
        - src/bin/appsec
    handler: src/bin/appsec
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      # AWS_LAMBDA_EXEC_WRAPPER is not applied by provided.al2 and go1.x runtimes
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_APPSEC_WAF_TIMEOUT: 1m
      DD_SERVERLESS_APPSEC_ENABLED: true

  appsec-csharp:
    enabled: '"${env:RUN_SUITE_APPSEC}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_APPSEC_WAF_TIMEOUT: 1m
      DD_SERVERLESS_APPSEC_ENABLED: true

  metric-node:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: nodejs18.x
    handler: src/metric.enhancedMetricTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  metric-python:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/metricPython.metric

  metric-go:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: provided.al2
    package:
      individually: true
      patterns:
        - src/bin/metric
    handler: src/bin/metric
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  metric-java:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: java8.al2
    handler: Handler
    package:
      individually: true
      artifact: src/java-tests/metric/target/hello-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false

  metric-csharp:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  metric-proxy:
    enabled: '"${env:RUN_SUITE_METRIC}" == "true"'
    runtime: nodejs18.x
    handler: src/proxyTestFunctions.noop
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper

  error-node:
    enabled: '"${env:RUN_SUITE_ERROR}" == "true"'
    runtime: nodejs18.x
    handler: src/metric.errorTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  error-python:
    enabled: '"${env:RUN_SUITE_ERROR}" == "true"'
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/metricPython.error

  error-java:
    enabled: '"${env:RUN_SUITE_ERROR}" == "true"'
    runtime: java8.al2
    handler: ErrorHandler
    package:
      individually: true
      artifact: src/java-tests/error/target/error-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false

  error-csharp:
    enabled: '"${env:RUN_SUITE_ERROR}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Error
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  error-proxy:
    enabled: '"${env:RUN_SUITE_ERROR}" == "true"'
    runtime: nodejs18.x
    handler: src/proxyTestFunctions.error
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  timeout-node:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: nodejs18.x
    timeout: 1
    handler: src/metric.timeoutMetricTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  timeout-python:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: python3.8
    timeout: 1
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/metricPython.timeout

  timeout-go:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: provided.al2
    timeout: 1
    package:
      individually: true
      patterns:
        - src/bin/timeout
    handler: src/bin/timeout
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  timeout-java:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: java8.al2
    handler: TimeoutHandler
    timeout: 1
    package:
      individually: true
      artifact: src/java-tests/timeout/target/timeout-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false

  timeout-csharp:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Timeout
    timeout: 1
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  timeout-proxy:
    enabled: '"${env:RUN_SUITE_TIMEOUT}" == "true"'
    runtime: nodejs18.x
    handler: src/proxyTestFunctions.timeout
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  log-node:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
    handler: src/log.logTest
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  log-python:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: python3.8
    package:
      individually: true
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/logPython.log

  log-go:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: provided.al2
    package:
      individually: true
      patterns:
        - src/bin/log
    handler: src/bin/log
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  log-csharp:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Logs
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  log-java:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: java8.al2
    handler: LogHandler
    package:
      individually: true
      artifact: src/java-tests/log/target/log-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false

  log-proxy:
    enabled: '"${env:RUN_SUITE_LOG}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
    handler: src/proxyTestFunctions.log
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  trace-node:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: nodejs18.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/trace.simpleTest

  trace-python:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: python3.8
    handler: datadog_lambda.handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Python38${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:PYTHON_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/tracePython.simple_test

  trace-go:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: provided.al2
    package:
      individually: true
      patterns:
        - src/bin/trace
    handler: src/bin/trace
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID

  trace-java:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: java8.al2
    handler: TraceHandler
    package:
      individually: true
      artifact: src/java-tests/trace/target/trace-dev.jar
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-java:${env:JAVA_TRACE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      JAVA_TOOL_OPTIONS: '-javaagent:"/opt/java/lib/dd-java-agent.jar" -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      DD_JMXFETCH_ENABLED: false

  trace-csharp:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: dotnet6
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Trace
    package:
      individually: true
      artifact: src/csharp-tests/bin/Release/net6.0/handler.zip
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:dd-trace-dotnet${self:custom.ddLayerArchitectureFlag.${env:ARCHITECTURE}}:${env:DOTNET_TRACE_LAYER_VERSION}
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  trace-proxy:
    enabled: '"${env:RUN_SUITE_TRACE}" == "true"'
    runtime: nodejs18.x
    handler: src/proxyTestFunctions.noop
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_EXPERIMENTAL_ENABLE_PROXY: true
      AWS_LAMBDA_EXEC_WRAPPER: /opt/datadog_wrapper
      DD_API_KEY: NO_NEED_TO_BE_VALID

  otlp-python:
    enabled: '"${env:RUN_SUITE_OTLP}" == "true"'
    runtime: python3.8
    # a bug in opentelemetry instrumentation makes it impossible to define a
    # handler inside of a directory
    # see https://github.com/open-telemetry/opentelemetry-lambda/issues/655
    handler: otlpPython.simple_test
    layers:
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
      - arn:aws:lambda:${self:provider.region}:184161586896:layer:opentelemetry-python-0_5_0:1
    environment:
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-instrument
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_OTLP_CONFIG_RECEIVER_PROTOCOLS_HTTP_ENDPOINT: localhost:4318
      OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp

  proxy-env-apikey:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"

  proxy-yaml-apikey:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG

  proxy-yaml-env-apikey:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY: NO_NEED_TO_BE_VALID
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"

  proxy-env-secret:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY_SECRET_ARN: arn:aws:secretsmanager:eu-west-1:425362996713:secret:integration-tests-extension-secret-MDTT46
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"
      DD_PROXY_NO_PROXY: "secretsmanager.eu-west-1.amazonaws.com"

  proxy-yaml-secret:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY_SECRET_ARN: arn:aws:secretsmanager:eu-west-1:425362996713:secret:integration-tests-extension-secret-MDTT46
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG

  proxy-yaml-env-secret:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_API_KEY_SECRET_ARN: arn:aws:secretsmanager:eu-west-1:425362996713:secret:integration-tests-extension-secret-MDTT46
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"
      DD_PROXY_NO_PROXY: "secretsmanager.eu-west-1.amazonaws.com"

  proxy-env-kms:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_KMS_API_KEY: AQICAHgsBW4nQEVAn5OIFYrKQuzjQ3LdqfR7xGqbiAChbjXogwHjsTUdDig75WssdcMQt5vcAAAAeTB3BgkqhkiG9w0BBwagajBoAgEAMGMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMHEA6IYfLJSKfbRcyAgEQgDahdOOi2wbbnF7sGZAjXZZSywhkZKnys2YP6GQtN+tyuuj/ZS3y6jtATE4bsVTMhuiNvytc3OI=
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"
      DD_PROXY_NO_PROXY: "kms.eu-west-1.amazonaws.com"

  proxy-yaml-kms:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_KMS_API_KEY: AQICAHgsBW4nQEVAn5OIFYrKQuzjQ3LdqfR7xGqbiAChbjXogwHjsTUdDig75WssdcMQt5vcAAAAeTB3BgkqhkiG9w0BBwagajBoAgEAMGMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMHEA6IYfLJSKfbRcyAgEQgDahdOOi2wbbnF7sGZAjXZZSywhkZKnys2YP6GQtN+tyuuj/ZS3y6jtATE4bsVTMhuiNvytc3OI=
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG

  proxy-yaml-env-kms:
    enabled: '"${env:RUN_SUITE_PROXY}" == "true"'
    runtime: nodejs18.x
    package:
      individually: true
      patterns:
        - datadog.yaml
    handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
    layers:
      - arn:aws:lambda:${self:provider.region}:464622532012:layer:Datadog-Node18-x:${env:NODE_LAYER_VERSION}
      - { Ref: RecorderExtensionLambdaLayer }
      - { Ref: DatadogExtensionIntegrationTestLambdaLayer }
    environment:
      DD_KMS_API_KEY: AQICAHgsBW4nQEVAn5OIFYrKQuzjQ3LdqfR7xGqbiAChbjXogwHjsTUdDig75WssdcMQt5vcAAAAeTB3BgkqhkiG9w0BBwagajBoAgEAMGMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMHEA6IYfLJSKfbRcyAgEQgDahdOOi2wbbnF7sGZAjXZZSywhkZKnys2YP6GQtN+tyuuj/ZS3y6jtATE4bsVTMhuiNvytc3OI=
      DD_LAMBDA_HANDLER: src/hello.lambda_handler
      DD_LOG_LEVEL: DEBUG
      DD_PROXY_HTTP: "http://proxy.env:80"
      DD_PROXY_HTTPS: "https://proxy.env:80"
      DD_PROXY_NO_PROXY: "kms.eu-west-1.amazonaws.com"
