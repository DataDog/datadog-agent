---
version: '2.4'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    mem_limit: 1G
  kafka:
    image: wurstmeister/kafka:2.12-2.3.1
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "sts_connection_beat_events:1:1,sts_generic_events:1:1,sts_state_events:1:1,sts_multi_metrics:1:1,sts_correlate_endpoints:1:1,sts_topo_process_agents:1:1,sts_trace_events:1:1,sts_topology_events:1:1"
    volumes:
      - "./create-topics.sh:/usr/bin/create-topics.sh"
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper | grep -q sts_trace_events"]
      interval: 1s
      timeout: 10s
      retries: 10
    mem_limit: 1G
  receiver:
    image: "quay.io/stackstate/stackstate-receiver:${STACKSTATE_BRANCH}"
    ports:
      - 7077:7077
      - 1618:1618
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:9092
    mem_limit: 1G
  correlate:
    image: "quay.io/stackstate/stackstate-correlate:${STACKSTATE_BRANCH}"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:9092
      STACKSTATE_CORRELATE_LOG_LEVEL: "DEBUG"
    mem_limit: 1G
  topic-api:
    image: "quay.io/stackstate/stackstate-topic-api:${STACKSTATE_BRANCH}"
    ports:
      - 7070:7070
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:9092
      ZOOKEEPER_QUORUM: kafka
    mem_limit: 1G
  db:
    image: "quay.io/stackstate/trace-java-demo:db-master"
    environment:
      POSTGRES_USER: 'app'
      POSTGRES_PASSWORD: 'app'
      POSTGRES_DB: 'app'
    healthcheck:
      test: ["CMD", "/usr/bin/pg_isready", "--username=app", "--dbname=app"]
      interval: 1s
      timeout: 10s
      retries: 10
    ports:
      - 5432:5432
    labels:
      - "traefik.frontend.rule=Host:stackstate-demo-db"
      - "traefik.backend=stackstate-demo-db"
  stackstate-books-app:
    image: "quay.io/stackstate/trace-java-demo:books-app-master"
    pid: "host"
    ports:
      - '8081-8091:8081'
    depends_on:
      db:
        condition: service_healthy
      stackstate-agent:
        condition: service_started
    labels:
      - "traefik.frontend.rule=Host:stackstate-books-app"
      - "traefik.backend=stackstate-books-app"
    environment:
      MAVEN_OPTS: "-Dsts.service.name=stackstate-books-app -Dauthors-app.traefik.host.header=stackstate-authors-app -Dsts.agent.host=${DOCKER_HOST_IP} -Dsts.agent.port=8126 -Dstackstate.slf4j.simpleLogger.defaultLogLevel=debug -javaagent:/sts-java-agent.jar"
    mem_limit: 2G
  stackstate-authors-app:
    image: "quay.io/stackstate/trace-java-demo:authors-app-master"
    pid: "host"
    ports:
      - '8092-8099:8081'
    depends_on:
      db:
        condition: service_healthy
      stackstate-agent:
        condition: service_started
    labels:
      - "traefik.frontend.rule=Host:stackstate-authors-app"
      - "traefik.backend=stackstate-authors-app"
    environment:
      MAVEN_OPTS: "-Dsts.service.name=stackstate-authors-app -Dsts.agent.host=${DOCKER_HOST_IP} -Dsts.agent.port=8126 -Dstackstate.slf4j.simpleLogger.defaultLogLevel=debug -javaagent:/sts-java-agent.jar"
    mem_limit: 2G
  traefik:
    image: traefik:v1.7.12
    command: --api --docker --loglevel=INFO --tracing=TRUE --tracing.backend="datadog" --tracing.datadog.debug=TRUE --tracing.datadog.localagenthostport="${DOCKER_HOST_IP}:8126" --tracing.datadog.globaltag="source:traefik"  # Enables the web UI and tells Traefik to listen to docker
    ports:
      - 80:80      # The HTTP port
      - 8080:8080  # The Web UI (enabled by --api)
    depends_on:
      - stackstate-books-app
      - stackstate-authors-app
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  stackstate-agent:
    image: docker.io/stackstate/stackstate-agent-2-test:${AGENT_VERSION}
    network_mode: "host"
    pid: "host"
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/proc/:/host/proc/:ro"
      - "/sys/fs/cgroup/:/host/sys/fs/cgroup:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/sys/kernel/debug:/sys/kernel/debug"
    environment:
      STS_API_KEY: "API_KEY"
      STS_STS_URL: "http://localhost:7077/stsAgent"
      STS_HOSTNAME: "trace-java-demo"
      STS_PROCESS_AGENT_URL: "http://localhost:7077/stsAgent"
      STS_PROCESS_AGENT_ENABLED: "true"
      STS_NETWORK_TRACING_ENABLED: "true"
      STS_APM_URL: "http://localhost:7077/stsAgent"
      STS_APM_ENABLED: "true"
      HOST_PROC: "/host/proc"
      HOST_SYS: "/host/sys"
      STS_LOG_LEVEL: "debug"
      STS_LOG_TO_CONSOLE: "true"
#    healthcheck:
#      test: curl --fail -s http://localhost:5000/ || exit 1
#      interval: 1m30s
#      timeout: 10s
#      retries: 3
