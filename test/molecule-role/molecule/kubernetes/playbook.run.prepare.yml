---
- name: Prepare Receiver and EKS cluster
  hosts: kubernetes-cluster-agent
  gather_facts: true
  vars:
    ssh_port: 22
    security_group_name: molecule_kubernetes
    security_group_description: Agent v2 Molecule testing running on kubernetes
    security_group_rules:
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 7070  # StackState Topic API port
        to_port: 7070
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 7077  # StackState Receiver API port
        to_port: 7077
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 443  # HTTPS Port
        to_port: 443
        cidr_ip: '0.0.0.0/0'
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: '0.0.0.0/0'
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: '0.0.0.0/0'
    security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: '0.0.0.0/0'
  tasks:
    - name: Run Docker compose
      command: docker-compose up -d
      args:
        chdir: /home/ubuntu/receiver

    - import_tasks: ../common/prepare/wait-for-receiver.yml

    - name: Create secret to allow pulling from private docker registry
      shell: kubectl get secret docker-registry-key || kubectl create secret generic docker-registry-key --from-file=.dockerconfigjson=/home/ubuntu/.docker/config.json --type=kubernetes.io/dockerconfigjson
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Delete namespace '{{namespace}}'
      ignore_errors: true
      shell: kubectl delete ns --ignore-not-found=true {{namespace}}
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Delete manifests for stackstate node agent and cluster agent
      ignore_errors: true
      command: kubectl delete -k overlays --ignore-not-found=true
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Create test namespace '{{namespace}}'
      shell: kubectl create ns {{ namespace }}
      args:
        chdir: /home/ubuntu/deployment
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply manifests for test workloads
      command: kubectl -n={{ namespace }} apply -f test_workloads
      args:
        chdir: /home/ubuntu/deployment
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply manifests for stackstate node agent and cluster agent
      command: kubectl apply -k overlays
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the stackstate cluster agent to start doing it's thing
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l app=stackstate-cluster-agent pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the stackstate node agents to start doing their thing (otherwise connections might occur after agent startup)
      ignore_errors: true
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l app=stackstate-agent pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the kube-state-metrics to be ready
      ignore_errors: true
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l app.kubernetes.io/name=kube-state-metrics pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply the pod-to-service-cluster-ip scenario
      command: kubectl -n={{ namespace }} apply -f pod-to-service-cluster-ip.yaml
      args:
        chdir: /home/ubuntu/deployment/test_connections
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply the pod-localhost scenario
      command: kubectl -n={{ namespace }} apply -f pod-localhost.yaml
      args:
        chdir: /home/ubuntu/deployment/test_connections
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply the pod-to-pod-headless scenario
      command: kubectl -n={{ namespace }} apply -f pod-to-pod-headless.yaml
      args:
        chdir: /home/ubuntu/deployment/test_connections
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Apply the pod-http-metrics scenario
      command: kubectl -n={{ namespace }} apply -f pod-http-metrics.yaml
      args:
        chdir: /home/ubuntu/deployment/test_connections
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the pod-to-service-cluster-ip scenario to become ready
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l test=pod-to-service-cluster-ip pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the pod-localhost scenario to become ready
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l test=pod-localhost pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the pod-to-pod-headless scenario to become ready
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l test=pod-to-pod-headless pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Wait for the pod-http-metrics scenario to become ready
      command: kubectl -n={{ namespace }} wait --all --for=condition=Ready --timeout=360s -l test=pod-http-metrics pod
      args:
        chdir: /home/ubuntu/deployment/agents
      environment:
        KUBECONFIG: /home/ubuntu/deployment/aws-eks/tf-cluster/kubeconfig

    - name: Give the Test Workloads 5 minutes to start performing their actions and some http requests
      pause:
        minutes: 5

- name: Encryption
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - include_tasks: ../common/create/encrypt-ssh-key.yml
