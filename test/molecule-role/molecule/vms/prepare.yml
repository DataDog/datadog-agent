---
- name: Prepare Receiver
  hosts: receiver_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:

    - name: Ubuntu18 automatic updates (wait for lock) (1/2)
      shell: "while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 10; done;"
      become: yes

    - name: Ubuntu18 automatic updates (wait for lock) (2/2)
      shell: "sleep 15; while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 10; done;"
      become: yes

    - name: Install provisioning dependencies (1/2)
      apt:
        name:
          python3-pip
        state: present
      become: yes
      register: pip3_res
      retries: 15
      delay: 5
      until: pip3_res is success

    - name: Install provisioning dependencies (2/2)
      shell: pip3 install docker
      become: yes

    - name: Configure aws credentials
      copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup("env", "AWS_ACCESS_KEY_ID")}}
          aws_secret_access_key = {{ lookup("env", "AWS_SECRET_ACCESS_KEY")}}
        dest: /home/ubuntu/.aws/credentials

    - name: Docker login
      docker_login:
        registry: quay.io
        username: "{{ quay_user }}"
        password: "{{ quay_password }}"
        reauthorize: yes
    - name: Copy Configuration files
      copy:
        src: "files/receiver/{{ item }}"
        dest: "/home/ubuntu/{{ item }}"
      with_items:
        - docker.nginx
        - nginx-signed.crt
        - nginx-signed.key
        - docker-compose.yml
    - name: Run Docker compose
      command: docker-compose up -d
      args:
        chdir: /home/ubuntu/
      environment:
        STACKSTATE_BRANCH: "{{ stackstate_branch }}"

- name: Prepare Linux Agents (pre)
  hosts: agent_linux_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal python-zipstream python-pip) || ((yum check-update || test $? -eq 100) && yum install -y python2) || true
      become: true
      changed_when: false
    - name: Gather facts
      setup:
    # - debug: msg={{ ansible_facts }}
    - name: Install nmap (for ncat binary) and stress in Ubuntu
      become: true
      apt:
        name: [nmap, stress]
        state: present
      register: nmap_stress_result
      retries: 10
      delay: 30
      until: nmap_stress_result is not failed
      when: ansible_distribution == "Ubuntu"
    - name: Install nc (for ncat binary), libselinux-python and stresss in Fedora
      become: true
      yum:
        name: [nc, libselinux-python, stress]
        state: present
      when: ansible_distribution == "Fedora"
    - name: Install epel-release for stress in CentOS
      become: true
      yum:
        name: epel-release
        state: present
      when: ansible_distribution == "CentOS"
    - name: Install stress in CentOS
      become: true
      yum:
        name: stress
        state: present
      when: ansible_distribution == "CentOS"

- name: Prepare Network Connection Namespaces VM (pre)
  hosts: agent-connection-namespaces
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Ubuntu18 automatic updates (wait for lock) (1/2)
      shell: "while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 10; done;"
      become: yes

    - name: Ubuntu18 automatic updates (wait for lock) (2/2)
      shell: "sleep 15; while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 10; done;"
      become: yes

    - name: Install provisioning dependencies (1/2)
      apt:
        name:
          python3-pip
        state: present
      become: yes
      register: pip3_res
      retries: 15
      delay: 5
      until: pip3_res is success

    - name: Install provisioning dependencies (2/2)
      shell: pip3 install docker
      become: yes
    - name: Installing multiple python packages in Ansible
      shell: pip3 install boto boto3
      become: yes
    - name: Add Docker GPG APT key
      become: true
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker APT repository
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    - name: Install APT packages
      become: true
      apt:
        name: [apt-transport-https, ca-certificates, curl, software-properties-common, docker-ce]
        state: present
        update_cache: yes
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success
    - name: Add user to docker group
      become: true
      user:
        name: ubuntu
        groups: docker
        append: True
    - name: Restart sshd to apply group change
      shell: sleep 1; pkill -u {{ ansible_ssh_user }} sshd
      async: 3
      poll: 2
    - name: Cleanup netcat-1 container
      shell: "docker stop netcat-1 || true && docker rm netcat-1 || true"
    - name: Setup netcat 1 docker container
      shell: "docker run -it -d --name netcat-1 ubuntu && docker exec -itd --user root netcat-1 sh -c 'apt-get update && apt-get install -y nmap=7.80+dfsg1-2build1 ncat=7.80+dfsg1-2build1 && ncat --broker --listen -p 9091'"
    - name: Cleanup netcat-2 container
      shell: "docker stop netcat-2 || true && docker rm netcat-2 || true"
    - name: Setup netcat 2 docker container
      shell: "docker run -it -d --name netcat-2 ubuntu && docker exec -itd --user root netcat-2 sh -c 'apt-get update && apt-get install -y nmap=7.80+dfsg1-2build1 ncat=7.80+dfsg1-2build1 && ncat --broker --listen -p 9091'"

- name: Prepare Windows Agent (pre)
  hosts: agent_win_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    # Temporary - override netcat installation issues
    - name: install chocolatey 0.10.13
      win_chocolatey:
        name: chocolatey
        state: present
        version: 0.10.13
        force: yes
    - name: disable enhanced exit codes
      win_chocolatey_feature:
        name: useEnhancedExitCodes
        state: disabled
    - name: Install netcat (1/2)
      win_chocolatey:
        name: netcat
        state: present
        timeout: 90
      register: net_try1
      ignore_errors: true
      until: net_try1 is not failed
    - name: Install netcat (2/2)
      win_chocolatey:
        name: netcat
        state: present
      when: net_try1 is failed

- name: Prepare Ubuntu Agent listening before start
  hosts: agent-ubuntu
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    # We use ncat to keep a listening port open and get a direction
    - debug: msg="Starting listening for fedora and windows"
    - name: Open listening port for fedora {{ connection_port_before_start_fedora }}
      shell: "nohup ncat --broker --listen -p {{ connection_port_before_start_fedora }} &"
      become: true
    - name: Open listening port for windows {{ connection_port_before_start_windows }}
      shell: "nohup ncat --broker --listen -p {{ connection_port_before_start_windows }} &"
      become: true

- name: Prepare Fedora Agent connecting before start
  hosts: agent-fedora
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Connect to Ubuntu Agent
      shell: yes | ncat {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ connection_port_before_start_fedora }}
      async: "{{ max_test_time }}"
      poll: 0

- name: Prepare Windows Agent connecting before start
  hosts: agent-win
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Connect to Ubuntu Agent async (prepare agent-win connecting before start)
      win_command: nc {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ connection_port_before_start_windows }}
      async: "{{ max_test_time }}"
      poll: 0

- name: Prepare Windows Agents (post)
  hosts: agent_win_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Add test-stackstate-agent.sts to /etc/hosts
      win_lineinfile:
        path: C:\\Windows\\System32\\drivers\\etc\\hosts
        line: "{{ hostvars['receiver']['ansible_host'] }} test-stackstate-agent.sts"
        state: present
    - name: Install stackstate-agent
      win_shell: ". { iwr -useb {{ agent_repo_url }}/install.ps1 } | iex; install -stsApiKey API_KEY -stsUrl https://test-stackstate-agent.sts/stsAgent -hostname {{ inventory_hostname }} -codeName {{ agent_current_branch }} -skipSSLValidation true"
      register: install_result

# - debug: var="install_result"

- name: Prepare Linux Agents (post)
  hosts: agent_linux_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Add test-stackstate-agent.sts to /etc/hosts
      become: true
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars['receiver']['ansible_host'] }} test-stackstate-agent.sts"
    - name: Install stackstate-agent
      shell: "curl -o- {{ agent_repo_url }}/install.sh | bash"
      environment:
        STS_API_KEY: "API_KEY"
        STS_URL: "https://test-stackstate-agent.sts/stsAgent"
        STS_HOSTNAME: "{{ inventory_hostname }}"
        CODE_NAME: "{{ agent_current_branch }}"
        SKIP_SSL_VALIDATION: "true"

- name: Prepare Ubuntu Agent for Short-Lived tests (post installation configuration)
  hosts: agent-ubuntu
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: "Set process_config.filters.short_lived_processes and process_config.filters.short_lived_network_relations to get deterministic behaviour in the short-lived filtering tests"
      become: true
      lineinfile:
        path: "/etc/stackstate-agent/stackstate.yaml"
        insertafter: "process_config:"
        line: |2
            filters:
              short_lived_processes:
                enabled: true
                qualifier_secs: {{ process_filter_short_lived_qualifier_secs }}
              short_lived_network_relations:
                enabled: true
                qualifier_secs: {{ network_relation_filter_short_lived_qualifier_secs }}
    - name: "Restart StackState Agent Service"
      become: true
      shell: "systemctl restart stackstate-agent.service"

- name: Prepare Ubuntu Agent listening after start
  hosts: agent-ubuntu
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Wait a bit for the process agent to start
      pause:
        seconds: 10
    # We use ncat to keep a listening port open and get a direction
    - name: Open listening port for fedora {{ connection_port_after_start_fedora }}
      shell: "nohup ncat --broker --listen -p {{ connection_port_after_start_fedora }} &"
      become: true
    - name: Open listening port for windows {{ connection_port_after_start_windows }}
      shell: "nohup ncat --broker --listen -p {{ connection_port_after_start_windows }} &"
      become: true
    - name: Forward DNAT port {{ dnat_service_port }} to {{ dnat_server_port }}
      iptables:
        table: nat
        # PREROUTING for connections from outside, otherwise OUTPUT for local ones
        chain: PREROUTING
        protocol: tcp
        destination_port: "{{ dnat_service_port }}"
        jump: DNAT
        to_destination: "{{ ansible_default_ipv4['address'] }}:{{ dnat_server_port }}"
        comment: "Redirect traffic with dnat"
      become: yes
    - name: Open dnat_server listening port {{ dnat_server_port }}
      shell: "nohup ncat --broker --listen -p {{ dnat_server_port }} &"
      become: true

- name: Prepare Fedora Agent connecting after start
  hosts: agent-fedora
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Connect to Ubuntu agent P2P
      shell: yes | ncat {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ connection_port_after_start_fedora }}
      async: "{{ max_test_time }}"
      poll: 0
    - name: Connect to Ubuntu agent DNAT
      shell: yes | ncat {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ dnat_service_port }}
      async: "{{ max_test_time }}"
      poll: 0

- name: Prepare Windows Agent connecting after start
  hosts: agent-win
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Wait a bit for the ubuntu machine to start
      pause:
        seconds: 10

    - name: "Wait for port {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} port {{ connection_port_after_start_windows }}  to become open on the host, don't start checking for 10 seconds"
      win_wait_for:
        host: "{{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }}"
        port: "{{ connection_port_after_start_windows }}"
        delay: 10
      retries: 10
      delay: 10
      register: wait_result
      until: wait_result is succeeded

    - name: Connect to Ubuntu agent P2P (1/1)
      win_command: nc {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ connection_port_after_start_windows }}
      async: "{{ max_test_time }}"
      ignore_errors: True
      register: ubuntu_connect_result
      poll: 0
    - name: Connect to Ubuntu agent P2P (1/2)
      win_command: nc {{ hostvars['agent-ubuntu']['ansible_default_ipv4']['address'] }} {{ connection_port_after_start_windows }}
      async: "{{ max_test_time }}"
      poll: 0
      when: ubuntu_connect_result is failed

- name: Prepare Agent for blacklist inclusion test
  hosts: agent-ubuntu, agent-fedora, agent-centos
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Wait a bit for the process agent to start
      pause:
        seconds: 10
    - name: Start the stress process that consumes a large amount of memory
      shell: "/usr/bin/stress --vm 1 --vm-bytes 248M --timeout {{ max_test_time }} --verbose"
      async: "{{ max_test_time }}"
      poll: 0

- name: Prepare Agent for short-lived filtering test
  hosts: agent-ubuntu
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Wait a bit for the process agent to start
      pause:
        seconds: 10
    - name: "Start a python process that only runs for {{ process_filter_short_lived_qualifier_secs }} seconds"
      shell: "python -c \"import time; time.sleep({{ process_filter_short_lived_qualifier_secs }});\""
      async: "{{ max_test_time }}"
      poll: 0

- name: Prepare Agent for short-lived relation test
  hosts: agent-ubuntu
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Wait a bit for the process agent to start
      pause:
        seconds: 10
    - name: Installing requests library for test connections
      shell: pip install requests
    - name: "Start a python http server to make requests to http://localhost:{{ network_relation_test_server_port_single_request }}"
      shell: "python -m SimpleHTTPServer {{ network_relation_test_server_port_single_request }}"
      async: "{{ max_test_time }}"
      poll: 0
    - name: "Start a python http server to make multiple new requests to http://localhost:{{ network_relation_test_server_port_multiple_requests }}"
      shell: "python -m SimpleHTTPServer {{ network_relation_test_server_port_multiple_requests }}"
      async: "{{ max_test_time }}"
      poll: 0
    - name: "Start a python http server to make multiple requests on a shared connection to http://localhost:{{ network_relation_test_server_port_shared_connection }}"
      shell: "python -m SimpleHTTPServer {{ network_relation_test_server_port_shared_connection }}"
      async: "{{ max_test_time }}"
      poll: 0
    - name: Wait a bit for the SimpleHTTPServers to start
      pause:
        seconds: 5
    - name: Write single-request.py that makes a once off connection that we expect to be filtered
      lineinfile:
        create: yes
        path: "/home/ubuntu/single-request.py"
        line: |
          import time
          import requests
          requests.get("http://localhost:{{ network_relation_test_server_port_single_request }}")
          time.sleep({{ max_test_time }})
    - name: "Start single-request.py"
      shell: "python single-request.py"
      async: "{{ max_test_time }}"
      args:
        chdir: /home/ubuntu/
      poll: 0
    - name: Write multiple-requests.py that makes a new connection to the same endpoint every 5 seconds that we expect to be reported
      lineinfile:
        create: yes
        path: "/home/ubuntu/multiple-requests.py"
        line: |
          import time
          import requests
          while True:
            requests.get("http://localhost:{{ network_relation_test_server_port_multiple_requests }}")
            time.sleep(5)
    - name: "Start multiple-requests.py"
      shell: "python multiple-requests.py"
      async: "{{ max_test_time }}"
      args:
        chdir: /home/ubuntu/
      poll: 0
    - name: Write shared-connection-requests.py that makes a connection (re-using the underlying tcp connection) every 5 seconds that we expect to be reported
      lineinfile:
        create: yes
        path: "/home/ubuntu/shared-connection-requests.py"
        line: |
          import time
          import requests
          s = requests.Session()
          while True:
            s.get("http://localhost:{{ network_relation_test_server_port_shared_connection }}")
            time.sleep(5)
    - name: "Start shared-connection-requests.py"
      shell: "python shared-connection-requests.py"
      async: "{{ max_test_time }}"
      args:
        chdir: /home/ubuntu/
      poll: 0

- name: Prepare Connection Namespace VM with local docker connections
  hosts: agent-connection-namespaces
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Connect to netcat 1 docker container
      shell: "docker exec -itd netcat-1 sh -c 'yes | ncat 127.0.0.1 9091'"
    - name: Connect to netcat 2 docker container
      shell: "docker exec -itd netcat-2 sh -c 'yes | ncat 127.0.0.1 9091'"
