---
- name: Prepare Receiver
  hosts: receiver_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal python-zipstream)
      become: true
      changed_when: false
    - name: Install python-pip
      become: true
      apt:
        name: [python-pip, virtualenv, libyajl2]  # venv and yajl2 if you wanna run the simulator
        state: present
        update_cache: yes
      retries: 20
      delay: 30
      register: pip_result
      until: pip_result is not failed
    - name: Installing python boto packages
      pip:
        name: boto,boto3
    - name: Add Docker GPG APT key
      become: true
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker APT repository
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    - name: Install APT packages
      become: true
      apt:
        name: [apt-transport-https, ca-certificates, curl, software-properties-common, docker-ce, awscli]
        state: present
        update_cache: yes
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success
    - name: Add user to docker group
      become: true
      user:
        name: ubuntu
        groups: docker
        append: True
    - name: Restart sshd to apply group change
      shell: sleep 1; pkill -u {{ ansible_ssh_user }} sshd
      async: 3
      poll: 2
    - name: Ensure .aws config directory exists
      file:
        path: /home/ubuntu/.aws/
        recurse: yes
        state: directory
    - name: Configure aws credentials
      copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup("env", "AWS_ACCESS_KEY_ID")}}
          aws_secret_access_key = {{ lookup("env", "AWS_SECRET_ACCESS_KEY")}}
        dest: /home/ubuntu/.aws/credentials
    - name: Configure aws config
      copy:
        content: |
          [default]
          region=eu-west-1
          output=json
        dest: /home/ubuntu/.aws/config
    - name: Run Docker login
      shell: echo '{{ quay_password }}' | docker login --username={{ quay_user }} --password-stdin quay.io
    - name: Install Docker Compose
      become: true
      get_url:
        url: "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64"
        dest: "/usr/local/bin/docker-compose"
        force: True
        mode: "0755"
    - name: Copy Configuration files
      copy:
        src: "files/receiver/{{ item }}"
        dest: "/home/ubuntu/{{ item }}"
      with_items:
        - docker.nginx
        - nginx-signed.crt
        - nginx-signed.key
        - docker-compose.yml
    - name: Run Docker compose
      command: docker-compose up -d
      args:
        chdir: /home/ubuntu/
      environment:
        STACKSTATE_BRANCH: "{{ stackstate_branch }}"

- name: Prepare Linux Agents (pre)
  hosts: agent_linux_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal python-zipstream python-pip) || ((yum check-update || test $? -eq 100) && yum install -y python2) || true
      become: true
      changed_when: false
    - name: Gather facts
      setup:
    # - debug: msg={{ ansible_facts }}
    - name: Inject current user pub key, if exists
      authorized_key:
        user: ubuntu
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      ignore_errors: true
      become: true
      when: ansible_distribution == "Ubuntu"
    - name: Install nmap (for ncat binary) and stress in Ubuntu
      become: true
      apt:
        name: [nmap, stress]
        state: present
      register: nmap_stress_result
      retries: 10
      delay: 30
      until: nmap_stress_result is not failed
      when: ansible_distribution == "Ubuntu"
    - name: Install nc (for ncat binary), libselinux-python and stresss in Fedora
      become: true
      yum:
        name: [nc, libselinux-python, stress]
        state: present
      when: ansible_distribution == "Fedora"
    - name: Install epel-release for stress in CentOS
      become: true
      yum:
        name: epel-release
        state: present
      when: ansible_distribution == "CentOS"
    - name: Install stress in CentOS
      become: true
      yum:
        name: stress
        state: present
      when: ansible_distribution == "CentOS"

- name: Prepare Network Connection Namespaces VM (pre)
  hosts: agent-connection-namespaces
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Installing multiple python packages in Ansible
      pip:
        name: boto,boto3
    - name: Add Docker GPG APT key
      become: true
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker APT repository
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    - name: Install APT packages
      become: true
      apt:
        name: [apt-transport-https, ca-certificates, curl, software-properties-common, docker-ce]
        state: present
        update_cache: yes
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success
    - name: Add user to docker group
      become: true
      user:
        name: ubuntu
        groups: docker
        append: True
    - name: Restart sshd to apply group change
      shell: sleep 1; pkill -u {{ ansible_ssh_user }} sshd
      async: 3
      poll: 2
    - name: Cleanup netcat-1 container
      shell: "docker stop netcat-1 || true && docker rm netcat-1 || true"
    - name: Setup netcat 1 docker container
      shell: "docker run -it -d --name netcat-1 ubuntu && docker exec -itd --user root netcat-1 sh -c 'apt-get update && apt-get install -y nmap && ncat --broker --listen -p 9091'"
    - name: Cleanup netcat-2 container
      shell: "docker stop netcat-2 || true && docker rm netcat-2 || true"
    - name: Setup netcat 2 docker container
      shell: "docker run -it -d --name netcat-2 ubuntu && docker exec -itd --user root netcat-2 sh -c 'apt-get update && apt-get install -y nmap && ncat --broker --listen -p 9091'"

- name: Prepare Windows Agents (post)
  hosts: agent_win_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Add test-stackstate-agent.sts to /etc/hosts
      win_lineinfile:
        path: C:\\Windows\\System32\\drivers\\etc\\hosts
        line: "{{ hostvars['receiver']['ansible_host'] }} test-stackstate-agent.sts"
        state: present
    - name: Install stackstate-agent
      win_shell: ". { iwr -useb {{ agent_repo_url }}/install.ps1 } | iex; install -stsApiKey API_KEY -stsUrl https://test-stackstate-agent.sts/stsAgent -hostname {{ inventory_hostname }} -codeName {{ agent_current_branch }} -skipSSLValidation true"
      register: install_result

# - debug: var="install_result"

- name: Prepare Linux Agents (post)
  hosts: agent_linux_vm
  gather_facts: false
  vars_files:
    - common_vars.yml
  tasks:
    - name: Add test-stackstate-agent.sts to /etc/hosts
      become: true
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars['receiver']['ansible_host'] }} test-stackstate-agent.sts"
    - name: Prepare installation script
      copy:
        src: files/agent/install_script.sh
        dest: /tmp/install_script.sh
        owner: "{{ ansible_user_id }}"
        group: root
        mode: u=rwx,g=rx,o=rx
      become: yes
    - block:
        - name: Predownload deb
          get_url:
            url: https://stackstate-agent-2.s3.amazonaws.com/pool/stable/s/st/stackstate-agent_2.0.5-1_amd64.deb
            dest: /tmp/current.deb
            mode: 'u=rw,g=rw,o=r'
            owner: "{{ ansible_user_id }}"
            group: root
          become: yes 

        - name: Set installation path
          set_fact:
            custom_installer: /tmp/current.deb
      when: ansible_distribution == "Ubuntu"
    - block:
        - name: Predownload rpm
          get_url:
            url: https://stackstate-agent-2-rpm.s3.amazonaws.com/stable/stackstate-agent-2.0.5-1.x86_64.rpm
            dest: /tmp/current.rpm
            mode: 'u=rw,g=rw,o=r'
            owner: "{{ ansible_user_id }}"
            group: root

        - name: Set installation path
          set_fact:
            custom_installer: /tmp/current.rpm
      when: ansible_distribution != "Ubuntu"

    - name: Install stackstate-agent
      shell: "/tmp/install_script.sh {{ custom_installer }}"
      environment:
        STS_API_KEY: "API_KEY"
        STS_URL: "https://test-stackstate-agent.sts/stsAgent"
        STS_HOSTNAME: "{{ inventory_hostname }}"
        CODE_NAME: "{{ agent_current_branch }}"
        SKIP_SSL_VALIDATION: "true"
        STS_INSTALL_NO_REPO: "true"
