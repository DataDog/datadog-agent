---
- name: Prepare Swarm Nodes before running cluster
  hosts: all
  gather_facts: false
  tasks:
    - name: Install provisioning dependencies (1/2)
      apt:
        name:
          python3-pip
        state: present
      become: yes
      register: pip3_res
      retries: 15
      delay: 5
      until: pip3_res is success
    - name: Install provisioning dependencies (2/2)
      shell: pip3 install docker
      become: yes

- name: Register Swarm Master Node
  hosts: swarm_master_vm
  gather_facts: true
  tasks:
    - name: Check if Swarm has already been Initialized
      shell: docker node ls
      register: swarm_status
      ignore_errors: true
    - name: Initialize Docker Swarm
      shell: "docker swarm init --advertise-addr={{ hostvars['agent-swarm-master']['ansible_default_ipv4']['address'] }}:2377"
      when: swarm_status.rc != 0
      run_once: true
    - name: Get the worker join-token
      shell: docker swarm join-token --quiet worker
      register: worker_token

- name: Join Worker node to Master
  hosts: swarm_worker_vm
  gather_facts: true
  tasks:
    - name: Check to see if swarm is already active before trying to join
      shell: "docker info --format '{{ '{{' }} .Swarm.LocalNodeState {{ '}}' }}'"  # weird format required to avoid replacement
      register: swarm_status
    - name: Add Worker to the Swarm
      shell: "docker swarm join --token {{ hostvars['agent-swarm-master']['worker_token']['stdout'] }} {{ hostvars['agent-swarm-master']['ansible_default_ipv4']['address'] }}:2377"
      when: swarm_status.stdout != 'active'

- name: Create global service on Master
  hosts: swarm_master_vm
  gather_facts: true
  tasks:
    - name: Check if nginx service already exists, otherwise create it
      shell: "docker service ps nginx"
      register: nginx_status
      ignore_errors: true

    - name: Create a global nginx service
      shell: "docker service create --name nginx --mode global nginx"
      when: nginx_status.rc != 0
      run_once: true

    - name: Installing docker in Ansible
      pip:
        name: docker

    - name: Docker login
      docker_login:
        registry: quay.io
        username: "{{ quay_user }}"
        password: "{{ quay_password }}"
        reauthorize: yes

    - name: Copy docker compose file
      copy:
        src: files/docker-compose.yml
        dest: /home/ubuntu/
        mode: preserve

    - name: Copy Verify and Create Script file
      copy:
        src: ./../verify-or-create-topics.sh
        dest: /home/ubuntu
        mode: u+x

    - name: Create StacSktate Agent Service on Master
      command: docker stack deploy -c docker-compose.yml --with-registry-auth agent
      args:
        chdir: /home/ubuntu/
      environment:
        AGENT_VERSION: "{{ agent_current_branch }}"
        STACKSTATE_BRANCH: "{{ stackstate_branch }}"
      register: output

    - debug: var=output

    - import_tasks: ../wait-for-receiver.yml

    - name: Wait for agent to be healthy (swarm stack)
      shell: docker stack ps agent | grep 'stackstate-agent' | grep Running
      register: agent_healthy
      until: agent_healthy.rc == 0
      retries: 20
      delay: 5
      changed_when: false
