stages:
  - source_test
  - binary_build
  - integration_test
  - package_build
  - deploy

variables:
  SRC_PATH: /src/github.com/DataDog/datadog-agent
  AGENT_OMNIBUS_BASE_DIR: $CI_PROJECT_DIR/.omnibus/
  AGENT_OMNIBUS_PACKAGE_DIR: $CI_PROJECT_DIR/.omnibus/pkg/
  STATIC_BINARIES_DIR: bin/static
  DEB_S3_BUCKET_DEPRECATED: apt-agent6.datad0g.com
  DEB_S3_BUCKET: apt.datad0g.com
  RPM_S3_BUCKET: yum.datad0g.com
  DD_REPO_BRANCH_NAME: $CI_COMMIT_REF_NAME

before_script:
  # We need to install go deps from within the GOPATH, which we set to / on builder images; that's because pointing
  # GOPATH to the project folder would be too complex (we'd need to replicate the `src/github/project` scheme).
  # So we copy the agent sources to / and bootstrap from there the vendor dependencies before running any job.
  - rsync -azr --delete ./ $SRC_PATH
  - cd $SRC_PATH
  - inv -e deps


#
# source_test
#


# run tests for deb-x64
run_tests_deb-x64:
  stage: source_test
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deb_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    - inv -e test --coverage

# run tests for rpm-x64
run_test_rpm-x64:
  stage: source_test
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/rpm_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    - inv -e test --coverage


#
# binary_build
#


# build dogstatsd static for deb-x64
build_dogstatsd_static-deb_x64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deb_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    - inv -e dogstatsd.build --static
    - cp $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd $CI_PROJECT_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - dogstatsd

# build dogstatsd static for rpm-x64
build_dogstatsd_static-rpm_x64:
  stage: binary_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/rpm_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    - inv -e dogstatsd.build --static
    - cp $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd $CI_PROJECT_DIR


#
# integration_test
#

# run benchmarks on deb
run_benchmarks-deb_x64:
  stage: integration_test
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deb_x64:latest
  allow_failure: true  # FIXME: this was set to true to temporarily unblock the pipeline
  tags: [ "runner:main", "size:large" ]
  script:
    - inv -e bench.aggregator
    # FIXME: in our docker image, non ascii characters printed by the benchmark
    # make invoke traceback. For now, the workaround is to call the benchmarks
    # manually
    - inv -e bench.build-dogstatsd

    - set +x # make sure we don't output the creds to the build log
    - DD_AGENT_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.dd_agent_api_key --with-decryption --query "Parameter.Value" --out text)

    # dogstatsd validation - not really benchmarking: gitlab isn't the right place to do this.
    - ./bin/benchmarks/dogstatsd -pps=20000 -dur 30 -ser 5 -branch $DD_REPO_BRANCH_NAME -api-key $DD_AGENT_API_KEY
  artifacts:
    expire_in: 2 weeks
    paths:
      - benchmarks

# run integration tests on the test image for deb-x64
run_integration_tests_deb-x64:
  stage: integration_test
  allow_failure: true  # FIXME when the root-user related issues are fixed on gitlab
  tags:
    - container-builder
  before_script:
    # disable global before_script
    - pwd
  script:
    - docker run --rm --user root --pid=host -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -v $(pwd):$SRC_PATH --workdir $SRC_PATH -e CI_PIPELINE_ID=$CI_PIPELINE_ID -e CI_COMMIT_SHA=$CI_COMMIT_SHA 727006795293.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders:deb_test_x64 inv integration-tests --install-deps

# check the size of the static dogstatsd binary
run_dogstatsd_size_test:
  stage: integration_test
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deb_x64:latest
  tags: [ "runner:main", "size:large" ]
  dependencies:
    - build_dogstatsd_static-deb_x64 # Reuse artifact from build stage
  before_script:
    # Disable global before_script
    - mkdir -p $STATIC_BINARIES_DIR
    - ln dogstatsd $STATIC_BINARIES_DIR/dogstatsd
  script:
    - inv -e dogstatsd.size-test --skip-build

# run integration tests for deb-x64
run_docker_integration_tests_deb-x64:
  stage: integration_test
  allow_failure: true  # FIXME when the root-user related issues are fixed on gitlab
  dependencies:
    - build_dogstatsd_static-deb_x64 # Reuse artifact from build stage
  tags:
    - container-builder
  before_script:
    # Disable global before_script
    - mkdir --parent $STATIC_BINARIES_DIR
    - ln dogstatsd $STATIC_BINARIES_DIR/dogstatsd
  script:
    - docker run --rm --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):$(pwd) --workdir $(pwd) -e CI_PIPELINE_ID=$CI_PIPELINE_ID -e CI_COMMIT_SHA=$CI_COMMIT_SHA 727006795293.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders:deb_x64 inv docker.integration-tests --skip-build 2>&1


#
# package_build
#


# build the package for deb-x64
agent_deb-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deb_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - inv -e agent.omnibus-build --base-dir $AGENT_OMNIBUS_BASE_DIR
    - dpkg -c $AGENT_OMNIBUS_PACKAGE_DIR/*.deb
  cache:
    # cache per branch
    key: $CI_COMMIT_REF_NAME
    paths:
      - $AGENT_OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $AGENT_OMNIBUS_PACKAGE_DIR

# build the package for rpm-x64
agent_rpm-x64:
  stage: package_build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/rpm_x64:latest
  tags: [ "runner:main", "size:large" ]
  script:
    # Artifacts and cache must live within project directory but we run omnibus
    # from the GOPATH (see above). We then call `invoke` passing --base-dir,
    # pointing to a gitlab-friendly location.
    - set +x
    - RPM_GPG_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_private_key --with-decryption --query "Parameter.Value" --out text)
    - printf -- "$RPM_GPG_KEY" | gpg --import --batch
    - export RPM_SIGNING_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.rpm_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)
    - set -x
    - inv -e agent.omnibus-build --base-dir $AGENT_OMNIBUS_BASE_DIR
    - rpm -i $AGENT_OMNIBUS_PACKAGE_DIR/*.rpm
  cache:
    # cache per branch
    key: $CI_COMMIT_REF_NAME
    paths:
      - $AGENT_OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $AGENT_OMNIBUS_PACKAGE_DIR


#
# deploy
#


# deploy debian packages to apt staging repo
deploy_deb:
  stage: deploy
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deploy:latest
  before_script:
    - ls $AGENT_OMNIBUS_PACKAGE_DIR
  only:
    - master
  tags: [ "runner:main", "size:large" ]
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4

    - set +x # make sure we don't output the creds to the build log
    - APT_SIGNING_KEY_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_id --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART1=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part1 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_PART2=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_private_key_part2 --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_KEY_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_passphrase --with-decryption --query "Parameter.Value" --out text)

    - echo "$APT_SIGNING_KEY_ID"
    - printf -- "$APT_SIGNING_PRIVATE_KEY_PART1\n$APT_SIGNING_PRIVATE_KEY_PART2\n" | gpg --import --batch

    - APT_SIGNING_KEY_DEPRECATED_ID=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_deprecated_id --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_PRIVATE_KEY_DEPRECATED=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_deprecated --with-decryption --query "Parameter.Value" --out text)
    - APT_SIGNING_KEY_DEPRECATED_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.apt_signing_key_deprecated_passphrase --with-decryption --query "Parameter.Value" --out text)

    - echo "$APT_SIGNING_KEY_ID"
    - printf -- "$APT_SIGNING_PRIVATE_KEY_PART1\n$APT_SIGNING_PRIVATE_KEY_PART2\n" | gpg --import --batch
    - echo "$APT_SIGNING_KEY_DEPRECATED_ID"
    - printf -- "$APT_SIGNING_PRIVATE_KEY_DEPRECATED" | gpg --import --batch

    # FIXME: remove this once we move to the new apt repo on our staging and production environments
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c unstable -b $DEB_S3_BUCKET_DEPRECATED -a amd64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c unstable -b $DEB_S3_BUCKET_DEPRECATED -a x86_64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb


    # Check if it is in the pool, if it is, do not release the new one
    # FIXME: move this to a script in the build image
    - PACKAGE_VERSION=`ls $AGENT_OMNIBUS_PACKAGE_DIR/ | grep _amd64.deb | sed s/datadog-agent_// | sed s/_amd64.deb//`
    - if curl --output /dev/null --silent --head --fail -v "https://s3.amazonaws.com/apt.datad0g.com/pool/d/da/datadog-agent_${PACKAGE_VERSION}_amd64.deb"; then echo "datadog-agent_${PACKAGE_VERSION}_amd64.deb already exists in the APT pool, releasing this one instead of the latest build."; rm -f $AGENT_OMNIBUS_PACKAGE_DIR/datadog-agent_${PACKAGE_VERSION}_amd64.deb; curl -v -o $AGENT_OMNIBUS_PACKAGE_DIR "https://s3.amazonaws.com/apt.datad0g.com/pool/d/da/datadog-agent_${PACKAGE_VERSION}_${1}.deb"; fi;

    - echo "$APT_SIGNING_KEY_DEPRECATED_PASSPHRASE" | deb-s3 upload -c nightly -b $DEB_S3_BUCKET -a amd64 --sign=$APT_SIGNING_KEY_DEPRECATED_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb
    - echo "$APT_SIGNING_KEY_DEPRECATED_PASSPHRASE" | deb-s3 upload -c nightly -b $DEB_S3_BUCKET -a x86_64 --sign=$APT_SIGNING_KEY_DEPRECATED_ID --gpg_options="--passphrase-fd 0 --pinentry-mode loopback --batch --digest-algo SHA512" --preserve_versions --visibility public $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb

# deploy rpm packages to yum staging repo
deploy_rpm:
  stage: deploy
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/datadog-agent-builders/deploy:latest
  before_script:
    - ls $AGENT_OMNIBUS_PACKAGE_DIR
  only:
    - master
  tags: [ "runner:main", "size:large" ]
  script:
    - source /usr/local/rvm/scripts/rvm
    - rvm use 2.4
    - mkdir -p ./rpmrepo/x86_64/
    - aws s3 sync s3://$RPM_S3_BUCKET/nightly/ ./rpmrepo/
    - cp $AGENT_OMNIBUS_PACKAGE_DIR/*x86_64.rpm ./rpmrepo/x86_64/
    - createrepo --update -v --checksum sha ./rpmrepo/x86_64
    - aws s3 sync ./rpmrepo/ s3://$RPM_S3_BUCKET/beta/ --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732


# TODO: deploy and build SUSE packages
