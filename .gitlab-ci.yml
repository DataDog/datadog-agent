stages:
  - source_test
  - binary_build
  - integration_test
  - package_build
  - deploy

variables:
  DOCKER_REGISTRY: 727006795293.dkr.ecr.us-east-1.amazonaws.com
  SRC_PATH: /src/github.com/DataDog/datadog-agent
  DEB_X64: $DOCKER_REGISTRY/datadog-agent-builders:deb_x64
  DEB_X64_TEST: $DOCKER_REGISTRY/datadog-agent-builders:deb_test_x64
  RPM_X64: $DOCKER_REGISTRY/datadog-agent-builders:rpm_x64
  RPM_X64_TEST: $DOCKER_REGISTRY/datadog-agent-builders:rpm_test_x64
  DEPLOY: $DOCKER_REGISTRY/datadog-agent-builders:deploy # For now, just a renamed version of the image datadog/mars-jenkins-scripts
  AGENT_OMNIBUS_PACKAGE_DIR: $CI_PROJECT_DIR/.omnibus/pkg/
  STATIC_BINARIES_DIR: bin/static
  DEB_S3_BUCKET: apt-agent6.datad0g.com
  DD_REPO_BRANCH_NAME: $CI_COMMIT_REF_NAME

before_script:
  # We need to install go deps from within the GOPATH, which we set to / on builder images; that's because pointing
  # GOPATH to the project folder would be too complex (we'd need to replicate the `src/github/project` scheme).
  # So we copy the agent sources to / and bootstrap from there the vendor dependencies before running any job.
  - rsync -azr --delete ./ $SRC_PATH
  - cd $SRC_PATH
  - inv deps


#
# source_test
#


# run tests for deb-x64
run_tests_deb-x64:
  stage: source_test
  image: $DEB_X64
  tags:
    - docker
  script:
    - inv test --race

# run tests for rpm-x64
run_test_rpm-x64:
  stage: source_test
  image: $RPM_X64
  tags:
    - docker
  script:
    - inv test --race


#
# binary_build
#


# build dogstatsd static for deb-x64
build_dogstatsd_static-deb_x64:
  stage: binary_build
  image: $DEB_X64
  tags:
    - docker
  script:
    - inv dogstatsd.build --static
    - cp $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd.bin $CI_PROJECT_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - dogstatsd.bin

# build dogstatsd static for rpm-x64
build_dogstatsd_static-rpm_x64:
  stage: binary_build
  image: $RPM_X64
  tags:
    - docker
  script:
    - inv dogstatsd.build --static
    - cp $SRC_PATH/$STATIC_BINARIES_DIR/dogstatsd.bin $CI_PROJECT_DIR


#
# integration_test
#

# run benchmarks on deb
run_benchmarks-deb_x64:
  stage: integration_test
  image: $DEB_X64
  tags:
    - docker
  script:
    - inv bench.aggregator
    - inv bench.dogstastd
  artifacts:
    expire_in: 2 weeks
    paths:
      - benchmarks

# run integration tests on the test image for deb-x64
run_integration_tests_deb-x64:
  stage: integration_test
  tags:
    - container-builder
  before_script:
    # disable global before_script
    - pwd
  script:
    - docker run --rm --user root --pid=host -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -v $(pwd):$SRC_PATH --workdir $SRC_PATH -e CI_PIPELINE_ID=$CI_PIPELINE_ID -e CI_COMMIT_SHA=$CI_COMMIT_SHA $DEB_X64_TEST inv integration-tests --install-deps

# check the size of the static dogstatsd binary
run_dogstatsd_size_test:
  stage: integration_test
  image: $DEB_X64
  tags:
    - docker
  dependencies:
    - build_dogstatsd_static-deb_x64 # Reuse artifact from build stage
  before_script:
    # Disable global before_script
    - mkdir -p $STATIC_BINARIES_DIR
    - ln dogstatsd.bin $STATIC_BINARIES_DIR/dogstatsd.bin
  script:
    - inv dogstatsd.size-test --skip-build

# run integration tests for deb-x64
run_docker_integration_tests_deb-x64:
  stage: integration_test
  dependencies:
    - build_dogstatsd_static-deb_x64 # Reuse artifact from build stage
  tags:
    - container-builder
  before_script:
    # Disable global before_script
    - mkdir --parent $STATIC_BINARIES_DIR
    - ln dogstatsd.bin $STATIC_BINARIES_DIR/dogstatsd.bin
  script:
    - docker run --rm --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):$(pwd) --workdir $(pwd) -e CI_PIPELINE_ID=$CI_PIPELINE_ID -e CI_COMMIT_SHA=$CI_COMMIT_SHA $DEB_X64 inv docker.integration-tests --skip-build 2>&1


#
# package_build
#


# build the package for deb-x64
agent_deb-x64:
  stage: package_build
  image: $DEB_X64
  tags:
    - docker
  variables:
    # Artifacts and cache must live within project directory but we run omnibus from the GOPATH (see above).
    # We then instrument `rake` to invoke `omnibus` with custom parameter, pointing to a gitlab-friendly location.
    AGENT_OMNIBUS_BASE_DIR: $CI_PROJECT_DIR/.omnibus/var/
    # Uncomment the following to see debug logs from omnibus, it defaults to info
    # AGENT_OMNIBUS_LOG_LEVEL: debug
  script:
    - inv agent.omnibus-build
    - dpkg -c $AGENT_OMNIBUS_PACKAGE_DIR/*.deb
  cache:
    # cache per branch
    key: $CI_COMMIT_REF_NAME
    paths:
      - $AGENT_OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $AGENT_OMNIBUS_PACKAGE_DIR

# build the package for rpm-x64
agent_rpm-x64:
  stage: package_build
  image: $RPM_X64
  allow_failure: true  # FIXME: when we start deploying the rpm package
  tags:
    - docker
  variables:
    # Artifacts and cache must live within project directory but we run omnibus from the GOPATH (see above).
    # We then instrument `rake` to invoke `omnibus` with custom parameter, pointing to a gitlab-friendly location.
    AGENT_OMNIBUS_BASE_DIR: $CI_PROJECT_DIR/.omnibus/var/
    # Uncomment the following to see debug logs from omnibus, it defaults to info
    # AGENT_OMNIBUS_LOG_LEVEL: debug
  script:
    - inv agent.omnibus-build
    - rpm -i $AGENT_OMNIBUS_PACKAGE_DIR/*.rpm
  cache:
    # cache per branch
    key: $CI_COMMIT_REF_NAME
    paths:
      - $AGENT_OMNIBUS_BASE_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - $AGENT_OMNIBUS_PACKAGE_DIR


#
# deploy
#


# deploy debian packages to apt staging repo
deploy_deb:
  stage: deploy
  image: $DEPLOY
  before_script:
    - ls $AGENT_OMNIBUS_PACKAGE_DIR
  only:
    - master
  tags:
    - docker
  script:
    - source /home/jenkins/.rvm/scripts/rvm
    - rvm use 2.2.2@circleci
    - echo "$APT_SIGNING_KEY_ID"
    - echo "$APT_SIGNING_PRIVATE_KEY" | gpg --import
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c unstable -b $DEB_S3_BUCKET -a amd64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --no-tty --digest-algo SHA512" --preserve_versions $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb
    - echo "$APT_SIGNING_KEY_PASSPHRASE" | deb-s3 upload -c unstable -b $DEB_S3_BUCKET -a x86_64 --sign=$APT_SIGNING_KEY_ID --gpg_options="--passphrase-fd 0 --no-tty --digest-algo SHA512" --preserve_versions $AGENT_OMNIBUS_PACKAGE_DIR/*amd64.deb

# TODO: deploy rpm packages
