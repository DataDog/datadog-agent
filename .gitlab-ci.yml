image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb_20190429

stages:
- prepare
- build_and_test
- pre_release
- acceptance
- release

variables:
  STS_AWS_RELEASE_BUCKET: stackstate-agent-2
  STS_AWS_TEST_BUCKET: stackstate-agent-2-test
  STS_AWS_RELEASE_BUCKET_YUM: stackstate-agent-2-rpm
  STS_AWS_TEST_BUCKET_YUM: stackstate-agent-2-rpm-test
  STS_AWS_RELEASE_BUCKET_WIN: stackstate-agent-2
  STS_AWS_TEST_BUCKET_WIN: stackstate-agent-2-test
  STS_DOCKER_RELEASE_REPO: stackstate-agent-2
  STS_DOCKER_TEST_REPO: stackstate-agent-2-test
  STS_DOCKER_RELEASE_REPO_TRACE: stackstate-trace-agent
  STS_DOCKER_TEST_REPO_TRACE: stackstate-trace-agent-test
  STS_DOCKER_RELEASE_REPO_CLUSTER: stackstate-cluster-agent
  STS_DOCKER_TEST_REPO_CLUSTER: stackstate-cluster-agent-test

before_script:
 - mkdir -p /go/src/github.com/StackVista
 - ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
   # Either we already have a venv, or we still need to make it (as part of get_deps.sh)
 - source .gitlab-scripts/setup_env.sh

clear_deps_deb_cache:
  stage: prepare
  before_script: []
  cache:
    policy: push
    key: "deps-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_rpm_cache:
  stage: prepare
  before_script: []
  cache:
    policy: push
    key: "deps-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_win_cache:
  stage: prepare
  before_script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
  cache:
    policy: push
    key: "deps-win-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - "if exist %WIN_CI_PROJECT_DIR%\\vendor rd /s/q %WIN_CI_PROJECT_DIR%\\vendor"
    - "if exist %WIN_CI_PROJECT_DIR%\\venv rd /s/q %WIN_CI_PROJECT_DIR%\\venv"
    - "if exist C:\\opt\\stackstate-agent rd /s/q C:\\opt\\stackstate-agent"
  tags:
    - agent_windows_6

deps_deb:
  stage: prepare
  cache:
    key: "deps-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  script:
    - pip install -r requirements.txt
    - inv deps
    - inv version -u > version.txt
  artifacts:
    paths:
      - $CI_PROJECT_DIR/vendor
      - $CI_PROJECT_DIR/venv
      - $CI_PROJECT_DIR/version.txt
    expire_in: 1 week

deps_rpm:
  stage: prepare
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6
  cache:
    key: "deps-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  script:
    - pip install -r requirements.txt
    - inv deps
    - inv version -u > version.txt
  artifacts:
    paths:
      - $CI_PROJECT_DIR/vendor
      - $CI_PROJECT_DIR/venv
      - $CI_PROJECT_DIR/version.txt
    expire_in: 1 week

deps_win:
  stage: prepare
  before_script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
  cache:
    key: "deps-win-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  script:
    - call .gitlab-scripts/windows_build_env.cmd
    - call .gitlab-scripts/windows_deps.cmd
    - inv version -u > version.txt
  artifacts:
    paths:
      - "vendor"
      - "venv"
      - "version.txt"
    expire_in: 1 week
  tags:
    - agent_windows_6

unit_tests:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    # We run inv deps again because /go/bin is not cached and we need binaries like golint, misspell
    - inv deps
    - inv -e agent.build --race --precompile-only
    #TODO: check why formatting rules differ from previous step
    - gofmt -l -w -s ./pkg ./cmd

    - inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --build-exclude clusterchecks,kubelet
  tags:
    - sts-aws

integration_tests:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e integration-tests --race --remote-docker
  tags:
    - sts-aws

filename_linting:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e lint-filenames

docker_integration_tests:
  stage: build_and_test
  needs:
    - deps_deb
  variables:
      DOCKER_DRIVER: overlay
      DOCKER_HOST: tcp://docker:2375
      DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  script:
    - inv -e docker.integration-tests
  tags:
    - sts-k8s-m-runner

build_binaries:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e dogstatsd.build --static
    - inv -e agent.build

build_puppy:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e agent.build --puppy
    - ./bin/agent/agent -c ./bin/agent/dist check cpu

build_cluster_agent:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e cluster-agent.build
    - inv -e version
  artifacts:
    paths:
      - $CI_PROJECT_DIR/bin/stackstate-cluster-agent
      - $CI_PROJECT_DIR/Dockerfiles/cluster-agent/stackstate-cluster.yaml
      - $CI_PROJECT_DIR/version.txt

clear_build_deb_cache:
  stage: build_and_test
  cache:
    policy: push
    key: "build-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*

clear_build_rpm_cache:
  stage: build_and_test
  cache:
    policy: push
    key: "build-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*


build_deb:
  stage: build_and_test
  needs:
    - deps_deb
  tags:
    - sts-k8s-xl-no-docker-runner
  cache:
    key: "build-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
  - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

  - inv version
  - cat version.txt || true
  - source ./.gitlab-scripts/setup_artifactory.sh

  - inv -e agent.omnibus-build --base-dir /omnibus --skip-sign

    # Prepare outputs
  - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles && mkdir -p $CI_PROJECT_DIR/outcomes/binary
  - cp -r /omnibus/pkg $CI_PROJECT_DIR/outcomes
  - cp -r /go/src/github.com/StackVista/stackstate-agent/Dockerfiles $CI_PROJECT_DIR/outcomes
  - cp -r /opt/stackstate-agent/embedded/bin/trace-agent  $CI_PROJECT_DIR/outcomes/binary/

    # Prepare cache
    # Drop packages for cache
  - rm -rf /omnibus/pkg
    # Drop agent for cache (will be resynced anyway)
  - rm -rf /omnibus/src/datadog-agent
    # Drop symlink because it will fail the build when coming from a cache
  - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
  - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
        - $CI_PROJECT_DIR/outcomes/pkg/*.deb
        - $CI_PROJECT_DIR/outcomes/pkg/*.json
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
        - $CI_PROJECT_DIR/version.txt
        - $CI_PROJECT_DIR/outcomes/binary/trace-agent
    expire_in: 1 week

build_rpm:
  stage: build_and_test
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_20190429
  needs:
    - deps_rpm
  tags:
    - sts-k8s-xl-no-docker-runner
  cache:
    key: "build-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
  - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

  - inv version
  - cat version.txt || true
  - source ./.gitlab-scripts/setup_artifactory.sh

  - inv -e agent.omnibus-build --base-dir /omnibus --skip-sign

    # Prepare outputs
  - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles
  - cp -r /omnibus/pkg $CI_PROJECT_DIR/outcomes
  - cp -r /go/src/github.com/StackVista/stackstate-agent/Dockerfiles $CI_PROJECT_DIR/outcomes

    # Prepare cache
    # Drop packages for cache
  - rm -rf /omnibus/pkg
    # Drop agent for cache (will be resynced anyway)
  - rm -rf /omnibus/src/datadog-agent
    # Drop symlink because it will fail the build when coming from a cache
  - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
  - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
        - $CI_PROJECT_DIR/outcomes/pkg/*.rpm
        - $CI_PROJECT_DIR/outcomes/pkg/*.json
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
        - $CI_PROJECT_DIR/version.txt
    expire_in: 1 week

build_win:
  stage: build_and_test
  needs:
    - deps_win
  before_script: []
  script:
    - call .gitlab-scripts/setup_artifactory.cmd
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - type %APPDATA%\pip\pip.ini
    - call .gitlab-scripts/windows_build_env.cmd
# debug
#    - call .gitlab-scripts/windows_deps.cmd
#    - inv version -u > version.txt
#    - whoami
# /debug
    - call .gitlab-scripts/windows_build.cmd
  after_script:
    - copy %GOPATH%\src\github.com\StackVista\stackstate-agent\omnibus\pkg\*.msi
  artifacts:
    expire_in: 2 weeks
    paths:
      - ./*.msi
      - "version.txt"
  tags:
    - agent_windows_6

test_deb_renaming:
  stage: pre_release
  needs:
    - build_deb
  before_script: []
  script:
    ./test/renaming/test_deb.sh $CI_PROJECT_DIR/outcomes/pkg/*.deb

test_rpm_renaming:
  stage: pre_release
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_20190429
  needs:
    - build_rpm
  before_script: []
  script:
    ./test/renaming/test_rpm.sh $CI_PROJECT_DIR/outcomes/pkg/*.rpm

pre_release_deb:
  stage: pre_release
  needs:
    - deps_deb
    - build_deb
  script:
    - source .gitlab-scripts/setup_env.sh
    - apt-get install -y apt-utils libtool debsigs
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_TEST_BUCKET
    - cd $CI_PROJECT_DIR && inv release.generate-install -t
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_TEST_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"

pre_release_win:
  stage: pre_release
  needs:
    - deps_win
    - build_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call %WORKON_HOME%\venv\Scripts\activate.bat
    - call ridk enable
    - set /P VERSION=< version.txt
    - copy stackstate-agent-%VERSION%-1-x86_64.msi stackstate-agent-latest-1-x86_64.msi
    - aws.exe s3 cp . s3://%STS_AWS_TEST_BUCKET_WIN%/windows/%CI_COMMIT_REF_NAME% --recursive --exclude "*" --include "*.msi" --acl public-read
    - cd %WIN_CI_PROJECT_DIR% && inv release.generate-install -t
    - cd %WIN_CI_PROJECT_DIR%/cmd/agent && aws -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_TEST_BUCKET_WIN']).object('install.ps1').upload_file('./install.ps1', acl:'public-read')"
  tags:
    - agent_windows_6

pre_release_rpm:
  stage: pre_release
#  image: docker.io/stackstate/stackstate-agent-runner-gitlab:rpm.latest
  needs:
    - build_rpm
  before_script: []
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_TEST_BUCKET_YUM

pre_release_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/pkg/*.deb ./Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO $CI_PROJECT_DIR/Dockerfiles/agent
  tags:
    - sts-k8s-m-runner

pre_release_trace_agent_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent
  tags:
    - sts-k8s-m-runner

pre_release_cluster_agent_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_cluster_agent
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - cp -r ./bin/stackstate-cluster-agent/* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent
  tags:
    - sts-k8s-m-runner


.molecule_base: &molecule_base
  image: python:2.7.17
  before_script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - export LC_CTYPE=en_US.UTF-8
    - export LANG=en_US.UTF-8

molecule_tests_vms:
  stage: acceptance
  needs:
    - pre_release_deb
    - pre_release_rpm
    - pre_release_win
  dependencies: []
  <<: *molecule_base
  script:
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s vms
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/*.log
    expire_in: 1 week

molecule_tests_compose:
  stage: acceptance
  needs:
    - pre_release_image
  dependencies: []
  before_script: []
  <<: *molecule_base
  script:
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s compose
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/*.log
    expire_in: 1 week

molecule_tests_local_install:
  stage: acceptance
  needs:
    - pre_release_deb
    - pre_release_rpm
  dependencies: []
  <<: *molecule_base
  script:
   - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s localinstall
  only:
    - master
    - tags
    - STAC-10025-local-install-bis

molecule_tests_kubernetes:
  stage: acceptance
  needs:
    - pre_release_cluster_agent_image
    - pre_release_image
  dependencies: []
  <<: *molecule_base
  script:
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s kubernetes
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/*.log
    expire_in: 1 week

molecule_tests_secrets:
  stage: acceptance
  needs:
    - pre_release_deb
  dependencies: []
  <<: *molecule_base
  script:
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s secrets
  only:
    - master
    - tags
    - encrypted-secrets
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/*.log
    expire_in: 1 week

molecule_tests_integrations:
  stage: acceptance
  needs:
    - pre_release_image
  dependencies: []
  <<: *molecule_base
  script:
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s integrations
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/integrations/topic-*.json
    expire_in: 1 week

release_deb:
  stage: release
  dependencies:
    - deps_deb
    - build_deb
  script:
    - source .gitlab-scripts/setup_env.sh
    - apt-get install -y apt-utils libtool debsigs
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_RELEASE_BUCKET stable
    - cd $CI_PROJECT_DIR && inv release.generate-install
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_RELEASE_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"
  when: manual
  only:
    - tags
    - triggers

release_rpm:
  stage: release
  dependencies:
    - build_rpm
  before_script:
    - mkdir -p /go/src/github.com/StackVista
    - ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_RELEASE_BUCKET_YUM stable
  when: manual
  only:
    - tags
    - triggers

release_win:
  stage: release
  dependencies:
    - deps_win
    - build_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call %WORKON_HOME%\venv\Scripts\activate.bat
    - call ridk enable
    - set /P VERSION=< version.txt
    - copy stackstate-agent-%VERSION%-1-x86_64.msi stackstate-agent-latest-1-x86_64.msi
    - cd %WIN_CI_PROJECT_DIR% && inv release.generate-install
    - aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN%/windows/stable --recursive --exclude "*" --include "*.msi" --acl public-read
    - cd %WIN_CI_PROJECT_DIR%/cmd/agent && aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN% --recursive --exclude "*" --include "install.ps1" --acl public-read
  tags:
    - agent_windows_6
  when: manual
  only:
    - tags
    - triggers

release_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp ./outcomes/pkg/*.deb Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO $CI_PROJECT_DIR/Dockerfiles/agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - triggers
  tags:
    - sts-k8s-m-runner

release_trace_agent_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - trigger
  tags:
    - sts-k8s-m-runner

release_cluster_agent_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_cluster_agent
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09-dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp -r ./bin/stackstate-cluster-agent/* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - trigger
  tags:
    - sts-k8s-m-runner

