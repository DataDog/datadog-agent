image: stackstate/stackstate-agent-runner-circle:omnibus-cache

stages:
- prepare
- build_and_test
- package_test
- publish

before_script:
 - mkdir -p /go/src/github.com/StackVista
 - ln -s $CI_PROJECT_DIR  /go/src/github.com/StackVista/stackstate-agent
   # Either we already have a venv, or we still need to make it (as part of get_deps.sh)
 - source .gitlab-scripts/setup_env.sh

dependencies_clear_cache:
  stage: prepare
  cache:
    policy: push
    key: "agent-deps"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

deps:
  stage: prepare
  cache:
    key: "agent-deps"
    paths:
      - vendor
      - venv
  script:
    - pip install -r requirements.txt
    - inv deps
  artifacts:
    paths:
        - $CI_PROJECT_DIR/vendor
        - $CI_PROJECT_DIR/venv
    expire_in: 1 week

unit_tests:
  stage: build_and_test
  dependencies:
    - deps
  script:
    #We run another inv deps here to get the go dependencies
    - inv deps
    - inv -e agent.build --race --precompile-only
    - inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --build-exclude clusterchecks,kubeapiserver,kubelet

integration_tests:
  stage: build_and_test
  dependencies:
    - deps
  script:
    - inv  -e integration-tests --race --remote-docker
  tags:
    - sts-aws

filename_linting:
  stage: build_and_test
  dependencies:
    - deps
  script:
    - inv -e lint-filenames

docker_integration_tests:
  stage: build_and_test
  dependencies:
    - deps
  variables:
      DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - inv -e docker.integration-tests
  tags:
    - sts-aws

build_binaries:
  stage: build_and_test
  dependencies:
    - deps
  script:
    - inv -e dogstatsd.build --static
    - inv -e agent.build

build_puppy:
  stage: build_and_test
  dependencies:
    - deps
  script:
    - inv -e agent.build --puppy
    - ./bin/agent/agent -c ./bin/agent/dist check cpu

build_deb_clear_cache:
  stage: build_and_test
  cache:
    policy: push
    key: "agent-build_publish_deb"
    paths:
      - .omnibus
      - vendor
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*
    - rm -rf vendor

build_deb:
  stage: build_and_test
  cache:
    key: "agent-build_publish_deb"
    paths:
      - .omnibus
      - vendor
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
  - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

  - inv -e agent.omnibus-build --base-dir /omnibus --skip-sign --release-version=6.5.2

    # Prepare outputs
  - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles
  - cp -r  /omnibus/pkg $CI_PROJECT_DIR/outcomes
  - cp -r  /go/src/github.com/StackVista/stackstate-agent/Dockerfiles $CI_PROJECT_DIR/outcomes

    # Prepare cache
    # Drop packages for cache
  - rm -rf /omnibus/pkg
    # Drop agent for cache (will be resynced anyway)
  - rm -rf /omnibus/src/datadog-agent
    # Drop symlink because it will fail the build when coming from a cache
  - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
  - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
        - $CI_PROJECT_DIR/outcomes/pkg/*.deb
        - $CI_PROJECT_DIR/outcomes/pkg/*.json
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
    expire_in: 1 week

test_deb_renaming:
  stage: package_test
  dependencies:
    - build_deb
  script:
    ./test/renaming/test.sh $CI_PROJECT_DIR/outcomes/pkg/*.deb

publish_deb:
  stage: publish
  dependencies:
    - build_deb
  before_script:
    - apt-get install -y apt-utils libtool debsigs && apt-get install -y --only-upgrade libtool
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh
    - git status -s

publish_image:
  stage: publish
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - ./.gitlab-scripts/publish_image.sh ${CI_COMMIT_SHA:0:7} $CI_PROJECT_DIR/outcomes/pkg/*.deb

#docker_test:
#  stage: docker_test
#  image: docker:latest
#  variables:
#    DOCKER_DRIVER: overlay
#  services:
#  - docker:dind
#  before_script:
#  - printenv
#  - docker info
#  script:
#    - docker ps
