image: docker.io/stackstate/stackstate-agent-runner-gitlab:latest7

stages:
- prepare
- build_and_test
- pre_release
- acceptance
- release

variables: &globalvariables
  STS_AWS_RELEASE_BUCKET: stackstate-agent-2
  STS_AWS_TEST_BUCKET: stackstate-agent-2-test
  STS_AWS_RELEASE_BUCKET_YUM: stackstate-agent-2-rpm
  STS_AWS_TEST_BUCKET_YUM: stackstate-agent-2-rpm-test
  STS_AWS_RELEASE_BUCKET_WIN: stackstate-agent-2
  STS_AWS_TEST_BUCKET_WIN: stackstate-agent-2-test
  STS_DOCKER_RELEASE_REPO: stackstate-agent-2
  STS_DOCKER_TEST_REPO: stackstate-agent-2-test
  STS_DOCKER_RELEASE_REPO_TRACE: stackstate-trace-agent
  STS_DOCKER_TEST_REPO_TRACE: stackstate-trace-agent-test
  STS_DOCKER_RELEASE_REPO_CLUSTER: stackstate-cluster-agent
  STS_DOCKER_TEST_REPO_CLUSTER: stackstate-cluster-agent-test
  # The SRC_PATH is in the GOPATH of the builders which
  # currently is /go
  SRC_PATH: /go/src/github.com/StackVista/stackstate-agent
  # Directory in which we execute the omnibus build.
  # For an unknown reason, it does not go well with
  # a ruby dependency if we build directly into $CI_PROJECT_DIR/.omnibus
  OMNIBUS_BASE_DIR: /.omnibus
  # Directory in which we put the artifacts after the build
  # Must be in $CI_PROJECT_DIR
  OMNIBUS_PACKAGE_DIR: $CI_PROJECT_DIR/.omnibus/pkg/
  OMNIBUS_BASE_DIR_WIN: c:\omnibus-ruby #\$CI_RUNNER_ID
  OMNIBUS_BASE_DIR_WIN_OMNIBUS: c:/omnibus-ruby #/$CI_RUNNER_ID
  # Directory in which we execute the omnibus build for SUSE
  # as we want to separate the RPM built for this distro.
  BCC_VERSION: v0.12.0
  SYSTEM_PROBE_GO_VERSION: 1.13.11
  DATADOG_AGENT_EMBEDDED_PATH: /opt/datadog-agent/embedded
  ARCH: amd64
  VCINSTALLDIR: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community"


######################### pipeline bricks

.retrieve_linux_go_deps: &retrieve_linux_go_deps |
  echo "~~~~~> Trying to retrieve_linux_go_deps"
  ls *.tar.gz || true
  [ -e "go-bin.tar.gz" ] && mkdir -p $GOPATH/bin && tar xzf go-bin.tar.gz -C $GOPATH/bin
  [ -e "go-pkg.tar.gz" ] && mkdir -p $GOPATH/pkg && tar xzf go-pkg.tar.gz -C $GOPATH/pkg
  [ -e "vendor.tar.gz" ] && mkdir vendor && tar xzf vendor.tar.gz -C vendor
  rm -f go-bin.tar.gz go-pkg.tar.gz vendor.tar.gz || true
  echo "~~~~~> /Trying..."

.configure_centos_environment: &configure_centos_environment |
  . /root/.gimme/envs/go1.13.11.env
  . /root/miniconda3/etc/profile.d/conda.sh
  conda activate ddpy3
  mkdir -p /go/src/github.com/StackVista
  rm -rf /go/src/github.com/StackVista/stackstate-agent || true
  ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
  eval $(gimme)


.configure_debian_environment: &configure_debian_environment |
  . /root/miniconda3/etc/profile.d/conda.sh # TODO: check possibility to use bash from the start
  conda activate ddpy3
  mkdir -p /go/src/github.com/StackVista
  rm -rf /go/src/github.com/StackVista/stackstate-agent || true
  ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent

.configure_windows_ps1_environment: &configure_windows_ps1_environment |
  dir env:
  Import-Module C:\tools\miniconda3\shell\condabin\conda-hook.ps1
  conda activate ddpy3
  $current_dir=Get-Location
  cmd /c if exist %GOPATH%\src\github.com\StackVista\stackstate-agent rd /s/q %GOPATH%\src\github.com\StackVista\stackstate-agent
  New-Item -ItemType SymbolicLink -Path "c:\\gopath\\src\\github.com\\StackVista\\stackstate-agent" -Target $current_dir

.configure_windows_cmd_environment: &configure_windows_cmd_environment |
  c:\tools\miniconda3\condabin\activate
  conda activate ddpy3
######################### /pipeline bricks


before_script:
 - *configure_debian_environment
 - *retrieve_linux_go_deps
clear_deps_deb_cache:
  stage: prepare
  before_script: []
  cache:
    policy: push
    key: "deps-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_rpm_cache:
  stage: prepare
  before_script: []
  cache:
    policy: push
    key: "deps-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - rm -rf $CI_PROJECT_DIR/venv
    - rm -rf $CI_PROJECT_DIR/vendor

clear_deps_win_cache:
  stage: prepare
  before_script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
  cache:
    policy: push
    key: "deps-win-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  when: manual
  script:
    - "if exist %WIN_CI_PROJECT_DIR%\\vendor rd /s/q %WIN_CI_PROJECT_DIR%\\vendor"
    - "if exist %WIN_CI_PROJECT_DIR%\\venv rd /s/q %WIN_CI_PROJECT_DIR%\\venv"
    - "if exist C:\\opt\\stackstate-agent rd /s/q C:\\opt\\stackstate-agent"
  tags:
    - sts_windows

deps_deb:
  stage: prepare
  cache:
    key: "deps-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
      - venv
  script:
    - conda activate ddpy3
    - inv -e deps --verbose --dep-vendor-only
    - inv version -u > version.txt
    - cd $GOPATH/pkg && tar czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $GOPATH/bin && tar czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $CI_PROJECT_DIR/vendor && tar czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
#      - $CI_PROJECT_DIR/vendor
#      - $CI_PROJECT_DIR/venv
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week

deps_rpm:
  stage: prepare
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_latest_v7
  cache:
    key: "deps-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
  before_script:
    - *configure_centos_environment
  script:
    - inv -e deps --verbose --dep-vendor-only
    - inv version -u > version.txt
    - cd $GOPATH/pkg && tar czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $GOPATH/bin && tar czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $CI_PROJECT_DIR/vendor && tar czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week

deps_win:
  stage: prepare
  before_script:
    - *configure_windows_ps1_environment
  cache:
    key: "deps-win-$CI_COMMIT_REF_SLUG"
    paths:
      - vendor
  script:
    - inv deps
    - inv version -u > version.txt
    - cd $Env:GOPATH/pkg ; tar --force-local -czf $CI_PROJECT_DIR/go-pkg.tar.gz .
    - cd $Env:GOPATH/bin ; tar --force-local -czf $CI_PROJECT_DIR/go-bin.tar.gz .
    - cd $Env:CI_PROJECT_DIR/vendor ; tar --force-local -czf $CI_PROJECT_DIR/vendor.tar.gz .
  artifacts:
    paths:
      - $CI_PROJECT_DIR/version.txt
      - $CI_PROJECT_DIR/go-pkg.tar.gz
      - $CI_PROJECT_DIR/go-bin.tar.gz
      - $CI_PROJECT_DIR/vendor.tar.gz
    expire_in: 1 week
  tags:
    - windows_agent7_ps1 #sts_windows

unit_tests:
  stage: build_and_test
#  variables: TODO: fix
#    PYTHON_RUNTIMES: '2'
#    INTEGRATIONS_VERSION: $RELEASE_VERSION_6
#    CONDA_ENV: ddpy2
  needs:
    - deps_deb
  script:
    # We run inv deps again because /go/bin is not cached and we need binaries like golint, misspell
    - inv deps
    - inv -e agent.build --race --precompile-only --major-version 2
    #TODO: check why formatting rules differ from previous step
    - gofmt -l -w -s ./pkg ./cmd
# TODO: --python-runtimes "$PYTHON_RUNTIMES"
    - inv -e test --coverage --race --profile --fail-on-fmt --cpus 4 --major-version 2
  tags:
    - sts-aws

# TODO:  Not observed in v7 in a direct form ?
#integration_tests:
#  stage: build_and_test
#  needs:
#    - deps_deb
#  script:
#    - inv -e integration-tests --race --remote-docker
#  tags:
#    - sts-aws

filename_linting:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e lint-filenames

# TODO:  Not observed in v7 in a direct form ?
#docker_integration_tests:
#  stage: build_and_test
#  needs:
#    - deps_deb
#  variables:
#      DOCKER_DRIVER: overlay
#  services:
#    - docker:dind
#  script:
#    - inv -e docker.integration-tests
#  tags:
#    - sts-aws

build_binaries:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e dogstatsd.build --static --major-version 2
    - inv -e rtloader.make
    - inv -e rtloader.install
    - cd $SRC_PATH
    - inv -e agent.build --major-version 2
  tags:
    - sts-aws

#[VS] todo: obosolete in agent7?
#build_puppy:
#  stage: build_and_test
#  needs:
#    - deps_deb
#  script:
#    - inv -e agent.build --puppy
#    - ./bin/agent/agent -c ./bin/agent/dist check cpu

build_cluster_agent:
  stage: build_and_test
  needs:
    - deps_deb
  script:
    - inv -e cluster-agent.build
    - inv -e version
    - ls -la $CI_PROJECT_DIR/bin/
  artifacts:
    paths:
      - $CI_PROJECT_DIR/bin/stackstate-cluster-agent
      - $CI_PROJECT_DIR/Dockerfiles/cluster-agent/stackstate-cluster.yaml
      - $CI_PROJECT_DIR/version.txt

clear_build_deb_cache:
  stage: build_and_test
  cache:
    policy: push
    key: "build-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*

clear_build_rpm_cache:
  stage: build_and_test
  cache:
    policy: push
    key: "build-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  when: manual
  script:
    - mkdir -p .omnibus
    - rm -rf .omnibus/*


build_deb:
  stage: build_and_test
  needs:
    - deps_deb
  tags:
    # We put the deb build on sts-aws because it runs long and we do want to have it run fast.
    # It also cuts into our pipeline quotum
    - sts-aws
    #- slavko_shell
  cache:
    key: "build-deb-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
  - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

  - inv version
  - cat version.txt || true
  - source ./.gitlab-scripts/setup_artifactory.sh

  - inv -e agent.omnibus-build --base-dir $OMNIBUS_BASE_DIR --skip-deps --skip-sign --major-version 2

    # Prepare outputs
  - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles && mkdir -p $CI_PROJECT_DIR/outcomes/binary
  - cp -r $OMNIBUS_BASE_DIR/pkg $CI_PROJECT_DIR/outcomes
  - cp -r $CI_PROJECT_DIR/Dockerfiles $CI_PROJECT_DIR/outcomes
  - cp -r /opt/stackstate-agent/embedded/bin/trace-agent  $CI_PROJECT_DIR/outcomes/binary/

  - ls -la $CI_PROJECT_DIR/outcomes/Dockerfiles

    # Prepare cache
    # Drop packages for cache
  - rm -rf /omnibus/pkg
    # Drop agent for cache (will be resynced anyway)
  - rm -rf /omnibus/src/datadog-agent
    # Drop symlink because it will fail the build when coming from a cache
  - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
#  - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
        - $CI_PROJECT_DIR/outcomes/pkg/*.deb
        - $CI_PROJECT_DIR/outcomes/pkg/*.json
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
        - $CI_PROJECT_DIR/version.txt
        - $CI_PROJECT_DIR/outcomes/binary/trace-agent
    expire_in: 1 week

build_rpm:
  stage: build_and_test
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_latest_v7
  needs:
    - deps_rpm
  tags:
    # We put the deb build on sts-aws because it runs long and we do want to have it run fast.
    # It also cuts into our pipeline quotum
    - sts-aws
  cache:
    key: "build-rpm-$CI_COMMIT_REF_SLUG"
    paths:
      - .omnibus
  before_script:
    - *configure_centos_environment
    - *retrieve_linux_go_deps
  script:
    # We move .omnibus out of the CI root because this seems to cause issues with git
    # cloning in omnibus and operations on datadog-agent
  - mv $CI_PROJECT_DIR/.omnibus /omnibus || mkdir -p /omnibus

  - inv version
  - cat version.txt || true
  - source ./.gitlab-scripts/setup_artifactory.sh

# TODO:  --python-runtimes "$PYTHON_RUNTIMES" --system-probe-bin=/tmp/system-probe --libbcc-tarball=/tmp/libbcc.tar.xz
  - inv -e agent.omnibus-build --major-version 2 --base-dir $OMNIBUS_BASE_DIR --skip-deps
#  - find $OMNIBUS_BASE_DIR/pkg -type f -name '*.rpm' ! -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'
#  - find $OMNIBUS_BASE_DIR/pkg -type f -name '*dbg*.rpm' -print0 | xargs -0 -I '{}' rpm -i '{}'

    # Prepare outputs
  - mkdir -p $CI_PROJECT_DIR/outcomes/pkg && mkdir -p $CI_PROJECT_DIR/outcomes/dockerfiles
  - cp -r $OMNIBUS_BASE_DIR/pkg $CI_PROJECT_DIR/outcomes
  - cp -r $CI_PROJECT_DIR/Dockerfiles $CI_PROJECT_DIR/outcomes

  - ls -la $CI_PROJECT_DIR/outcomes/Dockerfiles

#    # Prepare cache
#    # Drop packages for cache
  - rm -rf /omnibus/pkg
#    # Drop agent for cache (will be resynced anyway)
  - rm -rf /omnibus/src/datadog-agent
#    # Drop symlink because it will fail the build when coming from a cache
  - rm /omnibus/src/datadog-agent/src/github.com/StackVista/stackstate-agent/vendor/github.com/coreos/etcd/cmd/etcd || echo "Not found"
  - mv /omnibus $CI_PROJECT_DIR/.omnibus
  artifacts:
    paths:
        - $CI_PROJECT_DIR/outcomes/pkg/*.rpm
        - $CI_PROJECT_DIR/outcomes/pkg/*.json
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/cluster-agent
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/dogstatsd
        - $CI_PROJECT_DIR/outcomes/Dockerfiles/manifests
        - $CI_PROJECT_DIR/version.txt
    expire_in: 1 week

old_win:
  stage: build_and_test
  needs:
    - deps_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call .gitlab-scripts/windows_build_env.cmd
    - call ridk enable
    - call ridk version
    - echo "=====Environment vars:"
    - call bundle config
    - call bundle version
    - call ruby --version
    - call gem env
    - cd omnibus && call bundle install
    - where omnibus
    - call omnibus --version
    - where omnibus.bat
  tags:
    - sts_windows

build_win:
  stage: build_and_test
  variables:
    <<: *globalvariables
    OMNIBUS_BASE_DIR: c:\omnibus-ruby
  needs:
    - deps_win
  before_script:
    - $Env:Path
    - Write-Output "1 ==================================================================="
    - *configure_windows_ps1_environment
  script:
    - Import-VisualStudioVars 2017 -Architecture amd64
# pscx func ^^^
    - ridk enable
    - $Env:Path
    - Write-Output "2 ==================================================================="
# todo: unpack deps here? --skip-deps
    - inv -e agent.omnibus-build --skip-sign --log-level debug --major-version 2
#    - call .gitlab-scripts/setup_artifactory.cmd
#    - set WIN_CI_PROJECT_DIR=%CD%
#    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
#    - type %APPDATA%\pip\pip.ini
#    - call .gitlab-scripts/windows_build_env.cmd
# debug
#    - call .gitlab-scripts/windows_deps.cmd
#    - inv version -u > version.txt
#    - whoami
# /debug
#    - call .gitlab-scripts/windows_build.cmd
  after_script:
    - cmd.exe /c "copy %GOPATH%\src\github.com\StackVista\stackstate-agent\omnibus\pkg\*.msi"
  artifacts:
    expire_in: 2 weeks
    paths:
      - ./*.msi
      - "version.txt"
  tags:
    - windows_agent7_ps1

test_deb_renaming:
  stage: pre_release
  needs:
    - build_deb
  before_script: []
  script:
  # test v2 family
    ./test/renaming/test_deb.sh $CI_PROJECT_DIR/outcomes/pkg/stackstate-agent_2*.deb


test_rpm_renaming:
  stage: pre_release
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:centos6_20190429
  needs:
    - build_rpm
  before_script: []
  script:
    # test v2 family
    ./test/renaming/test_rpm.sh $CI_PROJECT_DIR/outcomes/pkg/stackstate-agent-2*.rpm

pre_release_deb:
  stage: pre_release
  needs:
    - deps_deb
    - build_deb
  script:
# //TODO: move to image
    - apt-get install -y apt-utils libtool debsigs
    - ls -la /usr/local/rvm/gems/ruby-2.4.2/bin/
    - source /usr/local/rvm/scripts/rvm && gem install deb-s3
# //
    - source /usr/local/rvm/scripts/rvm
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_TEST_BUCKET
    - cd $CI_PROJECT_DIR && inv release.generate-install -t
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_TEST_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"

pre_release_win:
  stage: pre_release
  needs:
    - deps_win
    - build_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call %WORKON_HOME%\venv\Scripts\activate.bat
    - call ridk enable
    - set /P VERSION=< version.txt
    - copy stackstate-agent-%VERSION%-1-x86_64.msi stackstate-agent-latest-1-x86_64.msi
    - aws.exe s3 cp . s3://%STS_AWS_TEST_BUCKET_WIN%/windows/%CI_COMMIT_REF_NAME% --recursive --exclude "*" --include "*.msi" --acl public-read
    - cd %WIN_CI_PROJECT_DIR% && inv release.generate-install -t
    - cd %WIN_CI_PROJECT_DIR%/cmd/agent && aws -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_TEST_BUCKET_WIN']).object('install.ps1').upload_file('./install.ps1', acl:'public-read')"
  tags:
    - sts_windows

pre_release_rpm:
  stage: pre_release
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - build_rpm
  before_script: []
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_TEST_BUCKET_YUM

pre_release_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/pkg/stackstate-agent_2*.deb ./Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO $CI_PROJECT_DIR/Dockerfiles/agent

pre_release_trace_agent_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent

pre_release_cluster_agent_image:
  stage: pre_release
  image: docker:18.06.0
  needs:
    - build_cluster_agent
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - cp -r ./bin/stackstate-cluster-agent* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $CI_COMMIT_REF_NAME $STS_DOCKER_TEST_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent

molecule_tests_vms:
  stage: acceptance
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - pre_release_deb
    - pre_release_rpm
    - pre_release_win
  dependencies: []
  before_script: []
  script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s vms
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/vms/*.log
    expire_in: 1 week

molecule_tests_compose:
  stage: acceptance
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - pre_release_image
  dependencies: []
  before_script: []
  script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s compose
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/compose/*.log
    expire_in: 1 week

molecule_tests_local_install:
  stage: acceptance
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - pre_release_deb
    - pre_release_rpm
  dependencies: []
  before_script: []
  script:
   - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
   - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
   - export MOLECULE_RUN_ID=${CI_JOB_ID}
   - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s localinstall
  only:
    - master
    - tags
    - STAC-5977-local-install

molecule_tests_kubernetes:
  stage: acceptance
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - pre_release_cluster_agent_image
    - pre_release_image
  dependencies: []
  before_script: []
  script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s kubernetes
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/topic-*.json
      - $CI_PROJECT_DIR/test/molecule-role/molecule/kubernetes/*.log
    expire_in: 1 week

molecule_tests_secrets:
  stage: acceptance
  image: docker.io/stackstate/stackstate-agent-runner-gitlab:deb-rpmpublisher
  needs:
    - pre_release_deb
  dependencies: []
  before_script: []
  script:
    - export AWS_ACCESS_KEY_ID=${MOLECULE_AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${MOLECULE_AWS_SECRET_ACCESS_KEY}
    - export MOLECULE_RUN_ID=${CI_JOB_ID}
    - cd $CI_PROJECT_DIR/test && ./molecule.sh test -s secrets
  only:
    - master
    - tags
    - encrypted-secrets
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/test/molecule-role/molecule/secrets/*.log
    expire_in: 1 week

release_deb:
  stage: release
  dependencies:
    - deps_deb
    - build_deb
  script:
    - source .gitlab-scripts/setup_env.sh
    - apt-get install -y apt-utils libtool debsigs
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_debian_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package.sh $STS_AWS_RELEASE_BUCKET stable
    - cd $CI_PROJECT_DIR && inv release.generate-install
    - cd $CI_PROJECT_DIR/cmd/agent && aws.rb -e "Aws::S3::Resource.new.bucket(ENV['STS_AWS_RELEASE_BUCKET']).object('install.sh').upload_file('./install.sh', acl:'public-read')"
  when: manual
  only:
    - tags
    - triggers

release_rpm:
  stage: release
  dependencies:
    - build_rpm
  before_script:
    - mkdir -p /go/src/github.com/StackVista
    - ln -s $CI_PROJECT_DIR /go/src/github.com/StackVista/stackstate-agent
  script:
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./sign_rpm_package.sh
    - cd $CI_PROJECT_DIR/omnibus/package-scripts && ./publish_package_rpm.sh $STS_AWS_RELEASE_BUCKET_YUM stable
  when: manual
  only:
    - tags
    - triggers

release_win:
  stage: release
  dependencies:
    - deps_win
    - build_win
  before_script: []
  script:
    - set WIN_CI_PROJECT_DIR=%CD%
    - set WORKON_HOME=%WIN_CI_PROJECT_DIR%
    - call %WORKON_HOME%\venv\Scripts\activate.bat
    - call ridk enable
    - set /P VERSION=< version.txt
    - copy stackstate-agent-%VERSION%-1-x86_64.msi stackstate-agent-latest-1-x86_64.msi
    - cd %WIN_CI_PROJECT_DIR% && inv release.generate-install
    - aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN%/windows/stable --recursive --exclude "*" --include "*.msi" --acl public-read
    - cd %WIN_CI_PROJECT_DIR%/cmd/agent && aws.exe s3 cp . s3://%STS_AWS_RELEASE_BUCKET_WIN% --recursive --exclude "*" --include "install.ps1" --acl public-read
  tags:
    - sts_windows
  when: manual
  only:
    - tags
    - triggers

release_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp ./outcomes/pkg/stackstate-agent_2*.deb Dockerfiles/agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO $CI_PROJECT_DIR/Dockerfiles/agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - triggers

release_trace_agent_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_deb
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp ./outcomes/binary/trace-agent Dockerfiles/trace-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_TRACE $CI_PROJECT_DIR/Dockerfiles/trace-agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - trigger

release_cluster_agent_image:
  stage: release
  image: docker:18.06.0
  dependencies:
    - build_cluster_agent
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script: []
  script:
    - cd $CI_PROJECT_DIR
    - export VERSION=`cat version.txt`
    - export PUSH_LATEST=true
    - cp -r ./bin/stackstate-cluster-agent/* ./Dockerfiles/cluster-agent
    - ./omnibus/package-scripts/publish_image.sh $VERSION $STS_DOCKER_RELEASE_REPO_CLUSTER $CI_PROJECT_DIR/Dockerfiles/cluster-agent $PUSH_LATEST
  when: manual
  only:
    - tags
    - trigger
