with-expecter: false
dir: "{{.InterfaceDir}}/mocks"
outpkg: "mocks"
mockname: "{{.InterfaceName}}"
filename: "{{.InterfaceNameSnake}}.go"

packages:
  # security agent
  github.com/DataDog/datadog-agent/pkg/security/proto/api:
    interfaces:
      SecurityModuleServer:
      SecurityModuleClient:
  github.com/DataDog/datadog-agent/pkg/security/agent:
    interfaces:
      SecurityModuleClientWrapper:
  github.com/DataDog/datadog-agent/pkg/eventmonitor/proto/api:
    interfaces:
      EventMonitoringModuleServer:
      EventMonitoringModuleClient:
      EventMonitoringModule_GetProcessEventsClient:

  # processes
  github.com/DataDog/datadog-agent/pkg/process/runner:
    interfaces:
      Submitter:
  github.com/DataDog/datadog-agent/pkg/process/checks:
    interfaces:
      Check:
  github.com/DataDog/datadog-agent/pkg/process/net:
    interfaces:
      SysProbeUtil:
        config:
          with-expecter: true
  github.com/DataDog/datadog-agent/pkg/process/procutil:
    interfaces:
      Probe:

  # serializer
  github.com/DataDog/datadog-agent/pkg/serializer:
    interfaces:
      MetricSerializer:
        config:
          mock-build-tags: test
          replace-type:
            # https://github.com/vektra/mockery/issues/331
            - github.com/DataDog/datadog-agent/pkg/serializer/types.stubMessageBody=github.com/DataDog/datadog-agent/pkg/serializer/types.ProcessMessageBody

  # gpu
  github.com/DataDog/datadog-agent/pkg/collector/corechecks/gpu/nvidia:
    interfaces:
      Collector:
        config:
          with-expecter: true
          mock-build-tags: "linux && test"
          # Need to have it in the same package to avoid import loops!
          inpackage: true
          dir: "{{.InterfaceDir}}"
          filename: "mocks.go"
          outpkg: nvidia
          mockname: mockCollector
